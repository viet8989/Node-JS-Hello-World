--
-- PostgreSQL database dump
--

-- Dumped from database version 12.5
-- Dumped by pg_dump version 16.3

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: postgres
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO postgres;

--
-- Name: convert_to_date(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.convert_to_date(input_text text) RETURNS date
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN TO_DATE(input_text, 'YYYY-MM');
END;
$$;


ALTER FUNCTION public.convert_to_date(input_text text) OWNER TO postgres;

--
-- Name: crm_action_set_status_working_of_leader(integer, integer, boolean, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_action_set_status_working_of_leader(p_user_id integer, p_user_role integer, p_status boolean, p_date date) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_is_manager BOOL;
	v_is_super_admin BOOL;
	v_action_by INT;
	v_action_by_name VARCHAR;
BEGIN
	SELECT 
		U."UserId",
		U."FullName",
		UT."IsSuperAdmin",
		UT."IsManager"
		INTO v_action_by, v_action_by_name, v_is_super_admin, v_is_manager
	FROM "UserRole" UR 
		JOIN "User" U ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role;
	
	IF(v_is_super_admin IS TRUE OR v_is_manager IS TRUE) THEN
		IF(EXISTS(SELECT * FROM "LeaderAttendent" LA WHERE LA."UserId" = p_user_id)) THEN		
			-- Cập nhật trạng thái
			UPDATE "LeaderAttendent" 
			SET "IsWorking" = p_status
			WHERE "UserId" = p_user_id;
			
			-- Cập nhật log

			IF(p_status IS FALSE) THEN
				INSERT INTO "LeaderOffLog"("WorkingDate", "UserId", "ActionBy", "ActionByName", "ActionDate")
				VALUES(p_date, p_user_id, v_action_by, v_action_by_name, NOW());
			ELSE 
				DELETE FROM "LeaderOffLog"
				WHERE "WorkingDate" = p_date
				AND "UserId" = p_user_id;
			END IF;
			SELECT 1, 'Cập nhật thành công' INTO v_id, v_mess;
		ELSE
			SELECT 0, 'Mã quản lý không hợp lệ' INTO v_id, v_mess;
		END IF;
	ELSE
		SELECT 0, 'Bạn không có quyền này' INTO v_id, v_mess;
	END IF;
	RETURN QUERY
		SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

	RETURN QUERY
	SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_action_set_status_working_of_leader(p_user_id integer, p_user_role integer, p_status boolean, p_date date) OWNER TO postgres;

--
-- Name: crm_activity_add_salepoint(integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_add_salepoint(p_action_by integer, p_action_by_name character varying, p_salepoint_name character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
-- 	v_is_manager BOOL;
BEGIN
-- 	SELECT 
-- 		UT."IsManager" INTO v_is_manager
-- 	FROM "User" U
-- 		JOIN "UserRole" UR ON U."UserId" = UR."UserId"
-- 		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
-- 	WHERE U."UserId" = p_action_by;
-- 		
	IF(NOT EXISTS (SELECT 1 FROM "SalePoint" WHERE "SalePointName" = p_salePoint_name)) THEN
		INSERT INTO "SalePoint"(
			"SalePointName",
			"IsActive",
			"IsDeleted",	
			"ActionBy",
			"ActionByName",
			"ActionDate"
		)
		VALUES(
			p_salePoint_name,
			TRUE,
			FALSE,
			p_action_by,
			p_action_by_name,
			v_time
		);
		v_id := 1;
		v_mess := 'Tạo điểm bán thành công';
	ELSE
		v_id := -1;
		v_mess := 'Tên điểm bán đã tồn tại';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

	RETURN QUERY
	SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_add_salepoint(p_action_by integer, p_action_by_name character varying, p_salepoint_name character varying) OWNER TO postgres;

--
-- Name: crm_activity_confirm_transition(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_confirm_transition(p_user_role_id integer, p_note character varying, p_list_item text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_is_leader BOOL;
	v_is_manager BOOL;
	v_name VARCHAR;
	v_user_id INT;
	ele JSON;
BEGIN	
	SELECT UT."IsManager", UT."IsLeader", U."UserId" INTO v_is_manager, v_is_leader, v_user_id
	FROM "UserRole" U JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId" 
	WHERE U."UserRoleId" = p_user_role_id;
	
	SELECT U."FullName" INTO v_name
	FROM "User" U 
	WHERE U."UserId" = v_user_id;
	
	IF (v_is_leader IS TRUE) THEN
		FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
			UPDATE "Transition"
			SET 
				"ConfirmTrans" = (ele ->> 'ConfirmTrans') :: INT,
				"ConfirmTransDup" = (ele ->> 'ConfirmTransDup') :: INT,
				"ConfirmBy" = v_user_id,
				"ConfirmByName" = v_name,
				"ConfirmDate" = NOW(),
				"ConfirmStatusId" = 2,
				"Note" = p_note
			WHERE 
				"TransitionId" = (ele ->> 'TransitionId') :: INT
				AND "ConfirmStatusId" = 1	;
		END LOOP;
		SELECT v_user_id, 'Xác Nhận Thành Công' INTO v_id, v_mess;

	ELSEIF v_is_manager IS TRUE THEN
		FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
			UPDATE "Transition"
			SET 
				"ConfirmBy" = v_user_id,
				"ConfirmByName" = v_name,
				"ConfirmDate" = NOW(),
				"ConfirmStatusId" = 2,
				"Note" = p_note
			WHERE 
				"TransitionId" = (ele ->> 'TransitionId') :: INT
				AND "ConfirmStatusId" = 1	;
		END LOOP;
		SELECT v_user_id, 'Xác Nhận Thành Công' INTO v_id, v_mess;
	ELSE
		SELECT -1, 'Bạn Không Có Quyền Này' INTO v_id, v_mess;
	END IF;

	RETURN QUERY
		SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

	RETURN QUERY
	SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_confirm_transition(p_user_role_id integer, p_note character varying, p_list_item text) OWNER TO postgres;

--
-- Name: crm_activity_confirm_transition_v2(integer, character varying, text, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_confirm_transition_v2(p_user_role_id integer, p_note character varying, p_list_item text, p_is_confirm boolean, p_trans_type_id integer, p_sale_point_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_is_staff BOOL;
	v_name VARCHAR;
	v_user_id INT;
	ele JSON;
	v_inventory_id INT;
	v_total INT;
	v_total_dup INT;
	v_total_check INT := 0;
	v_total_dup_check INT := 0;
	v_shift_dis_id INT;
BEGIN	

	SELECT UT."IsStaff", U."UserId" INTO v_is_staff, v_user_id
	FROM "UserRole" U JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId" 
	WHERE U."UserRoleId" = p_user_role_id;
	
	SELECT U."FullName" INTO v_name
	FROM "User" U 
	WHERE U."UserId" = v_user_id;
	
		IF p_is_confirm IS TRUE THEN
			IF p_trans_type_id = 1 THEN
				FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN
						SELECT 
							I."TotalRemaining",
							I."TotalDupRemaining"
						INTO 
							v_total_check,
							v_total_dup_check
						FROM "Inventory" I 
						WHERE I."SalePointId" = p_sale_point_id
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE;
						
						IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
							RAISE 'Yêu cầu đã được xác nhận trước';
						END IF;
						
						IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) OR v_total_dup_check < (ele ->> 'TotalTransDup')::INT THEN
							RAISE 'Không đủ vé trong kho hàng';
						END IF;			
					ELSE 
						SELECT 
							I."TotalRemaining"
						INTO 
							v_total_check
						FROM "Scratchcard" I
						WHERE I."SalePointId" = p_sale_point_id
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
							RAISE 'Yêu cầu đã được xác nhận trước';
						END IF;
						
						IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) THEN
							RAISE 'Không đủ vé trong kho hàng';
						END IF;	
						
					END IF;
				END LOOP;
			END IF;
			
			IF p_trans_type_id = 2 THEN
				FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN
						SELECT 
							I."TotalRemaining",
							I."TotalDupRemaining"
						INTO 
							v_total_check,
							v_total_dup_check
						FROM "Inventory" I 
						WHERE I."SalePointId" = 0
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE;
						
						IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
							RAISE 'Yêu cầu đã được xác nhận trước';
						END IF;
						
						IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) OR v_total_dup_check < (ele ->> 'TotalTransDup')::INT THEN
							RAISE 'Không đủ vé trong kho hàng';
						END IF;
					ELSE 
						SELECT 
							I."TotalRemaining"
						INTO 
							v_total_check
						FROM "Scratchcard" I
						WHERE I."SalePointId" = 0
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
						IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
							RAISE 'Yêu cầu đã được xác nhận trước';
						END IF;
						
						IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) THEN
							RAISE 'Không đủ vé trong kho hàng';
						END IF;	
						
					END IF;
				END LOOP;
			END IF;
		
			FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
				
				UPDATE "Transition"
				SET 
					"ConfirmTrans" = (ele ->> 'TotalTrans')::INT,
					"ConfirmTransDup" = (ele ->> 'TotalTransDup')::INT,
					"ConfirmBy" = v_user_id,
					"ConfirmByName" = v_name,
					"ConfirmDate" = NOW(),
					"ConfirmStatusId" = 2,
					"Note" = p_note
				WHERE "TransitionId" = (ele ->> 'TransitionId')::INT
					AND "ConfirmStatusId" = 1;
					
				IF p_trans_type_id = 1 THEN
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN		
						IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
					
							UPDATE "Inventory"
							SET
								"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
							WHERE "SalePointId" = p_sale_point_id
								AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
								AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						END IF;
					
						IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
						
							UPDATE "Inventory"
							SET
								"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
							WHERE "SalePointId" = p_sale_point_id
								AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
								AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
								
						END IF;
						
						IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
							AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
							
							INSERT INTO "Inventory"(
								"LotteryDate",
								"LotteryChannelId",
								"TotalReceived",
								"TotalRemaining",
								"TotalDupReceived",
								"TotalDupRemaining",
								"SalePointId"
							) VALUES (
								(ele ->> 'LotteryDate')::DATE,
								(ele ->> 'LotteryChannelId')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTransDup')::INT,
								(ele ->> 'TotalTransDup')::INT,
								0
							);
							
						ELSE 
						
							UPDATE "Inventory" I
							SET
								"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
								"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
								"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
								"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
							WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
								AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
								AND I."SalePointId" = 0;
						
						END IF;
					ELSE
						UPDATE "Scratchcard"
						SET "TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalTrans')::INT, 0)
						WHERE "SalePointId" = p_sale_point_id 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						IF NOT EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
							
							INSERT INTO "Scratchcard"(
								"LotteryChannelId",
								"TotalReceived",
								"TotalRemaining",
								"SalePointId"
							) VALUES (
								(ele ->> 'LotteryChannelId')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTrans')::INT,
								0
							);
							
						ELSE 
						
							UPDATE "Scratchcard" I
							SET
								"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
								"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT							
							WHERE I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
								AND I."SalePointId" = 0;
								
						END IF;
					END IF;
					

				
				ELSEIF p_trans_type_id = 2 THEN 
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN	
						IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
							
							IF NOT EXISTS (SELECT I."InventoryId" 
												FROM "Inventory" I 
												WHERE I."LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT
												AND I."SalePointId" = p_sale_point_id
												AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE)
							THEN
									
										INSERT INTO "Inventory"(
										"LotteryDate",
										"LotteryChannelId",
										"TotalReceived",
										"TotalRemaining",
										"TotalDupReceived",
										"TotalDupRemaining",
										"SalePointId"
									) VALUES (
										(ele ->> 'LotteryDate')::DATE,
										(ele ->> 'LotteryChannelId')::INT,
										0,
										(ele ->> 'TotalTrans')::INT,
										0,
										(ele ->> 'TotalTransDup')::INT,
										p_sale_point_id
									);
										
							ELSE
									
									UPDATE "Inventory"
									SET
										"TotalRemaining" = "TotalRemaining" + (ele ->> 'TotalTrans')::INT
									WHERE "SalePointId" = p_sale_point_id
										AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
										AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							END IF;
								
						
						END IF;
					
						IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
							IF EXISTS (SELECT I."InventoryId" 
												FROM "Inventory" I 
												WHERE I."LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT
												AND I."SalePointId" = p_sale_point_id
												AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE)
							THEN
								UPDATE "Inventory"
								SET
									"TotalDupRemaining" = "TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
								WHERE "SalePointId" = p_sale_point_id
									AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
									AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							ELSE
								INSERT INTO "Inventory"(
										"LotteryDate",
										"LotteryChannelId",
										"TotalReceived",
										"TotalRemaining",
										"TotalDupReceived",
										"TotalDupRemaining",
										"SalePointId"
									) VALUES (
										(ele ->> 'LotteryDate')::DATE,
										(ele ->> 'LotteryChannelId')::INT,
										0,
										(ele ->> 'TotalTrans')::INT,
										0,
										(ele ->> 'TotalTransDup')::INT,
										p_sale_point_id
									);
									END IF;
								
						END IF;
					
						SELECT "InventoryId", "TotalRemaining", "TotalDupRemaining"
						INTO  v_inventory_id, v_total, v_total_dup
						FROM "Inventory" I
						WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."SalePointId" = 0;
						
						IF v_total >= (ele ->> 'TotalTrans')::INT THEN 
						
							UPDATE "Inventory" I
							SET
								"TotalRemaining" = I."TotalRemaining" -  (ele ->> 'TotalTrans')::INT
							WHERE I."InventoryId" = v_inventory_id;
						
						END IF;
						
						IF v_total_dup >= (ele ->> 'TotalTransDup')::INT THEN 
						
							UPDATE "Inventory" I
							SET
								"TotalDupRemaining" = I."TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
							WHERE I."InventoryId" = v_inventory_id;
						
						END IF;
					ELSE
					
						UPDATE "Scratchcard"
						SET "TotalRemaining" = "TotalRemaining" + COALESCE((ele ->> 'TotalTrans')::INT, 0)
						WHERE "SalePointId" = p_sale_point_id 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						IF EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN

							UPDATE "Scratchcard" I
							SET
								"TotalReceived" = I."TotalReceived" - (ele ->> 'TotalTrans')::INT,
								"TotalRemaining" = I."TotalRemaining" - (ele ->> 'TotalTrans')::INT							
							WHERE I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
								AND I."SalePointId" = 0;
								
						END IF;
							
					END IF;
				
				ELSEIF p_trans_type_id = 3 THEN
				
					IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
						UPDATE "Inventory"
						SET
							"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
						WHERE "SalePointId" = p_sale_point_id
							AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
					END IF;
				
					IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
					
						UPDATE "Inventory"
						SET
							"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
						WHERE "SalePointId" = p_sale_point_id
							AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
					END IF;
					
					IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
						
						INSERT INTO "Inventory"(
							"LotteryDate",
							"LotteryChannelId",
							"TotalReceived",
							"TotalRemaining",
							"TotalDupReceived",
							"TotalDupRemaining",
							"SalePointId"
						) VALUES (
							(ele ->> 'LotteryDate')::DATE,
							(ele ->> 'LotteryChannelId')::INT,
							(ele ->> 'TotalTrans')::INT,
							(ele ->> 'TotalTrans')::INT,
							(ele ->> 'TotalTransDup')::INT,
							(ele ->> 'TotalTransDup')::INT,
							p_sale_point_id
						);
						
					ELSE 
					
						UPDATE "Inventory" I
						SET
							"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
							"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
							"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
							"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
						WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."SalePointId" = 0;
					
					END IF;
				
				ELSE
					
					v_id := -1;
					v_mess := 'Có lỗi xảy ra';
					
				END IF;
			
			END LOOP;
		
		ELSE 
		
			FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
			
				UPDATE "Transition"
				SET
					"ConfirmBy" = v_user_id,
					"ConfirmByName" = v_name,
					"ConfirmDate" = NOW(),
					"ConfirmStatusId" = 3,
					"Note" = p_note
				WHERE "TransitionId" = (ele ->> 'TransitionId')::INT
					AND "ConfirmStatusId" = 1;
					
			END LOOP;	
		
		END IF;
	
		v_id := 1;
		v_mess := 'Xác nhận thành công';

	RETURN QUERY
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

		RETURN QUERY
		SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_confirm_transition_v2(p_user_role_id integer, p_note character varying, p_list_item text, p_is_confirm boolean, p_trans_type_id integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_activity_confirm_transition_v3(integer, character varying, text, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_confirm_transition_v3(p_user_role_id integer, p_note character varying, p_list_item text, p_is_confirm boolean, p_trans_type_id integer, p_sale_point_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$

DECLARE
	v_id INT;
	v_mess TEXT;
	v_is_staff BOOL;
	v_name VARCHAR;
	v_user_id INT;
	ele JSON;
	v_inventory_id INT;
	v_total INT;
	v_total_dup INT;
	v_total_check INT := 0;
	v_total_dup_check INT := 0;
	v_shift_dis_id INT;
BEGIN	

	SELECT UT."IsStaff", U."UserId" INTO v_is_staff, v_user_id
	FROM "UserRole" U JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId" 
	WHERE U."UserRoleId" = p_user_role_id;
	
	SELECT U."FullName" INTO v_name
	FROM "User" U 
	WHERE U."UserId" = v_user_id;
	
		IF p_is_confirm IS TRUE THEN
			IF p_trans_type_id = 1 THEN
				FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN
				
						SELECT 
							I."TotalRemaining",
							I."TotalDupRemaining"
						INTO 
							v_total_check,
							v_total_dup_check
						FROM "Inventory" I 
						WHERE I."SalePointId" = p_sale_point_id
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE;
						
						IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
							RAISE 'Yêu cầu đã được xác nhận trước';
						END IF;
						
						IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) OR v_total_dup_check < (ele ->> 'TotalTransDup')::INT THEN
							RAISE 'Không đủ vé trong kho hàng1';
						END IF;			
					ELSE 
						SELECT 
							I."TotalRemaining"
						INTO 
							v_total_check
						FROM "Scratchcard" I
						WHERE I."SalePointId" = p_sale_point_id
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
							RAISE 'Yêu cầu đã được xác nhận trước';
						END IF;
						
						IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) THEN
							RAISE 'Không đủ vé trong kho hàng2';
						END IF;	
						
					END IF;
				END LOOP;
			END IF;
			
			IF p_trans_type_id = 2 THEN
    		FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 	
			 IF (EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT and T."ShiftDistributeId"= -1 AND T."ConfirmStatusId" = 1)) THEN
       	 IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN
				if(NOT EXISTS (select 1 from "Inventory" where "LotteryDate"= (ele ->> 'LotteryDate')::DATE  AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT and  "SalePointId" = p_sale_point_id) ) Then 
				INSERT INTO "Inventory"
					SELECT *
					FROM "InventoryConfirm"
					 where "InventoryConfirm"."LotteryDate"= (ele ->> 'LotteryDate')::DATE  AND "InventoryConfirm"."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT and  "SalePointId" = p_sale_point_id ; 
					
						UPDATE "Transition"
							SET 
							"ConfirmBy" = v_user_id,
							"ConfirmByName" = v_name,
							"ConfirmDate" = NOW(),
							"ConfirmStatusId" = 2,
							"Note" = p_note
						WHERE "TransitionId" = (ele ->> 'TransitionId')::INT
							AND "ConfirmStatusId" = 1 and "ToSalePointId" = p_sale_point_id;
				ELSE
				UPDATE "Inventory"
							set "TotalReceived"=IC."TotalReceived",
								"TotalRemaining"=IC."TotalRemaining",
								"TotalDupReceived"=IC."TotalDupReceived",
								"TotalDupRemaining"=IC."TotalDupRemaining"
							from "InventoryConfirm" AS IC
							where  IC."LotteryDate"=(ele ->> 'LotteryDate')::DATE  and IC."LotteryChannelId"=(ele ->> 'LotteryChannelId')::INT and IC."SalePointId"=p_sale_point_id and "Inventory"."LotteryDate"= IC."LotteryDate" and "Inventory"."LotteryChannelId"=IC."LotteryChannelId"
							and "Inventory"."SalePointId"=IC."SalePointId";
							UPDATE "Transition"
							SET 
							"ConfirmBy" = v_user_id,
							"ConfirmByName" = v_name,
							"ConfirmDate" = NOW(),
							"ConfirmStatusId" = 2,
							"Note" = p_note
						WHERE "TransitionId" = (ele ->> 'TransitionId')::INT
							AND "ConfirmStatusId" = 1 and "ToSalePointId" = p_sale_point_id;
				END IF;
            ELSE
					if NOT  EXISTS(SELECT 1 FROM "Scratchcard" WHERE "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT and "SalePointId" = p_sale_point_id)   then
						INSERT INTO "Scratchcard"(
								"LotteryChannelId",
								"TotalReceived",
								"TotalRemaining",
								"SalePointId"
							) VALUES (
								(ele ->> 'LotteryChannelId')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTrans')::INT,
								p_sale_point_id
							);
							 
						else
					
				
						UPDATE "Scratchcard"
						SET "TotalRemaining" = "TotalRemaining" + COALESCE((ele ->> 'TotalTrans')::INT, 0)
						WHERE "SalePointId" = p_sale_point_id 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							end if;
								UPDATE "Transition"
				SET 
					"ConfirmTrans" = (ele ->> 'TotalTrans')::INT,
					"ConfirmTransDup" = (ele ->> 'TotalTransDup')::INT,
					"ConfirmBy" = v_user_id,
					"ConfirmByName" = v_name,
					"ConfirmDate" = NOW(),
					"ConfirmStatusId" = 2,
					"Note" = p_note
				WHERE "TransitionId" = (ele ->> 'TransitionId')::INT
					AND "ConfirmStatusId" = 1;
             
            END IF;
     ELSE 
	 	   SELECT 
                    I."TotalRemaining",
                    I."TotalDupRemaining"
                INTO 
                    v_total_check,
                    v_total_dup_check
                FROM "Inventory" I 
                WHERE I."SalePointId" = 0
                    AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
                    AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE;
                
                IF(NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT AND T."ConfirmStatusId" = 1)) THEN
                    RAISE 'Yêu cầu đã được xác nhận trước';
                END IF;
                
                IF v_total_check < COALESCE((ele ->> 'TotalTrans')::INT) OR v_total_dup_check < (ele ->> 'TotalTransDup')::INT THEN
                    RAISE 'Không đủ vé trong kho hàng3';
                END IF;
					
				
		END IF;	
    END LOOP;
END IF;

		
			FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 		
				   IF ( NOT EXISTS (SELECT 1 FROM "Transition" T WHERE T."TransitionId" = (ele ->> 'TransitionId')::INT and T."ShiftDistributeId"= -1  )) THEN
				UPDATE "Transition"
				SET 
					"ConfirmTrans" = (ele ->> 'TotalTrans')::INT,
					"ConfirmTransDup" = (ele ->> 'TotalTransDup')::INT,
					"ConfirmBy" = v_user_id,
					"ConfirmByName" = v_name,
					"ConfirmDate" = NOW(),
					"ConfirmStatusId" = 2,
					"Note" = p_note
				WHERE "TransitionId" = (ele ->> 'TransitionId')::INT
					AND "ConfirmStatusId" = 1;
				
				IF p_trans_type_id = 1 THEN
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN		
						IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
					
							UPDATE "Inventory"
							SET
								"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
							WHERE "SalePointId" = p_sale_point_id
								AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
								AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						END IF;
					
						IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
						
							UPDATE "Inventory"
							SET
								"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
							WHERE "SalePointId" = p_sale_point_id
								AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
								AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
								
						END IF;
						
						IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
							AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
							
							INSERT INTO "Inventory"(
								"LotteryDate",
								"LotteryChannelId",
								"TotalReceived",
								"TotalRemaining",
								"TotalDupReceived",
								"TotalDupRemaining",
								"SalePointId"
							) VALUES (
								(ele ->> 'LotteryDate')::DATE,
								(ele ->> 'LotteryChannelId')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTransDup')::INT,
								(ele ->> 'TotalTransDup')::INT,
								0
							);
							
						ELSE 
						
							UPDATE "Inventory" I
							SET
								"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
								"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
								"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
								"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
							WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
								AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
								AND I."SalePointId" = 0;
						
						END IF;
					ELSE
						UPDATE "Scratchcard"
						SET "TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalTrans')::INT, 0)
						WHERE "SalePointId" = p_sale_point_id 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
						IF NOT EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
							
							INSERT INTO "Scratchcard"(
								"LotteryChannelId",
								"TotalReceived",
								"TotalRemaining",
								"SalePointId"
							) VALUES (
								(ele ->> 'LotteryChannelId')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTrans')::INT,
								0
							);
							
						ELSE 
						
							UPDATE "Scratchcard" I
							SET
								"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
								"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT							
							WHERE I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
								AND I."SalePointId" = 0;
								
						END IF;
					END IF;
					

				
				ELSEIF p_trans_type_id = 2 THEN 
					IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN	
						IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
							
							IF NOT EXISTS (SELECT I."InventoryId" 
												FROM "Inventory" I 
												WHERE I."LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT
												AND I."SalePointId" = p_sale_point_id
												AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE)
							THEN
									
										INSERT INTO "Inventory"(
										"LotteryDate",
										"LotteryChannelId",
										"TotalReceived",
										"TotalRemaining",
										"TotalDupReceived",
										"TotalDupRemaining",
										"SalePointId"
									) VALUES (
										(ele ->> 'LotteryDate')::DATE,
										(ele ->> 'LotteryChannelId')::INT,
										0,
										(ele ->> 'TotalTrans')::INT,
										0,
										(ele ->> 'TotalTransDup')::INT,
										p_sale_point_id
									);
										
							ELSE
									
									UPDATE "Inventory"
									SET
										"TotalRemaining" = "TotalRemaining" + (ele ->> 'TotalTrans')::INT
									WHERE "SalePointId" = p_sale_point_id
										AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
										AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							END IF;
								
						
						END IF;
					
						IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
							IF EXISTS (SELECT I."InventoryId" 
												FROM "Inventory" I 
												WHERE I."LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT
												AND I."SalePointId" = p_sale_point_id
												AND I."LotteryDate" = (ele ->> 'LotteryDate')::DATE)
							THEN
								UPDATE "Inventory"
								SET
									"TotalDupRemaining" = "TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
								WHERE "SalePointId" = p_sale_point_id
									AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
									AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							ELSE
								INSERT INTO "Inventory"(
										"LotteryDate",
										"LotteryChannelId",
										"TotalReceived",
										"TotalRemaining",
										"TotalDupReceived",
										"TotalDupRemaining",
										"SalePointId"
									) VALUES (
										(ele ->> 'LotteryDate')::DATE,
										(ele ->> 'LotteryChannelId')::INT,
										0,
										(ele ->> 'TotalTrans')::INT,
										0,
										(ele ->> 'TotalTransDup')::INT,
										p_sale_point_id
									);
									END IF;
								
						END IF;
					
						SELECT "InventoryId", "TotalRemaining", "TotalDupRemaining"
						INTO  v_inventory_id, v_total, v_total_dup
						FROM "Inventory" I
						WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."SalePointId" = 0;
						
						IF v_total >= (ele ->> 'TotalTrans')::INT THEN 
						
							UPDATE "Inventory" I
							SET
								"TotalRemaining" = I."TotalRemaining" -  (ele ->> 'TotalTrans')::INT
							WHERE I."InventoryId" = v_inventory_id;
						
						END IF;
						
						IF v_total_dup >= (ele ->> 'TotalTransDup')::INT THEN 
						
							UPDATE "Inventory" I
							SET
								"TotalDupRemaining" = I."TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
							WHERE I."InventoryId" = v_inventory_id;
						
						END IF;
					ELSE
					if NOT  EXISTS(SELECT 1 FROM "Scratchcard" WHERE "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT and "SalePointId" = p_sale_point_id)   then
						INSERT INTO "Scratchcard"(
								"LotteryChannelId",
								"TotalReceived",
								"TotalRemaining",
								"SalePointId"
							) VALUES (
								(ele ->> 'LotteryChannelId')::INT,
								(ele ->> 'TotalTrans')::INT,
								(ele ->> 'TotalTrans')::INT,
								p_sale_point_id
							);
							 
						else
					
						UPDATE "Scratchcard"
						SET "TotalRemaining" = "TotalRemaining" + COALESCE((ele ->> 'TotalTrans')::INT, 0)
						WHERE "SalePointId" = p_sale_point_id 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
						END IF;
						IF EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN

							UPDATE "Scratchcard" I
							SET
								"TotalReceived" = I."TotalReceived" - (ele ->> 'TotalTrans')::INT,
								"TotalRemaining" = I."TotalRemaining" - (ele ->> 'TotalTrans')::INT							
							WHERE I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
								AND I."SalePointId" = 0;
								
						END IF;
							
					END IF;
				
				ELSEIF p_trans_type_id = 3 THEN
				
					IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
						UPDATE "Inventory"
						SET
							"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
						WHERE "SalePointId" = p_sale_point_id
							AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
					END IF;
				
					IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
					
						UPDATE "Inventory"
						SET
							"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
						WHERE "SalePointId" = p_sale_point_id
							AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
					END IF;
					
					IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
						
						INSERT INTO "Inventory"(
							"LotteryDate",
							"LotteryChannelId",
							"TotalReceived",
							"TotalRemaining",
							"TotalDupReceived",
							"TotalDupRemaining",
							"SalePointId"
						) VALUES (
							(ele ->> 'LotteryDate')::DATE,
							(ele ->> 'LotteryChannelId')::INT,
							(ele ->> 'TotalTrans')::INT,
							(ele ->> 'TotalTrans')::INT,
							(ele ->> 'TotalTransDup')::INT,
							(ele ->> 'TotalTransDup')::INT,
							p_sale_point_id
						);
						
					ELSE 
					
						UPDATE "Inventory" I
						SET
							"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
							"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
							"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
							"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
						WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
							AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
							AND I."SalePointId" = 0;
					
					END IF;
				
				ELSE
					
					v_id := -1;
					v_mess := 'Có lỗi xảy ra';
					
				END IF;
			END IF;
			END LOOP;
		
		ELSE 
		
			FOR ele IN SELECT * FROM json_array_elements(p_list_item::JSON) LOOP 	
				IF ((ele ->> 'IsScratchcard')::BOOL) IS FALSE THEN	
					if EXISTS (select 1 from "Transition" where "TransitionId" = (ele ->> 'TransitionId')::INT and "ShiftDistributeId"= -1  AND "ConfirmStatusId" = 1 and "ToSalePointId"=p_sale_point_id) then
					UPDATE "InventoryFull"  set "TotalRemaining"="TotalRemaining" +(select "TotalTrans" from "Transition" where "TransitionId" = (ele ->> 'TransitionId')::INT and "ShiftDistributeId"= -1  AND "ConfirmStatusId" = 1 and "ToSalePointId"=p_sale_point_id)
					where "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT and "LotteryDate" = (ele ->> 'LotteryDate')::DATE ;
					UPDATE "InventoryLog" set "TotalReceived"="TotalReceived"-(select "TotalTrans" from "Transition" where "TransitionId" = (ele ->> 'TransitionId')::INT and "ShiftDistributeId"= -1 AND "ConfirmStatusId" = 1 )
					where "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT and "LotteryDate" = (ele ->> 'LotteryDate')::DATE and "SalePointId"=p_sale_point_id;
					End if;
				ELSE
					
						UPDATE "ScratchcardFull"
						SET "TotalRemaining" = "TotalRemaining" + COALESCE((ele ->> 'TotalTrans')::INT, 0)
						WHERE 
							 "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
							
				END IF;
				
				UPDATE "Transition"
				SET
					"ConfirmBy" = v_user_id,
					"ConfirmByName" = v_name,
					"ConfirmDate" = NOW(),
					"ConfirmStatusId" = 3,
					"Note" = p_note
				WHERE "TransitionId" = (ele ->> 'TransitionId')::INT;
-- 					AND "ConfirmStatusId" = 1 and "ToSalePointId" = p_sale_point_id;
					
					
			END LOOP;	
		
		END IF;
	
		v_id := 1;
		v_mess := 'Xác nhận thành công';

	RETURN QUERY
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

		RETURN QUERY
		SELECT v_id, v_mess;
	END;
	
END;

$$;


ALTER FUNCTION public.crm_activity_confirm_transition_v3(p_user_role_id integer, p_note character varying, p_list_item text, p_is_confirm boolean, p_trans_type_id integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_activity_delete_guest_action(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_delete_guest_action(p_guest_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN

       UPDATE "GuestAction"
			 SET "IsDeleted" = TRUE 
			 WHERE "GuestId" = p_guest_id;

        v_id := 1;
        v_mess := 'Xóa thành công';

    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_delete_guest_action(p_guest_id integer) OWNER TO postgres;

--
-- Name: crm_activity_delete_winning_log(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_delete_winning_log(p_action_by integer, p_action_by_name character varying, p_winning_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_data TEXT;
BEGIN
	
	IF EXISTS (SELECT 1 FROM "Winning" W WHERE W."WinningId" = p_winning_id) THEN
		SELECT
			TO_JSONB(W.*)::TEXT INTO v_data
		FROM "Winning" W
		WHERE W."WinningId" = p_winning_id;
		
		DELETE FROM "Winning"
		WHERE "WinningId" = p_winning_id;
		
		INSERT INTO "LogDelete"(
			"LogTypeId",
			"LogData",
			"ActionBy",
			"ActionByName",
			"ActionDate"
		)
		VALUES(
			1,
			v_data,
			p_action_by,
			p_action_by_name,
			v_time
		) RETURNING "LogDeleteId" INTO v_id;
		
		v_mess := 'Xoá thành công';
		
	ELSE
		RAISE 'Dòng này đã bị xoá hoặc không tồn tại';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_delete_winning_log(p_action_by integer, p_action_by_name character varying, p_winning_id integer) OWNER TO postgres;

--
-- Name: crm_activity_distribute_for_sales_point(integer, character varying, timestamp without time zone, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_for_sales_point(p_action_by integer, p_action_by_name character varying, p_lottery_date timestamp without time zone, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$

DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_last_received INT;
	v_last_received_dup INT;
	re RECORD;
	v_flag INT := 0;
	tmp_user_id INT;
BEGIN
	
	CREATE TEMP TABLE dataTotal ON COMMIT DROP AS (
		SELECT 
			(dt ->> 'AgencyId') :: INT AS "AgencyId",
			(dt ->> 'LotteryChannelId') :: INT AS "LotteryChannelId",
			(dt ->> 'SalePointId') :: INT AS "SalePointId",
			(dt ->> 'TotalReceived') :: INT AS "TotalReceived" ,
			(dt ->> 'TotalDupReceived') :: INT AS "TotalDupReceived"
		FROM json_array_elements(v_data) dt 
	);
-- 	WITH tmp AS(
-- 		SELECT
-- 			dt."AgencyId", 
-- 			dt."LotteryChannelId",
-- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- 		FROM dataTotal dt
-- 		GROUP BY 
-- 			dt."AgencyId", 
-- 			dt."LotteryChannelId"
-- 	),
-- 	tmp2 AS(
-- 		SELECT 
-- 			dt."AgencyId",
-- 			dt."LotteryChannelId",
-- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- 		FROM "InventoryLog" dt
-- 		WHERE dt."LotteryDate" = p_lottery_date::DATE 
-- 		GROUP BY 
-- 			dt."AgencyId",
-- 			dt."LotteryChannelId"
-- 	),
-- 	tmp3 AS(
-- 		SELECT 
-- 			IF."AgencyId",
-- 			IF."LotteryChannelId",
-- 			IF."TotalRemaining"
-- 		FROM "InventoryFull" IF
-- 		WHERE IF."LotteryDate" = p_lottery_date::DATE 
-- 	),
-- 	tmp4 AS(
-- 		SELECT
-- 			tmp3."TotalRemaining" - (tmp."TotalReceived" + tmp."TotalDupReceived" - COALESCE(tmp2."TotalReceived", 0) - COALESCE(tmp2."TotalDupReceived", 0)) AS "Remain"
-- 		FROM tmp
-- 			JOIN tmp3 ON tmp."AgencyId" = tmp3."AgencyId" AND tmp."LotteryChannelId" = tmp3."LotteryChannelId"
-- 			LEFT JOIN tmp2 ON tmp."AgencyId" = tmp2."AgencyId" AND tmp."LotteryChannelId" = tmp2."LotteryChannelId"
-- 	)
-- 	SELECT COUNT(*) INTO v_flag
-- 	FROM tmp4
-- 	WHERE "Remain" < 0;
	
	v_flag := 0;
	
	IF(v_flag <= 0) THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "InventoryLog" WHERE "LotteryDate" = p_lottery_date::DATE 
				AND "AgencyId" = (ele ->> 'AgencyId')::INT 
				AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				AND "SalePointId" = (ele ->> 'SalePointId')::INT) THEN	
				
				
								WITH tmpp AS (
    SELECT
        SD."UserId",
        SD."SalePointId",
        SD."ShiftId"
    FROM
        "ShiftDistribute" SD
    WHERE
        SD."DistributeDate"::DATE = p_lottery_date::DATE
        AND SD."UserId" = (
            SELECT
                "UserId"
            FROM
                "ShiftDistribute"
            WHERE
                "DistributeDate" = p_lottery_date::DATE
                AND "SalePointId" = (ele ->> 'SalePointId')::INT
            LIMIT 1
        )
    GROUP BY
        SD."SalePointId",
        SD."UserId",
        SD."ShiftId"
), tmpp1 AS (
    SELECT *
    FROM "GroupSalePoint" GSP
    ORDER BY GSP."GroupSalePointId"
), tmpp2 AS (
    SELECT
        GSP."UserId"
    FROM
        "tmpp1" GSP
    LEFT JOIN tmpp T ON T."SalePointId" = ANY (GSP."SalePointIds")
    LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
    LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
    WHERE
        UR."UserTitleId" = 2
        AND SD."DistributeDate"::DATE = p_lottery_date::DATE
    GROUP BY
        GSP."UserId",
        GSP."GroupSalePointId",
        GSP."Option"
    ORDER BY
        GSP."Option" ASC,
        GSP."GroupSalePointId" DESC
    LIMIT 1
)
-- Gán kết quả của truy vấn SELECT cho biến
SELECT INTO tmp_user_id T."UserId"
FROM tmpp2 T
GROUP BY T."UserId";
				
				
				INSERT INTO "InventoryLog"(
					"LotteryDate",
					"LotteryChannelId",
					"AgencyId",
					"SalePointId",
					"TotalReceived",
					"TotalDupReceived",
					"ActionBy",
					"ActionByName"
				) VALUES (
					p_lottery_date::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					(ele ->> 'AgencyId')::INT,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
					p_action_by,
					p_action_by_name
				);
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
						"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					p_lottery_date::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					-1,
					tmp_user_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
				);
				--Cập nhật report vé thường
				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) > 0 THEN 
					WITH shiftTran AS (
						SELECT 
							SF."ShiftDistributeId",
							SF."ShiftId",
							SF."UserId"
						FROM "ShiftTransfer" SF
						WHERE SF."LotteryDate" = p_lottery_date::DATE 
							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
					)
					INSERT INTO "ShiftTransfer"(
						"ShiftId",
						"UserId",
						"ShiftDistributeId",
						"LotteryChannelId",
						"LotteryTypeId",
						"ActionBy",
						"ActionByName",
						"ActionDate",
						"LotteryDate",
						"TotalStocks",
						"TotalReceived",
						"TotalTrans",
						"TotalReturns",
						"TotalRemaining",
						"TotalSold",
						"TotalSoldMoney",
						"TotalRetail",
						"TotalRetailMoney",
						"TotalWholesale",
						"TotalWholesaleMoney",
						"SalePointid"
					)
					SELECT
						S."ShiftId",
						S."UserId",
						S."ShiftDistributeId",
						(ele ->> 'LotteryChannelId')::INT,
						1,
						p_action_by,
						p_action_by_name,
						NOW(),
						p_lottery_date::DATE,
						(ele ->> 'TotalReceived')::INT,
						0,
						0,
						0,
						(ele ->> 'TotalReceived')::INT,
						0,
						0,
						0,
						0,
						0,
						0,
						(ele ->> 'SalePointId')::INT
					FROM shiftTran S;
				END IF;
				-- Cập nhật report vé trùng
				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) > 0 THEN 
					WITH shiftTran AS (
						SELECT 
							SF."ShiftDistributeId",
							SF."ShiftId",
							SF."UserId"
						FROM "ShiftTransfer" SF
						WHERE SF."LotteryDate" = p_lottery_date::DATE 
							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
					)
					INSERT INTO "ShiftTransfer"(
						"ShiftId",
						"UserId",
						"ShiftDistributeId",
						"LotteryChannelId",
						"LotteryTypeId",
						"ActionBy",
						"ActionByName",
						"ActionDate",
						"LotteryDate",
						"TotalStocks",
						"TotalReceived",
						"TotalTrans",
						"TotalReturns",
						"TotalRemaining",
						"TotalSold",
						"TotalSoldMoney",
						"TotalRetail",
						"TotalRetailMoney",
						"TotalWholesale",
						"TotalWholesaleMoney",
						"SalePointid"
					)
					SELECT
						S."ShiftId",
						S."UserId",
						S."ShiftDistributeId",
						(ele ->> 'LotteryChannelId')::INT,
						2,
						p_action_by,
						p_action_by_name,
						NOW(),
						p_lottery_date::DATE,
						(ele ->> 'TotalDupReceived')::INT,
						0,
						0,
						0,
						(ele ->> 'TotalDupReceived')::INT,
						0,
						0,
						0,
						0,
						0,
						0,
						(ele ->> 'SalePointId')::INT
					FROM shiftTran S;
				END IF;
				
				UPDATE "InventoryFull"
				SET
					"TotalRemaining" = "TotalRemaining" - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
				WHERE "LotteryDate" = p_lottery_date::DATE 
					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;

			ELSE 
				
				SELECT 
					COALESCE(F."TotalReceived", 0), COALESCE(F."TotalDupReceived", 0)
				INTO 
					v_last_received, v_last_received_dup
				FROM "InventoryLog" F 
				WHERE F."LotteryDate" = p_lottery_date::DATE 
					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
								
				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) >= 0 THEN
					UPDATE "ShiftTransfer" 
					SET "TotalStocks" = "TotalStocks" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0),
							"TotalRemaining" = "TotalRemaining" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0)
					WHERE "LotteryDate" = p_lottery_date::DATE 
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND "SalePointid" = (ele ->> 'SalePointId')::INT
						AND "LotteryTypeId" = 1;
				END IF;
				
				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) >= 0 THEN
					UPDATE "ShiftTransfer" 
					SET "TotalStocks" = "TotalStocks" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
							"TotalRemaining" = "TotalRemaining" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0)
					WHERE "LotteryDate" = p_lottery_date::DATE 
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND "SalePointid" = (ele ->> 'SalePointId')::INT
						AND "LotteryTypeId" = 1;
				END IF;

				UPDATE "InventoryFull"
				SET
					"TotalRemaining" = "TotalRemaining" + v_last_received + v_last_received_dup - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
				WHERE "LotteryDate" = p_lottery_date::DATE 
					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
				UPDATE "InventoryLog" F
				SET
					"TotalReceived" = COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalDupReceived" = COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = NOW()
				WHERE F."LotteryDate" = p_lottery_date::DATE 
					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
												WITH tmpp AS (
    SELECT
        SD."UserId",
        SD."SalePointId",
        SD."ShiftId"
    FROM
        "ShiftDistribute" SD
    WHERE
        SD."DistributeDate"::DATE = p_lottery_date::DATE
        AND SD."UserId" = (
            SELECT
                "UserId"
            FROM
                "ShiftDistribute"
            WHERE
                "DistributeDate" = p_lottery_date::DATE
                AND "SalePointId" = (ele ->> 'SalePointId')::INT
            LIMIT 1
        )
    GROUP BY
        SD."SalePointId",
        SD."UserId",
        SD."ShiftId"
), tmpp1 AS (
    SELECT *
    FROM "GroupSalePoint" GSP
    ORDER BY GSP."GroupSalePointId"
), tmpp2 AS (
    SELECT
        GSP."UserId"
    FROM
        "tmpp1" GSP
    LEFT JOIN tmpp T ON T."SalePointId" = ANY (GSP."SalePointIds")
    LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
    LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
    WHERE
        UR."UserTitleId" = 2
        AND SD."DistributeDate"::DATE = p_lottery_date::DATE
    GROUP BY
        GSP."UserId",
        GSP."GroupSalePointId",
        GSP."Option"
    ORDER BY
        GSP."Option" ASC,
        GSP."GroupSalePointId" DESC
    LIMIT 1
)
-- Gán kết quả của truy vấn SELECT cho biến
SELECT INTO tmp_user_id T."UserId"
FROM tmpp2 T
GROUP BY T."UserId";
						INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
						"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					p_lottery_date::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					-1,
					tmp_user_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
				);
					
			END IF;
		
		END LOOP;
		
		FOR re IN
		WITH tmp AS (
			SELECT
				"LotteryChannelId",
				SUM("TotalReceived") AS "TotalReceived",
				SUM("TotalDupReceived") AS "TotalDupReceived",
				"SalePointId"
			FROM "InventoryLog"
			WHERE "LotteryDate" = p_lottery_date::DATE
			GROUP BY 
				"LotteryChannelId",
				"SalePointId"
		)
		SELECT t."LotteryChannelId", t."TotalReceived", t."TotalDupReceived", t."SalePointId"  FROM tmp t LOOP
		
			IF NOT EXISTS (SELECT 1 FROM "InventoryConfirm" WHERE "LotteryDate" = p_lottery_date::DATE 
				AND "LotteryChannelId" = re."LotteryChannelId"
				AND "SalePointId" = re."SalePointId") THEN
		
				INSERT INTO "InventoryConfirm"(
					"LotteryDate",
					"LotteryChannelId",
					"TotalReceived",
					"TotalRemaining",
					"TotalDupReceived",
					"TotalDupRemaining",
					"SalePointId"
				) VALUES (
					 p_lottery_date::DATE,
					 re."LotteryChannelId",
					 re."TotalReceived",
					 re."TotalReceived",
					 re."TotalDupReceived",
					 re."TotalDupReceived",
					 re."SalePointId"
				);
			
			ELSE 
			
					UPDATE "InventoryConfirm"
							set "TotalReceived"=IC."TotalReceived",
								"TotalRemaining"=IC."TotalRemaining",
								"TotalDupReceived"=IC."TotalDupReceived",
								"TotalDupRemaining"=IC."TotalDupRemaining"
							from "Inventory" AS IC
							where  IC."LotteryDate"= p_lottery_date::DATE  and IC."LotteryChannelId"= re."LotteryChannelId" and IC."SalePointId"= re."SalePointId" and "InventoryConfirm"."LotteryDate"= IC."LotteryDate" and "InventoryConfirm"."LotteryChannelId"=IC."LotteryChannelId"
							and "InventoryConfirm"."SalePointId"=IC."SalePointId";
			
				UPDATE "InventoryConfirm" I
				SET
					"TotalReceived" = re."TotalReceived",
					"TotalRemaining" = I."TotalRemaining" - (I."TotalReceived" - re."TotalReceived"),
					"TotalDupReceived" = re."TotalDupReceived",
					"TotalDupRemaining" = I."TotalDupRemaining" - (I."TotalDupReceived" - re."TotalDupReceived")
				WHERE I."LotteryDate" = p_lottery_date::DATE 
					AND I."LotteryChannelId" = re."LotteryChannelId"
					AND I."SalePointId" = re."SalePointId";
			
			END IF;
		
		END LOOP;
		Insert INTO  
			"HistoryOfTicketsShared"("DetailOfSharing","UserId","FullName","CreatedDate")
		VALUES (p_data, p_action_by,p_action_by_name,p_lottery_date);
		v_mess := 'Thao tác thành công';

	ELSE
		v_id := -1;
		v_mess := 'Dữ liệu cần được cập nhật';
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;








-- DECLARE
-- 	v_id INT := 1;
-- 	v_mess TEXT;
-- 	v_data JSON := p_data::JSON;
-- 	ele JSON;
-- 	v_last_received INT;
-- 	v_last_received_dup INT;
-- 	re RECORD;
-- 	v_flag INT := 0;
-- 	tmp_user_id INT;
-- BEGIN
	
-- 	CREATE TEMP TABLE dataTotal ON COMMIT DROP AS (
-- 		SELECT 
-- 			(dt ->> 'AgencyId') :: INT AS "AgencyId",
-- 			(dt ->> 'LotteryChannelId') :: INT AS "LotteryChannelId",
-- 			(dt ->> 'SalePointId') :: INT AS "SalePointId",
-- 			(dt ->> 'TotalReceived') :: INT AS "TotalReceived" ,
-- 			(dt ->> 'TotalDupReceived') :: INT AS "TotalDupReceived"
-- 		FROM json_array_elements(v_data) dt 
-- 	);
-- -- 	WITH tmp AS(
-- -- 		SELECT
-- -- 			dt."AgencyId", 
-- -- 			dt."LotteryChannelId",
-- -- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- -- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- -- 		FROM dataTotal dt
-- -- 		GROUP BY 
-- -- 			dt."AgencyId", 
-- -- 			dt."LotteryChannelId"
-- -- 	),
-- -- 	tmp2 AS(
-- -- 		SELECT 
-- -- 			dt."AgencyId",
-- -- 			dt."LotteryChannelId",
-- -- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- -- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- -- 		FROM "InventoryLog" dt
-- -- 		WHERE dt."LotteryDate" = p_lottery_date::DATE 
-- -- 		GROUP BY 
-- -- 			dt."AgencyId",
-- -- 			dt."LotteryChannelId"
-- -- 	),
-- -- 	tmp3 AS(
-- -- 		SELECT 
-- -- 			IF."AgencyId",
-- -- 			IF."LotteryChannelId",
-- -- 			IF."TotalRemaining"
-- -- 		FROM "InventoryFull" IF
-- -- 		WHERE IF."LotteryDate" = p_lottery_date::DATE 
-- -- 	),
-- -- 	tmp4 AS(
-- -- 		SELECT
-- -- 			tmp3."TotalRemaining" - (tmp."TotalReceived" + tmp."TotalDupReceived" - COALESCE(tmp2."TotalReceived", 0) - COALESCE(tmp2."TotalDupReceived", 0)) AS "Remain"
-- -- 		FROM tmp
-- -- 			JOIN tmp3 ON tmp."AgencyId" = tmp3."AgencyId" AND tmp."LotteryChannelId" = tmp3."LotteryChannelId"
-- -- 			LEFT JOIN tmp2 ON tmp."AgencyId" = tmp2."AgencyId" AND tmp."LotteryChannelId" = tmp2."LotteryChannelId"
-- -- 	)
-- -- 	SELECT COUNT(*) INTO v_flag
-- -- 	FROM tmp4
-- -- 	WHERE "Remain" < 0;
	
-- 	v_flag := 0;
	
-- 	IF(v_flag <= 0) THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 			IF NOT EXISTS (SELECT 1 FROM "InventoryLog" WHERE "LotteryDate" = p_lottery_date::DATE 
-- 				AND "AgencyId" = (ele ->> 'AgencyId')::INT 
-- 				AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 				AND "SalePointId" = (ele ->> 'SalePointId')::INT) THEN	
				
-- 				WITH tmp AS (
--     SELECT
--         SD."UserId",
--         SD."SalePointId",
--         SD."ShiftId"
--     FROM
--         "ShiftDistribute" SD
--     WHERE
--         SD."DistributeDate"::DATE = p_lottery_date::DATE
--         AND SD."UserId" = (
--             SELECT
--                 "UserId"
--             FROM
--                 "ShiftDistribute"
--             WHERE
--                 "DistributeDate" = p_lottery_date::DATE
--                 AND "SalePointId" = (ele ->> 'SalePointId')::INT
--             LIMIT 1
--         )
--     GROUP BY
--         SD."SalePointId",
--         SD."UserId",
--         SD."ShiftId"
-- ), tmp1 AS (
--     SELECT *
--     FROM "GroupSalePoint" GSP
--     ORDER BY GSP."GroupSalePointId"
-- ), tmp2 AS (
--     SELECT
--         GSP."UserId"
--     FROM
--         "tmp1" GSP
--     LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
--     LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
--     LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
--     WHERE
--         UR."UserTitleId" = 2
--         AND SD."DistributeDate"::DATE = p_lottery_date::DATE
--     GROUP BY
--         GSP."UserId",
--         GSP."GroupSalePointId",
--         GSP."Option"
--     ORDER BY
--         GSP."Option" ASC,
--         GSP."GroupSalePointId" DESC
--     LIMIT 1
-- )
-- -- Gán kết quả của truy vấn SELECT cho biến
-- SELECT INTO tmp_user_id T."UserId"
-- FROM tmp2 T
-- GROUP BY T."UserId";
				
-- 				INSERT INTO "InventoryLog"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"AgencyId",
-- 					"SalePointId",
-- 					"TotalReceived",
-- 					"TotalDupReceived",
-- 					"ActionBy",
-- 					"ActionByName"
-- 				) VALUES (
-- 					p_lottery_date::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					(ele ->> 'AgencyId')::INT,
-- 					(ele ->> 'SalePointId')::INT,
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
-- 					p_action_by,
-- 					p_action_by_name
-- 				);
-- 					INSERT INTO "Transition"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"FromSalePointId",
-- 					"ToSalePointId",
-- 					"TotalTrans",
-- 					"TotalTransDup",
-- 					"TransitionDate",
-- 					"TransitionTypeId",
-- 					"ActionBy",
-- 					"ActionByName",
-- 						"ShiftDistributeId",
-- 					"ManagerId",
-- 					"ConfirmStatusId",
-- 					"IsScratchcard"
-- 				) VALUES(
-- 					p_lottery_date::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					0,
-- 					(ele ->> 'SalePointId')::INT,
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
-- 					NOW(),
-- 					2,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					-1,
-- 					tmp_user_id,
-- 					1,
-- 					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
-- 				);
-- 				--Cập nhật report vé thường
-- 				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) > 0 THEN 
-- 					WITH shiftTran AS (
-- 						SELECT 
-- 							SF."ShiftDistributeId",
-- 							SF."ShiftId",
-- 							SF."UserId"
-- 						FROM "ShiftTransfer" SF
-- 						WHERE SF."LotteryDate" = p_lottery_date::DATE 
-- 							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
-- 						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
-- 					)
-- 					INSERT INTO "ShiftTransfer"(
-- 						"ShiftId",
-- 						"UserId",
-- 						"ShiftDistributeId",
-- 						"LotteryChannelId",
-- 						"LotteryTypeId",
-- 						"ActionBy",
-- 						"ActionByName",
-- 						"ActionDate",
-- 						"LotteryDate",
-- 						"TotalStocks",
-- 						"TotalReceived",
-- 						"TotalTrans",
-- 						"TotalReturns",
-- 						"TotalRemaining",
-- 						"TotalSold",
-- 						"TotalSoldMoney",
-- 						"TotalRetail",
-- 						"TotalRetailMoney",
-- 						"TotalWholesale",
-- 						"TotalWholesaleMoney",
-- 						"SalePointid"
-- 					)
-- 					SELECT
-- 						S."ShiftId",
-- 						S."UserId",
-- 						S."ShiftDistributeId",
-- 						(ele ->> 'LotteryChannelId')::INT,
-- 						1,
-- 						p_action_by,
-- 						p_action_by_name,
-- 						NOW(),
-- 						p_lottery_date::DATE,
-- 						(ele ->> 'TotalReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'TotalReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'SalePointId')::INT
-- 					FROM shiftTran S;
-- 				END IF;
-- 				-- Cập nhật report vé trùng
-- 				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) > 0 THEN 
-- 					WITH shiftTran AS (
-- 						SELECT 
-- 							SF."ShiftDistributeId",
-- 							SF."ShiftId",
-- 							SF."UserId"
-- 						FROM "ShiftTransfer" SF
-- 						WHERE SF."LotteryDate" = p_lottery_date::DATE 
-- 							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
-- 						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
-- 					)
-- 					INSERT INTO "ShiftTransfer"(
-- 						"ShiftId",
-- 						"UserId",
-- 						"ShiftDistributeId",
-- 						"LotteryChannelId",
-- 						"LotteryTypeId",
-- 						"ActionBy",
-- 						"ActionByName",
-- 						"ActionDate",
-- 						"LotteryDate",
-- 						"TotalStocks",
-- 						"TotalReceived",
-- 						"TotalTrans",
-- 						"TotalReturns",
-- 						"TotalRemaining",
-- 						"TotalSold",
-- 						"TotalSoldMoney",
-- 						"TotalRetail",
-- 						"TotalRetailMoney",
-- 						"TotalWholesale",
-- 						"TotalWholesaleMoney",
-- 						"SalePointid"
-- 					)
-- 					SELECT
-- 						S."ShiftId",
-- 						S."UserId",
-- 						S."ShiftDistributeId",
-- 						(ele ->> 'LotteryChannelId')::INT,
-- 						2,
-- 						p_action_by,
-- 						p_action_by_name,
-- 						NOW(),
-- 						p_lottery_date::DATE,
-- 						(ele ->> 'TotalDupReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'TotalDupReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'SalePointId')::INT
-- 					FROM shiftTran S;
-- 				END IF;
				
-- 				UPDATE "InventoryFull"
-- 				SET
-- 					"TotalRemaining" = "TotalRemaining" - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
-- 				WHERE "LotteryDate" = p_lottery_date::DATE 
-- 					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;

-- 			ELSE 
				
-- 				SELECT 
-- 					COALESCE(F."TotalReceived", 0), COALESCE(F."TotalDupReceived", 0)
-- 				INTO 
-- 					v_last_received, v_last_received_dup
-- 				FROM "InventoryLog" F 
-- 				WHERE F."LotteryDate" = p_lottery_date::DATE 
-- 					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
-- 					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
-- 					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
								
-- 				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) >= 0 THEN
-- 					UPDATE "ShiftTransfer" 
-- 					SET "TotalStocks" = "TotalStocks" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 							"TotalRemaining" = "TotalRemaining" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0)
-- 					WHERE "LotteryDate" = p_lottery_date::DATE 
-- 						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 						AND "SalePointid" = (ele ->> 'SalePointId')::INT
-- 						AND "LotteryTypeId" = 1;
-- 				END IF;
				
-- 				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) >= 0 THEN
-- 					UPDATE "ShiftTransfer" 
-- 					SET "TotalStocks" = "TotalStocks" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
-- 							"TotalRemaining" = "TotalRemaining" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0)
-- 					WHERE "LotteryDate" = p_lottery_date::DATE 
-- 						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 						AND "SalePointid" = (ele ->> 'SalePointId')::INT
-- 						AND "LotteryTypeId" = 1;
-- 				END IF;

-- 				UPDATE "InventoryFull"
-- 				SET
-- 					"TotalRemaining" = "TotalRemaining" + v_last_received + v_last_received_dup - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
-- 				WHERE "LotteryDate" = p_lottery_date::DATE 
-- 					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
-- 				UPDATE "InventoryLog" F
-- 				SET
-- 					"TotalReceived" = COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					"TotalDupReceived" = COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
-- 					"ActionBy" = p_action_by,
-- 					"ActionByName" = p_action_by_name,
-- 					"ActionDate" = NOW()
-- 				WHERE F."LotteryDate" = p_lottery_date::DATE 
-- 					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
-- 					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
-- 					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
-- 					WITH tmp AS (
--     SELECT
--         SD."UserId",
--         SD."SalePointId",
--         SD."ShiftId"
--     FROM
--         "ShiftDistribute" SD
--     WHERE
--         SD."DistributeDate"::DATE = p_lottery_date::DATE
--         AND SD."UserId" = (
--             SELECT
--                 "UserId"
--             FROM
--                 "ShiftDistribute"
--             WHERE
--                 "DistributeDate" = p_lottery_date::DATE
--                 AND "SalePointId" = (ele ->> 'SalePointId')::INT
--             LIMIT 1
--         )
--     GROUP BY
--         SD."SalePointId",
--         SD."UserId",
--         SD."ShiftId"
-- ), tmp1 AS (
--     SELECT *
--     FROM "GroupSalePoint" GSP
--     ORDER BY GSP."GroupSalePointId"
-- ), tmp2 AS (
--     SELECT
--         GSP."UserId"
--     FROM
--         "tmp1" GSP
--     LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
--     LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
--     LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
--     WHERE
--         UR."UserTitleId" = 2
--         AND SD."DistributeDate"::DATE = p_lottery_date::DATE
--     GROUP BY
--         GSP."UserId",
--         GSP."GroupSalePointId",
--         GSP."Option"
--     ORDER BY
--         GSP."Option" ASC,
--         GSP."GroupSalePointId" DESC
--     LIMIT 1
-- )
-- -- Gán kết quả của truy vấn SELECT cho biến
-- SELECT INTO tmp_user_id T."UserId"
-- FROM tmp2 T
-- GROUP BY T."UserId";
					
-- 					INSERT INTO "Transition"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"FromSalePointId",
-- 					"ToSalePointId",
-- 					"TotalTrans",
-- 					"TotalTransDup",
-- 					"TransitionDate",
-- 					"TransitionTypeId",
-- 					"ActionBy",
-- 					"ActionByName",
-- 						"ShiftDistributeId",
-- 					"ManagerId",
-- 					"ConfirmStatusId",
-- 					"IsScratchcard"
-- 				) VALUES(
-- 					p_lottery_date::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					0,
-- 					(ele ->> 'SalePointId')::INT,
					
-- 					 (
-- 							SELECT (ele ->> 'TotalReceived')::INT - "TotalRemaining"
-- 							FROM "Inventory"
-- 							WHERE "LotteryDate" = p_lottery_date::DATE
-- 							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT AND "SalePointId" = (ele ->> 'SalePointId')::INT
-- 						),
-- 					 (
-- 							SELECT (ele ->> 'TotalTransDup')::INT - "TotalDupReceived"
-- 							FROM "Inventory"
-- 							WHERE "LotteryDate" = p_lottery_date::DATE
-- 							AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT AND "SalePointId" = (ele ->> 'SalePointId')::INT
-- 						),
-- 					NOW(),
-- 					2,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					-1,
-- 					tmp_user_id,
-- 					1,
-- 					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
-- 				);
					
-- 			END IF;
		
-- 		END LOOP;
		
-- 		FOR re IN
-- 		WITH tmp AS (
-- 			SELECT
-- 				"LotteryChannelId",
-- 				SUM("TotalReceived") AS "TotalReceived",
-- 				SUM("TotalDupReceived") AS "TotalDupReceived",
-- 				"SalePointId"
-- 			FROM "InventoryLog"
-- 			WHERE "LotteryDate" = p_lottery_date::DATE
-- 			GROUP BY 
-- 				"LotteryChannelId",
-- 				"SalePointId"
-- 		)
-- 		SELECT t."LotteryChannelId", t."TotalReceived", t."TotalDupReceived", t."SalePointId"  FROM tmp t LOOP
		
-- 			IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "LotteryDate" = p_lottery_date::DATE 
-- 				AND "LotteryChannelId" = re."LotteryChannelId"
-- 				AND "SalePointId" = re."SalePointId") THEN
		
-- 				INSERT INTO "Inventory"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"TotalReceived",
-- 					"TotalRemaining",
-- 					"TotalDupReceived",
-- 					"TotalDupRemaining",
-- 					"SalePointId"
-- 				) VALUES (
-- 					 p_lottery_date::DATE,
-- 					 re."LotteryChannelId",
-- 					0,
-- 					0,
-- 					0,
-- 					0,
-- 					 re."SalePointId"
-- 				);
				
-- -- 				 re."TotalReceived",
-- -- 					 re."TotalReceived",
-- -- 					 re."TotalDupReceived",
-- -- 					 re."TotalDupReceived",
-- -- 					 re."SalePointId"
-- -- 				update "InventoryLog" I set "TotalReceived"= re."TotalReceived","TotalRemaining"= re."TotalReceived","TotalDupReceived"= re."TotalDupReceived","TotalDupRemaining"= re."TotalDupReceived" 
-- -- 					WHERE I."LotteryDate" = p_lottery_date::DATE 
-- -- 					AND I."LotteryChannelId" = re."LotteryChannelId"
-- -- 					AND I."SalePointId" = re."SalePointId";
-- -- 		ELSE 
-- -- 				UPDATE "InventoryLog" I
-- -- 				SET
-- -- 					"TotalReceived" = re."TotalReceived",
-- -- 					"TotalRemaining" = I."TotalRemaining" - (I."TotalReceived" - re."TotalReceived"),
-- -- 					"TotalDupReceived" = re."TotalDupReceived",
-- -- 					"TotalDupRemaining" = I."TotalDupRemaining" - (I."TotalDupReceived" - re."TotalDupReceived")
-- -- 				WHERE I."LotteryDate" = p_lottery_date::DATE 
-- -- 					AND I."LotteryChannelId" = re."LotteryChannelId"
-- -- 					AND I."SalePointId" = re."SalePointId";
				
-- -- 				UPDATE "Inventory" I
-- -- 				SET
-- -- 					"TotalReceived" = re."TotalReceived",
-- -- 					"TotalRemaining" = I."TotalRemaining" - (I."TotalReceived" - re."TotalReceived"),
-- -- 					"TotalDupReceived" = re."TotalDupReceived",
-- -- 					"TotalDupRemaining" = I."TotalDupRemaining" - (I."TotalDupReceived" - re."TotalDupReceived")
-- -- 				WHERE I."LotteryDate" = p_lottery_date::DATE 
-- -- 					AND I."LotteryChannelId" = re."LotteryChannelId"
-- -- 					AND I."SalePointId" = re."SalePointId";
			
-- 			END IF;
		
-- 		END LOOP;
-- 		Insert INTO  
-- 			"HistoryOfTicketsShared"("DetailOfSharing","UserId","FullName","CreatedDate")
-- 		VALUES (p_data, p_action_by,p_action_by_name,p_lottery_date);
-- 		v_mess := 'Thao tác thành công';

-- 	ELSE
-- 		v_id := -1;
-- 		v_mess := 'Dữ liệu cần được cập nhật';
-- 	END IF;
	
	
-- 	RETURN QUERY 
-- 	SELECT v_id, v_mess;
	
-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN				
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
		
-- 		RETURN QUERY 
-- 		SELECT 	v_id, v_mess;
-- 	END;
	
-- END;




-- Bản Cũ

-- DECLARE
-- 	v_id INT := 1;
-- 	v_mess TEXT;
-- 	v_data JSON := p_data::JSON;
-- 	ele JSON;
-- 	v_last_received INT;
-- 	v_last_received_dup INT;
-- 	re RECORD;
-- 	v_flag INT := 0;
-- BEGIN
	
-- 	CREATE TEMP TABLE dataTotal ON COMMIT DROP AS (
-- 		SELECT 
-- 			(dt ->> 'AgencyId') :: INT AS "AgencyId",
-- 			(dt ->> 'LotteryChannelId') :: INT AS "LotteryChannelId",
-- 			(dt ->> 'SalePointId') :: INT AS "SalePointId",
-- 			(dt ->> 'TotalReceived') :: INT AS "TotalReceived" ,
-- 			(dt ->> 'TotalDupReceived') :: INT AS "TotalDupReceived"
-- 		FROM json_array_elements(v_data) dt 
-- 	);
-- -- 	WITH tmp AS(
-- -- 		SELECT
-- -- 			dt."AgencyId", 
-- -- 			dt."LotteryChannelId",
-- -- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- -- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- -- 		FROM dataTotal dt
-- -- 		GROUP BY 
-- -- 			dt."AgencyId", 
-- -- 			dt."LotteryChannelId"
-- -- 	),
-- -- 	tmp2 AS(
-- -- 		SELECT 
-- -- 			dt."AgencyId",
-- -- 			dt."LotteryChannelId",
-- -- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- -- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- -- 		FROM "InventoryLog" dt
-- -- 		WHERE dt."LotteryDate" = p_lottery_date::DATE 
-- -- 		GROUP BY 
-- -- 			dt."AgencyId",
-- -- 			dt."LotteryChannelId"
-- -- 	),
-- -- 	tmp3 AS(
-- -- 		SELECT 
-- -- 			IF."AgencyId",
-- -- 			IF."LotteryChannelId",
-- -- 			IF."TotalRemaining"
-- -- 		FROM "InventoryFull" IF
-- -- 		WHERE IF."LotteryDate" = p_lottery_date::DATE 
-- -- 	),
-- -- 	tmp4 AS(
-- -- 		SELECT
-- -- 			tmp3."TotalRemaining" - (tmp."TotalReceived" + tmp."TotalDupReceived" - COALESCE(tmp2."TotalReceived", 0) - COALESCE(tmp2."TotalDupReceived", 0)) AS "Remain"
-- -- 		FROM tmp
-- -- 			JOIN tmp3 ON tmp."AgencyId" = tmp3."AgencyId" AND tmp."LotteryChannelId" = tmp3."LotteryChannelId"
-- -- 			LEFT JOIN tmp2 ON tmp."AgencyId" = tmp2."AgencyId" AND tmp."LotteryChannelId" = tmp2."LotteryChannelId"
-- -- 	)
-- -- 	SELECT COUNT(*) INTO v_flag
-- -- 	FROM tmp4
-- -- 	WHERE "Remain" < 0;
	
-- 	v_flag := 0;
	
-- 	IF(v_flag <= 0) THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 			IF NOT EXISTS (SELECT 1 FROM "InventoryLog" WHERE "LotteryDate" = p_lottery_date::DATE 
-- 				AND "AgencyId" = (ele ->> 'AgencyId')::INT 
-- 				AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 				AND "SalePointId" = (ele ->> 'SalePointId')::INT) THEN	
				
-- 				INSERT INTO "InventoryLog"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"AgencyId",
-- 					"SalePointId",
-- 					"TotalReceived",
-- 					"TotalDupReceived",
-- 					"ActionBy",
-- 					"ActionByName"
-- 				) VALUES (
-- 					p_lottery_date::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					(ele ->> 'AgencyId')::INT,
-- 					(ele ->> 'SalePointId')::INT,
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
-- 					p_action_by,
-- 					p_action_by_name
-- 				);
-- 				--Cập nhật report vé thường
-- 				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) > 0 THEN 
-- 					WITH shiftTran AS (
-- 						SELECT 
-- 							SF."ShiftDistributeId",
-- 							SF."ShiftId",
-- 							SF."UserId"
-- 						FROM "ShiftTransfer" SF
-- 						WHERE SF."LotteryDate" = p_lottery_date::DATE 
-- 							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
-- 						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
-- 					)
-- 					INSERT INTO "ShiftTransfer"(
-- 						"ShiftId",
-- 						"UserId",
-- 						"ShiftDistributeId",
-- 						"LotteryChannelId",
-- 						"LotteryTypeId",
-- 						"ActionBy",
-- 						"ActionByName",
-- 						"ActionDate",
-- 						"LotteryDate",
-- 						"TotalStocks",
-- 						"TotalReceived",
-- 						"TotalTrans",
-- 						"TotalReturns",
-- 						"TotalRemaining",
-- 						"TotalSold",
-- 						"TotalSoldMoney",
-- 						"TotalRetail",
-- 						"TotalRetailMoney",
-- 						"TotalWholesale",
-- 						"TotalWholesaleMoney",
-- 						"SalePointid"
-- 					)
-- 					SELECT
-- 						S."ShiftId",
-- 						S."UserId",
-- 						S."ShiftDistributeId",
-- 						(ele ->> 'LotteryChannelId')::INT,
-- 						1,
-- 						p_action_by,
-- 						p_action_by_name,
-- 						NOW(),
-- 						p_lottery_date::DATE,
-- 						(ele ->> 'TotalReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'TotalReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'SalePointId')::INT
-- 					FROM shiftTran S;
-- 				END IF;
-- 				-- Cập nhật report vé trùng
-- 				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) > 0 THEN 
-- 					WITH shiftTran AS (
-- 						SELECT 
-- 							SF."ShiftDistributeId",
-- 							SF."ShiftId",
-- 							SF."UserId"
-- 						FROM "ShiftTransfer" SF
-- 						WHERE SF."LotteryDate" = p_lottery_date::DATE 
-- 							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
-- 						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
-- 					)
-- 					INSERT INTO "ShiftTransfer"(
-- 						"ShiftId",
-- 						"UserId",
-- 						"ShiftDistributeId",
-- 						"LotteryChannelId",
-- 						"LotteryTypeId",
-- 						"ActionBy",
-- 						"ActionByName",
-- 						"ActionDate",
-- 						"LotteryDate",
-- 						"TotalStocks",
-- 						"TotalReceived",
-- 						"TotalTrans",
-- 						"TotalReturns",
-- 						"TotalRemaining",
-- 						"TotalSold",
-- 						"TotalSoldMoney",
-- 						"TotalRetail",
-- 						"TotalRetailMoney",
-- 						"TotalWholesale",
-- 						"TotalWholesaleMoney",
-- 						"SalePointid"
-- 					)
-- 					SELECT
-- 						S."ShiftId",
-- 						S."UserId",
-- 						S."ShiftDistributeId",
-- 						(ele ->> 'LotteryChannelId')::INT,
-- 						2,
-- 						p_action_by,
-- 						p_action_by_name,
-- 						NOW(),
-- 						p_lottery_date::DATE,
-- 						(ele ->> 'TotalDupReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'TotalDupReceived')::INT,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						0,
-- 						(ele ->> 'SalePointId')::INT
-- 					FROM shiftTran S;
-- 				END IF;
				
-- 				UPDATE "InventoryFull"
-- 				SET
-- 					"TotalRemaining" = "TotalRemaining" - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
-- 				WHERE "LotteryDate" = p_lottery_date::DATE 
-- 					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;

-- 			ELSE 
				
-- 				SELECT 
-- 					COALESCE(F."TotalReceived", 0), COALESCE(F."TotalDupReceived", 0)
-- 				INTO 
-- 					v_last_received, v_last_received_dup
-- 				FROM "InventoryLog" F 
-- 				WHERE F."LotteryDate" = p_lottery_date::DATE 
-- 					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
-- 					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
-- 					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
								
-- 				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) >= 0 THEN
-- 					UPDATE "ShiftTransfer" 
-- 					SET "TotalStocks" = "TotalStocks" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 							"TotalRemaining" = "TotalRemaining" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0)
-- 					WHERE "LotteryDate" = p_lottery_date::DATE 
-- 						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 						AND "SalePointid" = (ele ->> 'SalePointId')::INT
-- 						AND "LotteryTypeId" = 1;
-- 				END IF;
				
-- 				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) >= 0 THEN
-- 					UPDATE "ShiftTransfer" 
-- 					SET "TotalStocks" = "TotalStocks" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
-- 							"TotalRemaining" = "TotalRemaining" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0)
-- 					WHERE "LotteryDate" = p_lottery_date::DATE 
-- 						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 						AND "SalePointid" = (ele ->> 'SalePointId')::INT
-- 						AND "LotteryTypeId" = 1;
-- 				END IF;

-- 				UPDATE "InventoryFull"
-- 				SET
-- 					"TotalRemaining" = "TotalRemaining" + v_last_received + v_last_received_dup - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
-- 				WHERE "LotteryDate" = p_lottery_date::DATE 
-- 					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
-- 				UPDATE "InventoryLog" F
-- 				SET
-- 					"TotalReceived" = COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					"TotalDupReceived" = COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
-- 					"ActionBy" = p_action_by,
-- 					"ActionByName" = p_action_by_name,
-- 					"ActionDate" = NOW()
-- 				WHERE F."LotteryDate" = p_lottery_date::DATE 
-- 					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
-- 					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
-- 					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
-- 			END IF;
		
-- 		END LOOP;
		
-- 		FOR re IN
-- 		WITH tmp AS (
-- 			SELECT
-- 				"LotteryChannelId",
-- 				SUM("TotalReceived") AS "TotalReceived",
-- 				SUM("TotalDupReceived") AS "TotalDupReceived",
-- 				"SalePointId"
-- 			FROM "InventoryLog"
-- 			WHERE "LotteryDate" = p_lottery_date::DATE
-- 			GROUP BY 
-- 				"LotteryChannelId",
-- 				"SalePointId"
-- 		)
-- 		SELECT t."LotteryChannelId", t."TotalReceived", t."TotalDupReceived", t."SalePointId"  FROM tmp t LOOP
		
-- 			IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "LotteryDate" = p_lottery_date::DATE 
-- 				AND "LotteryChannelId" = re."LotteryChannelId"
-- 				AND "SalePointId" = re."SalePointId") THEN
		
-- 				INSERT INTO "Inventory"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"TotalReceived",
-- 					"TotalRemaining",
-- 					"TotalDupReceived",
-- 					"TotalDupRemaining",
-- 					"SalePointId"
-- 				) VALUES (
-- 					 p_lottery_date::DATE,
-- 					 re."LotteryChannelId",
-- 					 re."TotalReceived",
-- 					 re."TotalReceived",
-- 					 re."TotalDupReceived",
-- 					 re."TotalDupReceived",
-- 					 re."SalePointId"
-- 				);
			
-- 			ELSE 
			
-- 				UPDATE "Inventory" I
-- 				SET
-- 					"TotalReceived" = re."TotalReceived",
-- 					"TotalRemaining" = I."TotalRemaining" - (I."TotalReceived" - re."TotalReceived"),
-- 					"TotalDupReceived" = re."TotalDupReceived",
-- 					"TotalDupRemaining" = I."TotalDupRemaining" - (I."TotalDupReceived" - re."TotalDupReceived")
-- 				WHERE I."LotteryDate" = p_lottery_date::DATE 
-- 					AND I."LotteryChannelId" = re."LotteryChannelId"
-- 					AND I."SalePointId" = re."SalePointId";
			
-- 			END IF;
		
-- 		END LOOP;
-- 		Insert INTO  
-- 			"HistoryOfTicketsShared"("DetailOfSharing","UserId","FullName","CreatedDate")
-- 		VALUES (p_data, p_action_by,p_action_by_name,p_lottery_date);
-- 		v_mess := 'Thao tác thành công';

-- 	ELSE
-- 		v_id := -1;
-- 		v_mess := 'Dữ liệu cần được cập nhật';
-- 	END IF;
	
	
-- 	RETURN QUERY 
-- 	SELECT v_id, v_mess;
	
-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN				
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
		
-- 		RETURN QUERY 
-- 		SELECT 	v_id, v_mess;
-- 	END;
	
-- END;




$$;


ALTER FUNCTION public.crm_activity_distribute_for_sales_point(p_action_by integer, p_action_by_name character varying, p_lottery_date timestamp without time zone, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_distribute_for_sales_point_v2(integer, character varying, timestamp without time zone, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_for_sales_point_v2(p_action_by integer, p_action_by_name character varying, p_lottery_date timestamp without time zone, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_last_received INT;
	v_last_received_dup INT;
	re RECORD;
	v_flag INT := 0;
BEGIN
	
	CREATE TEMP TABLE dataTotal ON COMMIT DROP AS (
		SELECT 
			(dt ->> 'AgencyId') :: INT AS "AgencyId",
			(dt ->> 'LotteryChannelId') :: INT AS "LotteryChannelId",
			(dt ->> 'SalePointId') :: INT AS "SalePointId",
			(dt ->> 'TotalReceived') :: INT AS "TotalReceived" ,
			(dt ->> 'TotalDupReceived') :: INT AS "TotalDupReceived"
		FROM json_array_elements(v_data) dt 
	);
-- 	WITH tmp AS(
-- 		SELECT
-- 			dt."AgencyId", 
-- 			dt."LotteryChannelId",
-- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- 		FROM dataTotal dt
-- 		GROUP BY 
-- 			dt."AgencyId", 
-- 			dt."LotteryChannelId"
-- 	),
-- 	tmp2 AS(
-- 		SELECT 
-- 			dt."AgencyId",
-- 			dt."LotteryChannelId",
-- 			SUM(dt."TotalReceived") AS "TotalReceived",
-- 			SUM(dt."TotalDupReceived") AS "TotalDupReceived"
-- 		FROM "InventoryLog" dt
-- 		WHERE dt."LotteryDate" = p_lottery_date::DATE 
-- 		GROUP BY 
-- 			dt."AgencyId",
-- 			dt."LotteryChannelId"
-- 	),
-- 	tmp3 AS(
-- 		SELECT 
-- 			IF."AgencyId",
-- 			IF."LotteryChannelId",
-- 			IF."TotalRemaining"
-- 		FROM "InventoryFull" IF
-- 		WHERE IF."LotteryDate" = p_lottery_date::DATE 
-- 	),
-- 	tmp4 AS(
-- 		SELECT
-- 			tmp3."TotalRemaining" - (tmp."TotalReceived" + tmp."TotalDupReceived" - COALESCE(tmp2."TotalReceived", 0) - COALESCE(tmp2."TotalDupReceived", 0)) AS "Remain"
-- 		FROM tmp
-- 			JOIN tmp3 ON tmp."AgencyId" = tmp3."AgencyId" AND tmp."LotteryChannelId" = tmp3."LotteryChannelId"
-- 			LEFT JOIN tmp2 ON tmp."AgencyId" = tmp2."AgencyId" AND tmp."LotteryChannelId" = tmp2."LotteryChannelId"
-- 	)
-- 	SELECT COUNT(*) INTO v_flag
-- 	FROM tmp4
-- 	WHERE "Remain" < 0;
	
	v_flag := 0;
	
	IF(v_flag <= 0) THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "InventoryLog" WHERE "LotteryDate" = p_lottery_date::DATE 
				AND "AgencyId" = (ele ->> 'AgencyId')::INT 
				AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				AND "SalePointId" = (ele ->> 'SalePointId')::INT) THEN	
				
				INSERT INTO "InventoryLog"(
					"LotteryDate",
					"LotteryChannelId",
					"AgencyId",
					"SalePointId",
					"TotalReceived",
					"TotalDupReceived",
					"ActionBy",
					"ActionByName"
				) VALUES (
					p_lottery_date::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					(ele ->> 'AgencyId')::INT,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
					p_action_by,
					p_action_by_name
				);
				--Cập nhật report vé thường
				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) > 0 THEN 
					WITH shiftTran AS (
						SELECT 
							SF."ShiftDistributeId",
							SF."ShiftId",
							SF."UserId"
						FROM "ShiftTransfer" SF
						WHERE SF."LotteryDate" = p_lottery_date::DATE 
							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
					)
					INSERT INTO "ShiftTransfer"(
						"ShiftId",
						"UserId",
						"ShiftDistributeId",
						"LotteryChannelId",
						"LotteryTypeId",
						"ActionBy",
						"ActionByName",
						"ActionDate",
						"LotteryDate",
						"TotalStocks",
						"TotalReceived",
						"TotalTrans",
						"TotalReturns",
						"TotalRemaining",
						"TotalSold",
						"TotalSoldMoney",
						"TotalRetail",
						"TotalRetailMoney",
						"TotalWholesale",
						"TotalWholesaleMoney",
						"SalePointid"
					)
					SELECT
						S."ShiftId",
						S."UserId",
						S."ShiftDistributeId",
						(ele ->> 'LotteryChannelId')::INT,
						1,
						p_action_by,
						p_action_by_name,
						NOW(),
						p_lottery_date::DATE,
						(ele ->> 'TotalReceived')::INT,
						0,
						0,
						0,
						(ele ->> 'TotalReceived')::INT,
						0,
						0,
						0,
						0,
						0,
						0,
						(ele ->> 'SalePointId')::INT
					FROM shiftTran S;
				END IF;
				-- Cập nhật report vé trùng
				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) > 0 THEN 
					WITH shiftTran AS (
						SELECT 
							SF."ShiftDistributeId",
							SF."ShiftId",
							SF."UserId"
						FROM "ShiftTransfer" SF
						WHERE SF."LotteryDate" = p_lottery_date::DATE 
							AND SF."SalePointid" = (ele ->> 'SalePointId')::INT
						GROUP BY SF."ShiftDistributeId", SF."ShiftId", SF."UserId"
					)
					INSERT INTO "ShiftTransfer"(
						"ShiftId",
						"UserId",
						"ShiftDistributeId",
						"LotteryChannelId",
						"LotteryTypeId",
						"ActionBy",
						"ActionByName",
						"ActionDate",
						"LotteryDate",
						"TotalStocks",
						"TotalReceived",
						"TotalTrans",
						"TotalReturns",
						"TotalRemaining",
						"TotalSold",
						"TotalSoldMoney",
						"TotalRetail",
						"TotalRetailMoney",
						"TotalWholesale",
						"TotalWholesaleMoney",
						"SalePointid"
					)
					SELECT
						S."ShiftId",
						S."UserId",
						S."ShiftDistributeId",
						(ele ->> 'LotteryChannelId')::INT,
						2,
						p_action_by,
						p_action_by_name,
						NOW(),
						p_lottery_date::DATE,
						(ele ->> 'TotalDupReceived')::INT,
						0,
						0,
						0,
						(ele ->> 'TotalDupReceived')::INT,
						0,
						0,
						0,
						0,
						0,
						0,
						(ele ->> 'SalePointId')::INT
					FROM shiftTran S;
				END IF;
				
				UPDATE "InventoryFull"
				SET
					"TotalRemaining" = "TotalRemaining" - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
				WHERE "LotteryDate" = p_lottery_date::DATE 
					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;

			ELSE 
				
				SELECT 
					COALESCE(F."TotalReceived", 0), COALESCE(F."TotalDupReceived", 0)
				INTO 
					v_last_received, v_last_received_dup
				FROM "InventoryLog" F 
				WHERE F."LotteryDate" = p_lottery_date::DATE 
					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
								
				IF COALESCE((ele ->> 'TotalReceived')::INT, 0) >= 0 THEN
					UPDATE "ShiftTransfer" 
					SET "TotalStocks" = "TotalStocks" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0),
							"TotalRemaining" = "TotalRemaining" - v_last_received + COALESCE((ele ->> 'TotalReceived')::INT, 0)
					WHERE "LotteryDate" = p_lottery_date::DATE 
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND "SalePointid" = (ele ->> 'SalePointId')::INT
						AND "LotteryTypeId" = 1;
				END IF;
				
				IF COALESCE((ele ->> 'TotalDupReceived')::INT, 0) >= 0 THEN
					UPDATE "ShiftTransfer" 
					SET "TotalStocks" = "TotalStocks" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
							"TotalRemaining" = "TotalRemaining" - v_last_received_dup + COALESCE((ele ->> 'TotalDupReceived')::INT, 0)
					WHERE "LotteryDate" = p_lottery_date::DATE 
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND "SalePointid" = (ele ->> 'SalePointId')::INT
						AND "LotteryTypeId" = 1;
				END IF;

				UPDATE "InventoryFull"
				SET
					"TotalRemaining" = "TotalRemaining" + v_last_received + v_last_received_dup - (COALESCE((ele ->> 'TotalReceived')::INT, 0) + COALESCE((ele ->> 'TotalDupReceived')::INT, 0))
				WHERE "LotteryDate" = p_lottery_date::DATE 
					AND "AgencyId" = (ele ->> 'AgencyId')::INT 
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
				UPDATE "InventoryLog" F
				SET
					"TotalReceived" = COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalDupReceived" = COALESCE((ele ->> 'TotalDupReceived')::INT, 0),
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = NOW()
				WHERE F."LotteryDate" = p_lottery_date::DATE 
					AND F."AgencyId" = (ele ->> 'AgencyId')::INT
					AND F."SalePointId" = (ele ->> 'SalePointId')::INT
					AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
			END IF;
		
		END LOOP;
		
		FOR re IN
		WITH tmp AS (
			SELECT
				"LotteryChannelId",
				SUM("TotalReceived") AS "TotalReceived",
				SUM("TotalDupReceived") AS "TotalDupReceived",
				"SalePointId"
			FROM "InventoryLog"
			WHERE "LotteryDate" = p_lottery_date::DATE
			GROUP BY 
				"LotteryChannelId",
				"SalePointId"
		)
		SELECT t."LotteryChannelId", t."TotalReceived", t."TotalDupReceived", t."SalePointId"  FROM tmp t LOOP
		
			IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "LotteryDate" = p_lottery_date::DATE 
				AND "LotteryChannelId" = re."LotteryChannelId"
				AND "SalePointId" = re."SalePointId") THEN
		
				INSERT INTO "Inventory"(
					"LotteryDate",
					"LotteryChannelId",
					"TotalReceived",
					"TotalRemaining",
					"TotalDupReceived",
					"TotalDupRemaining",
					"SalePointId"
				) VALUES (
					 p_lottery_date::DATE,
					 re."LotteryChannelId",
					 re."TotalReceived",
					 re."TotalReceived",
					 re."TotalDupReceived",
					 re."TotalDupReceived",
					 re."SalePointId"
				);
			
			ELSE 
			
				UPDATE "Inventory" I
				SET
					"TotalReceived" = re."TotalReceived",
					"TotalRemaining" = I."TotalRemaining" - (I."TotalReceived" - re."TotalReceived"),
					"TotalDupReceived" = re."TotalDupReceived",
					"TotalDupRemaining" = I."TotalDupRemaining" - (I."TotalDupReceived" - re."TotalDupReceived")
				WHERE I."LotteryDate" = p_lottery_date::DATE 
					AND I."LotteryChannelId" = re."LotteryChannelId"
					AND I."SalePointId" = re."SalePointId";
			
			END IF;
		
		END LOOP;
		Insert INTO  
			"HistoryOfTicketsShared"("DetailOfSharing","UserId","FullName","CreatedDate")
		VALUES (p_data, p_action_by,p_action_by_name,p_lottery_date);
		v_mess := 'Thao tác thành công';

	ELSE
		v_id := -1;
		v_mess := 'Dữ liệu cần được cập nhật';
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_distribute_for_sales_point_v2(p_action_by integer, p_action_by_name character varying, p_lottery_date timestamp without time zone, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_distribute_for_sup_agency(timestamp without time zone, integer, character varying, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_for_sup_agency(p_date timestamp without time zone, p_action_by integer, p_action_by_name character varying, p_data text, p_lock boolean) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT := 1;
		v_mess TEXT;
		v_data JSON := p_data::JSON;
		ele JSON;
		v_total_received INT8;
		v_total_dup_received INT8;
BEGIN
	 IF p_lock IS FALSE THEN 
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
				IF NOT EXISTS (SELECT 1 FROM "InventoryForSupAgency" I WHERE I."Date"::DATE = p_date::DATE 
						AND I."AgencyId" = (ele ->> 'AgencyId')::INT 
						AND I."LotteryChannelId" = (ele->>'LotteryChannelId')::INT
						AND I."SupAgencyId" = (ele ->> 'SupAgencyId')::INT)
				THEN 
					INSERT INTO "InventoryForSupAgency"(
						"Date",
						"AgencyId",
						"SupAgencyId",
						"TotalReceived",
						"TotalDupReceived",
						"LotteryChannelId",
						"ActionBy",
						"ActionByName"
					)
					VALUES(
						p_date,
						(ele->>'AgencyId')::INT4,
						(ele->>'SupAgencyId')::INT4,
						(ele->>'TotalReceived')::INT8,
						(ele->>'TotalDupReceived')::INT8,
						(ele->>'LotteryChannelId')::INT4,
						p_action_by,
						p_action_by_name
					);
					raise notice 'ele TotalReceived % , ele TotalDupReceived %, v_total_received %, v_total_dup_received %', (ele->>'TotalReceived')::INT8, (ele->>'TotalDupReceived')::INT8, v_total_received, v_total_dup_received;
					
					UPDATE "InventoryFull" 
						SET 
							"TotalRemaining" = "TotalRemaining" - (ele->>'TotalReceived')::INT8 - (ele->>'TotalDupReceived')::INT8
					WHERE "AgencyId" = (ele->>'AgencyId')::INT4 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT4
						AND "LotteryDate" = (ele->>'LotteryDate')::DATE;
					
					v_mess := 'Thêm thành công';
				ELSE 
					raise notice '11111111111111111';
					SELECT 
						I."TotalReceived",
						I."TotalDupReceived"
						INTO v_total_received, v_total_dup_received
					FROM "InventoryForSupAgency" I 
					WHERE I."Date"::DATE = p_date::DATE 
						AND I."AgencyId" = (ele ->> 'AgencyId')::INT 
						AND I."LotteryChannelId" = (ele->>'LotteryChannelId')::INT
						AND I."SupAgencyId" = (ele ->> 'SupAgencyId')::INT;
					
					
					Update "InventoryForSupAgency" 
					SET 
						"Date" = p_date,
						"AgencyId" = 	(ele->>'AgencyId')::INT4,
						"SupAgencyId" = (ele->>'SupAgencyId')::INT4,
						"TotalReceived" = (ele->>'TotalReceived')::INT8,
						"TotalDupReceived" = (ele->>'TotalDupReceived')::INT8,
						"ActionBy" = p_action_by,
						"TotalPrice" = ( SELECT T."Price" * (ele->>'TotalReceived')::INT8 FROM "SubAgency" T WHERE T."ModifiedDate" = p_date )
					WHERE "Date"::DATE = p_date::DATE 
						AND "AgencyId" = (ele ->> 'AgencyId')::INT 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT
						AND "SupAgencyId" = (ele ->> 'SupAgencyId')::INT;
					
					raise notice 'ele TotalReceived % , ele TotalDupReceived %, v_total_received %, v_total_dup_received %', (ele->>'TotalReceived')::INT8, (ele->>'TotalDupReceived')::INT8, v_total_received, v_total_dup_received;
						
					UPDATE "InventoryFull" 
						SET 
							"TotalRemaining" = "TotalRemaining" + ( v_total_received - (ele->>'TotalReceived')::INT8 ) - ((ele->>'TotalDupReceived')::INT8 - v_total_dup_received)
					WHERE "AgencyId" = (ele->>'AgencyId')::INT4 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT4
						AND "LotteryDate" = (ele->>'LotteryDate')::DATE;
						
						v_mess := 'Cập nhật thành công';
				END IF;
			END LOOP;
		ELSE
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
				IF NOT EXISTS (SELECT 1 FROM "InventoryForSupAgency" I WHERE I."Date"::DATE = p_date::DATE 
						AND I."AgencyId" = (ele ->> 'AgencyId')::INT 
						AND I."LotteryChannelId" = (ele->>'LotteryChannelId')::INT
						AND I."SupAgencyId" = (ele ->> 'SupAgencyId')::INT)
					THEN 
						INSERT INTO "InventoryForSupAgency"(
							"Date",
							"AgencyId",
							"SupAgencyId",
							"TotalReceived",
							"TotalDupReceived",
							"LotteryChannelId",
							"ActionBy",
							"ActionByName"
						)
						VALUES(
							p_date,
							(ele->>'AgencyId')::INT4,
							(ele->>'SupAgencyId')::INT4,
							(ele->>'TotalReceived')::INT8,
							(ele->>'TotalDupReceived')::INT8,
							(ele->>'LotteryChannelId')::INT4,
							p_action_by,
							p_action_by_name
						);
					UPDATE "InventoryFull" 
						SET 
							"TotalRemaining" = "TotalRemaining" - (ele->>'TotalReceived')::INT8 - (ele->>'TotalDupReceived')::INT8
					WHERE "AgencyId" = (ele->>'AgencyId')::INT4 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT4
						AND "LotteryDate" = (ele->>'LotteryDate')::DATE;
						
						v_mess := 'Thêm thành công';
				ELSE
									
					SELECT 
						I."TotalReceived",
						I."TotalDupReceived"
						INTO v_total_received, v_total_dup_received
					FROM "InventoryForSupAgency" I 
					WHERE I."Date"::DATE = p_date::DATE 
						AND I."AgencyId" = (ele ->> 'AgencyId')::INT 
						AND I."LotteryChannelId" = (ele->>'LotteryChannelId')::INT
						AND I."SupAgencyId" = (ele ->> 'SupAgencyId')::INT;
				
					UPDATE "InventoryForSupAgency" 
					SET "TotalDupReceived" = (ele->>'TotalDupReceived')::INT4
					WHERE "Date"::DATE = p_date::DATE 
						AND "AgencyId" = (ele ->> 'AgencyId')::INT 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT
						AND "SupAgencyId" = (ele ->> 'SupAgencyId')::INT;
						
					UPDATE "InventoryFull" 
						SET 
							"TotalRemaining" = "TotalRemaining" + (v_total_received - (ele->>'TotalReceived')::INT8 ) - ((ele->>'TotalDupReceived')::INT8 - v_total_dup_received)
					WHERE "AgencyId" = (ele->>'AgencyId')::INT4 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT4
						AND "LotteryDate" = (ele->>'LotteryDate')::DATE;
						v_mess := 'Cập nhật thành công';
				END IF;
			END LOOP;
		END IF;
    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_distribute_for_sup_agency(p_date timestamp without time zone, p_action_by integer, p_action_by_name character varying, p_data text, p_lock boolean) OWNER TO postgres;

--
-- Name: crm_activity_distribute_scratchcard_for_sales_point(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_scratchcard_for_sales_point(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_total INT8 := 0;
	v_store INT;
	v_check INT := 0;
	tmp_user_id INT;
	new_transition_id BIGINT;
BEGIN
	
	CREATE TEMP TABLE tmpTable (
		"LotteryChannelId" INT,
		"TotalReceived" INT
	)
	ON COMMIT DROP;
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
	END LOOP;
	
	WITH tmp AS (
		SELECT 
			"LotteryChannelId",
			"TotalRemaining"
		FROM "ScratchcardFull"
		WHERE "AgencyId" = 0
	),
	tmp2 AS (
		SELECT
			T."LotteryChannelId",
			SUM(T."TotalReceived") AS "TotalReceived"
		FROM tmpTable T
		GROUP BY T."LotteryChannelId"
	)
	
	SELECT 
		COUNT(1) INTO v_check
	FROM tmp2 T
		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
	WHERE T."TotalReceived" > X."TotalRemaining";
	

	IF v_check = 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "ScratchcardConfirm" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
												WITH tmpp AS (
    SELECT
        SD."UserId",
        SD."SalePointId",
        SD."ShiftId"
    FROM
        "ShiftDistribute" SD
    WHERE
        SD."DistributeDate"::DATE = Now()::DATE
        AND SD."UserId" = (
            SELECT
                "UserId"
            FROM
                "ShiftDistribute"
            WHERE
                "DistributeDate" = Now()::DATE
                AND "SalePointId" = (ele ->> 'SalePointId')::INT
            LIMIT 1
        )
    GROUP BY
        SD."SalePointId",
        SD."UserId",
        SD."ShiftId"
), tmpp1 AS (
    SELECT *
    FROM "GroupSalePoint" GSP
    ORDER BY GSP."GroupSalePointId"
), tmpp2 AS (
    SELECT
        GSP."UserId"
    FROM
        "tmpp1" GSP
    LEFT JOIN tmpp T ON T."SalePointId" = ANY (GSP."SalePointIds")
    LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
    LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
    WHERE
        UR."UserTitleId" = 2
        AND SD."DistributeDate"::DATE =Now()::DATE
    GROUP BY
        GSP."UserId",
        GSP."GroupSalePointId",
        GSP."Option"
    ORDER BY
        GSP."Option" ASC,
        GSP."GroupSalePointId" DESC
    LIMIT 1
)
-- Gán kết quả của truy vấn SELECT cho biến
SELECT INTO tmp_user_id T."UserId"
FROM tmpp2 T
GROUP BY T."UserId";
				INSERT INTO "ScratchcardConfirm"(
					"TotalReceived",
					"TotalRemaining",
					"SalePointId",
					"LastActionBy",
					"LastActionByName",
					"LotteryChannelId"
				) VALUES (
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					(ele ->> 'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					(ele ->> 'LotteryChannelId')::INT
				);
					INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
						"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					NOW()::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					-1,
					tmp_user_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, TRUE)
				);
			ELSE 

	WITH tmpp AS (
    SELECT
        SD."UserId",
        SD."SalePointId",
        SD."ShiftId"
    FROM
        "ShiftDistribute" SD
    WHERE
        SD."DistributeDate"::DATE = Now()::DATE
        AND SD."UserId" = (
            SELECT
                "UserId"
            FROM
                "ShiftDistribute"
            WHERE
                "DistributeDate" = Now()::DATE
                AND "SalePointId" = (ele ->> 'SalePointId')::INT
            LIMIT 1
        )
    GROUP BY
        SD."SalePointId",
        SD."UserId",
        SD."ShiftId"
), tmpp1 AS (
    SELECT *
    FROM "GroupSalePoint" GSP
    ORDER BY GSP."GroupSalePointId"
), tmpp2 AS (
    SELECT
        GSP."UserId"
    FROM
        "tmpp1" GSP
    LEFT JOIN tmpp T ON T."SalePointId" = ANY (GSP."SalePointIds")
    LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
    LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
    WHERE
        UR."UserTitleId" = 2
        AND SD."DistributeDate"::DATE =Now()::DATE
    GROUP BY
        GSP."UserId",
        GSP."GroupSalePointId",
        GSP."Option"
    ORDER BY
        GSP."Option" ASC,
        GSP."GroupSalePointId" DESC
    LIMIT 1
)
-- Gán kết quả của truy vấn SELECT cho biến
SELECT INTO tmp_user_id T."UserId"
FROM tmpp2 T
GROUP BY T."UserId";
				UPDATE "ScratchcardConfirm" S
				SET
					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"LastActionBy" = p_action_by,
					"LastActionByName" = p_action_by_name,
					"LastActionDate" = NOW()
				WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
						INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
						"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					NOW()::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					-1,
					tmp_user_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, TRUE)
				)
				returning "TransitionId"  INTO new_transition_id;
			END IF;
			
			INSERT INTO "ScratchcardLog"(
				"SalePointId",
				"TotalReceived",
				"ActionBy",
				"ActionByName",
				"LotteryChannelId",
				"TransitionId"
			) VALUES(
				(ele ->> 'SalePointId')::INT,
				(ele ->> 'TotalReceived')::INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'LotteryChannelId')::INT,
				new_transition_id
			);
		
			insert into "ScratchcardFull_CheckLog" select * from  "ScratchcardFull" WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
			UPDATE "ScratchcardFull" 
			SET 
				"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name,
				"LastActionDate" = NOW()
			WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
		END LOOP;
			
		v_mess := 'Thao tác thành công';
	ELSE 
		v_mess := 'Thao tác không thành công';
		v_id := -1;
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;

-- DECLARE
-- 	v_id INT := 1;
-- 	v_mess TEXT;
-- 	v_data JSON := p_data::JSON;
-- 	ele JSON;
-- 	v_total INT8 := 0;
-- 	v_store INT;
-- 	v_check INT := 0;
-- BEGIN
	
-- 	CREATE TEMP TABLE tmpTable (
-- 		"LotteryChannelId" INT,
-- 		"TotalReceived" INT
-- 	)
-- 	ON COMMIT DROP;
	
-- 	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
-- 		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
-- 	END LOOP;
	
-- 	WITH tmp AS (
-- 		SELECT 
-- 			"LotteryChannelId",
-- 			"TotalRemaining"
-- 		FROM "ScratchcardFull"
-- 		WHERE "AgencyId" = 0
-- 	),
-- 	tmp2 AS (
-- 		SELECT
-- 			T."LotteryChannelId",
-- 			SUM(T."TotalReceived") AS "TotalReceived"
-- 		FROM tmpTable T
-- 		GROUP BY T."LotteryChannelId"
-- 	)
	
-- 	SELECT 
-- 		COUNT(1) INTO v_check
-- 	FROM tmp2 T
-- 		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
-- 	WHERE T."TotalReceived" > X."TotalRemaining";
	

-- 	IF v_check = 0 THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 			IF NOT EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
				
-- 				INSERT INTO "Scratchcard"(
-- 					"TotalReceived",
-- 					"TotalRemaining",
-- 					"SalePointId",
-- 					"LastActionBy",
-- 					"LastActionByName",
-- 					"LotteryChannelId"
-- 				) VALUES (
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					(ele ->> 'SalePointId')::INT,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					(ele ->> 'LotteryChannelId')::INT
-- 				);
					
				
-- 			ELSE 

-- 				UPDATE "Scratchcard" S
-- 				SET
-- 					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					"LastActionBy" = p_action_by,
-- 					"LastActionByName" = p_action_by_name,
-- 					"LastActionDate" = NOW()
-- 				WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
-- 			END IF;
			
-- 			INSERT INTO "ScratchcardLog"(
-- 				"SalePointId",
-- 				"TotalReceived",
-- 				"ActionBy",
-- 				"ActionByName",
-- 				"LotteryChannelId"
-- 			) VALUES(
-- 				(ele ->> 'SalePointId')::INT,
-- 				(ele ->> 'TotalReceived')::INT,
-- 				p_action_by,
-- 				p_action_by_name,
-- 				(ele ->> 'LotteryChannelId')::INT
-- 			);
		
-- 			insert into "ScratchcardFull_CheckLog" select * from  "ScratchcardFull" WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
-- 			UPDATE "ScratchcardFull" 
-- 			SET 
-- 				"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 				"LastActionBy" = p_action_by,
-- 				"LastActionByName" = p_action_by_name,
-- 				"LastActionDate" = NOW()
-- 			WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
-- 		END LOOP;
			
-- 		v_mess := 'Thao tác thành công';
-- 	ELSE 
-- 		v_mess := 'Thao tác không thành công';
-- 		v_id := -1;
-- 	END IF;
	
	
-- 	RETURN QUERY 
-- 	SELECT v_id, v_mess;
	
-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN				
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
		
-- 		RETURN QUERY 
-- 		SELECT 	v_id, v_mess;
-- 	END;
	
-- END;
$$;


ALTER FUNCTION public.crm_activity_distribute_scratchcard_for_sales_point(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_distribute_scratchcard_for_sales_point_bk(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_scratchcard_for_sales_point_bk(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_total INT8 := 0;
	v_store INT;
	v_check INT := 0;
BEGIN
	
	CREATE TEMP TABLE tmpTable (
		"LotteryChannelId" INT,
		"TotalReceived" INT
	)
	ON COMMIT DROP;
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
	END LOOP;
	
	WITH tmp AS (
		SELECT 
			"LotteryChannelId",
			"TotalRemaining"
		FROM "ScratchcardFull"
		WHERE "AgencyId" = 0
	),
	tmp2 AS (
		SELECT
			T."LotteryChannelId",
			SUM(T."TotalReceived") AS "TotalReceived"
		FROM tmpTable T
		GROUP BY T."LotteryChannelId"
	)
	
	SELECT 
		COUNT(1) INTO v_check
	FROM tmp2 T
		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
	WHERE T."TotalReceived" > X."TotalRemaining";
	

	IF v_check = 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
				
				INSERT INTO "Scratchcard"(
					"TotalReceived",
					"TotalRemaining",
					"SalePointId",
					"LastActionBy",
					"LastActionByName",
					"LotteryChannelId"
				) VALUES (
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					(ele ->> 'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					(ele ->> 'LotteryChannelId')::INT
				);
				
			ELSE 

				UPDATE "Scratchcard" S
				SET
					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"LastActionBy" = p_action_by,
					"LastActionByName" = p_action_by_name,
					"LastActionDate" = NOW()
				WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
					
			END IF;
			
			INSERT INTO "ScratchcardLog"(
				"SalePointId",
				"TotalReceived",
				"ActionBy",
				"ActionByName",
				"LotteryChannelId"
			) VALUES(
				(ele ->> 'SalePointId')::INT,
				(ele ->> 'TotalReceived')::INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'LotteryChannelId')::INT
			);
		
			insert into "ScratchcardFull_CheckLog" select * from  "ScratchcardFull" WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
			UPDATE "ScratchcardFull" 
			SET 
				"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name,
				"LastActionDate" = NOW()
			WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
		END LOOP;
			
		v_mess := 'Thao tác thành công';
	ELSE 
		v_mess := 'Thao tác không thành công';
		v_id := -1;
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_distribute_scratchcard_for_sales_point_bk(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_distribute_scratchcard_for_sales_point_v2(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_scratchcard_for_sales_point_v2(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_total INT8 := 0;
	v_store INT;
	v_check INT := 0;
	tmp_user_id INT;
BEGIN
	
	CREATE TEMP TABLE tmpTable (
		"LotteryChannelId" INT,
		"TotalReceived" INT
	)
	ON COMMIT DROP;
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
	END LOOP;
	
	WITH tmp AS (
		SELECT 
			"LotteryChannelId",
			"TotalRemaining"
		FROM "ScratchcardFull"
		WHERE "AgencyId" = 0
	),
	tmp2 AS (
		SELECT
			T."LotteryChannelId",
			SUM(T."TotalReceived") AS "TotalReceived"
		FROM tmpTable T
		GROUP BY T."LotteryChannelId"
	)
	
	SELECT 
		COUNT(1) INTO v_check
	FROM tmp2 T
		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
	WHERE T."TotalReceived" > X."TotalRemaining";
	

	IF v_check = 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "ScratchcardConfirm" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
												WITH tmpp AS (
    SELECT
        SD."UserId",
        SD."SalePointId",
        SD."ShiftId"
    FROM
        "ShiftDistribute" SD
    WHERE
        SD."DistributeDate"::DATE = Now()::DATE
        AND SD."UserId" = (
            SELECT
                "UserId"
            FROM
                "ShiftDistribute"
            WHERE
                "DistributeDate" = Now()::DATE
                AND "SalePointId" = (ele ->> 'SalePointId')::INT
            LIMIT 1
        )
    GROUP BY
        SD."SalePointId",
        SD."UserId",
        SD."ShiftId"
), tmpp1 AS (
    SELECT *
    FROM "GroupSalePoint" GSP
    ORDER BY GSP."GroupSalePointId"
), tmpp2 AS (
    SELECT
        GSP."UserId"
    FROM
        "tmpp1" GSP
    LEFT JOIN tmpp T ON T."SalePointId" = ANY (GSP."SalePointIds")
    LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
    LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
    WHERE
        UR."UserTitleId" = 2
        AND SD."DistributeDate"::DATE =Now()::DATE
    GROUP BY
        GSP."UserId",
        GSP."GroupSalePointId",
        GSP."Option"
    ORDER BY
        GSP."Option" ASC,
        GSP."GroupSalePointId" DESC
    LIMIT 1
)
-- Gán kết quả của truy vấn SELECT cho biến
SELECT INTO tmp_user_id T."UserId"
FROM tmpp2 T
GROUP BY T."UserId";
				INSERT INTO "ScratchcardConfirm"(
					"TotalReceived",
					"TotalRemaining",
					"SalePointId",
					"LastActionBy",
					"LastActionByName",
					"LotteryChannelId"
				) VALUES (
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					(ele ->> 'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					(ele ->> 'LotteryChannelId')::INT
				);
					INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
						"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					NOW()::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					-1,
					tmp_user_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, TRUE)
				);
			ELSE 

	WITH tmpp AS (
    SELECT
        SD."UserId",
        SD."SalePointId",
        SD."ShiftId"
    FROM
        "ShiftDistribute" SD
    WHERE
        SD."DistributeDate"::DATE = Now()::DATE
        AND SD."UserId" = (
            SELECT
                "UserId"
            FROM
                "ShiftDistribute"
            WHERE
                "DistributeDate" = Now()::DATE
                AND "SalePointId" = (ele ->> 'SalePointId')::INT
            LIMIT 1
        )
    GROUP BY
        SD."SalePointId",
        SD."UserId",
        SD."ShiftId"
), tmpp1 AS (
    SELECT *
    FROM "GroupSalePoint" GSP
    ORDER BY GSP."GroupSalePointId"
), tmpp2 AS (
    SELECT
        GSP."UserId"
    FROM
        "tmpp1" GSP
    LEFT JOIN tmpp T ON T."SalePointId" = ANY (GSP."SalePointIds")
    LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
    LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
    WHERE
        UR."UserTitleId" = 2
        AND SD."DistributeDate"::DATE =Now()::DATE
    GROUP BY
        GSP."UserId",
        GSP."GroupSalePointId",
        GSP."Option"
    ORDER BY
        GSP."Option" ASC,
        GSP."GroupSalePointId" DESC
    LIMIT 1
)
-- Gán kết quả của truy vấn SELECT cho biến
SELECT INTO tmp_user_id T."UserId"
FROM tmpp2 T
GROUP BY T."UserId";
				UPDATE "ScratchcardConfirm" S
				SET
					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"LastActionBy" = p_action_by,
					"LastActionByName" = p_action_by_name,
					"LastActionDate" = NOW()
				WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
						INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
						"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					NOW()::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					(ele ->> 'SalePointId')::INT,
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					-1,
					tmp_user_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, TRUE)
				);
			END IF;
			
			INSERT INTO "ScratchcardLog"(
				"SalePointId",
				"TotalReceived",
				"ActionBy",
				"ActionByName",
				"LotteryChannelId"
			) VALUES(
				(ele ->> 'SalePointId')::INT,
				(ele ->> 'TotalReceived')::INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'LotteryChannelId')::INT
			);
		
			insert into "ScratchcardFull_CheckLog" select * from  "ScratchcardFull" WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
			UPDATE "ScratchcardFull" 
			SET 
				"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name,
				"LastActionDate" = NOW()
			WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
		END LOOP;
			
		v_mess := 'Thao tác thành công';
	ELSE 
		v_mess := 'Thao tác không thành công';
		v_id := -1;
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;

-- DECLARE
-- 	v_id INT := 1;
-- 	v_mess TEXT;
-- 	v_data JSON := p_data::JSON;
-- 	ele JSON;
-- 	v_total INT8 := 0;
-- 	v_store INT;
-- 	v_check INT := 0;
-- BEGIN
	
-- 	CREATE TEMP TABLE tmpTable (
-- 		"LotteryChannelId" INT,
-- 		"TotalReceived" INT
-- 	)
-- 	ON COMMIT DROP;
	
-- 	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
-- 		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
-- 	END LOOP;
	
-- 	WITH tmp AS (
-- 		SELECT 
-- 			"LotteryChannelId",
-- 			"TotalRemaining"
-- 		FROM "ScratchcardFull"
-- 		WHERE "AgencyId" = 0
-- 	),
-- 	tmp2 AS (
-- 		SELECT
-- 			T."LotteryChannelId",
-- 			SUM(T."TotalReceived") AS "TotalReceived"
-- 		FROM tmpTable T
-- 		GROUP BY T."LotteryChannelId"
-- 	)
	
-- 	SELECT 
-- 		COUNT(1) INTO v_check
-- 	FROM tmp2 T
-- 		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
-- 	WHERE T."TotalReceived" > X."TotalRemaining";
	

-- 	IF v_check = 0 THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 			IF NOT EXISTS (SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
				
-- 				INSERT INTO "Scratchcard"(
-- 					"TotalReceived",
-- 					"TotalRemaining",
-- 					"SalePointId",
-- 					"LastActionBy",
-- 					"LastActionByName",
-- 					"LotteryChannelId"
-- 				) VALUES (
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					(ele ->> 'SalePointId')::INT,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					(ele ->> 'LotteryChannelId')::INT
-- 				);
					
				
-- 			ELSE 

-- 				UPDATE "Scratchcard" S
-- 				SET
-- 					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 					"LastActionBy" = p_action_by,
-- 					"LastActionByName" = p_action_by_name,
-- 					"LastActionDate" = NOW()
-- 				WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
-- 			END IF;
			
-- 			INSERT INTO "ScratchcardLog"(
-- 				"SalePointId",
-- 				"TotalReceived",
-- 				"ActionBy",
-- 				"ActionByName",
-- 				"LotteryChannelId"
-- 			) VALUES(
-- 				(ele ->> 'SalePointId')::INT,
-- 				(ele ->> 'TotalReceived')::INT,
-- 				p_action_by,
-- 				p_action_by_name,
-- 				(ele ->> 'LotteryChannelId')::INT
-- 			);
		
-- 			insert into "ScratchcardFull_CheckLog" select * from  "ScratchcardFull" WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
-- 			UPDATE "ScratchcardFull" 
-- 			SET 
-- 				"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 				"LastActionBy" = p_action_by,
-- 				"LastActionByName" = p_action_by_name,
-- 				"LastActionDate" = NOW()
-- 			WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
-- 		END LOOP;
			
-- 		v_mess := 'Thao tác thành công';
-- 	ELSE 
-- 		v_mess := 'Thao tác không thành công';
-- 		v_id := -1;
-- 	END IF;
	
	
-- 	RETURN QUERY 
-- 	SELECT v_id, v_mess;
	
-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN				
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
		
-- 		RETURN QUERY 
-- 		SELECT 	v_id, v_mess;
-- 	END;
	
-- END;
$$;


ALTER FUNCTION public.crm_activity_distribute_scratchcard_for_sales_point_v2(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_distribute_scratchcard_for_sub_agency(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_scratchcard_for_sub_agency(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_total INT8 := 0;
	v_store INT;
	v_check INT := 0;
BEGIN
	
	CREATE TEMP TABLE tmpTable (
		"LotteryChannelId" INT,
		"TotalReceived" INT
	)
	ON COMMIT DROP;
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
	END LOOP;
	
	WITH tmp AS (
		SELECT 
			"LotteryChannelId",
			"TotalRemaining"
		FROM "ScratchcardFull"
		WHERE "AgencyId" = 0
	),
	tmp2 AS (
		SELECT
			T."LotteryChannelId",
			SUM(T."TotalReceived") AS "TotalReceived"
		FROM tmpTable T
		GROUP BY T."LotteryChannelId"
	)
	
	SELECT 
		COUNT(1) INTO v_check
	FROM tmp2 T
		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
	WHERE T."TotalReceived" > X."TotalRemaining";
	

	IF v_check = 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "ScratchcardForSubAgency" WHERE "AgencyId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
				
				INSERT INTO "ScratchcardForSubAgency"(
					"TotalReceived",
					"TotalRemaining",
					"AgencyId",
					"LastActionBy",
					"LastActionByName",
					"LotteryChannelId"
				) VALUES (
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					(ele ->> 'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					(ele ->> 'LotteryChannelId')::INT
				);
				UPDATE "ScratchcardFull"
				SET
					"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0)
				WHERE "LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT;
			ELSE 

				UPDATE "ScratchcardForSubAgency" S
				SET
					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"LastActionBy" = p_action_by,
					"LastActionByName" = p_action_by_name,
					"LastActionDate" = NOW()
				WHERE S."AgencyId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				UPDATE "ScratchcardFull"
				SET
					"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0)
				WHERE "LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT;
			END IF;
			
-- 			INSERT INTO "ScratchcardLogForSubAgency"(
-- 				"SalePointId",
-- 				"TotalReceived",
-- 				"ActionBy",
-- 				"ActionByName",
-- 				"LotteryChannelId"
-- 			) VALUES(
-- 				(ele ->> 'SalePointId')::INT,
-- 				(ele ->> 'TotalReceived')::INT,
-- 				p_action_by,
-- 				p_action_by_name,
-- 				(ele ->> 'LotteryChannelId')::INT
-- 			);
			
-- 			UPDATE "ScratchcardFull" 
-- 			SET 
-- 				"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0),
-- 				"LastActionBy" = p_action_by,
-- 				"LastActionByName" = p_action_by_name,
-- 				"LastActionDate" = NOW()
-- 			WHERE "AgencyId" = 0 AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT;
			
		END LOOP;
			
		v_mess := 'Thao tác thành công';
	ELSE 
		v_mess := 'Thao tác không thành công';
		v_id := -1;
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_distribute_scratchcard_for_sub_agency(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_distribute_scratchcard_for_sub_agency_v2(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_distribute_scratchcard_for_sub_agency_v2(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
	v_total INT8 := 0;
	v_store INT;
	v_check INT := 0;
BEGIN
	
	CREATE TEMP TABLE tmpTable (
		"LotteryChannelId" INT,
		"TotalReceived" INT
	)
	ON COMMIT DROP;
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		INSERT INTO tmpTable("LotteryChannelId", "TotalReceived")
		VALUES ((ele ->> 'LotteryChannelId')::INT, COALESCE((ele ->> 'TotalReceived')::INT, 0));
	END LOOP;
	
	WITH tmp AS (
		SELECT 
			"LotteryChannelId",
			"TotalRemaining"
		FROM "ScratchcardFull"
		WHERE "AgencyId" = 0
	),
	tmp2 AS (
		SELECT
			T."LotteryChannelId",
			SUM(T."TotalReceived") AS "TotalReceived"
		FROM tmpTable T
		GROUP BY T."LotteryChannelId"
	)
	
	SELECT 
		COUNT(1) INTO v_check
	FROM tmp2 T
		JOIN tmp X ON T."LotteryChannelId" = X."LotteryChannelId"
	WHERE T."TotalReceived" > X."TotalRemaining";
	

	IF v_check = 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF NOT EXISTS (SELECT 1 FROM "ScratchcardForSubAgency" WHERE "AgencyId" = (ele ->> 'SalePointId')::INT AND "LotteryChannelId" =(ele ->> 'LotteryChannelId')::INT) THEN	
				
				INSERT INTO "ScratchcardForSubAgency"(
					"TotalReceived",
					"TotalRemaining",
					"AgencyId",
					"LastActionBy",
					"LastActionByName",
					"LotteryChannelId"
				) VALUES (
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					COALESCE((ele ->> 'TotalReceived')::INT, 0),
					(ele ->> 'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					(ele ->> 'LotteryChannelId')::INT
				);
				UPDATE "ScratchcardFull"
				SET
					"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0)
				WHERE "LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT;
			ELSE 

				UPDATE "ScratchcardForSubAgency" S
				SET
					"TotalReceived" = S."TotalReceived" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"TotalRemaining" = S."TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
					"LastActionBy" = p_action_by,
					"LastActionByName" = p_action_by_name,
					"LastActionDate" = NOW()
				WHERE S."AgencyId" = (ele ->> 'SalePointId')::INT AND S."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				UPDATE "ScratchcardFull"
				SET
					"TotalRemaining" = "TotalRemaining" - COALESCE((ele ->> 'TotalReceived')::INT, 0)
				WHERE "LotteryChannelId" =  (ele ->> 'LotteryChannelId')::INT;
			END IF;
			
			INSERT INTO "ScratchcardLogForSubAgency"(
				"SalePointId",
 				"TotalReceived",
				"ActionBy",
				"ActionByName",
				"LotteryChannelId"
			) VALUES(
				(ele ->> 'SalePointId')::INT,
				(ele ->> 'TotalReceived')::INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'LotteryChannelId')::INT
			);
			
		END LOOP;
			
		v_mess := 'Thao tác thành công';
	ELSE 
		v_mess := 'Thao tác không thành công';
		v_id := -1;
	END IF;
	
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_distribute_scratchcard_for_sub_agency_v2(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_get_all_report_money_in_a_day(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_all_report_money_in_a_day(p_date timestamp without time zone) RETURNS TABLE("ReturnMoneyId" integer, "ShiftDistributeId" integer, "SalePointId" integer, "ActionDate" date, "ShiftId" integer, "TotalMoneyInADay" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT
		RM."ReturnMoneyId",
		RM."ShiftDistributeId",
		RM."SalePointId",
		RM."ActionDate",
		RM."ShiftId",
		RM."TotalMoneyInDay"
	FROM "ReportMoney" RM
	WHERE RM."ActionDate" = p_date::DATE;
END;
$$;


ALTER FUNCTION public.crm_activity_get_all_report_money_in_a_day(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_data_distribute_for_sales_point(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_data_distribute_for_sales_point(p_lottery_date timestamp without time zone) RETURNS TABLE("AgencyId" integer, "SalePointId" integer, "LotteryChannelId" integer, "TotalReceived" integer, "TotalDupReceived" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN	
	
	RETURN QUERY 
	SELECT 
		IL."AgencyId",
		IL."SalePointId",
		IL."LotteryChannelId",
		COALESCE(IL."TotalReceived", 0) AS "TotalReceived",
		COALESCE(IL."TotalDupReceived", 0) AS "TotalDupReceived"
	FROM "InventoryLog" IL
	WHERE IL."LotteryDate" = p_lottery_date::DATE;
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_data_distribute_for_sales_point(p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_data_distribute_for_sup_agency(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_data_distribute_for_sup_agency(p_date timestamp without time zone) RETURNS TABLE("AgencyId" integer, "SubAgencyId" integer, "SubAgencyName" character varying, "LotteryChannelId" integer, "TotalReceived" bigint, "TotalDupReceived" bigint, "TotalRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN	
	
	RETURN QUERY 
	SELECT 
		IL."AgencyId",
		IL."SupAgencyId" as "SubAgencyId",
		SA."AgencyName",
		IL."LotteryChannelId",
		COALESCE(IL."TotalReceived", 0) AS "TotalReceived",
		COALESCE(IL."TotalDupReceived", 0) AS "TotalDupReceived",
		COALESCE(IL."TotalRemaining",0) AS "TotalRemaining"
	FROM "InventoryForSupAgency" IL
	LEFT JOIN "SubAgency" SA ON SA."AgencyId" = IL."SupAgencyId"
	WHERE IL."Date"::DATE = p_date::DATE;
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_data_distribute_for_sup_agency(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_data_distribute_scratchcard_for_sale_point(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_data_distribute_scratchcard_for_sale_point() RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "TotalReceived" integer, "TotalRemaining" integer, "LotteryChannelId" integer, "LotteryChannelName" character varying, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		S."SalePointId",
		SP."SalePointName",
		S."TotalReceived",
		S."TotalRemaining",
		S."LotteryChannelId",
		LC."LotteryChannelName",
		LC."ShortName"
	FROM "Scratchcard" S
		JOIN "SalePoint" SP ON SP."SalePointId" = S."SalePointId"
		JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
	ORDER BY S."SalePointId", LC."LotteryChannelTypeId", LC."LotteryChannelId";
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_data_distribute_scratchcard_for_sale_point() OWNER TO postgres;

--
-- Name: crm_activity_get_data_distribute_scratchcard_for_sub_agency(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_data_distribute_scratchcard_for_sub_agency() RETURNS TABLE("AgencyId" integer, "SalePointName" character varying, "TotalReceived" integer, "TotalRemaining" integer, "LotteryChannelId" integer, "LotteryChannelName" character varying, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		S."AgencyId",
		SP."AgencyName",
		S."TotalReceived",
		S."TotalRemaining",
		S."LotteryChannelId",
		LC."LotteryChannelName",
		LC."ShortName"
	FROM "ScratchcardForSubAgency" S
		JOIN "SubAgency" SP ON SP."AgencyId" = S."AgencyId"
		JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
	ORDER BY S."AgencyId", LC."LotteryChannelTypeId", LC."LotteryChannelId";
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_data_distribute_scratchcard_for_sub_agency() OWNER TO postgres;

--
-- Name: crm_activity_get_data_receive_from_agency(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_data_receive_from_agency(p_lottery_date timestamp without time zone) RETURNS TABLE("AgencyId" integer, "LotteryChannelId" integer, "TotalReceived" integer, "TotalRemaining" integer, "IsBlocked" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN	
	
	RETURN QUERY 
	SELECT 
		I."AgencyId",
		I."LotteryChannelId",
		I."TotalReceived",
		I."TotalRemaining",
		I."LotteryDate" < NOW()::DATE AS "IsBlocked"
	FROM "InventoryFull" I
	WHERE I."LotteryDate" = p_lottery_date::DATE;
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_data_receive_from_agency(p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_data_receive_scratchcard_from_agency(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_data_receive_scratchcard_from_agency(p_date timestamp without time zone) RETURNS TABLE("AgencyId" integer, "TotalReceived" bigint, "LotteryChannelId" integer, "LotteryChannelName" character varying, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN	
	
	RETURN QUERY 
		WITH tmp AS (
		SELECT 
			SF."AgencyId",
			SUM(SF."TotalReceived") AS "TotalReceived",
			SF."LotteryChannelId",
			LC."LotteryChannelName",
			LC."ShortName"
		FROM "ScratchcardFullLog" SF
			JOIN "LotteryChannel" LC ON SF."LotteryChannelId" = LC."LotteryChannelId"
		WHERE SF."ActionDate"::DATE = p_date::DATE
		GROUP BY 
			SF."AgencyId",
			SF."LotteryChannelId",
			LC."LotteryChannelName",
			LC."ShortName"
		ORDER BY SF."AgencyId"
	)
	SELECT 
		T."AgencyId",
		T."TotalReceived",
		T."LotteryChannelId",
		T."LotteryChannelName",
		T."ShortName"
	FROM tmp T
		JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
	ORDER BY T."AgencyId", LC."LotteryChannelTypeId", T."LotteryChannelId";
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_data_receive_scratchcard_from_agency(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_inventory_log(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_inventory_log(p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "TotalReceived" integer, "TotalRemaining" integer, "TotalDupReceived" integer, "TotalDupRemaining" integer, "TransitionLog" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
BEGIN

	RETURN QUERY 
	SELECT
		SP."SalePointId",
		SP."SalePointName",
		I."LotteryDate",
		I."LotteryChannelId",
		LC."LotteryChannelName",
		I."TotalReceived",
		I."TotalRemaining",
		I."TotalDupReceived",
		I."TotalDupRemaining",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					T."LotteryDate",
					T."LotteryChannelId",
					LCC."LotteryChannelName",
					T."FromSalePointId",
					(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
					T."ToSalePointId",
					(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
					T."TotalTrans",
					T."TotalTransDup",
					T."ActionBy",
					T."ActionByName",
					T."TransitionTypeId",
					T."TransitionDate",
					T."ManagerId",
					U."FullName" AS "ManagerName"
				FROM "Transition" T
					JOIN "LotteryChannel" LCC ON LCC."LotteryChannelId" = T."LotteryChannelId"
					LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
				WHERE T."LotteryDate" = p_date::DATE AND (T."FromSalePointId" = SP."SalePointId" OR T."ToSalePointId" = SP."SalePointId")
					AND T."TransitionTypeId" <> 3 AND T."ConfirmStatusId" = 2 and  T."ShiftDistributeId" <> -1
				ORDER BY T."TransitionDate" DESC
			) r
		)::TEXT AS "TransitionLog"
	FROM "SalePoint" SP
		LEFT JOIN "Inventory" I ON I."SalePointId" = SP."SalePointId" AND I."LotteryDate" = p_date::DATE 
		LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = I."LotteryChannelId"
	WHERE (I."SalePointId" IS NULL OR I."SalePointId" <> 0)  AND SP."IsActive" IS TRUE
	ORDER BY SP."SalePointId", LC."LotteryChannelTypeId";
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_inventory_log(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_list_lottery_for_return(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_list_lottery_for_return(p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("DataReceived" text, "DataForReturn" text)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	--Lấy số vé chia vào ban đầu
	WITH tmp AS (
		SELECT 
			I."AgencyId",
			I."LotteryChannelId",
			I."TotalReceived",
			I."LotteryDate",
			FALSE AS "IsScratchcard"
		FROM "InventoryFull" I
		WHERE I."LotteryDate" = p_date::DATE
		UNION
		SELECT 
			SF."AgencyId",
			SF."LotteryChannelId",
			SUM(SF."TotalReceived") AS "TotalReceived",
			NULL AS "LotteryDate",
			TRUE AS "IsScratchcard"
		FROM "ScratchcardFullLog" SF
		GROUP BY 
			SF."AgencyId",
			SF."LotteryChannelId"
	),
	-- Lấy danh sách chuyển nhận
	tmp2 AS(
		SELECT 
			T."LotteryChannelId",
			T."LotteryDate",
			T."TransitionTypeId",
			T."TotalTrans",
			T."TotalTransDup",
			T."ToAgencyId",
			T."IsScratchcard"
		FROM "Transition" T
		WHERE T."ConfirmStatusId" = 2
			AND (T."IsScratchcard" IS TRUE OR T."LotteryDate" = p_date::DATE) 
			AND T."IsDeleted" IS FALSE AND (T."ShiftDistributeId"<>-1 OR T."ShiftDistributeId" IS NULL)
	),
	-- Tính số vé còn lại có thể trả ế trong chuyển nhận
	tmp3 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "DataForReturn"
		FROM (
			SELECT 
				T."LotteryChannelId",
				T."IsScratchcard",
				SUM(CASE WHEN T."TransitionTypeId" = 1 THEN "TotalTrans" ELSE - "TotalTrans" END) AS "TotalTrans",
				SUM(CASE WHEN T."TransitionTypeId" = 1 THEN "TotalTransDup" ELSE - "TotalTransDup" END) AS "TotalTransDup"
			FROM tmp2 T
			GROUP BY
				T."LotteryChannelId",
				T."IsScratchcard"
			ORDER BY T."LotteryChannelId"
		)R
	),
	--Tính số vé đã trả 
	tmp4 AS (
		SELECT
			T."ToAgencyId" AS "AgencyId",
			T."LotteryChannelId",
			SUM(T."TotalTrans") AS "TotalTrans",
			SUM(T."TotalTransDup") AS "TotalTransDup"
		FROM tmp2 T
		WHERE T."ToAgencyId" IS NOT NULL AND T."TransitionTypeId" = 3
		GROUP BY 
			T."ToAgencyId",
			T."LotteryChannelId"
	), 
	-- Tính số vé còn lại có thể trả cho đại lý
	tmp5 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "DataReceived"
		FROM (
			SELECT 
				C."AgencyId",
				C."LotteryChannelId",
				C."TotalReceived",
				(COALESCE(R."TotalTrans", 0) + COALESCE(R."TotalTransDup", 0)) AS "TotalHaveReturned",
				(C."TotalReceived" - COALESCE(R."TotalTrans", 0) - COALESCE(R."TotalTransDup", 0)) AS "TotalCanReturn",
				C."LotteryDate",
				C."IsScratchcard"	
			FROM tmp C
				LEFT JOIN tmp4 R ON C."AgencyId" = R."AgencyId" AND C."LotteryChannelId" = R."LotteryChannelId"
			ORDER BY C."AgencyId", C."LotteryChannelId"
		)R
	)
	SELECT 
		tmp5."DataReceived",
		tmp3."DataForReturn"
	FROM tmp5 JOIN tmp3 ON TRUE;
		
END;









-- BEGIN
-- 	RETURN QUERY
-- 	--Lấy số vé chia vào ban đầu
-- 	WITH tmp AS (
-- 		SELECT 
-- 			I."AgencyId",
-- 			I."LotteryChannelId",
-- 			I."TotalReceived",
-- 			I."LotteryDate",
-- 			FALSE AS "IsScratchcard"
-- 		FROM "InventoryFull" I
-- 		WHERE I."LotteryDate" = p_date::DATE
-- 		UNION
-- 		SELECT 
-- 			SF."AgencyId",
-- 			SF."LotteryChannelId",
-- 			SUM(SF."TotalReceived") AS "TotalReceived",
-- 			NULL AS "LotteryDate",
-- 			TRUE AS "IsScratchcard"
-- 		FROM "ScratchcardFullLog" SF
-- 		GROUP BY 
-- 			SF."AgencyId",
-- 			SF."LotteryChannelId"
-- 	),
-- 	-- Lấy danh sách chuyển nhận
-- 	tmp2 AS(
-- 		SELECT 
-- 			T."LotteryChannelId",
-- 			T."LotteryDate",
-- 			T."TransitionTypeId",
-- 			T."TotalTrans",
-- 			T."TotalTransDup",
-- 			T."ToAgencyId",
-- 			T."IsScratchcard"
-- 		FROM "Transition" T
-- 		WHERE T."ConfirmStatusId" = 2
-- 			AND (T."IsScratchcard" IS TRUE OR T."LotteryDate" = p_date::DATE) AND T."ShiftDistributeId"<>-1 OR T."ShiftDistributeId" IS NULL
-- 			AND T."IsDeleted" IS FALSE
-- 	),
-- 	-- Tính số vé còn lại có thể trả ế trong chuyển nhận
-- 	tmp3 AS (
-- 		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "DataForReturn"
-- 		FROM (
-- 			SELECT 
-- 				T."LotteryChannelId",
-- 				T."IsScratchcard",
-- 				SUM(CASE WHEN T."TransitionTypeId" = 1 THEN "TotalTrans" ELSE - "TotalTrans" END) AS "TotalTrans",
-- 				SUM(CASE WHEN T."TransitionTypeId" = 1 THEN "TotalTransDup" ELSE - "TotalTransDup" END) AS "TotalTransDup"
-- 			FROM tmp2 T
-- 			GROUP BY
-- 				T."LotteryChannelId",
-- 				T."IsScratchcard"
-- 			ORDER BY T."LotteryChannelId"
-- 		)R
-- 	),
-- 	--Tính số vé đã trả 
-- 	tmp4 AS (
-- 		SELECT
-- 			T."ToAgencyId" AS "AgencyId",
-- 			T."LotteryChannelId",
-- 			SUM(T."TotalTrans") AS "TotalTrans",
-- 			SUM(T."TotalTransDup") AS "TotalTransDup"
-- 		FROM tmp2 T
-- 		WHERE T."ToAgencyId" IS NOT NULL AND T."TransitionTypeId" = 3
-- 		GROUP BY 
-- 			T."ToAgencyId",
-- 			T."LotteryChannelId"
-- 	), 
-- 	-- Tính số vé còn lại có thể trả cho đại lý
-- 	tmp5 AS (
-- 		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "DataReceived"
-- 		FROM (
-- 			SELECT 
-- 				C."AgencyId",
-- 				C."LotteryChannelId",
-- 				C."TotalReceived",
-- 				(COALESCE(R."TotalTrans", 0) + COALESCE(R."TotalTransDup", 0)) AS "TotalHaveReturned",
-- 				(C."TotalReceived" - COALESCE(R."TotalTrans", 0) - COALESCE(R."TotalTransDup", 0)) AS "TotalCanReturn",
-- 				C."LotteryDate",
-- 				C."IsScratchcard"	
-- 			FROM tmp C
-- 				LEFT JOIN tmp4 R ON C."AgencyId" = R."AgencyId" AND C."LotteryChannelId" = R."LotteryChannelId"
-- 			ORDER BY C."AgencyId", C."LotteryChannelId"
-- 		)R
-- 	)
-- 	SELECT 
-- 		tmp5."DataReceived",
-- 		tmp3."DataForReturn"
-- 	FROM tmp5 JOIN tmp3 ON TRUE;
		
-- END;










-- -- Bản cũ


-- BEGIN
-- 	RETURN QUERY
-- 	--Lấy số vé chia vào ban đầu
-- 	WITH tmp AS (
-- 		SELECT 
-- 			I."AgencyId",
-- 			I."LotteryChannelId",
-- 			I."TotalReceived",
-- 			I."LotteryDate",
-- 			FALSE AS "IsScratchcard"
-- 		FROM "InventoryFull" I
-- 		WHERE I."LotteryDate" = p_date::DATE
-- 		UNION
-- 		SELECT 
-- 			SF."AgencyId",
-- 			SF."LotteryChannelId",
-- 			SUM(SF."TotalReceived") AS "TotalReceived",
-- 			NULL AS "LotteryDate",
-- 			TRUE AS "IsScratchcard"
-- 		FROM "ScratchcardFullLog" SF
-- 		GROUP BY 
-- 			SF."AgencyId",
-- 			SF."LotteryChannelId"
-- 	),
-- 	-- Lấy danh sách chuyển nhận
-- 	tmp2 AS(
-- 		SELECT 
-- 			T."LotteryChannelId",
-- 			T."LotteryDate",
-- 			T."TransitionTypeId",
-- 			T."TotalTrans",
-- 			T."TotalTransDup",
-- 			T."ToAgencyId",
-- 			T."IsScratchcard"
-- 		FROM "Transition" T
-- 		WHERE T."ConfirmStatusId" = 2
-- 			AND (T."IsScratchcard" IS TRUE OR T."LotteryDate" = p_date::DATE)
-- 			AND T."IsDeleted" IS FALSE
-- 	),
-- 	-- Tính số vé còn lại có thể trả ế trong chuyển nhận
-- 	tmp3 AS (
-- 		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "DataForReturn"
-- 		FROM (
-- 			SELECT 
-- 				T."LotteryChannelId",
-- 				T."IsScratchcard",
-- 				SUM(CASE WHEN T."TransitionTypeId" = 1 THEN "TotalTrans" ELSE - "TotalTrans" END) AS "TotalTrans",
-- 				SUM(CASE WHEN T."TransitionTypeId" = 1 THEN "TotalTransDup" ELSE - "TotalTransDup" END) AS "TotalTransDup"
-- 			FROM tmp2 T
-- 			GROUP BY
-- 				T."LotteryChannelId",
-- 				T."IsScratchcard"
-- 			ORDER BY T."LotteryChannelId"
-- 		)R
-- 	),
-- 	--Tính số vé đã trả 
-- 	tmp4 AS (
-- 		SELECT
-- 			T."ToAgencyId" AS "AgencyId",
-- 			T."LotteryChannelId",
-- 			SUM(T."TotalTrans") AS "TotalTrans",
-- 			SUM(T."TotalTransDup") AS "TotalTransDup"
-- 		FROM tmp2 T
-- 		WHERE T."ToAgencyId" IS NOT NULL AND T."TransitionTypeId" = 3
-- 		GROUP BY 
-- 			T."ToAgencyId",
-- 			T."LotteryChannelId"
-- 	), 
-- 	-- Tính số vé còn lại có thể trả cho đại lý
-- 	tmp5 AS (
-- 		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "DataReceived"
-- 		FROM (
-- 			SELECT 
-- 				C."AgencyId",
-- 				C."LotteryChannelId",
-- 				C."TotalReceived",
-- 				(COALESCE(R."TotalTrans", 0) + COALESCE(R."TotalTransDup", 0)) AS "TotalHaveReturned",
-- 				(C."TotalReceived" - COALESCE(R."TotalTrans", 0) - COALESCE(R."TotalTransDup", 0)) AS "TotalCanReturn",
-- 				C."LotteryDate",
-- 				C."IsScratchcard"	
-- 			FROM tmp C
-- 				LEFT JOIN tmp4 R ON C."AgencyId" = R."AgencyId" AND C."LotteryChannelId" = R."LotteryChannelId"
-- 			ORDER BY C."AgencyId", C."LotteryChannelId"
-- 		)R
-- 	)
-- 	SELECT 
-- 		tmp5."DataReceived",
-- 		tmp3."DataForReturn"
-- 	FROM tmp5 JOIN tmp3 ON TRUE;
		
-- END;
$$;


ALTER FUNCTION public.crm_activity_get_list_lottery_for_return(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_list_lottery_price_agency(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_list_lottery_price_agency(p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("AgencyId" integer, "AgencyName" character varying, "LotteryChannelId" integer, "LotteryChannelName" character varying, "IsScratchcard" boolean, "Price" numeric, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT 
			A."AgencyId",
			A."AgencyName"
		FROM "Agency" A
		WHERE A."IsDeleted" IS FALSE
	),
	tmp2 AS (
		SELECT 
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LC."IsScratchcard"
		FROM "LotteryChannel" LC
		WHERE LC."IsDeleted" = FALSE
		ORDER BY LC."LotteryChannelTypeId",
			LC."LotteryChannelId"
	),
	tmp3 AS (
		SELECT
			A."AgencyId",
			A."AgencyName",
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LC."IsScratchcard"
		FROM tmp A 
			JOIN tmp2 LC ON TRUE
	),
	tmp4 AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY LP."AgencyId", LP."LotteryChannelId" ORDER BY LP."CreatedDate" DESC) AS "Id",
			LP."AgencyId",
			LP."LotteryChannelId",
			LP."CreatedDate",
			LP."Price"
		FROM "LotteryPriceAgency" LP
		WHERE LP."IsDeleted" IS FALSE
			AND (p_date IS NULL OR LP."CreatedDate" <= p_date)
	)
	SELECT 
			A."AgencyId",
			A."AgencyName",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."IsScratchcard",
			P."Price",
			P."CreatedDate"
	FROM tmp3 A
		JOIN tmp4 P ON A."AgencyId" = P."AgencyId" AND A."LotteryChannelId" = P."LotteryChannelId"
	WHERE P."Id" = 1;
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_list_lottery_price_agency(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_list_lottery_price_sub_agency(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_list_lottery_price_sub_agency(p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("AgencyId" bigint, "AgencyName" character varying, "LotteryChannelId" integer, "LotteryChannelName" character varying, "IsScratchcard" boolean, "Price" numeric, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT 
			A."AgencyId",
			A."AgencyName"
		FROM "SubAgency" A
		WHERE A."IsDelete" IS FALSE
	),
	tmp2 AS (
		SELECT 
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LC."IsScratchcard"
		FROM "LotteryChannel" LC
		WHERE LC."IsDeleted" = FALSE
		ORDER BY LC."LotteryChannelTypeId",
			LC."LotteryChannelId"
	),
	tmp3 AS (
		SELECT
			A."AgencyId",
			A."AgencyName",
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LC."IsScratchcard"
		FROM tmp A 
			JOIN tmp2 LC ON TRUE
	),
	tmp4 AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY LP."AgencyId", LP."LotteryChannelId" ORDER BY LP."CreatedDate" DESC) AS "Id",
			LP."AgencyId",
			LP."LotteryChannelId",
			LP."CreatedDate",
			LP."Price",
			LP."LotteryPriceAgencyId"
		FROM "LotteryPriceSubAgency" LP
		WHERE LP."IsDeleted" IS FALSE
			AND (p_date IS NULL OR LP."CreatedDate" <= p_date)
	)
	SELECT 
			A."AgencyId",
			A."AgencyName",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."IsScratchcard",
			P."Price",
			P."CreatedDate"
	FROM tmp3 A
		JOIN tmp4 P ON A."AgencyId" = P."AgencyId" AND A."LotteryChannelId" = P."LotteryChannelId"
	WHERE P."Id" = 1;
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_list_lottery_price_sub_agency(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_list_other_fees(timestamp without time zone, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_list_other_fees(p_date timestamp without time zone, p_sale_point_id bigint) RETURNS TABLE("TransactionId" integer, "TransactionTypeId" integer, "Note" character varying, "Quantity" integer, "Price" numeric, "TotalPrice" numeric, "UserId" integer, "ShiftDistributeId" integer, "ShiftId" integer, "SalePointName" character varying, "ActionDate" timestamp without time zone, "TypeNameId" integer, "Name" character varying, "ActionBy" integer, "ActionName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN QUERY
		SELECT 
			T."TransactionId",
			T."TransactionTypeId",
			T."Note",
			T."Quantity",
			T."Price",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			SD."ShiftId",
			S."SalePointName",
			T."ActionDate",
			TN."TypeNameId",
			TN."Name",
			T."ActionBy",
			T."ActionByName"
		FROM "Transaction" T
			LEFT JOIN "SalePoint" S ON T."SalePointId" = S."SalePointId"
			left JOIN "ShiftDistribute" SD ON T."ShiftDistributeId" = SD."ShiftDistributeId"
			left JOIN "TypeName" TN ON T."TypeNameId" = TN."TypeNameId"
		WHERE 
		(T."SalePointId" = p_sale_point_id or p_sale_point_id = 0)
			AND 	 T."Date"::DATE = p_date
			AND T."IsDeleted" IS FALSE
		
		AND	T."TransactionTypeId" = 1
		ORDER BY 
			T."ActionDate" DESC;

END;
$$;


ALTER FUNCTION public.crm_activity_get_list_other_fees(p_date timestamp without time zone, p_sale_point_id bigint) OWNER TO postgres;

--
-- Name: crm_activity_get_list_sub_agency(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_list_sub_agency() RETURNS TABLE("AgencyId" bigint, "AgencyName" character varying, "IsActive" boolean, "IsDelete" boolean, "Price" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	SELECT 
		S."AgencyId",
		S."AgencyName",
		S."IsActive",
		S."IsDelete",
		S."Price"
	FROM "SubAgency" S
	ORDER BY S."AgencyId";
END;
$$;


ALTER FUNCTION public.crm_activity_get_list_sub_agency() OWNER TO postgres;

--
-- Name: crm_activity_get_sale_point_return(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_sale_point_return(p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "TotalReceived" integer, "TotalRemaining" integer, "TotalDupReceived" integer, "TotalDupRemaining" integer, "TransitionLog" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
BEGIN

	RETURN QUERY 
	SELECT
		SP."SalePointId",
		SP."SalePointName",
		I."LotteryDate",
		I."LotteryChannelId",
		LC."LotteryChannelName",
		I."TotalReceived",
		I."TotalRemaining",
		I."TotalDupReceived",
		I."TotalDupRemaining",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					T."LotteryDate",
					T."LotteryChannelId",
					LCC."LotteryChannelName",
					T."FromSalePointId",
					(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
					T."ToSalePointId",
					(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
					T."TotalTrans",
					T."TotalTransDup",
					T."ActionBy",
					T."ActionByName",
					T."TransitionTypeId",
					T."TransitionDate",
					T."ManagerId",
					U."FullName" AS "ManagerName"
				FROM "Transition" T
					JOIN "LotteryChannel" LCC ON LCC."LotteryChannelId" = T."LotteryChannelId"
					LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
				WHERE T."LotteryDate" = p_date::DATE AND (T."FromSalePointId" = SP."SalePointId" OR T."ToSalePointId" = SP."SalePointId")
					AND T."TransitionTypeId" = 3
				ORDER BY T."TransitionDate"
			) r
		)::TEXT AS "TransitionLog"
	FROM "SalePoint" SP
		LEFT JOIN "Inventory" I ON I."SalePointId" = SP."SalePointId" AND I."LotteryDate" = p_date::DATE
		LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = I."LotteryChannelId"
	WHERE (I."SalePointId" IS NULL OR I."SalePointId" <> 0)  AND SP."IsActive" IS TRUE
	ORDER BY SP."SalePointId";
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_sale_point_return(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_sell_point_log(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_sell_point_log(p_shift_distribute_id integer, p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "TotalTrans" integer, "TotalTransDup" integer, "TotalTransScratch" integer, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalValue" numeric, "TransitionId" bigint, "SalePointLogId" bigint, "TransitionTypeId" integer, "FromSalePointId" integer, "ToSalePointId" integer, "ManagerId" integer, "ManagerName" character varying, "PromotionCode" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
BEGIN

	IF COALESCE(p_sale_point_id, 0) = 0 THEN
	
		SELECT SD."SalePointId" INTO v_sale_point_id FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSE
	
		v_sale_point_id := p_sale_point_id;
		
	END IF;

	RETURN QUERY
	WITH tmp AS(
		SELECT 
			SL."SalePointId",
			SL."LotteryDate",
			SL."LotteryChannelId",
			NULL AS "LotteryChannelName",
			0 AS "TotalTrans",
			0 AS "TotalTransDup",
			SL."Quantity" AS "TotalTransScratch",
			SL."ActionBy",
			SL."ActionByName",
			SL."ActionDate",
			SL."LotteryTypeId",
			LT."LotteryTypeName",
			SL."TotalValue",
			0 AS "TransitionId",
			SL."SalePointLogId",
			0 AS "TransitionTypeId",
			0 AS "FromSalePointId",
			0 AS "ToSalePointId",
			NULL::INT AS "ManagerId",
			NULL::VARCHAR AS "ManagerName",
			SL."PromotionCode"::TEXT
		FROM "SalePointLog" SL
			JOIN "LotteryType" LT ON LT."LotteryTypeId" = SL."LotteryTypeId"
		WHERE SL."SalePointId" = v_sale_point_id AND SL."ActionDate"::DATE = p_date::DATE AND SL."LotteryTypeId" = 3 AND SL."IsDeleted" IS FALSE
		
		UNION 
		
		SELECT 
			SL."SalePointId",
			SL."LotteryDate",
			SL."LotteryChannelId",
			LC."LotteryChannelName",
			(CASE WHEN SL."LotteryTypeId" = 1 THEN SL."Quantity" ELSE 0 END) AS "TotalTrans",
			(CASE WHEN SL."LotteryTypeId" = 2 THEN SL."Quantity" ELSE 0 END) AS "TotalTransDup",
			0 AS "TotalTransScratch",
			SL."ActionBy",
			SL."ActionByName",
			SL."ActionDate",
			SL."LotteryTypeId",
			LT."LotteryTypeName",
			SL."TotalValue",
			0 AS "TransitionId",
			SL."SalePointLogId",
			0 AS "TransitionTypeId",
			0 AS "FromSalePointId",
			0 AS "ToSalePointId",
			NULL::INT AS "ManagerId",
			NULL::VARCHAR AS "ManagerName",
			SL."PromotionCode"::TEXT
		FROM "SalePointLog" SL
			JOIN "LotteryType" LT ON LT."LotteryTypeId" = SL."LotteryTypeId"
			JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SL."LotteryChannelId"
		WHERE SL."SalePointId" = v_sale_point_id AND SL."ActionDate"::DATE = p_date::DATE AND SL."LotteryTypeId" IN(1,2)  AND SL."IsDeleted" IS FALSE
			
		UNION
		
		SELECT
			v_sale_point_id AS "SalePointId",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."TotalTrans",
			T."TotalTransDup",
			0 AS "TotalTransScratch",
			T."ActionBy",
			T."ActionByName",
			T."TransitionDate" AS "ActionDate",
			0 AS "LotteryTypeId",
			''::VARCHAR AS "LotteryTypeName",
			0 AS "TotalValue",
			T."TransitionId",
			0 AS "SalePointLogId",
			T."TransitionTypeId",
			T."FromSalePointId",
			T."ToSalePointId",
			T."ManagerId",
			U."FullName" AS "ManagerName",
			NULL::TEXT AS "PromotionCode"
	
		FROM "Transition" T
			JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = T."LotteryChannelId"
			LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
		WHERE (T."FromSalePointId" = v_sale_point_id OR T."ToSalePointId" = v_sale_point_id) AND T."TransitionDate"::DATE = p_date::DATE
	)
	SELECT t.* FROM tmp t ORDER BY t."ActionDate" DESC;
	
END;
$$;


ALTER FUNCTION public.crm_activity_get_sell_point_log(p_shift_distribute_id integer, p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_static_fee(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_static_fee(p_month timestamp without time zone) RETURNS TABLE("StaticFeeId" integer, "SalePointId" integer, "SalePointName" character varying, "ElectronicFee" bigint, "WaterFee" bigint, "InternetFee" bigint, "EstateFee" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	SELECT
	ST."StaticFeeId" ,
	ST."SalePointId" ,
	ST."SalePointName" ,
	ST."ElectronicFee" ,
	ST."WaterFee" ,
	ST."InternetFee" ,
	ST."EstateFee" 
	FROM "StaticFee" ST
	WHERE ST."Month" = TO_CHAR(p_month ::DATE,'YYYY-MM');
END;
$$;


ALTER FUNCTION public.crm_activity_get_static_fee(p_month timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_static_fee_v2(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_static_fee_v2(p_month timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "ElectronicFee" numeric, "WaterFee" numeric, "InternetFee" numeric, "EstateFee" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN QUERY
SELECT 
		T."SalePointId",
		S."SalePointName" ,
		SUM(T."Price") FILTER (WHERE TN."TypeNameId" = 1) AS ElectronicFee,
		SUM(T."Price") FILTER (WHERE TN."TypeNameId" = 2) AS WaterFee,
		SUM(T."Price") FILTER (WHERE TN."TypeNameId" = 13) AS InternetFee,
		SUM(T."Price") FILTER (WHERE TN."TypeNameId" = 12) AS EstateFee
	FROM "Transaction" T
		LEFT JOIN "SalePoint" S ON T."SalePointId" = S."SalePointId"
		LEFT JOIN "TypeName" TN ON T."TypeNameId" = TN."TypeNameId"
	WHERE 
		to_char(T."Date", 'YYYY-MM') = to_char(p_month, 'YYYY-MM')
		AND T."IsDeleted" IS FALSE

	AND	T."TransactionTypeId" = 1
	GROUP BY T."SalePointId", S."SalePointName"
	ORDER BY 
		T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_activity_get_static_fee_v2(p_month timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_get_tmp_winning_ticket(character varying, integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_tmp_winning_ticket(p_number character varying, p_lottery_channel_id integer, p_day timestamp without time zone, p_count_number integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "Count" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	SELECT 
		S."SalePointId",
		SP."SalePointName",
		Count(S."SalePointId")::INT AS "Count"
	FROM "SalePointLog" S
	LEFT JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
	WHERE (S."LotteryDate" BETWEEN (p_day::DATE - INTERVAL'5 day') AND p_day::DATE )
		AND right(S."FourLastNumber", p_count_number) = right(p_number, p_count_number)
		AND right(S."FourLastNumber", p_count_number+1) != right(p_number, p_count_number+1)
		AND S."IsDeleted" = FALSE
		AND S."LotteryChannelId" = p_lottery_channel_id
	GROUP BY 
		S."SalePointId",
		SP."SalePointName"
	ORDER BY "SalePointId";
END;
$$;


ALTER FUNCTION public.crm_activity_get_tmp_winning_ticket(p_number character varying, p_lottery_channel_id integer, p_day timestamp without time zone, p_count_number integer) OWNER TO postgres;

--
-- Name: crm_activity_get_winning_ticket(character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_get_winning_ticket(p_number character varying, p_day timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "FourLastNumber" character varying, "Count" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_lenght_number INT := LENGTH(p_number);
BEGIN

	RETURN QUERY
	SELECT 
		S."SalePointId",
		SP."SalePointName",
		S."LotteryDate",
		S."FourLastNumber",
		Count(S."SalePointId")::INT AS "Count"
	FROM "SalePointLog" S
	LEFT JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
	WHERE (S."LotteryDate" BETWEEN (p_day::DATE - INTERVAL'5 day') AND p_day::DATE )
		AND right(S."FourLastNumber", v_lenght_number) = p_number
		AND S."IsDeleted" = FALSE
	GROUP BY 
		S."SalePointId",
		S."LotteryDate",
		S."FourLastNumber",
		SP."SalePointName"
	ORDER BY "SalePointId";
END;
$$;


ALTER FUNCTION public.crm_activity_get_winning_ticket(p_number character varying, p_day timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_insert_lottery_record_v5(integer, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_insert_lottery_record_v5(actionby integer, lototype text, lotterychannelid text, p_data text, salepointid integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$

DECLARE 
  v_id INT;
   v_mess TEXT;
    v_data JSON := p_data::JSON;
    p_LotteryChannelId INT;
    json_item JSON;
BEGIN
    -- Lặp qua các phần tử trong mảng JSON và chèn vào bảng "LotoNew"
    FOR json_item IN SELECT json_array_elements(v_data) LOOP
	 
        BEGIN
            INSERT INTO "LotoNew" ("LotoType","Type","Seri","LotteryChannelId", "IntoMoney", "SalePointId", "ActionBy","ShiftId", "Time")
            VALUES ( (json_item ->> 'LotoType')::VARCHAR,
					 (json_item ->> 'Type')::VARCHAR,
					(json_item ->> 'seri')::VARCHAR,
					(json_item ->> 'LotteryChannelId')::INT,
                    (json_item ->> 'intoMoney')::NUMERIC,
                    SalePointId,
                    ActionBy,
					 (json_item ->> 'shiftid')::NUMERIC,
                    CURRENT_TIMESTAMP
				  );
     
        END;
    END LOOP;
	  v_id := 1;
      v_mess := 'Thành công';
       RETURN QUERY
        SELECT v_id, v_mess;

END;

$$;


ALTER FUNCTION public.crm_activity_insert_lottery_record_v5(actionby integer, lototype text, lotterychannelid text, p_data text, salepointid integer) OWNER TO postgres;

--
-- Name: crm_activity_insert_or_update_agency(character varying, integer, boolean, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_insert_or_update_agency(p_agency_name character varying, p_agency_id integer DEFAULT 0, p_is_activity boolean DEFAULT true, p_is_deleted boolean DEFAULT false) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   

	IF p_agency_id = 0
	THEN
		INSERT INTO "Agency" ("AgencyName")
		VALUES (p_agency_name);
	ELSE
		UPDATE "Agency"
			SET 
				"AgencyName" = p_agency_name,
				"IsActive" = p_is_activity,
				"IsDeleted" = p_is_deleted,
				"InactiveDate" = now()
		WHERE "AgencyId" = p_agency_id;
	END IF;
		
    
    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_activity_insert_or_update_agency(p_agency_name character varying, p_agency_id integer, p_is_activity boolean, p_is_deleted boolean) OWNER TO postgres;

--
-- Name: crm_activity_insert_or_update_agency_bk(character varying, integer, boolean, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_insert_or_update_agency_bk(p_agency_name character varying, p_agency_id integer DEFAULT 0, p_is_activity boolean DEFAULT true, p_is_deleted boolean DEFAULT false) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   

	IF p_agency_id = 0
	THEN
		INSERT INTO "Agency" ("AgencyName")
		VALUES (p_agency_name);
	ELSE
		UPDATE "Agency"
			SET 
				"AgencyName" = p_agency_name,
				"IsActive" = p_is_activity,
				"IsDeleted" = p_is_deleted
		WHERE "AgencyId" = p_agency_id;
	END IF;
		
    
    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_activity_insert_or_update_agency_bk(p_agency_name character varying, p_agency_id integer, p_is_activity boolean, p_is_deleted boolean) OWNER TO postgres;

--
-- Name: crm_activity_insert_or_update_sub_agency(character varying, boolean, boolean, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_insert_or_update_sub_agency(p_agency_name character varying, p_is_activity boolean DEFAULT true, p_is_deleted boolean DEFAULT false, p_price double precision DEFAULT 0, p_agency_id integer DEFAULT 0) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   

	IF p_agency_id = 0
	THEN
		INSERT INTO "SubAgency" ("AgencyName", "Price")
		VALUES (p_agency_name, p_price);
	ELSE
		UPDATE "SubAgency"
			SET 
				"AgencyName" = p_agency_name,
				"Price" = p_price,
				"IsActive" = p_is_activity,
				"IsDelete" = p_is_deleted
		WHERE "AgencyId" = p_agency_id;
	END IF;
		
    
    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_activity_insert_or_update_sub_agency(p_agency_name character varying, p_is_activity boolean, p_is_deleted boolean, p_price double precision, p_agency_id integer) OWNER TO postgres;

--
-- Name: crm_activity_insert_winning(integer, character varying, integer, integer, character varying, integer, integer, numeric, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_insert_winning(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_winning_type_id integer, p_lottery_number character varying, p_lottery_channel_id integer, p_quantity integer, p_winning_price numeric, p_from_sale_point_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_user_id INT;
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN

-- 	SELECT 
-- 		UR."UserId" INTO v_user_id
-- 	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
-- 	
-- 	SELECT
-- 		SD."SalePointId", SD."ShiftDistributeId" INTO v_sale_point_id, v_shift_dis_id
-- 	FROM "ShiftDistribute" SD WHERE SD."UserId" = v_user_id AND SD."DistributeDate" = NOW()::DATE;

	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;

	IF COALESCE(v_sale_point_id, 0) > 0 THEN

		INSERT INTO "Winning"(
			"WinningTypeId",
			"LotteryNumber",
			"LotteryChannelId",
			"Quantity",
			"WinningPrice",
			"FromSalePointId",
			"SalePointId",
			"ShiftDistributeId",
			"ActionBy",
			"ActionByName"
		) VALUES(
			p_winning_type_id,
			p_lottery_number,
			p_lottery_channel_id,
			p_quantity,
			p_winning_price,
			p_from_sale_point_id,
			v_sale_point_id,
			v_shift_dis_id,
			p_action_by,
			p_action_by_name
		) RETURNING "WinningId" INTO v_id;
	
		v_mess := 'Ghi nhận thành công';
		
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_insert_winning(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_winning_type_id integer, p_lottery_number character varying, p_lottery_channel_id integer, p_quantity integer, p_winning_price numeric, p_from_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_activity_log_repayment(integer, character varying, integer, character varying, text, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_log_repayment(p_action_by integer, p_action_by_name character varying, p_sale_point_id integer, p_customer_name character varying, p_note text, p_amount numeric) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
BEGIN
	
	INSERT INTO "Repayment"(
		"CustomerName",
		"Amount",
		"Note",
		"ActionBy",
		"ActionByName",
		"SalePointId"
	) VALUES (
		p_customer_name,
		p_amount,
		p_note,
		p_action_by,
		p_action_by_name,
		p_sale_point_id
	) RETURNING "RepaymentId" INTO v_id;
	
	v_mess := 'Ghi nhận thành công';
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_log_repayment(p_action_by integer, p_action_by_name character varying, p_sale_point_id integer, p_customer_name character varying, p_note text, p_amount numeric) OWNER TO postgres;

--
-- Name: crm_activity_log_repayment_v2(integer, character varying, integer, character varying, text, numeric, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_log_repayment_v2(p_action_by integer, p_action_by_name character varying, p_sale_point_id integer, p_customer_name character varying, p_note text, p_amount numeric, p_user_role_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
		
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
		
		INSERT INTO "Repayment"(
			"CustomerName",
			"Amount",
			"Note",
			"ActionBy",
			"ActionByName",
			"SalePointId",
			"ShiftDistributeId"
		) VALUES (
			p_customer_name,
			p_amount,
			p_note,
			p_action_by,
			p_action_by_name,
			v_sale_point_id,
			v_shift_dis_id
		) RETURNING "RepaymentId" INTO v_id;
		v_mess := 'Ghi nhận thành công';
		
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_log_repayment_v2(p_action_by integer, p_action_by_name character varying, p_sale_point_id integer, p_customer_name character varying, p_note text, p_amount numeric, p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_activity_receive_from_agency(integer, character varying, timestamp without time zone, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_receive_from_agency(p_action_by integer, p_action_by_name character varying, p_lottery_date timestamp without time zone, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
		IF NOT EXISTS (SELECT 1 FROM "InventoryFull" WHERE "LotteryDate" = p_lottery_date::DATE AND "AgencyId" = (ele ->> 'AgencyId')::INT AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN	
			
			INSERT INTO "InventoryFull"(
				"LotteryDate",
				"LotteryChannelId",
				"AgencyId",
				"TotalReceived",
				"TotalRemaining",
				"ActionBy",
				"ActionByName"
			) VALUES (
				p_lottery_date::DATE,
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'AgencyId')::INT,
				COALESCE((ele ->> 'TotalReceived')::INT, 0),
				COALESCE((ele ->> 'TotalReceived')::INT, 0),
				p_action_by,
				p_action_by_name
			);
			
		ELSE 

			UPDATE "InventoryFull" F
			SET
				"TotalReceived" =  COALESCE((ele ->> 'TotalReceived')::INT, 0),
				"TotalRemaining" = "TotalRemaining" - ("TotalReceived" - COALESCE((ele ->> 'TotalReceived')::INT, 0)),
				"ActionBy" = p_action_by,
				"ActionByName" = p_action_by_name,
				"ActionDate" = NOW()
			WHERE F."LotteryDate" = p_lottery_date::DATE 
				AND F."AgencyId" = (ele ->> 'AgencyId')::INT
				AND F."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
		END IF;
	
	END LOOP;
	
	v_mess := 'Thao tác thành công';
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_receive_from_agency(p_action_by integer, p_action_by_name character varying, p_lottery_date timestamp without time zone, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_receive_scratchcard_from_agency(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_receive_scratchcard_from_agency(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
		IF NOT EXISTS(SELECT 1 FROM "ScratchcardFull" SF WHERE SF."AgencyId" = 0 AND (ele ->> 'LotteryChannelId')::INT = SF."LotteryChannelId") THEN
		
			INSERT INTO "ScratchcardFull"(
				"AgencyId",
				"TotalRemaining",
				"LastActionBy",
				"LastActionByName",
				"LotteryChannelId"
			) VALUES(
				0,
				COALESCE((ele ->> 'TotalReceived')::INT, 0),
				p_action_by,
				p_action_by_name,
				(ele ->> 'LotteryChannelId')::INT
			);
		
		ELSE 
		
			UPDATE "ScratchcardFull" SF
			SET
				"TotalRemaining" = "TotalRemaining" + COALESCE((ele ->> 'TotalReceived')::INT, 0),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name,
				"LastActionDate" = NOW()
			WHERE SF."AgencyId" = 0
				AND SF."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
		
		END IF;
	
		INSERT INTO "ScratchcardFullLog"(
			"AgencyId",
			"TotalReceived",
			"ActionBy",
			"ActionByName",
			"LotteryChannelId"
		) VALUES (
			(ele ->> 'AgencyId')::INT,
			COALESCE((ele ->> 'TotalReceived')::INT, 0),
			p_action_by,
			p_action_by_name,
			(ele ->> 'LotteryChannelId')::INT
		);
	
	END LOOP;
	
	v_mess := 'Thao tác thành công';
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_activity_receive_scratchcard_from_agency(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_repayment_get_list(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_repayment_get_list(p_shift_distribute_id integer, p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("RepaymentId" integer, "CustomerName" character varying, "Amount" numeric, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "SalePointId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_sale_point_id INT;
BEGIN	
	
	IF COALESCE(p_sale_point_id, 0) = 0 THEN
	
		SELECT SD."SalePointId" INTO v_sale_point_id FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSE
	
		v_sale_point_id := p_sale_point_id;
		
	END IF;
	
	RETURN QUERY 
	SELECT 
		R."RepaymentId",
		R."CustomerName",
		R."Amount",
		R."Note",
		R."ActionBy",
		R."ActionByName",
		R."ActionDate",
		R."SalePointId"
	FROM "Repayment" R
	WHERE ((COALESCE(p_shift_distribute_id, 0) = 0 AND COALESCE(p_sale_point_id, 0) = 0) OR R."SalePointId" = v_sale_point_id)
		AND R."ActionDate"::DATE = p_date::DATE
	ORDER BY R."ActionDate" DESC;
	
END;
$$;


ALTER FUNCTION public.crm_activity_repayment_get_list(p_shift_distribute_id integer, p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_repayment_get_list_v2(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_repayment_get_list_v2(p_user_role_id integer, p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("RepaymentId" integer, "CustomerName" character varying, "Amount" numeric, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "SalePointId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN	
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	IF v_is_super_admin IS TRUE OR v_is_manager IS TRUE THEN
	
		RETURN QUERY 
		SELECT 
			R."RepaymentId",
			R."CustomerName",
			R."Amount",
			R."Note",
			R."ActionBy",
			R."ActionByName",
			R."ActionDate",
			R."SalePointId"
		FROM "Repayment" R
		WHERE (COALESCE(p_sale_point_id, 0) = 0 OR R."SalePointId" = p_sale_point_id)
			AND R."ActionDate"::DATE = p_date::DATE
		ORDER BY R."ActionDate" DESC;
		
	ELSE
	
		RETURN QUERY 
		SELECT 
			R."RepaymentId",
			R."CustomerName",
			R."Amount",
			R."Note",
			R."ActionBy",
			R."ActionByName",
			R."ActionDate",
			R."SalePointId"
		FROM "Repayment" R
		WHERE R."ShiftDistributeId" = v_shift_dis_id
			AND R."ActionDate"::DATE = p_date::DATE
		ORDER BY R."ActionDate" DESC;
	
	END IF;
	
END;
$$;


ALTER FUNCTION public.crm_activity_repayment_get_list_v2(p_user_role_id integer, p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_repayment_get_list_v3(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_repayment_get_list_v3(p_user_role_id integer, p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("GuestActionId" integer, "GuestId" integer, "FullName" character varying, "TotalPrice" numeric, "Note" character varying, "CreatedBy" integer, "CreatedByName" character varying, "CreatedDate" timestamp without time zone, "SalePointId" integer, "PaymentName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN	
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	IF v_is_super_admin IS TRUE OR v_is_manager IS TRUE THEN
	
		RETURN QUERY 
		SELECT 
			GA."GuestActionId",
			GA."GuestId",
			G."FullName",
			GA."TotalPrice",
			GA."Note",
			GA."CreatedBy",
			GA."CreatedByName",
			GA."CreatedDate",
			GA."SalePointId",
			FP."PaymentName"
		FROM "GuestAction" GA
		WHERE (COALESCE(p_sale_point_id, 0) = 0 OR GA."SalePointId" = p_sale_point_id)
			AND GA."CreatedDate"::DATE = p_date::DATE
			AND GA."IsDeleted" IS FALSE
			AND GA."GuestActionTypeId" = 2
		ORDER BY R."ActionDate" DESC;
		
	ELSE
	
		RETURN QUERY 
		SELECT 
			GA."GuestActionId",
			GA."GuestId",
			G."FullName",
			GA."TotalPrice",
			GA."Note",
			GA."CreatedBy",
			GA."CreatedByName",
			GA."CreatedDate",
			GA."SalePointId",
			FP."PaymentName"
		FROM "GuestAction" GA
			JOIN "Guest" G ON G."GuestId" = GA."GuestId"
			JOIN "FormPayment" FP ON GA."FormPaymentId" = FP."FormPaymentId"
		WHERE GA."ShiftDistributeId" = v_shift_dis_id
			AND GA."IsDeleted" IS FALSE
			AND GA."GuestActionTypeId" = 2
		ORDER BY GA."CreatedDate" DESC;
	
	END IF;
	
END;
$$;


ALTER FUNCTION public.crm_activity_repayment_get_list_v3(p_user_role_id integer, p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_report_money_in_a_shift(integer, timestamp without time zone, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_report_money_in_a_shift(p_shift_distribute integer, p_date timestamp without time zone, p_total_money bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
			IF EXISTS (SELECT * FROM "ReportMoney" R WHERE R."ActionDate" = p_date::DATE AND R."ShiftDistributeId" = p_shift_distribute)
				THEN
					Update "ReportMoney" 
					SET "TotalMoneyInDay" = p_total_money
					WHERE "ShiftDistributeId" = p_shift_distribute AND "ActionDate" = p_date::DATE;
				v_id := 1;
        v_mess := 'Sửa thành công';
			ELSE
			INSERT INTO "ReportMoney"("SalePointId","TotalMoneyInDay","ShiftDistributeId","ActionDate","ShiftId" )
			VALUES( 
			 (SELECT SD."SalePointid" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date::DATE AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."SalePointid"),
			 p_total_money,
			 p_shift_distribute,
			 p_date::DATE,
			 (SELECT SD."ShiftId" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date::DATE AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."ShiftId") ) ;
        v_id := 1;
        v_mess := 'Thêm thành công';
			END IF;

    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_report_money_in_a_shift(p_shift_distribute integer, p_date timestamp without time zone, p_total_money bigint) OWNER TO postgres;

--
-- Name: crm_activity_report_money_in_a_shift_v1(integer, timestamp without time zone, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_report_money_in_a_shift_v1(p_shift_distribute integer, p_date timestamp without time zone, p_total_money bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
BEGIN
			INSERT INTO "ReportMoney" ("SalePointId","TotalMoneyInDay","ShiftDistributeId","ActionDate","ShiftId" )
			SELECT ST."SalePointid",p_total_money,p_shift_distribute,p_date,ST."ShiftId"
			FROM "ShiftTransfer" ST 
			WHERE ST."ActionDate"::DATE = p_date::DATE AND ST."ShiftDistributeId" = p_shift_distribute  LIMIT 1;
			
			
      v_id := 1;
      v_mess := 'Thêm thành công';


    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_report_money_in_a_shift_v1(p_shift_distribute integer, p_date timestamp without time zone, p_total_money bigint) OWNER TO postgres;

--
-- Name: crm_activity_return_lottery(integer, character varying, text, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_return_lottery(p_action_by integer, p_action_by_name character varying, p_data text, p_action_type integer DEFAULT 1, p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_check_dup INT := 0;
	v_check INT := 0;
	v_check_type BOOL := FALSE;
	v_check_date DATE;
	v_check_channel INT;
	v_time TIMESTAMP := NOW();
BEGIN

	--THÊM 
	IF p_action_type = 1 THEN 
	
		CREATE TEMP TABLE DataCheck ON COMMIT DROP AS (
			WITH tmp AS (
				SELECT 
					I."AgencyId",
					I."LotteryChannelId",
					I."TotalReceived",
					I."LotteryDate",
					FALSE AS "IsScratchcard"
				FROM "InventoryFull" I
				WHERE I."LotteryDate" = p_date::DATE
				UNION
				SELECT 
					SF."AgencyId",
					SF."LotteryChannelId",
					SUM(SF."TotalReceived") AS "TotalReceived",
					NULL AS "LotteryDate",
					TRUE AS "IsScratchcard"
				FROM "ScratchcardFullLog" SF
				GROUP BY 
					SF."AgencyId",
					SF."LotteryChannelId"
			),
			tmp2 AS(
				SELECT 
					T."LotteryChannelId",
					T."LotteryDate",
					T."TransitionTypeId",
					T."TotalTrans",
					T."TotalTransDup",
					T."ToAgencyId",
					T."IsScratchcard"
				FROM "Transition" T
				WHERE T."ConfirmStatusId" = 2
					AND (T."IsScratchcard" IS TRUE OR T."LotteryDate" = p_date::DATE)
					AND T."IsDeleted" IS FALSE AND  T."ShiftDistributeId"<>-1
			),
			tmp3 AS (
				SELECT
					T."ToAgencyId" AS "AgencyId",
					T."LotteryChannelId",
					SUM(T."TotalTrans") AS "TotalTrans",
					SUM(T."TotalTransDup") AS "TotalTransDup"
				FROM tmp2 T
				WHERE T."ToAgencyId" IS NOT NULL AND T."TransitionTypeId" = 3 
				GROUP BY 
					T."ToAgencyId",
					T."LotteryChannelId"
			)
			SELECT 
				C."AgencyId",
				C."LotteryChannelId",
				(C."TotalReceived" - COALESCE(R."TotalTrans", 0) - COALESCE(R."TotalTransDup", 0)) AS "TotalCanReturn",
				C."LotteryDate",
				C."IsScratchcard"	
			FROM tmp C
				LEFT JOIN tmp3 R ON C."AgencyId" = R."AgencyId" AND C."LotteryChannelId" = R."LotteryChannelId"
			ORDER BY C."AgencyId", C."LotteryChannelId"
					
		);
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		
			-- Cập nhật kho vé cào
			IF (ele ->> 'IsScratchcard')::BOOL IS TRUE THEN
			
				--Kiểm tra đã tồn tại kho vé chưa
				IF NOT EXISTS(SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT) THEN
					RAISE 'Không đủ số lượng vé trong kho';
				END IF;
				
				UPDATE "Scratchcard" 
				SET "TotalRemaining" = "TotalRemaining" - COALESCE((ele->>'TotalTrans')::INT, 0)
				WHERE "SalePointId" = 0 AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
			
			-- Cập nhật kho vé thường
			ELSE 
				
				--Kiểm tra xem kho vé đã tồn tại chưa
				IF NOT EXISTS(
					SELECT 1 FROM "Inventory"
					WHERE "SalePointId" = 0 
						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT 
						AND "LotteryDate" = (ele->>'LotteryDate')::DATE
				) THEN
					RAISE 'Không đủ số lượng vé trong kho';
				END IF;
			
				UPDATE "Inventory" 
				SET 
					"TotalRemaining" = "TotalRemaining" - COALESCE((ele->>'TotalTrans')::INT, 0),
					"TotalDupRemaining" = "TotalDupRemaining" - COALESCE((ele->>'TotalTransDup')::INT, 0)
				WHERE "SalePointId" = 0
					AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT
					AND "LotteryDate" = (ele->>'LotteryDate')::DATE
				RETURNING "TotalRemaining", "TotalDupRemaining" INTO v_check, v_check_dup;
				
			END IF;
			
			-- Kiểm tra ra số âm
			IF v_check < 0 OR v_check_dup < 0 THEN
				RAISE 'Không đủ số lượng vé trong kho1';
			END IF;
			
			-- Kiểm tra trả về đại lý
-- 			IF NOT EXISTS( 
-- 				SELECT 1 FROM DataCheck D
-- 				WHERE D."AgencyId" = (ele->>'ToAgencyId')::INT 
-- 					AND (ele->>'LotteryChannelId')::INT = D."LotteryChannelId"
-- 					AND (D."LotteryDate" = (ele->>'LotteryDate')::DATE OR (D."IsScratchcard" IS TRUE AND (ele->>'IsScratchcard')::BOOL IS TRUE))
-- 					AND D."TotalCanReturn" >= (COALESCE((ele->>'TotalTrans')::INT, 0) + COALESCE((ele->>'TotalTransDup')::INT, 0))
-- 			) THEN
-- 				RAISE 'Vé đã trả nhiều hơn số vé đã lấy từ đại lý';
-- 			END IF;
					
			-- Thêm dòng log
			INSERT INTO "Transition"(
				"LotteryDate",
				"LotteryChannelId",
				"FromSalePointId",
				"ToAgencyId",
				"TotalTrans",
				"TotalTransDup",
				"ConfirmTrans",
				"ConfirmTransDup",
				"TransitionDate",
				"TransitionTypeId",
				"ConfirmStatusId",
				"IsScratchcard",
				"ActionBy",
				"ActionByName",
				"ConfirmBy",
				"ConfirmByName",
				"ConfirmDate"
			)
			VALUES(
				(ele->>'LotteryDate')::DATE,
				(ele->>'LotteryChannelId')::INT,
				(ele->>'FromSalePointId')::INT,
				(ele->>'ToAgencyId')::INT,
				COALESCE((ele->>'TotalTrans')::INT, 0),
				COALESCE((ele->>'TotalTransDup')::INT, 0),
				COALESCE((ele->>'TotalTrans')::INT, 0),
				COALESCE((ele->>'TotalTransDup')::INT, 0),
				v_time,
				3,
				2,
				(ele->>'IsScratchcard')::BOOL,
				p_action_by,
				p_action_by_name,
				p_action_by,
				p_action_by_name,
				v_time
			);
			
			-- Cập nhật lại bảng CHECK
			UPDATE DataCheck 
			SET "TotalCanReturn" = "TotalCanReturn" - (COALESCE((ele->>'TotalTrans')::INT, 0) + COALESCE((ele->>'TotalTransDup')::INT, 0))
			WHERE "AgencyId" = (ele->>'ToAgencyId')::INT 
				AND (ele->>'LotteryChannelId')::INT = "LotteryChannelId"
				AND ("LotteryDate" = (ele->>'LotteryDate')::DATE OR ("IsScratchcard" IS TRUE AND (ele->>'IsScratchcard')::BOOL IS TRUE));
			
		END LOOP;
		
		v_id := 1;
		v_mess := 'Trả ế thành công';
		
	--SỬA
	ELSEIF p_action_type = 2 THEN 
		-- DO SOMETHING
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	
	--XOÁ
	ELSEIF p_action_type = 3 THEN 
		
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		
			--Cập nhật dòng log
			UPDATE "Transition" 
			SET "IsDeleted" = TRUE
			WHERE "TransitionId" = (ele->>'TransitionId')::INT
			RETURNING "TotalTrans", "TotalTransDup", "IsScratchcard", "LotteryDate", "LotteryChannelId"
			INTO v_check, v_check_dup, v_check_type,v_check_date, v_check_channel;
				
			
			-- Cập nhật kho vé cào
			IF v_check_type IS TRUE THEN
				
				--Kiểm tra đã tồn tại kho vé cào chưa
				IF NOT EXISTS(SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 AND "LotteryChannelId" = v_check_channel) THEN
					RAISE 'Không đủ số lượng vé trong kho';
				END IF;
				
				UPDATE "Scratchcard" 
				SET "TotalRemaining" = "TotalRemaining" + v_check
				WHERE "SalePointId" = 0 AND "LotteryChannelId" = v_check_channel;
			
			-- Cập nhật kho vé thường
			ELSE 
			
				--Kiểm tra xem kho vé đã tồn tại chưa
				IF NOT EXISTS(
					SELECT 1 FROM "Inventory"
					WHERE "SalePointId" = 0 
						AND "LotteryChannelId" = v_check_channel 
						AND "LotteryDate" = v_check_date
				) THEN
					RAISE 'Không đủ số lượng vé trong kho';
				END IF;
			
				UPDATE "Inventory" 
				SET 
					"TotalRemaining" = "TotalRemaining" + v_check::INT,
					"TotalDupRemaining" = "TotalDupRemaining" + v_check_dup::INT
				WHERE "SalePointId" = 0
					AND "LotteryChannelId" = v_check_channel
					AND "LotteryDate" = v_check_date;
				
			END IF;
		END LOOP;
	
		v_id := 1;
		v_mess := 'Xoá thành công';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;









--Bản cũ

-- DECLARE
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	ele JSON;
-- 	v_check_dup INT := 0;
-- 	v_check INT := 0;
-- 	v_check_type BOOL := FALSE;
-- 	v_check_date DATE;
-- 	v_check_channel INT;
-- 	v_time TIMESTAMP := NOW();
-- BEGIN

-- 	--THÊM 
-- 	IF p_action_type = 1 THEN 
	
-- 		CREATE TEMP TABLE DataCheck ON COMMIT DROP AS (
-- 			WITH tmp AS (
-- 				SELECT 
-- 					I."AgencyId",
-- 					I."LotteryChannelId",
-- 					I."TotalReceived",
-- 					I."LotteryDate",
-- 					FALSE AS "IsScratchcard"
-- 				FROM "InventoryFull" I
-- 				WHERE I."LotteryDate" = p_date::DATE
-- 				UNION
-- 				SELECT 
-- 					SF."AgencyId",
-- 					SF."LotteryChannelId",
-- 					SUM(SF."TotalReceived") AS "TotalReceived",
-- 					NULL AS "LotteryDate",
-- 					TRUE AS "IsScratchcard"
-- 				FROM "ScratchcardFullLog" SF
-- 				GROUP BY 
-- 					SF."AgencyId",
-- 					SF."LotteryChannelId"
-- 			),
-- 			tmp2 AS(
-- 				SELECT 
-- 					T."LotteryChannelId",
-- 					T."LotteryDate",
-- 					T."TransitionTypeId",
-- 					T."TotalTrans",
-- 					T."TotalTransDup",
-- 					T."ToAgencyId",
-- 					T."IsScratchcard"
-- 				FROM "Transition" T
-- 				WHERE T."ConfirmStatusId" = 2
-- 					AND (T."IsScratchcard" IS TRUE OR T."LotteryDate" = p_date::DATE)
-- 					AND T."IsDeleted" IS FALSE
-- 			),
-- 			tmp3 AS (
-- 				SELECT
-- 					T."ToAgencyId" AS "AgencyId",
-- 					T."LotteryChannelId",
-- 					SUM(T."TotalTrans") AS "TotalTrans",
-- 					SUM(T."TotalTransDup") AS "TotalTransDup"
-- 				FROM tmp2 T
-- 				WHERE T."ToAgencyId" IS NOT NULL AND T."TransitionTypeId" = 3
-- 				GROUP BY 
-- 					T."ToAgencyId",
-- 					T."LotteryChannelId"
-- 			)
-- 			SELECT 
-- 				C."AgencyId",
-- 				C."LotteryChannelId",
-- 				(C."TotalReceived" - COALESCE(R."TotalTrans", 0) - COALESCE(R."TotalTransDup", 0)) AS "TotalCanReturn",
-- 				C."LotteryDate",
-- 				C."IsScratchcard"	
-- 			FROM tmp C
-- 				LEFT JOIN tmp3 R ON C."AgencyId" = R."AgencyId" AND C."LotteryChannelId" = R."LotteryChannelId"
-- 			ORDER BY C."AgencyId", C."LotteryChannelId"
					
-- 		);
	
-- 		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		
-- 			-- Cập nhật kho vé cào
-- 			IF (ele ->> 'IsScratchcard')::BOOL IS TRUE THEN
			
-- 				--Kiểm tra đã tồn tại kho vé chưa
-- 				IF NOT EXISTS(SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT) THEN
-- 					RAISE 'Không đủ số lượng vé trong kho';
-- 				END IF;
				
-- 				UPDATE "Scratchcard" 
-- 				SET "TotalRemaining" = "TotalRemaining" - COALESCE((ele->>'TotalTrans')::INT, 0)
-- 				WHERE "SalePointId" = 0 AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT
-- 				RETURNING "TotalRemaining" INTO v_check;
			
-- 			-- Cập nhật kho vé thường
-- 			ELSE 
				
-- 				--Kiểm tra xem kho vé đã tồn tại chưa
-- 				IF NOT EXISTS(
-- 					SELECT 1 FROM "Inventory"
-- 					WHERE "SalePointId" = 0 
-- 						AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT 
-- 						AND "LotteryDate" = (ele->>'LotteryDate')::DATE
-- 				) THEN
-- 					RAISE 'Không đủ số lượng vé trong kho';
-- 				END IF;
			
-- 				UPDATE "Inventory" 
-- 				SET 
-- 					"TotalRemaining" = "TotalRemaining" - COALESCE((ele->>'TotalTrans')::INT, 0),
-- 					"TotalDupRemaining" = "TotalDupRemaining" - COALESCE((ele->>'TotalTransDup')::INT, 0)
-- 				WHERE "SalePointId" = 0
-- 					AND "LotteryChannelId" = (ele->>'LotteryChannelId')::INT
-- 					AND "LotteryDate" = (ele->>'LotteryDate')::DATE
-- 				RETURNING "TotalRemaining", "TotalDupRemaining" INTO v_check, v_check_dup;
				
-- 			END IF;
			
-- 			-- Kiểm tra ra số âm
-- 			IF v_check < 0 OR v_check_dup < 0 THEN
-- 				RAISE 'Không đủ số lượng vé trong kho';
-- 			END IF;
			
-- 			-- Kiểm tra trả về đại lý
-- -- 			IF NOT EXISTS( 
-- -- 				SELECT 1 FROM DataCheck D
-- -- 				WHERE D."AgencyId" = (ele->>'ToAgencyId')::INT 
-- -- 					AND (ele->>'LotteryChannelId')::INT = D."LotteryChannelId"
-- -- 					AND (D."LotteryDate" = (ele->>'LotteryDate')::DATE OR (D."IsScratchcard" IS TRUE AND (ele->>'IsScratchcard')::BOOL IS TRUE))
-- -- 					AND D."TotalCanReturn" >= (COALESCE((ele->>'TotalTrans')::INT, 0) + COALESCE((ele->>'TotalTransDup')::INT, 0))
-- -- 			) THEN
-- -- 				RAISE 'Vé đã trả nhiều hơn số vé đã lấy từ đại lý';
-- -- 			END IF;
					
-- 			-- Thêm dòng log
-- 			INSERT INTO "Transition"(
-- 				"LotteryDate",
-- 				"LotteryChannelId",
-- 				"FromSalePointId",
-- 				"ToAgencyId",
-- 				"TotalTrans",
-- 				"TotalTransDup",
-- 				"ConfirmTrans",
-- 				"ConfirmTransDup",
-- 				"TransitionDate",
-- 				"TransitionTypeId",
-- 				"ConfirmStatusId",
-- 				"IsScratchcard",
-- 				"ActionBy",
-- 				"ActionByName",
-- 				"ConfirmBy",
-- 				"ConfirmByName",
-- 				"ConfirmDate"
-- 			)
-- 			VALUES(
-- 				(ele->>'LotteryDate')::DATE,
-- 				(ele->>'LotteryChannelId')::INT,
-- 				(ele->>'FromSalePointId')::INT,
-- 				(ele->>'ToAgencyId')::INT,
-- 				COALESCE((ele->>'TotalTrans')::INT, 0),
-- 				COALESCE((ele->>'TotalTransDup')::INT, 0),
-- 				COALESCE((ele->>'TotalTrans')::INT, 0),
-- 				COALESCE((ele->>'TotalTransDup')::INT, 0),
-- 				v_time,
-- 				3,
-- 				2,
-- 				(ele->>'IsScratchcard')::BOOL,
-- 				p_action_by,
-- 				p_action_by_name,
-- 				p_action_by,
-- 				p_action_by_name,
-- 				v_time
-- 			);
			
-- 			-- Cập nhật lại bảng CHECK
-- 			UPDATE DataCheck 
-- 			SET "TotalCanReturn" = "TotalCanReturn" - (COALESCE((ele->>'TotalTrans')::INT, 0) + COALESCE((ele->>'TotalTransDup')::INT, 0))
-- 			WHERE "AgencyId" = (ele->>'ToAgencyId')::INT 
-- 				AND (ele->>'LotteryChannelId')::INT = "LotteryChannelId"
-- 				AND ("LotteryDate" = (ele->>'LotteryDate')::DATE OR ("IsScratchcard" IS TRUE AND (ele->>'IsScratchcard')::BOOL IS TRUE));
			
-- 		END LOOP;
		
-- 		v_id := 1;
-- 		v_mess := 'Trả ế thành công';
		
-- 	--SỬA
-- 	ELSEIF p_action_type = 2 THEN 
-- 		-- DO SOMETHING
-- 		v_id := 1;
-- 		v_mess := 'Cập nhật thành công';
	
-- 	--XOÁ
-- 	ELSEIF p_action_type = 3 THEN 
		
	
-- 		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		
-- 			--Cập nhật dòng log
-- 			UPDATE "Transition" 
-- 			SET "IsDeleted" = TRUE
-- 			WHERE "TransitionId" = (ele->>'TransitionId')::INT
-- 			RETURNING "TotalTrans", "TotalTransDup", "IsScratchcard", "LotteryDate", "LotteryChannelId"
-- 			INTO v_check, v_check_dup, v_check_type,v_check_date, v_check_channel;
				
			
-- 			-- Cập nhật kho vé cào
-- 			IF v_check_type IS TRUE THEN
				
-- 				--Kiểm tra đã tồn tại kho vé cào chưa
-- 				IF NOT EXISTS(SELECT 1 FROM "Scratchcard" WHERE "SalePointId" = 0 AND "LotteryChannelId" = v_check_channel) THEN
-- 					RAISE 'Không đủ số lượng vé trong kho';
-- 				END IF;
				
-- 				UPDATE "Scratchcard" 
-- 				SET "TotalRemaining" = "TotalRemaining" + v_check
-- 				WHERE "SalePointId" = 0 AND "LotteryChannelId" = v_check_channel;
			
-- 			-- Cập nhật kho vé thường
-- 			ELSE 
			
-- 				--Kiểm tra xem kho vé đã tồn tại chưa
-- 				IF NOT EXISTS(
-- 					SELECT 1 FROM "Inventory"
-- 					WHERE "SalePointId" = 0 
-- 						AND "LotteryChannelId" = v_check_channel 
-- 						AND "LotteryDate" = v_check_date
-- 				) THEN
-- 					RAISE 'Không đủ số lượng vé trong kho';
-- 				END IF;
			
-- 				UPDATE "Inventory" 
-- 				SET 
-- 					"TotalRemaining" = "TotalRemaining" + v_check::INT,
-- 					"TotalDupRemaining" = "TotalDupRemaining" + v_check_dup::INT
-- 				WHERE "SalePointId" = 0
-- 					AND "LotteryChannelId" = v_check_channel
-- 					AND "LotteryDate" = v_check_date;
				
-- 			END IF;
-- 		END LOOP;
	
-- 		v_id := 1;
-- 		v_mess := 'Xoá thành công';
-- 	END IF;
	
-- 	RETURN QUERY
-- 	SELECT v_id, v_mess;

-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
-- 		RETURN QUERY
-- 		SELECT v_id, v_mess;
-- 	END;

-- END;
$$;


ALTER FUNCTION public.crm_activity_return_lottery(p_action_by integer, p_action_by_name character varying, p_data text, p_action_type integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_return_money_in_a_shift(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_return_money_in_a_shift(p_shift_distribute integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
			INSERT INTO "ReportMoney"("SalePointId","TotalMoneyInDay","ShiftDistributeId","ActionDate","ShiftId" )
			VALUES( 
			 (SELECT SD."SalePointid" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."SalePointid"),
			(SELECT SD."TotalSoldMoney" + SD."TotalRetailMoney" + SD."TotalWholesale" + SD."TotalWholesaleMoney" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."TotalSoldMoney", SD."TotalRetailMoney", SD."TotalWholesale", SD."TotalWholesaleMoney" ),
			 p_shift_distribute,
			 p_date,
			 (SELECT SD."ShiftId" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."ShiftId") ) ;
			UPDATE "ReportMoney" SET "TotalMoneyInDay" = "TotalMoneyInDay" + (SELECT SUM(T."TotalPrice") FROM "Transaction" T WHERE T."Date" = p_date AND T."ShiftDistributeId" = p_shift_distribute);
        v_id := 1;
        v_mess := 'Thêm thành công';


    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_return_money_in_a_shift(p_shift_distribute integer) OWNER TO postgres;

--
-- Name: crm_activity_return_money_in_a_shift(integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_return_money_in_a_shift(p_shift_distribute integer, p_date date) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
			INSERT INTO "ReportMoney"("SalePointId","TotalMoneyInDay","ShiftDistributeId","ActionDate","ShiftId" )
			VALUES( 
			 (SELECT SD."SalePointid" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."SalePointid"),
			(SELECT SD."TotalSoldMoney" + SD."TotalRetailMoney" + SD."TotalWholesale" + SD."TotalWholesaleMoney" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."TotalSoldMoney", SD."TotalRetailMoney", SD."TotalWholesale", SD."TotalWholesaleMoney" ),
			 p_shift_distribute,
			 p_date,
			 (SELECT SD."ShiftId" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."ShiftId") ) ;
			UPDATE "ReportMoney" SET "TotalMoneyInDay" = "TotalMoneyInDay" + (SELECT SUM(T."TotalPrice") FROM "Transaction" T WHERE T."Date" = p_date AND T."ShiftDistributeId" = p_shift_distribute);
        v_id := 1;
        v_mess := 'Thêm thành công';


    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_return_money_in_a_shift(p_shift_distribute integer, p_date date) OWNER TO postgres;

--
-- Name: crm_activity_return_money_in_a_shift(integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_return_money_in_a_shift(p_shift_distribute integer, p_date text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
			INSERT INTO "ReportMoney"("SalePointId","TotalMoneyInDay","ShiftDistributeId","ActionDate","ShiftId" )
			VALUES( 
			 (SELECT SD."SalePointid" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."SalePointid"),
			(SELECT SD."TotalSoldMoney" + SD."TotalRetailMoney" + SD."TotalWholesale" + SD."TotalWholesaleMoney" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."TotalSoldMoney", SD."TotalRetailMoney", SD."TotalWholesale", SD."TotalWholesaleMoney" ),
			 p_shift_distribute,
			 p_date,
			 (SELECT SD."ShiftId" FROM "ShiftTransfer" SD
			WHERE SD."ActionDate" :: DATE = p_date AND SD."ShiftDistributeId" = p_shift_distribute GROUP BY SD."ShiftId") ) ;
			UPDATE "ReportMoney" SET "TotalMoneyInDay" = "TotalMoneyInDay" + (SELECT SUM(T."TotalPrice") FROM "Transaction" T WHERE T."Date" = p_date AND T."ShiftDistributeId" = p_shift_distribute);
        v_id := 1;
        v_mess := 'Thêm thành công';


    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_return_money_in_a_shift(p_shift_distribute integer, p_date text) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data(p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "TodayData" text, "TomorrowData" text, "ScratchcardData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN
	
-- 	SELECT 
-- 		UR."UserId" INTO v_user_id
-- 	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
-- 	
-- 	SELECT
-- 		SD."SalePointId",
-- 		SP."SalePointName",
-- 		SD."ShiftDistributeId"
-- 	INTO 
-- 		v_sale_point_id,
-- 		v_sale_point_name,
-- 		v_shift_dis_id
-- 	FROM "ShiftDistribute" SD 
-- 		JOIN "SalePoint" SP ON SP."SalePointId" = SD."SalePointId"
-- 	WHERE SD."UserId" = v_user_id AND SD."DistributeDate" = NOW()::DATE;
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	SELECT SP."SalePointName" INTO v_sale_point_name FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;

	RETURN QUERY 
	SELECT 
		v_sale_point_id,
		v_sale_point_name,
		v_shift_dis_id,
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
					I."LotteryDate",
					I."LotteryChannelId",
					IC."LotteryChannelName",
					I."TotalRemaining",
					I."TotalDupRemaining",
					IC."ShortName",
					LCT."ShortName" AS "ChannelTypeShortName"
				FROM "Inventory" I
					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
					LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
				WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
			) r
		)::TEXT AS "TodayData",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
					I."LotteryDate",
					I."LotteryChannelId",
					IC."LotteryChannelName",
					I."TotalRemaining",
					I."TotalDupRemaining",
					IC."ShortName",
					LCT."ShortName" AS "ChannelTypeShortName"
				FROM "Inventory" I
					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
					LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
				WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
			) r
		)::TEXT AS "TomorrowData",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					ROW_NUMBER() OVER() AS "RowNumber",
					S."TotalRemaining"
				FROM "Scratchcard" S
				WHERE S."SalePointId" = v_sale_point_id
			) r
		)::TEXT AS "ScratchcardData";
	
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data(p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v10(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v10(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SoldLoto" text, "LCNameTd" text, "LCNameTm" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
	v_dayids int[];
BEGIN

	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
					LT."TransactionCode",
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=p_date::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 				WHEN 2 THEN 1
-- 				WHEN 3 THEN 2
-- 				WHEN 1 THEN 3

-- 			END
				) r
			)::TEXT AS "LCNameTd",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 					WHEN 2 THEN 1
-- 					WHEN 3 THEN 2
-- 					WHEN 1 THEN 3

-- 				END
				) r
			)::TEXT AS "LCNameTm",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
				(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
					LT."TransactionCode",
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=p_date::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 				WHEN 2 THEN 1
-- 				WHEN 3 THEN 2
-- 				WHEN 1 THEN 3

-- 			END
				) r
			)::TEXT AS "LCNameTd",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 					WHEN 2 THEN 1
-- 					WHEN 3 THEN 2
-- 					WHEN 1 THEN 3

-- 				END
				) r
			)::TEXT AS "LCNameTm",
			v_sale_point_address;
			END IF;
		END IF;
END;

-- DECLARE 
-- 	v_sale_point_id INT;
-- 	v_sale_point_name VARCHAR;
-- 	v_shift_dis_id INT;
-- 	v_is_super_admin BOOL;
-- 	v_is_manager BOOL;
-- 	v_is_staff BOOL;
-- 	v_user_id INT;
-- 	v_user_check INT;
-- 	v_shift_id INT;
-- 	v_shift_bef_dis_id INT;
-- 	v_flag BOOL;
-- 	v_sale_point_address VARCHAR;
-- 	v_temp INT;
-- 	v_total_leader INT;
-- 	v_dayids int[];
-- BEGIN

	
-- 	with tmp AS(
-- 	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
-- 	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
-- 	SELECT UR."UserId" INTO v_user_check
-- 	FROM "UserRole" UR 
-- 	WHERE UR."UserRoleId" = p_user_role_id;

-- 	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
-- 	FROM "ShiftDistribute" SD
-- 	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
-- 		AND SD."DistributeDate" = p_date;
	
-- 	IF v_shift_id IS NULL THEN
-- 		SELECT 
-- 			SD."SalePointId", 
-- 			SD."UserId", 
-- 			FALSE
-- 			INTO v_sale_point_id, v_user_id, v_flag
-- 		FROM "ShiftDistribute" SD
-- 		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
-- 	ELSEIF v_shift_id = 1 THEN 
	
-- 		SELECT 
-- 			SD."SalePointId", 
-- 			SD."UserId", 
-- 			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- 			INTO v_sale_point_id, v_user_id, v_flag
-- 		FROM "ShiftDistribute" SD
-- 		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
-- 	ELSE
	
-- 		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
-- 		FROM "ShiftDistribute" SD 
-- 		WHERE SD."DistributeDate" = p_date
-- 			AND SD."ShiftId" =  1
-- 			AND SD."SalePointId" =  v_sale_point_id;
			
-- 		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
-- 			SELECT 
-- 				SD."SalePointId", 
-- 				SD."UserId" , 
-- 				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- 				INTO v_sale_point_id, v_user_id, v_flag
-- 			FROM "ShiftDistribute" SD
-- 			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
-- 		END IF;

-- 	END IF;
	
-- 	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
-- 	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
-- 			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
-- 			RETURN QUERY 
-- 	SELECT 
-- 		(
-- 			with tmp AS(
-- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 			,tmp2 AS(
-- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- 					GROUP BY GSP."UserId",
-- 					GSP."GroupSalePointId",
-- 					GSP."Option" 
-- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 				)
-- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- 		)
-- 		 As "ManagerId",
-- 			(
-- 			with tmp AS(
-- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- 						GROUP BY 
-- 							GSP."UserId",
-- 							U."FullName",
-- 							GSP."GroupSalePointId",
-- 							GSP."Option" 
-- 					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 					)
-- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- 			) As "ManagerName",
-- 			v_user_id,
-- 			v_sale_point_id,
-- 			v_sale_point_name,
-- 			p_shift_distribute_id,
-- 			v_flag,
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TodayData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TomorrowData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER() AS "RowNumber",
-- 						S."TotalRemaining",
-- 						S."LotteryChannelId",
-- 						LC."ShortName",
-- 						LC."LotteryChannelName",
-- 						LC."RetailPrice"
-- 					FROM "Scratchcard" S
-- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- 					WHERE S."SalePointId" = v_sale_point_id
-- 					ORDER BY LC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "ScratchcardData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- 					FROM "SalePointLog" SL
-- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- 				) r
-- 			)::TEXT AS "SoldData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 					LT."TransactionCode",
-- 						LT."LotoType",
-- 						LT."Type",
-- 						LC."LotteryChannelName",
-- 					LT."Seri",
-- 					LT."IntoMoney",
-- 					LT."ShiftId",
-- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
-- 					order by LT."Time" DESC
-- 				) r
-- 			)::TEXT AS "SoldLoto",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=p_date::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 				WHEN 2 THEN 1
-- -- 				WHEN 3 THEN 2
-- -- 				WHEN 1 THEN 3

-- -- 			END
-- 				) r
-- 			)::TEXT AS "LCNameTd",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 					WHEN 2 THEN 1
-- -- 					WHEN 3 THEN 2
-- -- 					WHEN 1 THEN 3

-- -- 				END
-- 				) r
-- 			)::TEXT AS "LCNameTm",
-- 			v_sale_point_address;
-- 		ELSE
-- 		RETURN QUERY 
-- 			SELECT 
-- 		(
-- 			with tmp AS(
-- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 			,tmp2 AS(
-- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
-- 					GROUP BY GSP."UserId",
-- 					GSP."GroupSalePointId",
-- 					GSP."Option" 
-- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 				)
-- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- 		)
-- 		 As "ManagerId",
-- 			(
-- 			with tmp AS(
-- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
-- 						GROUP BY 
-- 							GSP."UserId",
-- 							U."FullName",
-- 							GSP."GroupSalePointId",
-- 							GSP."Option" 
-- 					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 					)
-- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- 			) As "ManagerName",
-- 			v_user_id,
-- 			v_sale_point_id,
-- 			v_sale_point_name,
-- 			p_shift_distribute_id,
-- 			v_flag,
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TodayData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TomorrowData",
			
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER() AS "RowNumber",
-- 						S."TotalRemaining",
-- 						S."LotteryChannelId",
-- 						LC."ShortName",
-- 						LC."LotteryChannelName",
-- 						LC."RetailPrice"
-- 					FROM "Scratchcard" S
-- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- 					WHERE S."SalePointId" = v_sale_point_id
-- 					ORDER BY LC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "ScratchcardData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- 					FROM "SalePointLog" SL
-- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- 				) r
-- 			)::TEXT AS "SoldData",
-- 				(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 					LT."TransactionCode",
-- 						LT."LotoType",
-- 						LT."Type",
-- 						LC."LotteryChannelName",
-- 					LT."Seri",
-- 					LT."IntoMoney",
-- 					LT."ShiftId",
-- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
-- 					order by LT."Time" DESC
-- 				) r
-- 			)::TEXT AS "SoldLoto",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=p_date::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 				WHEN 2 THEN 1
-- -- 				WHEN 3 THEN 2
-- -- 				WHEN 1 THEN 3

-- -- 			END
-- 				) r
-- 			)::TEXT AS "LCNameTd",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 					WHEN 2 THEN 1
-- -- 					WHEN 3 THEN 2
-- -- 					WHEN 1 THEN 3

-- -- 				END
-- 				) r
-- 			)::TEXT AS "LCNameTm",
-- 			v_sale_point_address;
-- 			END IF;
-- 		END IF;
-- END;

-- -- DECLARE 
-- -- 	v_sale_point_id INT;
-- -- 	v_sale_point_name VARCHAR;
-- -- 	v_shift_dis_id INT;
-- -- 	v_is_super_admin BOOL;
-- -- 	v_is_manager BOOL;
-- -- 	v_is_staff BOOL;
-- -- 	v_user_id INT;
-- -- 	v_user_check INT;
-- -- 	v_shift_id INT;
-- -- 	v_shift_bef_dis_id INT;
-- -- 	v_flag BOOL;
-- -- 	v_sale_point_address VARCHAR;
-- -- 	v_temp INT;
-- -- 	v_total_leader INT;
-- -- 	v_dayids int[];
-- -- BEGIN

	
-- -- 	with tmp AS(
-- -- 	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
-- -- 	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
-- -- 	SELECT UR."UserId" INTO v_user_check
-- -- 	FROM "UserRole" UR 
-- -- 	WHERE UR."UserRoleId" = p_user_role_id;

-- -- 	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
-- -- 	FROM "ShiftDistribute" SD
-- -- 	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 		AND SD."DistributeDate" = p_date;
	
-- -- 	IF v_shift_id IS NULL THEN
-- -- 		SELECT 
-- -- 			SD."SalePointId", 
-- -- 			SD."UserId", 
-- -- 			FALSE
-- -- 			INTO v_sale_point_id, v_user_id, v_flag
-- -- 		FROM "ShiftDistribute" SD
-- -- 		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
-- -- 	ELSEIF v_shift_id = 1 THEN 
	
-- -- 		SELECT 
-- -- 			SD."SalePointId", 
-- -- 			SD."UserId", 
-- -- 			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- -- 			INTO v_sale_point_id, v_user_id, v_flag
-- -- 		FROM "ShiftDistribute" SD
-- -- 		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
-- -- 	ELSE
	
-- -- 		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
-- -- 		FROM "ShiftDistribute" SD 
-- -- 		WHERE SD."DistributeDate" = p_date
-- -- 			AND SD."ShiftId" =  1
-- -- 			AND SD."SalePointId" =  v_sale_point_id;
			
-- -- 		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
-- -- 			SELECT 
-- -- 				SD."SalePointId", 
-- -- 				SD."UserId" , 
-- -- 				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- -- 				INTO v_sale_point_id, v_user_id, v_flag
-- -- 			FROM "ShiftDistribute" SD
-- -- 			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
-- -- 		END IF;

-- -- 	END IF;
	
-- -- 	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
-- -- 	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
-- -- 			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
-- -- 			RETURN QUERY 
-- -- 	SELECT 
-- -- 		(
-- -- 			with tmp AS(
-- -- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 			,tmp2 AS(
-- -- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- -- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- -- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- -- 					GROUP BY GSP."UserId",
-- -- 					GSP."GroupSalePointId",
-- -- 					GSP."Option" 
-- -- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 				)
-- -- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- -- 		)
-- -- 		 As "ManagerId",
-- -- 			(
-- -- 			with tmp AS(
-- -- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- -- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- -- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- -- 						GROUP BY 
-- -- 							GSP."UserId",
-- -- 							U."FullName",
-- -- 							GSP."GroupSalePointId",
-- -- 							GSP."Option" 
-- -- 					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 					)
-- -- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- -- 			) As "ManagerName",
-- -- 			v_user_id,
-- -- 			v_sale_point_id,
-- -- 			v_sale_point_name,
-- -- 			p_shift_distribute_id,
-- -- 			v_flag,
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TodayData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TomorrowData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER() AS "RowNumber",
-- -- 						S."TotalRemaining",
-- -- 						S."LotteryChannelId",
-- -- 						LC."ShortName",
-- -- 						LC."LotteryChannelName",
-- -- 						LC."RetailPrice"
-- -- 					FROM "Scratchcard" S
-- -- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- -- 					WHERE S."SalePointId" = v_sale_point_id
-- -- 					ORDER BY LC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "ScratchcardData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- -- 					FROM "SalePointLog" SL
-- -- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- -- 				) r
-- -- 			)::TEXT AS "SoldData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 					LT."TransactionCode",
-- -- 						LT."LotoType",
-- -- 						LT."Type",
-- -- 						LC."LotteryChannelName",
-- -- 					LT."Seri",
-- -- 					LT."IntoMoney",
-- -- 					LT."ShiftId",
-- -- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- -- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- -- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
-- -- 					order by LT."Time" DESC
-- -- 				) r
-- -- 			)::TEXT AS "SoldLoto",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=p_date::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 				WHEN 2 THEN 1
-- -- -- 				WHEN 3 THEN 2
-- -- -- 				WHEN 1 THEN 3

-- -- -- 			END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTd",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 					WHEN 2 THEN 1
-- -- -- 					WHEN 3 THEN 2
-- -- -- 					WHEN 1 THEN 3

-- -- -- 				END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTm",
-- -- 			v_sale_point_address;
-- -- 		ELSE
-- -- 		RETURN QUERY 
-- -- 			SELECT 
-- -- 		(
-- -- 			with tmp AS(
-- -- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 			,tmp2 AS(
-- -- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- -- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- -- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
-- -- 					GROUP BY GSP."UserId",
-- -- 					GSP."GroupSalePointId",
-- -- 					GSP."Option" 
-- -- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 				)
-- -- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- -- 		)
-- -- 		 As "ManagerId",
-- -- 			(
-- -- 			with tmp AS(
-- -- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- -- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- -- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
-- -- 						GROUP BY 
-- -- 							GSP."UserId",
-- -- 							U."FullName",
-- -- 							GSP."GroupSalePointId",
-- -- 							GSP."Option" 
-- -- 					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 					)
-- -- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- -- 			) As "ManagerName",
-- -- 			v_user_id,
-- -- 			v_sale_point_id,
-- -- 			v_sale_point_name,
-- -- 			p_shift_distribute_id,
-- -- 			v_flag,
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TodayData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TomorrowData",
			
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER() AS "RowNumber",
-- -- 						S."TotalRemaining",
-- -- 						S."LotteryChannelId",
-- -- 						LC."ShortName",
-- -- 						LC."LotteryChannelName",
-- -- 						LC."RetailPrice"
-- -- 					FROM "Scratchcard" S
-- -- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- -- 					WHERE S."SalePointId" = v_sale_point_id
-- -- 					ORDER BY LC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "ScratchcardData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- -- 					FROM "SalePointLog" SL
-- -- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- -- 				) r
-- -- 			)::TEXT AS "SoldData",
-- -- 				(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 					LT."TransactionCode",
-- -- 						LT."LotoType",
-- -- 						LT."Type",
-- -- 						LC."LotteryChannelName",
-- -- 					LT."Seri",
-- -- 					LT."IntoMoney",
-- -- 					LT."ShiftId",
-- -- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- -- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- -- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
-- -- 					order by LT."Time" DESC
-- -- 				) r
-- -- 			)::TEXT AS "SoldLoto",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=p_date::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 				WHEN 2 THEN 1
-- -- -- 				WHEN 3 THEN 2
-- -- -- 				WHEN 1 THEN 3

-- -- -- 			END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTd",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 					WHEN 2 THEN 1
-- -- -- 					WHEN 3 THEN 2
-- -- -- 					WHEN 1 THEN 3

-- -- -- 				END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTm",
-- -- 			v_sale_point_address;
-- -- 			END IF;
-- -- 		END IF;
-- -- END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v10(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v10_bk(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v10_bk(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SoldLoto" text, "LCNameTd" text, "LCNameTm" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
	v_dayids int[];
BEGIN

	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
					LT."TransactionCode",
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=p_date::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 				WHEN 2 THEN 1
-- 				WHEN 3 THEN 2
-- 				WHEN 1 THEN 3

-- 			END
				) r
			)::TEXT AS "LCNameTd",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 					WHEN 2 THEN 1
-- 					WHEN 3 THEN 2
-- 					WHEN 1 THEN 3

-- 				END
				) r
			)::TEXT AS "LCNameTm",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName",
					IC."RegionId"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
				(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
					LT."TransactionCode",
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=p_date::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 				WHEN 2 THEN 1
-- 				WHEN 3 THEN 2
-- 				WHEN 1 THEN 3

-- 			END
				) r
			)::TEXT AS "LCNameTd",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" in (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE ) and LT."RegionId"=2
-- 					ORDER BY CASE LT."RegionId"
-- 					WHEN 2 THEN 1
-- 					WHEN 3 THEN 2
-- 					WHEN 1 THEN 3

-- 				END
				) r
			)::TEXT AS "LCNameTm",
			v_sale_point_address;
			END IF;
		END IF;
END;

-- DECLARE 
-- 	v_sale_point_id INT;
-- 	v_sale_point_name VARCHAR;
-- 	v_shift_dis_id INT;
-- 	v_is_super_admin BOOL;
-- 	v_is_manager BOOL;
-- 	v_is_staff BOOL;
-- 	v_user_id INT;
-- 	v_user_check INT;
-- 	v_shift_id INT;
-- 	v_shift_bef_dis_id INT;
-- 	v_flag BOOL;
-- 	v_sale_point_address VARCHAR;
-- 	v_temp INT;
-- 	v_total_leader INT;
-- 	v_dayids int[];
-- BEGIN

	
-- 	with tmp AS(
-- 	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
-- 	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
-- 	SELECT UR."UserId" INTO v_user_check
-- 	FROM "UserRole" UR 
-- 	WHERE UR."UserRoleId" = p_user_role_id;

-- 	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
-- 	FROM "ShiftDistribute" SD
-- 	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
-- 		AND SD."DistributeDate" = p_date;
	
-- 	IF v_shift_id IS NULL THEN
-- 		SELECT 
-- 			SD."SalePointId", 
-- 			SD."UserId", 
-- 			FALSE
-- 			INTO v_sale_point_id, v_user_id, v_flag
-- 		FROM "ShiftDistribute" SD
-- 		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
-- 	ELSEIF v_shift_id = 1 THEN 
	
-- 		SELECT 
-- 			SD."SalePointId", 
-- 			SD."UserId", 
-- 			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- 			INTO v_sale_point_id, v_user_id, v_flag
-- 		FROM "ShiftDistribute" SD
-- 		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
-- 	ELSE
	
-- 		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
-- 		FROM "ShiftDistribute" SD 
-- 		WHERE SD."DistributeDate" = p_date
-- 			AND SD."ShiftId" =  1
-- 			AND SD."SalePointId" =  v_sale_point_id;
			
-- 		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
-- 			SELECT 
-- 				SD."SalePointId", 
-- 				SD."UserId" , 
-- 				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- 				INTO v_sale_point_id, v_user_id, v_flag
-- 			FROM "ShiftDistribute" SD
-- 			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
-- 		END IF;

-- 	END IF;
	
-- 	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
-- 	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
-- 			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
-- 			RETURN QUERY 
-- 	SELECT 
-- 		(
-- 			with tmp AS(
-- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 			,tmp2 AS(
-- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- 					GROUP BY GSP."UserId",
-- 					GSP."GroupSalePointId",
-- 					GSP."Option" 
-- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 				)
-- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- 		)
-- 		 As "ManagerId",
-- 			(
-- 			with tmp AS(
-- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- 						GROUP BY 
-- 							GSP."UserId",
-- 							U."FullName",
-- 							GSP."GroupSalePointId",
-- 							GSP."Option" 
-- 					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 					)
-- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- 			) As "ManagerName",
-- 			v_user_id,
-- 			v_sale_point_id,
-- 			v_sale_point_name,
-- 			p_shift_distribute_id,
-- 			v_flag,
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TodayData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TomorrowData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER() AS "RowNumber",
-- 						S."TotalRemaining",
-- 						S."LotteryChannelId",
-- 						LC."ShortName",
-- 						LC."LotteryChannelName",
-- 						LC."RetailPrice"
-- 					FROM "Scratchcard" S
-- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- 					WHERE S."SalePointId" = v_sale_point_id
-- 					ORDER BY LC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "ScratchcardData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- 					FROM "SalePointLog" SL
-- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- 				) r
-- 			)::TEXT AS "SoldData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 					LT."TransactionCode",
-- 						LT."LotoType",
-- 						LT."Type",
-- 						LC."LotteryChannelName",
-- 					LT."Seri",
-- 					LT."IntoMoney",
-- 					LT."ShiftId",
-- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
-- 					order by LT."Time" DESC
-- 				) r
-- 			)::TEXT AS "SoldLoto",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=p_date::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 				WHEN 2 THEN 1
-- -- 				WHEN 3 THEN 2
-- -- 				WHEN 1 THEN 3

-- -- 			END
-- 				) r
-- 			)::TEXT AS "LCNameTd",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 					WHEN 2 THEN 1
-- -- 					WHEN 3 THEN 2
-- -- 					WHEN 1 THEN 3

-- -- 				END
-- 				) r
-- 			)::TEXT AS "LCNameTm",
-- 			v_sale_point_address;
-- 		ELSE
-- 		RETURN QUERY 
-- 			SELECT 
-- 		(
-- 			with tmp AS(
-- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 			,tmp2 AS(
-- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
-- 					GROUP BY GSP."UserId",
-- 					GSP."GroupSalePointId",
-- 					GSP."Option" 
-- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 				)
-- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- 		)
-- 		 As "ManagerId",
-- 			(
-- 			with tmp AS(
-- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- 					FROM "ShiftDistribute" SD 
-- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
-- 						GROUP BY 
-- 							GSP."UserId",
-- 							U."FullName",
-- 							GSP."GroupSalePointId",
-- 							GSP."Option" 
-- 					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
-- 					LIMIT 1
-- 					)
-- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- 			) As "ManagerName",
-- 			v_user_id,
-- 			v_sale_point_id,
-- 			v_sale_point_name,
-- 			p_shift_distribute_id,
-- 			v_flag,
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TodayData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- 						I."LotteryDate",
-- 						I."LotteryChannelId",
-- 						IC."LotteryChannelName",
-- 						IC."RetailPrice",
-- 						I."TotalRemaining",
-- 						I."TotalDupRemaining",
-- 						IC."ShortName",
-- 						LCT."ShortName" AS "ChannelTypeShortName"
-- 					FROM "Inventory" I
-- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "TomorrowData",
			
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						ROW_NUMBER() OVER() AS "RowNumber",
-- 						S."TotalRemaining",
-- 						S."LotteryChannelId",
-- 						LC."ShortName",
-- 						LC."LotteryChannelName",
-- 						LC."RetailPrice"
-- 					FROM "Scratchcard" S
-- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- 					WHERE S."SalePointId" = v_sale_point_id
-- 					ORDER BY LC."LotteryChannelTypeId"
-- 				) r
-- 			)::TEXT AS "ScratchcardData",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- 					FROM "SalePointLog" SL
-- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- 				) r
-- 			)::TEXT AS "SoldData",
-- 				(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT
-- 					LT."TransactionCode",
-- 						LT."LotoType",
-- 						LT."Type",
-- 						LC."LotteryChannelName",
-- 					LT."Seri",
-- 					LT."IntoMoney",
-- 					LT."ShiftId",
-- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
-- 					order by LT."Time" DESC
-- 				) r
-- 			)::TEXT AS "SoldLoto",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=p_date::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 				WHEN 2 THEN 1
-- -- 				WHEN 3 THEN 2
-- -- 				WHEN 1 THEN 3

-- -- 			END
-- 				) r
-- 			)::TEXT AS "LCNameTd",
-- 			(
-- 				SELECT array_to_json(
-- 					ARRAY_AGG (r))
-- 				FROM
-- 				(
-- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- 			JOIN "Inventory" I
-- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- 			where 
-- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1) and LT."RegionId"=2
-- -- 					ORDER BY CASE LT."RegionId"
-- -- 					WHEN 2 THEN 1
-- -- 					WHEN 3 THEN 2
-- -- 					WHEN 1 THEN 3

-- -- 				END
-- 				) r
-- 			)::TEXT AS "LCNameTm",
-- 			v_sale_point_address;
-- 			END IF;
-- 		END IF;
-- END;

-- -- DECLARE 
-- -- 	v_sale_point_id INT;
-- -- 	v_sale_point_name VARCHAR;
-- -- 	v_shift_dis_id INT;
-- -- 	v_is_super_admin BOOL;
-- -- 	v_is_manager BOOL;
-- -- 	v_is_staff BOOL;
-- -- 	v_user_id INT;
-- -- 	v_user_check INT;
-- -- 	v_shift_id INT;
-- -- 	v_shift_bef_dis_id INT;
-- -- 	v_flag BOOL;
-- -- 	v_sale_point_address VARCHAR;
-- -- 	v_temp INT;
-- -- 	v_total_leader INT;
-- -- 	v_dayids int[];
-- -- BEGIN

	
-- -- 	with tmp AS(
-- -- 	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
-- -- 	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
-- -- 	SELECT UR."UserId" INTO v_user_check
-- -- 	FROM "UserRole" UR 
-- -- 	WHERE UR."UserRoleId" = p_user_role_id;

-- -- 	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
-- -- 	FROM "ShiftDistribute" SD
-- -- 	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 		AND SD."DistributeDate" = p_date;
	
-- -- 	IF v_shift_id IS NULL THEN
-- -- 		SELECT 
-- -- 			SD."SalePointId", 
-- -- 			SD."UserId", 
-- -- 			FALSE
-- -- 			INTO v_sale_point_id, v_user_id, v_flag
-- -- 		FROM "ShiftDistribute" SD
-- -- 		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
-- -- 	ELSEIF v_shift_id = 1 THEN 
	
-- -- 		SELECT 
-- -- 			SD."SalePointId", 
-- -- 			SD."UserId", 
-- -- 			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- -- 			INTO v_sale_point_id, v_user_id, v_flag
-- -- 		FROM "ShiftDistribute" SD
-- -- 		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
-- -- 	ELSE
	
-- -- 		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
-- -- 		FROM "ShiftDistribute" SD 
-- -- 		WHERE SD."DistributeDate" = p_date
-- -- 			AND SD."ShiftId" =  1
-- -- 			AND SD."SalePointId" =  v_sale_point_id;
			
-- -- 		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
-- -- 			SELECT 
-- -- 				SD."SalePointId", 
-- -- 				SD."UserId" , 
-- -- 				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
-- -- 				INTO v_sale_point_id, v_user_id, v_flag
-- -- 			FROM "ShiftDistribute" SD
-- -- 			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
-- -- 		END IF;

-- -- 	END IF;
	
-- -- 	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
-- -- 	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
-- -- 			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
-- -- 			RETURN QUERY 
-- -- 	SELECT 
-- -- 		(
-- -- 			with tmp AS(
-- -- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 			,tmp2 AS(
-- -- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- -- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- -- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- -- 					GROUP BY GSP."UserId",
-- -- 					GSP."GroupSalePointId",
-- -- 					GSP."Option" 
-- -- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 				)
-- -- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- -- 		)
-- -- 		 As "ManagerId",
-- -- 			(
-- -- 			with tmp AS(
-- -- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- -- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- -- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
-- -- 						GROUP BY 
-- -- 							GSP."UserId",
-- -- 							U."FullName",
-- -- 							GSP."GroupSalePointId",
-- -- 							GSP."Option" 
-- -- 					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 					)
-- -- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- -- 			) As "ManagerName",
-- -- 			v_user_id,
-- -- 			v_sale_point_id,
-- -- 			v_sale_point_name,
-- -- 			p_shift_distribute_id,
-- -- 			v_flag,
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TodayData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TomorrowData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER() AS "RowNumber",
-- -- 						S."TotalRemaining",
-- -- 						S."LotteryChannelId",
-- -- 						LC."ShortName",
-- -- 						LC."LotteryChannelName",
-- -- 						LC."RetailPrice"
-- -- 					FROM "Scratchcard" S
-- -- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- -- 					WHERE S."SalePointId" = v_sale_point_id
-- -- 					ORDER BY LC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "ScratchcardData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- -- 					FROM "SalePointLog" SL
-- -- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- -- 				) r
-- -- 			)::TEXT AS "SoldData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 					LT."TransactionCode",
-- -- 						LT."LotoType",
-- -- 						LT."Type",
-- -- 						LC."LotteryChannelName",
-- -- 					LT."Seri",
-- -- 					LT."IntoMoney",
-- -- 					LT."ShiftId",
-- -- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- -- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- -- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
-- -- 					order by LT."Time" DESC
-- -- 				) r
-- -- 			)::TEXT AS "SoldLoto",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=p_date::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 				WHEN 2 THEN 1
-- -- -- 				WHEN 3 THEN 2
-- -- -- 				WHEN 1 THEN 3

-- -- -- 			END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTd",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 					WHEN 2 THEN 1
-- -- -- 					WHEN 3 THEN 2
-- -- -- 					WHEN 1 THEN 3

-- -- -- 				END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTm",
-- -- 			v_sale_point_address;
-- -- 		ELSE
-- -- 		RETURN QUERY 
-- -- 			SELECT 
-- -- 		(
-- -- 			with tmp AS(
-- -- 				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 			,tmp2 AS(
-- -- 			SELECT GSP."UserId" FROM "tmp1" GSP
-- -- 				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
-- -- 			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
-- -- 					GROUP BY GSP."UserId",
-- -- 					GSP."GroupSalePointId",
-- -- 					GSP."Option" 
-- -- 				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 				)
-- -- 				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
-- -- 		)
-- -- 		 As "ManagerId",
-- -- 			(
-- -- 			with tmp AS(
-- -- 						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
-- -- 					FROM "ShiftDistribute" SD 
-- -- 				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
-- -- 					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
-- -- 				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
-- -- 				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
-- -- 						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
-- -- 						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
-- -- 						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
-- -- 						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
-- -- 						GROUP BY 
-- -- 							GSP."UserId",
-- -- 							U."FullName",
-- -- 							GSP."GroupSalePointId",
-- -- 							GSP."Option" 
-- -- 					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
-- -- 					LIMIT 1
-- -- 					)
-- -- 					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
-- -- 			) As "ManagerName",
-- -- 			v_user_id,
-- -- 			v_sale_point_id,
-- -- 			v_sale_point_name,
-- -- 			p_shift_distribute_id,
-- -- 			v_flag,
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TodayData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
-- -- 						I."LotteryDate",
-- -- 						I."LotteryChannelId",
-- -- 						IC."LotteryChannelName",
-- -- 						IC."RetailPrice",
-- -- 						I."TotalRemaining",
-- -- 						I."TotalDupRemaining",
-- -- 						IC."ShortName",
-- -- 						LCT."ShortName" AS "ChannelTypeShortName"
-- -- 					FROM "Inventory" I
-- -- 						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
-- -- 						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
-- -- 					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
-- -- 					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "TomorrowData",
			
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						ROW_NUMBER() OVER() AS "RowNumber",
-- -- 						S."TotalRemaining",
-- -- 						S."LotteryChannelId",
-- -- 						LC."ShortName",
-- -- 						LC."LotteryChannelName",
-- -- 						LC."RetailPrice"
-- -- 					FROM "Scratchcard" S
-- -- 						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
-- -- 					WHERE S."SalePointId" = v_sale_point_id
-- -- 					ORDER BY LC."LotteryChannelTypeId"
-- -- 				) r
-- -- 			)::TEXT AS "ScratchcardData",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
-- -- 						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
-- -- 						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
-- -- 					FROM "SalePointLog" SL
-- -- 					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
-- -- 				) r
-- -- 			)::TEXT AS "SoldData",
-- -- 				(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT
-- -- 					LT."TransactionCode",
-- -- 						LT."LotoType",
-- -- 						LT."Type",
-- -- 						LC."LotteryChannelName",
-- -- 					LT."Seri",
-- -- 					LT."IntoMoney",
-- -- 					LT."ShiftId",
-- -- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
-- -- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- -- 					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
-- -- 					order by LT."Time" DESC
-- -- 				) r
-- -- 			)::TEXT AS "SoldLoto",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=p_date::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 				WHEN 2 THEN 1
-- -- -- 				WHEN 3 THEN 2
-- -- -- 				WHEN 1 THEN 3

-- -- -- 			END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTd",
-- -- 			(
-- -- 				SELECT array_to_json(
-- -- 					ARRAY_AGG (r))
-- -- 				FROM
-- -- 				(
-- -- 					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
-- -- 			JOIN "Inventory" I
-- -- 				on  LT."LotteryChannelId" = I."LotteryChannelId"
-- -- 			where LT."RegionId"=2 and
-- -- 				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1)
-- -- -- 					ORDER BY CASE LT."RegionId"
-- -- -- 					WHEN 2 THEN 1
-- -- -- 					WHEN 3 THEN 2
-- -- -- 					WHEN 1 THEN 3

-- -- -- 				END
-- -- 				) r
-- -- 			)::TEXT AS "LCNameTm",
-- -- 			v_sale_point_address;
-- -- 			END IF;
-- -- 		END IF;
-- -- END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v10_bk(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v11(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v11(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SoldLoto" text, "LCNameTd" text, "LCNameTm" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
	v_dayids int[];
BEGIN

	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice",
						LC."Order"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
					LT."TransactionCode",
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date  and LT."IsDelete"=true and LT."ShiftId"=v_shift_id  
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=p_date::DATE Limit 1)
					ORDER BY CASE LT."RegionId"
				WHEN 2 THEN 1
				WHEN 3 THEN 2
				WHEN 1 THEN 3

			END
				) r
			)::TEXT AS "LCNameTd",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1)
					ORDER BY CASE LT."RegionId"
					WHEN 2 THEN 1
					WHEN 3 THEN 2
					WHEN 1 THEN 3

				END
				) r
			)::TEXT AS "LCNameTm",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice",
						LC."Order"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
				(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
					LT."TransactionCode",
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time"::date = p_date::date and LT."ShiftId"=v_shift_id  and LT."IsDelete"=true
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=p_date::DATE Limit 1)
					ORDER BY CASE LT."RegionId"
				WHEN 2 THEN 1
				WHEN 3 THEN 2
				WHEN 1 THEN 3

			END
				) r
			)::TEXT AS "LCNameTd",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT LT."LotteryChannelId",LT."LotteryChannelName" FROM "LotteryChannel" LT WHERE "DayIds" @> (Select LT."DayIds" from "LotteryChannel" LT 
			JOIN "Inventory" I
				on  LT."LotteryChannelId" = I."LotteryChannelId"
			where 
				I."LotteryDate"::date=(p_date::date + '1 day'::INTERVAL)::DATE Limit 1)
					ORDER BY CASE LT."RegionId"
					WHEN 2 THEN 1
					WHEN 3 THEN 2
					WHEN 1 THEN 3

				END
				) r
			)::TEXT AS "LCNameTm",
			
			(
				
					select sum(mb."ReceivedSalePoint") from "ManagerBorrow" mb where mb."CreatedDate"::date=p_date::date and "shiftId"=v_shift_id and mb."SalePointId"=v_sale_point_id and "IsDeleted"=false
				
			)::TEXT AS "ReceivedSalePoint",
			(
						select sum(tc."TotalPrice") from "Transaction" tc where tc."TransactionTypeId"=2 and tc."ActionDate"::Date=p_date::date and tc."SalePointId"=v_sale_point_id and "IsDeleted"=false
				
				
			)::TEXT AS "TotalPrice",
			
			v_sale_point_address;
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v11(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v2(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v2(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "TodayData" text, "TomorrowData" text, "ScratchcardData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
BEGIN
	
-- 	SELECT 
-- 		UR."UserId" INTO v_user_id
-- 	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
-- 	
-- 	SELECT
-- 		SD."SalePointId",
-- 		SP."SalePointName",
-- 		SD."ShiftDistributeId"
-- 	INTO 
-- 		v_sale_point_id,
-- 		v_sale_point_name,
-- 		v_shift_dis_id
-- 	FROM "ShiftDistribute" SD 
-- 		JOIN "SalePoint" SP ON SP."SalePointId" = SD."SalePointId"
-- 	WHERE SD."UserId" = v_user_id AND SD."DistributeDate" = NOW()::DATE;
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;

	SELECT 
		SD."SalePointId", SD."UserId" INTO v_sale_point_id, v_user_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id AND v_shift_dis_id = p_shift_distribute_id ;
	
	SELECT SP."SalePointName" INTO v_sale_point_name FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL) THEN
		RETURN QUERY 
		SELECT 
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining"
					FROM "Scratchcard" S
					WHERE S."SalePointId" = v_sale_point_id
				) r
			)::TEXT AS "ScratchcardData";
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v2(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v3(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v3(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
BEGIN

	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			) 
		SELECT GSP."UserId" FROM "GroupSalePoint" GSP
			LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
			LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
		WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date::DATE
				GROUP BY GSP."UserId",
				GSP."Option"
			ORDER BY GSP."Option" ASC
		LIMIT 1
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				)
			SELECT U."FullName" FROM "GroupSalePoint" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "User" U ON U."UserId" = UR."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date ::DATE
				GROUP BY 
					GSP."UserId",
					GSP."Option",
					U."FullName"
			ORDER BY GSP."Option" ASC
		LIMIT 1
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			) 
		SELECT GSP."UserId" FROM "GroupSalePoint" GSP
			LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
			LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
		WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date::DATE
				GROUP BY GSP."UserId",
				GSP."Option"
			ORDER BY GSP."Option" ASC
		LIMIT 1
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				)
			SELECT U."FullName" FROM "GroupSalePoint" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "User" U ON U."UserId" = UR."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date ::DATE
				GROUP BY 
					GSP."UserId",
					GSP."Option",
					U."FullName"
			ORDER BY GSP."Option" ASC
		LIMIT 1
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
				
			END IF;
			RAISE NOTICE 'value of a : %', v_temp; 
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v3(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v4(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v4(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
BEGIN

	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			) 
		SELECT GSP."UserId" FROM "GroupSalePoint" GSP
			LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
			LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
		WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date::DATE
				GROUP BY GSP."UserId",
				GSP."Option"
			ORDER BY GSP."Option" ASC
		LIMIT 1
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				)
			SELECT U."FullName" FROM "GroupSalePoint" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "User" U ON U."UserId" = UR."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date ::DATE
				GROUP BY 
					GSP."UserId",
					GSP."Option",
					U."FullName"
			ORDER BY GSP."Option" ASC
		LIMIT 1
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			) 
		SELECT GSP."UserId" FROM "GroupSalePoint" GSP
			LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
			LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
		WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date::DATE
				GROUP BY GSP."UserId",
				GSP."Option"
			ORDER BY GSP."Option" ASC
		LIMIT 1
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				)
			SELECT U."FullName" FROM "GroupSalePoint" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "User" U ON U."UserId" = UR."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE = p_date ::DATE
				GROUP BY 
					GSP."UserId",
					GSP."Option",
					U."FullName"
			ORDER BY GSP."Option" ASC
		LIMIT 1
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
				
			END IF;
			RAISE NOTICE 'value of a : %', v_temp; 
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v4(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v5(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v5(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
BEGIN
	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v5(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v6(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v6(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
BEGIN
	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						(S."TotalRemaining" + (SELECT SL."Quantity" FROM "SalePointLog" SL WHERE SL."ShiftDistributeId" = p_shift_distribute_id  AND SL."LotteryChannelId" = S."LotteryChannelId") ) AS "TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v6(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v7(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v7(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SoldLoto" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
BEGIN
	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
				(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time" >= (p_date::date - '1 day'::INTERVAL)+ '15:55:00'::time 
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			v_sale_point_address;
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v7(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_data_v8(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_data_v8(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) RETURNS TABLE("ManagerId" integer, "ManagerName" character varying, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "Flag" boolean, "TodayData" text, "TomorrowData" text, "ScratchcardData" text, "SoldData" text, "SoldLoto" text, "SalePointAddress" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_user_id INT;
	v_user_check INT;
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_flag BOOL;
	v_sale_point_address VARCHAR;
	v_temp INT;
	v_total_leader INT;
BEGIN
	
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	SELECT UR."UserId" INTO v_user_check
	FROM "UserRole" UR 
	WHERE UR."UserRoleId" = p_user_role_id;

	SELECT SD."ShiftDistributeId", SD."ShiftId" , SD."SalePointId" INTO v_shift_dis_id, v_shift_id ,v_sale_point_id
	FROM "ShiftDistribute" SD
	WHERE SD."ShiftDistributeId" = p_shift_distribute_id
		AND SD."DistributeDate" = p_date;
	
	IF v_shift_id IS NULL THEN
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			FALSE
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
	
	ELSEIF v_shift_id = 1 THEN 
	
		SELECT 
			SD."SalePointId", 
			SD."UserId", 
			(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
			INTO v_sale_point_id, v_user_id, v_flag
		FROM "ShiftDistribute" SD
		WHERE SD."ShiftDistributeId" = v_shift_dis_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = p_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_sale_point_id;
			
		IF(EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id) OR v_shift_bef_dis_id IS NULL) THEN
		
			SELECT 
				SD."SalePointId", 
				SD."UserId" , 
				(CASE WHEN EXISTS (SELECT 1 FROM "ShiftTransfer" SF WHERE SF."ShiftDistributeId" = v_shift_dis_id) THEN FALSE ELSE TRUE END)
				INTO v_sale_point_id, v_user_id, v_flag
			FROM "ShiftDistribute" SD
			WHERE SD."ShiftDistributeId" = p_shift_distribute_id;
			
		END IF;

	END IF;
	
	SELECT SP."SalePointName", SP."FullAddress" INTO v_sale_point_name, v_sale_point_address FROM "SalePoint" SP WHERE SP."SalePointId" = v_sale_point_id;
	IF(v_user_id IS NOT NULL AND v_user_id = v_user_check) THEN
		
			IF (EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
			RETURN QUERY 
	SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =   p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE AND GSP."UserId" <> (SELECT LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" =  p_date::DATE GROUP BY LOL."UserId" LIMIT 1)
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
			v_sale_point_address;
		ELSE
		RETURN QUERY 
			SELECT 
		(
			with tmp AS(
				SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
			),tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
			,tmp2 AS(
			SELECT GSP."UserId" FROM "tmp1" GSP
				LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
				LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
				LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
			WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					GROUP BY GSP."UserId",
					GSP."GroupSalePointId",
					GSP."Option" 
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" DESC
					LIMIT 1
				)
				SELECT T."UserId" FROM tmp2 T GROUP BY T."UserId"
		)
		 As "ManagerId",
			(
			with tmp AS(
						SELECT SD."UserId", SD."SalePointId",SD."ShiftId" 
					FROM "ShiftDistribute" SD 
				WHERE SD."DistributeDate"::DATE = p_date::DATE AND SD."UserId" = v_user_id AND SD."ShiftDistributeId" = p_shift_distribute_id
					GROUP BY SD."SalePointId", SD."UserId",SD."ShiftId"
				), tmp1 AS (SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader)
				,tmp2 AS (SELECT U."FullName",GSP."GroupSalePointId" FROM "tmp1" GSP
						LEFT JOIN tmp T ON T."SalePointId" = ANY (GSP."SalePointIds")
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "User" U ON U."UserId" = UR."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId" WHERE UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE 
						GROUP BY 
							GSP."UserId",
							U."FullName",
							GSP."GroupSalePointId",
							GSP."Option" 
					ORDER BY GSP."Option" ASC , GSP."GroupSalePointId" DESC
					LIMIT 1
					)
					SELECT T."FullName" FROM tmp2 T GROUP BY T."FullName"
			) As "ManagerName",
			v_user_id,
			v_sale_point_id,
			v_sale_point_name,
			p_shift_distribute_id,
			v_flag,
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = p_date::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TodayData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER(ORDER BY LCT."LotteryChannelTypeId") AS "RowNumber",
						I."LotteryDate",
						I."LotteryChannelId",
						IC."LotteryChannelName",
						IC."RetailPrice",
						I."TotalRemaining",
						I."TotalDupRemaining",
						IC."ShortName",
						LCT."ShortName" AS "ChannelTypeShortName"
					FROM "Inventory" I
						JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = I."LotteryChannelId"
						LEFT JOIN "LotteryChannelType" LCT ON LCT."LotteryChannelTypeId" = IC."LotteryChannelTypeId"
					WHERE I."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND I."SalePointId" = v_sale_point_id
					ORDER BY I."LotteryDate", IC."LotteryChannelTypeId"
				) r
			)::TEXT AS "TomorrowData",
			
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						ROW_NUMBER() OVER() AS "RowNumber",
						S."TotalRemaining",
						S."LotteryChannelId",
						LC."ShortName",
						LC."LotteryChannelName",
						LC."RetailPrice"
					FROM "Scratchcard" S
						JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = S."LotteryChannelId"
					WHERE S."SalePointId" = v_sale_point_id
					ORDER BY LC."LotteryChannelTypeId"
				) r
			)::TEXT AS "ScratchcardData",
			(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesaleQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" NOT IN(1,6)) AS "TotalWholesalePrice",
						SUM(SL."Quantity") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailQuantity",
						SUM(SL."TotalValue") FILTER(WHERE SL."LotteryPriceId" IN(1,6)) AS "TotalRetailPrice"
					FROM "SalePointLog" SL
					WHERE SL."ShiftDistributeId" = v_shift_dis_id AND SL."IsDeleted" IS FALSE
				) r
			)::TEXT AS "SoldData",
				(
				SELECT array_to_json(
					ARRAY_AGG (r))
				FROM
				(
					SELECT
						LT."LotoType",
						LT."Type",
						LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time
						
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					WHERE LT."SalePointId" = v_sale_point_id and  LT."Time" >= (p_date::date - '1 day'::INTERVAL)+ '15:55:00'::time 
					order by LT."Time" DESC
				) r
			)::TEXT AS "SoldLoto",
			v_sale_point_address;
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_data_v8(p_shift_distribute_id integer, p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_get_inventory_data(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_get_inventory_data(p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "TodayData" text, "TomorrowData" text, "ScratchcardData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_sale_point_id INT;
	v_sale_point_name VARCHAR;
	v_shift_dis_id INT;
	v_user_id INT;
BEGIN

	RETURN QUERY 
	SELECT 
		0,
		'Inventory'::VARCHAR,
		0,
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					ROW_NUMBER() OVER(ORDER BY IC."LotteryChannelTypeId") AS "RowNumber",
					T."LotteryDate",
					T."LotteryChannelId",
					IC."LotteryChannelName",
					IC."ShortName",
				  IC."LotteryChannelTypeId",
					(COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 2),0)) AS "TotalRemaining",
					(COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 2),0)) AS "TotalDupRemaining"
				FROM "Transition" T
					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = T."LotteryChannelId"
				WHERE T."LotteryDate" = p_date::DATE AND T."ConfirmStatusId" = 2  AND T."IsScratchcard" IS FALSE AND T."ShiftDistributeId"<>-1

				GROUP BY
					T."LotteryDate",
					T."LotteryChannelId",
					IC."LotteryChannelName",
					IC."ShortName",
				  IC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TodayData",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					ROW_NUMBER() OVER(ORDER BY IC."LotteryChannelTypeId") AS "RowNumber",
					T."LotteryDate",
					T."LotteryChannelId",
					IC."LotteryChannelName",
					IC."ShortName",
					IC."LotteryChannelTypeId",
					(COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 1), 0) - COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalRemaining",
					(COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalDupRemaining"
				FROM "Transition" T
					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = T."LotteryChannelId"
				WHERE T."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND T."ConfirmStatusId" = 2 AND T."IsScratchcard" IS FALSE AND  T."ShiftDistributeId"<>-1
				GROUP BY
					T."LotteryDate",
					T."LotteryChannelId",
					IC."LotteryChannelName",
					IC."ShortName",
					IC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TomorrowData",
			(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					ROW_NUMBER() OVER(ORDER BY IC."LotteryChannelTypeId") AS "RowNumber",
					T."LotteryChannelId",
					IC."LotteryChannelName",
					IC."ShortName",
					IC."LotteryChannelTypeId",
					(COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 1), 0) - COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalRemaining",
					(COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalDupRemaining"
				FROM "Transition" T
					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = T."LotteryChannelId"
				WHERE T."IsScratchcard" IS TRUE AND T."ConfirmStatusId" = 2 AND  T."ShiftDistributeId"<>-1
				GROUP BY
					T."LotteryChannelId",
					IC."LotteryChannelName",
					IC."ShortName",
					IC."LotteryChannelTypeId"
			) r
		)::TEXT AS "ScratchcardData";
	
END;





-- Bản cũ

-- DECLARE 
-- 	v_sale_point_id INT;
-- 	v_sale_point_name VARCHAR;
-- 	v_shift_dis_id INT;
-- 	v_user_id INT;
-- BEGIN

-- 	RETURN QUERY 
-- 	SELECT 
-- 		0,
-- 		'Inventory'::VARCHAR,
-- 		0,
-- 		(
-- 			SELECT array_to_json(
-- 				ARRAY_AGG (r))
-- 			FROM
-- 			(
-- 				SELECT
-- 					ROW_NUMBER() OVER(ORDER BY IC."LotteryChannelTypeId") AS "RowNumber",
-- 					T."LotteryDate",
-- 					T."LotteryChannelId",
-- 					IC."LotteryChannelName",
-- 					IC."ShortName",
-- 				  IC."LotteryChannelTypeId",
-- 					(COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 2),0)) AS "TotalRemaining",
-- 					(COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 2),0)) AS "TotalDupRemaining"
-- 				FROM "Transition" T
-- 					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = T."LotteryChannelId"
-- 				WHERE T."LotteryDate" = p_date::DATE AND T."ConfirmStatusId" = 2  AND T."IsScratchcard" IS FALSE
-- 				GROUP BY
-- 					T."LotteryDate",
-- 					T."LotteryChannelId",
-- 					IC."LotteryChannelName",
-- 					IC."ShortName",
-- 				  IC."LotteryChannelTypeId"
-- 			) r
-- 		)::TEXT AS "TodayData",
-- 		(
-- 			SELECT array_to_json(
-- 				ARRAY_AGG (r))
-- 			FROM
-- 			(
-- 				SELECT
-- 					ROW_NUMBER() OVER(ORDER BY IC."LotteryChannelTypeId") AS "RowNumber",
-- 					T."LotteryDate",
-- 					T."LotteryChannelId",
-- 					IC."LotteryChannelName",
-- 					IC."ShortName",
-- 					IC."LotteryChannelTypeId",
-- 					(COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 1), 0) - COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalRemaining",
-- 					(COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalDupRemaining"
-- 				FROM "Transition" T
-- 					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = T."LotteryChannelId"
-- 				WHERE T."LotteryDate" = (p_date + '1 day'::INTERVAL)::DATE AND T."ConfirmStatusId" = 2 AND T."IsScratchcard" IS FALSE
-- 				GROUP BY
-- 					T."LotteryDate",
-- 					T."LotteryChannelId",
-- 					IC."LotteryChannelName",
-- 					IC."ShortName",
-- 					IC."LotteryChannelTypeId"
-- 			) r
-- 		)::TEXT AS "TomorrowData",
-- 			(
-- 			SELECT array_to_json(
-- 				ARRAY_AGG (r))
-- 			FROM
-- 			(
-- 				SELECT
-- 					ROW_NUMBER() OVER(ORDER BY IC."LotteryChannelTypeId") AS "RowNumber",
-- 					T."LotteryChannelId",
-- 					IC."LotteryChannelName",
-- 					IC."ShortName",
-- 					IC."LotteryChannelTypeId",
-- 					(COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 1), 0) - COALESCE(SUM(T."TotalTrans") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalRemaining",
-- 					(COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 1),0) - COALESCE(SUM(T."TotalTransDup") FILTER(WHERE T."TransitionTypeId" = 2),0))  AS "TotalDupRemaining"
-- 				FROM "Transition" T
-- 					JOIN "LotteryChannel" IC ON IC."LotteryChannelId" = T."LotteryChannelId"
-- 				WHERE T."IsScratchcard" IS TRUE AND T."ConfirmStatusId" = 2
-- 				GROUP BY
-- 					T."LotteryChannelId",
-- 					IC."LotteryChannelName",
-- 					IC."ShortName",
-- 					IC."LotteryChannelTypeId"
-- 			) r
-- 		)::TEXT AS "ScratchcardData";
	
-- END;
$$;


ALTER FUNCTION public.crm_activity_sell_get_inventory_data(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_sell_lottery(integer, integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_lottery(p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
BEGIN
	
	SELECT 
		UR."UserId" INTO v_user_id
	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
	
	SELECT
		SD."SalePointId", SD."ShiftDistributeId" INTO v_sale_point_id, v_shift_dis_id
	FROM "ShiftDistribute" SD WHERE SD."UserId" = v_user_id AND SD."DistributeDate" = NOW()::DATE;
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "SalePointLog"(
				"SalePointId",
				"LotteryDate",
				"LotteryChannelId",
				"Quantity",
				"LotteryTypeId",
				"LotteryPriceId",
				"TotalValue",
				"ShiftDistributeId",
				"ActionBy",
				"ActionByName"
			) VALUES(
				v_sale_point_id,
				(ele ->> 'LotteryDate')::DATE,
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'Quantity')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				(ele ->> 'LotteryPriceId')::INT,
				(SELECT CEIL((ele ->> 'Quantity')::INT * LP."Price") FROM "LotteryPrice" LP WHERE LP."LotteryPriceId" = (ele ->> 'LotteryPriceId')::INT),
				v_shift_dis_id,
				p_action_by,
				p_action_by_name
			);
			
			IF (ele ->> 'LotteryTypeId')::INT = 1 THEN 
			
				UPDATE "Inventory"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
			ELSEIF (ele ->> 'LotteryTypeId')::INT = 2 THEN
			
				UPDATE "Inventory"
				SET
					"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
			
			ELSE
			
				UPDATE "Scratchcard"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id;
			
			END IF;
			
	
		END LOOP;
	
		v_id := v_sale_point_id;
		v_mess := 'Lưu thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;

	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_sell_lottery(p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_sell_lottery_v2(integer, integer, integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_lottery_v2(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_check INT := 0;
BEGIN
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "SalePointLog"(
				"SalePointId",
				"LotteryDate",
				"LotteryChannelId",
				"Quantity",
				"LotteryTypeId",
				"LotteryPriceId",
				"TotalValue",
				"ActionBy",
				"ActionByName",
				"ShiftDistributeId",
				"GuestId",
				"FourLastNumber"
			) VALUES(
				v_sale_point_id,
				(CASE WHEN (ele ->> 'LotteryTypeId')::INT = 3 THEN NULL::DATE ELSE (ele ->> 'LotteryDate')::DATE END),
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'Quantity')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				(ele ->> 'LotteryPriceId')::INT,
				(SELECT (CASE WHEN (ele ->> 'Quantity')::INT >= 110 AND (ele ->> 'LotteryPriceId')::INT = 6 THEN  CEIL((ele ->> 'Quantity')::INT * LP."Price") + ((ele ->> 'Quantity')::INT /100) ELSE CEIL((ele ->> 'Quantity')::INT * LP."Price") END) FROM "LotteryPrice" LP WHERE LP."LotteryPriceId" = (ele ->> 'LotteryPriceId')::INT),
				p_action_by,
				p_action_by_name,
				v_shift_dis_id,
				COALESCE(p_guest_id,NULL),
				(ele->>'FourLastNumber')::VARCHAR
			);
			
			IF (ele ->> 'LotteryTypeId')::INT = 1 THEN 
			
				UPDATE "Inventory"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSEIF (ele ->> 'LotteryTypeId')::INT = 2 THEN
			
				UPDATE "Inventory"
				SET
					"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalDupRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSE
			
				UPDATE "Scratchcard"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
					
			
			END IF;
			
	
		END LOOP;
	
		v_id := v_sale_point_id;
		v_mess := 'Lưu thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;

	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_sell_lottery_v2(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer) OWNER TO postgres;

--
-- Name: crm_activity_sell_lottery_v3(integer, integer, integer, character varying, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_lottery_v3(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer DEFAULT NULL::integer, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_check INT := 0;
	v_time TIMESTAMP DEFAULT NOW();
	v_array INT[] := '{}'::INT[];
	v_tmp INT;
	v_step INT;
BEGIN	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
		--Tạo hoá đơn khi chưa có
	IF p_order_id IS NULL THEN
		
		INSERT INTO "HistoryOfOrder" (
			"SalePointId",
			"CreatedBy",
			"CreatedByName",
			"CreatedDate",
			"IsDeleted",
			"ShiftDistributeId"
		)
		VALUES (
			v_sale_point_id,
			p_action_by,
			p_action_by_name,
			v_time,
			FALSE,
			v_shift_dis_id
		) RETURNING "HistoryOfOrderId" INTO p_order_id;
		
	END IF;
	
	--Lấy danh sách id bán hàng
	SELECT "SalePointLogIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
	IF v_array IS NULL THEN 
		v_array := '{}'::INT[];
	END IF;
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "SalePointLog"(
				"SalePointId",
				"LotteryDate",
				"LotteryChannelId",
				"Quantity",
				"LotteryTypeId",
				"LotteryPriceId",
				"TotalValue",
				"ActionBy",
				"ActionByName",
				"ShiftDistributeId",
				"GuestId",
				"HistoryOfOrderId",
				"FourLastNumber"
			) VALUES(
				v_sale_point_id,
				(CASE WHEN (ele ->> 'LotteryTypeId')::INT = 3 THEN NULL::DATE ELSE (ele ->> 'LotteryDate')::DATE END),
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'Quantity')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				(ele ->> 'LotteryPriceId')::INT,
				(SELECT (CASE WHEN (ele ->> 'Quantity')::INT >= 110 AND (ele ->> 'LotteryPriceId')::INT = 6 THEN  CEIL((ele ->> 'Quantity')::INT * LP."Price") + ((ele ->> 'Quantity')::INT /100) ELSE CEIL((ele ->> 'Quantity')::INT * LP."Price") END) FROM "LotteryPrice" LP WHERE LP."LotteryPriceId" = (ele ->> 'LotteryPriceId')::INT),
				p_action_by,
				p_action_by_name,
				v_shift_dis_id,
				COALESCE(p_guest_id,NULL),
				p_order_id,
				(ele->>'FourLastNumber')::VARCHAR
			) RETURNING "SalePointLogId" INTO v_tmp;
			SELECT 	((ele ->> 'Quantity')::INT / P."Step") INTO v_step FROM "Promotion" P WHERE P."RegionId" =(
			SELECT L."RegionId" FROM "LotteryChannel" L WHERE L."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT);
			SELECT * INTO v_mess FROM crm_update_reward_lottery(NOW()::DATE,v_step,v_tmp);

			v_array := array_append(v_array, v_tmp);
			
			IF (ele ->> 'LotteryTypeId')::INT = 1 THEN 
			
				UPDATE "Inventory"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSEIF (ele ->> 'LotteryTypeId')::INT = 2 THEN
			
				UPDATE "Inventory"
				SET
					"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalDupRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSE
			
				UPDATE "Scratchcard"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
					
			
			END IF;
			
	
		END LOOP;
		
		UPDATE "HistoryOfOrder" 
		SET 
			"SalePointLogIds" = v_array
		WHERE "HistoryOfOrderId" = p_order_id;
		
		v_id := v_sale_point_id;
		v_mess := 'Lưu thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess, p_order_id;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_sell_lottery_v3(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_activity_sell_lottery_v4(integer, integer, integer, character varying, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_lottery_v4(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer DEFAULT NULL::integer, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer, "PromotionCode" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_check INT := 0;
	v_time TIMESTAMP DEFAULT NOW();
	v_array INT[] := '{}'::INT[];
	v_tmp INT;
	v_step INT;
	v_quantity INT;
	v_promotioncode TEXT;
	v_data_promotion TEXT;
	v_data_promotion_id TEXT;
	v_regionId TEXT;
BEGIN	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
		--Tạo hoá đơn khi chưa có
	IF p_order_id IS NULL THEN
		
		INSERT INTO "HistoryOfOrder" (
			"SalePointId",
			"CreatedBy",
			"CreatedByName",
			"CreatedDate",
			"IsDeleted",
			"ShiftDistributeId"
		)
		VALUES (
			v_sale_point_id,
			p_action_by,
			p_action_by_name,
			v_time,
			FALSE,
			v_shift_dis_id
		) RETURNING "HistoryOfOrderId" INTO p_order_id;
		
	END IF;
	
	--Lấy danh sách id bán hàng
	SELECT "SalePointLogIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
	IF v_array IS NULL THEN 
		v_array := '{}'::INT[];
	END IF;
	
	
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF COALESCE(p_guest_id,NULL) IS NOT NULL
			THEN
				v_quantity:=0;
			ELSEIF (ele ->> 'LotteryChannelId')::INT < 1000
			THEN
				v_quantity= COALESCE(v_quantity,0) + (ele ->> 'Quantity')::INT;
			END IF;
		END LOOP;
		
		v_step := (SELECT (v_quantity::INT / P."Step") FROM "Promotion" P LIMIT 1);
		v_regionId:=(select "RegionId" from "LotteryChannel" where "LotteryChannelId"=(ele ->> 'LotteryChannelId')::INT);
		IF(v_step > 0 and  v_regionId::INT =7)
		THEN
			v_data_promotion := (with tmp AS(SELECT P."PromotionCodeId",P."PromotionCode" FROM "PromotionCode" P WHERE P."Date" = NOW()::DATE AND P."IsUsed" IS FALSE LIMIT v_step) SELECT array_agg(T."PromotionCode") FROM tmp T )::TEXT;
			v_data_promotion_id := (with tmp AS(SELECT P."PromotionCodeId",P."PromotionCode" FROM "PromotionCode" P WHERE P."Date" = NOW()::DATE AND P."IsUsed" = FALSE  LIMIT v_step) SELECT array_agg(T."PromotionCodeId") FROM tmp T )::TEXT;
		END IF;
		
		raise notice 'v_data_promotion, %', v_data_promotion;
		
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "SalePointLog"(
				"SalePointId",
				"LotteryDate",
				"LotteryChannelId",
				"Quantity",
				"LotteryTypeId",
				"LotteryPriceId",
				"TotalValue",
				"ActionBy",
				"ActionByName",
				"ShiftDistributeId",
				"GuestId",
				"HistoryOfOrderId",
				"FourLastNumber"
			) VALUES(
				v_sale_point_id,
				(CASE WHEN (ele ->> 'LotteryTypeId')::INT = 3 THEN NULL::DATE ELSE (ele ->> 'LotteryDate')::DATE END),
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'Quantity')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				(ele ->> 'LotteryPriceId')::INT,
				(SELECT (CASE WHEN (ele ->> 'Quantity')::INT >= 110 AND (ele ->> 'LotteryPriceId')::INT = 6 THEN  CEIL((ele ->> 'Quantity')::INT * LP."Price") + ((ele ->> 'Quantity')::INT /100) ELSE CEIL((ele ->> 'Quantity')::INT * LP."Price") END) FROM "LotteryPrice" LP WHERE LP."LotteryPriceId" = (ele ->> 'LotteryPriceId')::INT),
				p_action_by,
				p_action_by_name,
				v_shift_dis_id,
				COALESCE(p_guest_id,NULL),
				p_order_id,
				(ele->>'FourLastNumber')::VARCHAR
			) RETURNING "SalePointLogId" INTO v_tmp;
			IF (ele ->> 'LotteryChannelId')::INT < 1000
			THEN
				SELECT * INTO v_mess FROM crm_update_reward_lottery(NOW()::DATE,v_tmp, v_data_promotion, v_data_promotion_id);
			END IF;

			
			v_array := array_append(v_array, v_tmp);
			
			IF (ele ->> 'LotteryTypeId')::INT = 1 THEN 
			
				UPDATE "Inventory"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSEIF (ele ->> 'LotteryTypeId')::INT = 2 THEN
			
				UPDATE "Inventory"
				SET
					"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalDupRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSE
			
				UPDATE "Scratchcard"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
					
			
			END IF;
			
	
		END LOOP;
		
		UPDATE "HistoryOfOrder" 
		SET 
			"SalePointLogIds" = v_array
		WHERE "HistoryOfOrderId" = p_order_id;
		v_id := v_sale_point_id;
		v_mess := 'Lưu thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess, p_order_id, v_data_promotion;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_sell_lottery_v4(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_activity_sell_lottery_v5(integer, integer, integer, character varying, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sell_lottery_v5(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer DEFAULT NULL::integer, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer, "PromotionCode" text)
    LANGUAGE plpgsql
    AS $$
-- DECLARE 
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	v_data JSON := p_data::JSON;
-- 	v_sale_point_id INT;
-- 	v_user_id INT;
-- 	ele JSON;
-- 	v_shift_dis_id INT;
-- 	v_is_super_admin BOOL;
-- 	v_is_manager BOOL;
-- 	v_is_staff BOOL;
-- 	v_check INT := 0;
-- 	v_time TIMESTAMP DEFAULT NOW();
-- 	v_array INT[] := '{}'::INT[];
-- 	v_tmp INT;
-- 	v_step INT;
-- 	v_quantity INT;
-- 	v_promotioncode TEXT;
-- 	v_data_promotion TEXT;
-- 	v_data_promotion_id TEXT;
-- BEGIN	
-- 	SELECT 
-- 		f."IsSuperAdmin",
-- 		f."IsManager",
-- 		f."IsStaff",
-- 		f."SalePointId",
-- 		f."ShiftDistributeId"
-- 	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
-- 	FROM fn_get_shift_info(p_user_role_id) f;
	
-- 		--Tạo hoá đơn khi chưa có
-- 	IF p_order_id IS NULL THEN
		
-- 		INSERT INTO "HistoryOfOrder" (
-- 			"SalePointId",
-- 			"CreatedBy",
-- 			"CreatedByName",
-- 			"CreatedDate",
-- 			"IsDeleted",
-- 			"ShiftDistributeId"
-- 		)
-- 		VALUES (
-- 			v_sale_point_id,
-- 			p_action_by,
-- 			p_action_by_name,
-- 			v_time,
-- 			FALSE,
-- 			v_shift_dis_id
-- 		) RETURNING "HistoryOfOrderId" INTO p_order_id;
		
-- 	END IF;
	
-- 	--Lấy danh sách id bán hàng
-- 	SELECT "SalePointLogIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
-- 	IF v_array IS NULL THEN 
-- 		v_array := '{}'::INT[];
-- 	END IF;
	
	
	
-- 	IF COALESCE(v_sale_point_id, 0) > 0 THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
-- 			IF COALESCE(p_guest_id,NULL) IS NOT NULL
-- 			THEN
-- 				v_quantity:=0;
-- 			ELSE
-- 				v_quantity= COALESCE(v_quantity,0) + (ele ->> 'Quantity')::INT;
-- 			END IF;
-- 		END LOOP;
		
-- 		v_step := (SELECT (v_quantity::INT / P."Step") FROM "Promotion" P LIMIT 1);
-- 		IF(v_step > 0)
-- 		THEN
-- 			v_data_promotion := (with tmp AS(SELECT P."PromotionCodeId",P."PromotionCode" FROM "PromotionCode" P WHERE P."Date" = NOW()::DATE AND P."IsUsed" IS FALSE LIMIT v_step) SELECT array_agg(T."PromotionCode") FROM tmp T )::TEXT;
-- 			v_data_promotion_id := (with tmp AS(SELECT P."PromotionCodeId",P."PromotionCode" FROM "PromotionCode" P WHERE P."Date" = NOW()::DATE AND P."IsUsed" = FALSE  LIMIT v_step) SELECT array_agg(T."PromotionCodeId") FROM tmp T )::TEXT;
-- 		END IF;
		
-- 		raise notice 'v_data_promotion, %', v_data_promotion;
		
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
-- 			INSERT INTO "SalePointLog"(
-- 				"SalePointId",
-- 				"LotteryDate",
-- 				"LotteryChannelId",
-- 				"Quantity",
-- 				"LotteryTypeId",
-- 				"LotteryPriceId",
-- 				"TotalValue",
-- 				"ActionBy",
-- 				"ActionByName",
-- 				"ShiftDistributeId",
-- 				"GuestId",
-- 				"HistoryOfOrderId",
-- 				"FourLastNumber"
-- 			) VALUES(
-- 				v_sale_point_id,
-- 				(CASE WHEN (ele ->> 'LotteryTypeId')::INT = 3 THEN NULL::DATE ELSE (ele ->> 'LotteryDate')::DATE END),
-- 				(ele ->> 'LotteryChannelId')::INT,
-- 				(ele ->> 'Quantity')::INT,
-- 				(ele ->> 'LotteryTypeId')::INT,
-- 				(ele ->> 'LotteryPriceId')::INT,
-- 				(SELECT (CASE WHEN (ele ->> 'Quantity')::INT >= 110 AND (ele ->> 'LotteryPriceId')::INT = 6 THEN  CEIL((ele ->> 'Quantity')::INT * LP."Price") + ((ele ->> 'Quantity')::INT /100) ELSE CEIL((ele ->> 'Quantity')::INT * LP."Price") END) FROM "LotteryPrice" LP WHERE LP."LotteryPriceId" = (ele ->> 'LotteryPriceId')::INT),
-- 				p_action_by,
-- 				p_action_by_name,
-- 				v_shift_dis_id,
-- 				COALESCE(p_guest_id,NULL),
-- 				p_order_id,
-- 				(ele->>'FourLastNumber')::VARCHAR
-- 			) RETURNING "SalePointLogId" INTO v_tmp;

-- 			SELECT * INTO v_mess FROM crm_update_reward_lottery(NOW()::DATE,v_tmp, v_data_promotion, v_data_promotion_id);

			
-- 			v_array := array_append(v_array, v_tmp);
			
-- 			IF (ele ->> 'LotteryTypeId')::INT = 1 THEN 
			
-- 				UPDATE "Inventory"
-- 				SET
-- 					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
-- 				WHERE "SalePointId" = v_sale_point_id
-- 					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 				RETURNING "TotalRemaining" INTO v_check;
				
-- 				IF v_check < 0 THEN
-- 					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
-- 				END IF;
			
-- 			ELSEIF (ele ->> 'LotteryTypeId')::INT = 2 THEN
			
-- 				UPDATE "Inventory"
-- 				SET
-- 					"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'Quantity')::INT
-- 				WHERE "SalePointId" = v_sale_point_id
-- 					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 				RETURNING "TotalDupRemaining" INTO v_check;
				
-- 				IF v_check < 0 THEN
-- 					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
-- 				END IF;
			
-- 			ELSE
			
-- 				UPDATE "Scratchcard"
-- 				SET
-- 					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
-- 				WHERE "SalePointId" = v_sale_point_id
-- 					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
-- 				RETURNING "TotalRemaining" INTO v_check;
				
-- 				IF v_check < 0 THEN
-- 					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
-- 				END IF;
					
			
-- 			END IF;
			
	
-- 		END LOOP;
		
-- 		UPDATE "HistoryOfOrder" 
-- 		SET 
-- 			"SalePointLogIds" = v_array
-- 		WHERE "HistoryOfOrderId" = p_order_id;
-- 		v_id := v_sale_point_id;
-- 		v_mess := 'Lưu thành công';
	
-- 	ELSE 
 
-- 		v_id := 0;
-- 		v_mess := 'Nhân viên không trong ca làm việc';
 
-- 	END IF;
	
-- 	RETURN QUERY 
-- 	SELECT 	v_id, v_mess, p_order_id, v_data_promotion;

-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN				
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
		
-- 		RETURN QUERY 
-- 		SELECT 	v_id, v_mess, p_order_id;
-- 	END;

-- END;

DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_check INT := 0;
	v_time TIMESTAMP DEFAULT NOW();
	v_array INT[] := '{}'::INT[];
	v_tmp INT;
	v_step INT;
	v_quantity INT;
	v_promotioncode TEXT;
	v_data_promotion TEXT;
	v_data_promotion_id TEXT;
	v_regionId TEXT;
BEGIN	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
		--Tạo hoá đơn khi chưa có
	IF p_order_id IS NULL THEN
		
		INSERT INTO "HistoryOfOrder" (
			"SalePointId",
			"CreatedBy",
			"CreatedByName",
			"CreatedDate",
			"IsDeleted",
			"ShiftDistributeId"
		)
		VALUES (
			v_sale_point_id,
			p_action_by,
			p_action_by_name,
			v_time,
			FALSE,
			v_shift_dis_id
		) RETURNING "HistoryOfOrderId" INTO p_order_id;
		
	END IF;
	
	--Lấy danh sách id bán hàng
	SELECT "SalePointLogIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
	IF v_array IS NULL THEN 
		v_array := '{}'::INT[];
	END IF;
	
	
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			IF COALESCE(p_guest_id,NULL) IS NOT NULL
			THEN
				v_quantity:=0;
			ELSEIF (ele ->> 'LotteryChannelId')::INT < 1000
			THEN
				v_quantity= COALESCE(v_quantity,0) + (ele ->> 'Quantity')::INT;
			END IF;
		END LOOP;
		
		v_step := (SELECT (v_quantity::INT / P."Step") FROM "Promotion" P LIMIT 1);
		v_regionId:=(select "RegionId" from "LotteryChannel" where "LotteryChannelId"=(ele ->> 'LotteryChannelId')::INT);
		IF(v_step > 0 and  v_regionId::INT <> 3)
		THEN
			v_data_promotion := (with tmp AS(SELECT P."PromotionCodeId",P."PromotionCode" FROM "PromotionCode" P WHERE P."Date" = NOW()::DATE AND P."IsUsed" IS FALSE LIMIT v_step) SELECT array_agg(T."PromotionCode") FROM tmp T )::TEXT;
			v_data_promotion_id := (with tmp AS(SELECT P."PromotionCodeId",P."PromotionCode" FROM "PromotionCode" P WHERE P."Date" = NOW()::DATE AND P."IsUsed" = FALSE  LIMIT v_step) SELECT array_agg(T."PromotionCodeId") FROM tmp T )::TEXT;
		END IF;
		
		raise notice 'v_data_promotion, %', v_data_promotion;
		
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "SalePointLog"(
				"SalePointId",
				"LotteryDate",
				"LotteryChannelId",
				"Quantity",
				"LotteryTypeId",
				"LotteryPriceId",
				"TotalValue",
				"ActionBy",
				"ActionByName",
				"ShiftDistributeId",
				"GuestId",
				"HistoryOfOrderId",
				"FourLastNumber"
			) VALUES(
				v_sale_point_id,
				(CASE WHEN (ele ->> 'LotteryTypeId')::INT = 3 THEN NULL::DATE ELSE (ele ->> 'LotteryDate')::DATE END),
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'Quantity')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				(ele ->> 'LotteryPriceId')::INT,
				(SELECT (CASE WHEN (ele ->> 'Quantity')::INT >= 110 AND (ele ->> 'LotteryPriceId')::INT = 6 THEN  CEIL((ele ->> 'Quantity')::INT * LP."Price") + ((ele ->> 'Quantity')::INT /100) ELSE CEIL((ele ->> 'Quantity')::INT * LP."Price") END) FROM "LotteryPrice" LP WHERE LP."LotteryPriceId" = (ele ->> 'LotteryPriceId')::INT),
				p_action_by,
				p_action_by_name,
				v_shift_dis_id,
				COALESCE(p_guest_id,NULL),
				p_order_id,
				(ele->>'FourLastNumber')::VARCHAR
			) RETURNING "SalePointLogId" INTO v_tmp;
			IF (ele ->> 'LotteryChannelId')::INT < 1000
			THEN
				SELECT * INTO v_mess FROM crm_update_reward_lottery(NOW()::DATE,v_tmp, v_data_promotion, v_data_promotion_id);
			END IF;

			
			v_array := array_append(v_array, v_tmp);
			
			IF (ele ->> 'LotteryTypeId')::INT = 1 THEN 
			
				UPDATE "Inventory"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSEIF (ele ->> 'LotteryTypeId')::INT = 2 THEN
			
				UPDATE "Inventory"
				SET
					"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalDupRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
			
			ELSE
			
				UPDATE "Scratchcard"
				SET
					"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
				WHERE "SalePointId" = v_sale_point_id
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Số lượng vé đã thay đổi không đủ vé để bán';
				END IF;
					
			
			END IF;
			
	
		END LOOP;
		
		UPDATE "HistoryOfOrder" 
		SET 
			"SalePointLogIds" = v_array
		WHERE "HistoryOfOrderId" = p_order_id;
		v_id := v_sale_point_id;
		v_mess := 'Lưu thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess, p_order_id, v_data_promotion;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_sell_lottery_v5(p_shift_dis_id integer, p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text, p_guest_id integer, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_activity_shift_transfer(integer, integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_shift_transfer(p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_shift_id INT;
BEGIN
	
	SELECT 
		UR."UserId" INTO v_user_id
	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
	
	SELECT
		SD."SalePointId", SD."ShiftDistributeId", SD."ShiftId" INTO v_sale_point_id, v_shift_dis_id, v_shift_id
	FROM "ShiftDistribute" SD 
	WHERE SD."UserId" = v_user_id 
		AND SD."DistributeDate" = NOW()::DATE;
		
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "ShiftTransfer"(
				"ShiftId",
				"UserId",
				"TotalReceived",
				"TotalRemaining",
				"LotteryChannelId",
				"LotteryDate",
				"ActionBy",
				"ActionByName",
				"ActionDate",
				"TotalDupReceived",
				"TotalDupRemaining",
				"SalePointid"
			) VALUES (
				v_shift_id,
				v_user_id,
				(ele ->> 'TotalReceived')::INT,
				(ele ->> 'TotalRemaining')::INT,
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'LotteryDate')::DATE,
				p_action_by,
				p_action_by_name,
				NOW(),
				(ele ->> 'TotalDupReceived')::INT,
				(ele ->> 'TotalDupRemaining')::INT,
				v_sale_point_id
			) RETURNING "ShiftTransferId" INTO v_id;	
			
		END LOOP;

		v_mess := 'Ghi nhận chuyển ca thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;

	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_shift_transfer(p_user_role_id integer, p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_shift_transfer_v2(integer, integer, integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_shift_transfer_v2(p_user_role_id integer, p_shift_distribute integer, p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_shift_id INT;
BEGIN
	
	SELECT FN."UserId", FN."SalePointId", FN."ShiftDistributeId" INTO v_user_id, v_sale_point_id, v_shift_dis_id  FROM fn_get_shift_info(p_user_role_id) FN 
	WHERE FN."ShiftDistributeId" = p_shift_distribute;
	SELECT SD."ShiftId" INTO v_shift_id FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  v_shift_dis_id;
	SELECT * FROM crm_activity_return_money_in_a_shift(p_shift_distribute, NOW());
	IF(EXISTS (SELECT 1 FROM "Transition" T WHERE T."ConfirmStatusId" = 1 AND T."ShiftDistributeId" = p_shift_distribute)) THEN
		v_id := 0;
		v_mess := 'Tất cả yêu cầu chuyển nhận cần được quản lý xác nhận trước khi kết ca';
	ELSEIF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
			INSERT INTO "ShiftTransfer"(
				"ShiftId",
				"UserId",
				"ShiftDistributeId",
				"LotteryChannelId",
				"LotteryTypeId",
				"ActionBy",
				"ActionByName",
				"ActionDate",
				"LotteryDate",
				"TotalStocks",
				"TotalReceived",
				"TotalTrans",
				"TotalReturns",
				"TotalRemaining",
				"TotalSold",
				"TotalSoldMoney",
				"TotalRetail",
				"TotalRetailMoney",
				"TotalWholesale",
				"TotalWholesaleMoney",
				"SalePointid"
			) VALUES (
				v_shift_id,
				v_user_id,
				v_shift_dis_id,
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				p_action_by,
				p_action_by_name,
				NOW(),
				(ele ->> 'LotteryDate')::DATE,
				(ele ->> 'TotalStocks')::INT,
				(ele ->> 'TotalReceived')::INT,
				(ele ->> 'TotalTrans')::INT,
				(ele ->> 'TotalReturns')::INT,
				(ele ->> 'TotalRemaining')::INT,
				(ele ->> 'TotalSold')::INT,
				(ele ->> 'TotalSoldMoney')::NUMERIC,
				(ele ->> 'TotalRetail')::INT,
				(ele ->> 'TotalRetailMoney')::NUMERIC,
				(ele ->> 'TotalWholesale')::INT,
				(ele ->> 'TotalWholesaleMoney')::NUMERIC,
				v_sale_point_id
			) RETURNING "ShiftTransferId" INTO v_id;	
			
		END LOOP;

		v_mess := 'Ghi nhận lưu thành công';
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;

	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_shift_transfer_v2(p_user_role_id integer, p_shift_distribute integer, p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_shift_transfer_v3(integer, integer, integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_shift_transfer_v3(p_user_role_id integer, p_shift_distribute integer, p_action_by integer, p_action_by_name character varying, p_data text, p_money integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_shift_dis_id INT;
	v_shift_id INT;
	v_scartch_card_data TEXT;
	v_lottery_date DATE;
BEGIN
	
	SELECT FN."UserId", FN."SalePointId", FN."ShiftDistributeId" INTO v_user_id, v_sale_point_id, v_shift_dis_id  FROM fn_get_shift_info(p_user_role_id) FN 
	WHERE FN."ShiftDistributeId" = p_shift_distribute;
	SELECT SD."ShiftId",SD."DistributeDate" INTO v_shift_id,v_lottery_date FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  v_shift_dis_id;
	IF(EXISTS (SELECT 1 FROM "Transition" T WHERE T."ConfirmStatusId" = 1 AND T."ShiftDistributeId" = p_shift_distribute)) THEN
		v_id := 0;
		v_mess := 'Tất cả yêu cầu chuyển nhận cần được quản lý xác nhận trước khi kết ca';
	ELSEIF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
			INSERT INTO "ShiftTransfer"(
				"ShiftId",
				"UserId",
				"ShiftDistributeId",
				"LotteryChannelId",
				"LotteryTypeId",
				"ActionBy",
				"ActionByName",
				"ActionDate",
				"LotteryDate",
				"TotalStocks",
				"TotalReceived",
				"TotalTrans",
				"TotalReturns",
				"TotalRemaining",
				"TotalSold",
				"TotalSoldMoney",
				"TotalRetail",
				"TotalRetailMoney",
				"TotalWholesale",
				"TotalWholesaleMoney",
				"SalePointid"
			) VALUES (
				v_shift_id,
				v_user_id,
				v_shift_dis_id,
				(ele ->> 'LotteryChannelId')::INT,
				(ele ->> 'LotteryTypeId')::INT,
				p_action_by,
				p_action_by_name,
				NOW(),
				(ele ->> 'LotteryDate')::DATE,
				(ele ->> 'TotalStocks')::INT,
				(ele ->> 'TotalReceived')::INT,
				(ele ->> 'TotalTrans')::INT,
				(ele ->> 'TotalReturns')::INT,
				(ele ->> 'TotalRemaining')::INT,
				(ele ->> 'TotalSold')::INT,
				(ele ->> 'TotalSoldMoney')::NUMERIC,
				(ele ->> 'TotalRetail')::INT,
				(ele ->> 'TotalRetailMoney')::NUMERIC,
				(ele ->> 'TotalWholesale')::INT,
				(ele ->> 'TotalWholesaleMoney')::NUMERIC,
				v_sale_point_id
			) ;
			
		END LOOP;

		SELECT FN."Message",FN."Id" INTO  v_mess,v_id  FROM crm_activity_report_money_in_a_shift(p_shift_distribute, NOW()::DATE,p_money) FN;
		
		-- update scratchCard stock
		SELECT array_to_json(
			ARRAY_AGG (scratchcardData)) INTO v_scartch_card_data
		FROM
		(
			select "LotteryChannelId","TotalRemaining"
		from "Scratchcard" where "SalePointId" = v_sale_point_id
		) scratchcardData;
		
		-- check if not exist insert else update
		IF NOT  EXISTS(SELECT 1 FROM "ReportScratchcard" WHERE "SalePointId" = v_sale_point_id and "ShiftId" = v_shift_id and "LotteryDate" = v_lottery_date)   
			Then
						INSERT INTO "ReportScratchcard"(
								"ShiftId",
								"LotteryDate",
								"SalePointId",
								"Stock",
								"ActionBy"
							) VALUES (
								v_shift_id,
								v_lottery_date,
								v_sale_point_id,
								v_scartch_card_data,
								p_action_by
							);
							 
			Else		
						UPDATE "ReportScratchcard"
						SET "Stock" = v_scartch_card_data
					     WHERE "SalePointId" = v_sale_point_id and "ShiftId" = v_shift_id and "LotteryDate" = v_lottery_date;
		END IF;
	
	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;

	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_shift_transfer_v3(p_user_role_id integer, p_shift_distribute integer, p_action_by integer, p_action_by_name character varying, p_data text, p_money integer) OWNER TO postgres;

--
-- Name: crm_activity_sold_log(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sold_log(p_shift_distribute_id integer) RETURNS TABLE("RowNumber" bigint, "ActionDate" timestamp without time zone, "TotalQuantity" bigint, "TotalPrice" numeric, "DetailData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	
BEGIN

	RETURN QUERY
	WITH tmp AS(
		SELECT
			SL."ActionDate",
			SUM(SL."Quantity") AS "TotalQuantity",
			SUM(SL."TotalValue") AS "TotalPrice"
		FROM "SalePointLog" SL 
		WHERE SL."ShiftDistributeId" = p_shift_distribute_id
			AND SL."IsDeleted" IS FALSE
		GROUP BY
			SL."ActionDate"
	)
	SELECT 
		ROW_NUMBER() OVER(ORDER BY t."ActionDate" DESC) AS "RowNumber",
		t."ActionDate",
		t."TotalQuantity",
		t."TotalPrice",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					SL."SalePointLogId",
					SL."LotteryDate",
					SL."LotteryChannelId",
					LC."LotteryChannelName",
					SL."Quantity",
					SL."TotalValue",
					SL."LotteryTypeId",
					LT."LotteryTypeName"
				FROM "SalePointLog" SL
					JOIN "LotteryType" LT ON LT."LotteryTypeId" = SL."LotteryTypeId"
					LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SL."LotteryChannelId"
				WHERE SL."ActionDate" = t."ActionDate"
					AND SL."IsDeleted" IS FALSE
				ORDER BY SL."SalePointLogId"
			) r
		)::TEXT AS "DetailData"
	FROM tmp t;
	
END;
$$;


ALTER FUNCTION public.crm_activity_sold_log(p_shift_distribute_id integer) OWNER TO postgres;

--
-- Name: crm_activity_sold_log_v1(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_sold_log_v1(p_shift_distribute_id integer, p_page_number integer, p_page_size integer) RETURNS TABLE("RowNumber" bigint, "ActionDate" timestamp without time zone, "TotalQuantity" bigint, "TotalPrice" numeric, "DetailData" text, "TotalValues" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_total_count INT8;
BEGIN

	RETURN QUERY
	WITH tmp AS(
		SELECT
			SL."ActionDate",
			SUM(SL."Quantity") AS "TotalQuantity",
			SUM(SL."TotalValue") AS "TotalPrice"
		FROM "SalePointLog" SL 
		WHERE SL."ShiftDistributeId" = p_shift_distribute_id
			AND SL."IsDeleted" IS FALSE
		GROUP BY
			SL."ActionDate"
	)
	SELECT 
		ROW_NUMBER() OVER(ORDER BY t."ActionDate" DESC) AS "RowNumber",
		t."ActionDate",
		t."TotalQuantity",
		t."TotalPrice",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					SL."SalePointLogId",
					SL."LotteryDate",
					SL."LotteryChannelId",
					LC."LotteryChannelName",
					SL."Quantity",
					SL."TotalValue",
					SL."LotteryTypeId",
					LT."LotteryTypeName"
				FROM "SalePointLog" SL
					JOIN "LotteryType" LT ON LT."LotteryTypeId" = SL."LotteryTypeId"
					LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SL."LotteryChannelId"
				WHERE SL."ActionDate" = t."ActionDate"
					AND SL."IsDeleted" IS FALSE
				ORDER BY SL."SalePointLogId"
			) r
		)::TEXT AS "DetailData",
		(
			SELECT COUNT(1) FROM tmp t1 GROUP BY t1."TotalQuantity"
		)::INT AS "Totalvalues"
	FROM tmp t
	OFFSET v_offset_row
	LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_activity_sold_log_v1(p_shift_distribute_id integer, p_page_number integer, p_page_size integer) OWNER TO postgres;

--
-- Name: crm_activity_trans_log(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_trans_log(p_shift_distribute_id integer) RETURNS TABLE("RowNumber" bigint, "TransitionDate" timestamp without time zone, "TransitionTypeId" integer, "TransitionTypeName" character varying, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying, "ConfirmDate" timestamp without time zone, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "DetailData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	
BEGIN

	RETURN QUERY
	SELECT 
		ROW_NUMBER() OVER(ORDER BY T."TransitionDate" DESC) AS "RowNumber",
		T."TransitionDate",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName",
		T."ConfirmDate",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					R."LotteryChannelId",
					LC."LotteryChannelName",
					R."TotalTrans",
					R."TotalTransDup",
					R."IsScratchcard"
				FROM "Transition" R
					JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = R."LotteryChannelId"
				WHERE R."TransitionDate" = T."TransitionDate" 
				ORDER BY LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "DetailData"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."ShiftDistributeId" = p_shift_distribute_id and T."ShiftDistributeId"<>-1
	GROUP BY
		T."TransitionDate",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		T."ConfirmDate",
		CS."ConfirmStatusName",
		T."FromSalePointId",
		T."ToSalePointId",
		SP."SalePointName";
	
END;







-- Bản cũ

-- DECLARE
	
-- BEGIN

-- 	RETURN QUERY
-- 	SELECT 
-- 		ROW_NUMBER() OVER(ORDER BY T."TransitionDate" DESC) AS "RowNumber",
-- 		T."TransitionDate",
-- 		T."TransitionTypeId",
-- 		TT."TransitionTypeName",
-- 		T."ManagerId",
-- 		U."FullName" AS "ManagerName",
-- 		T."ConfirmStatusId",
-- 		CS."ConfirmStatusName",
-- 		T."ConfirmDate",
-- 		T."FromSalePointId",
-- 		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
-- 		T."ToSalePointId",
-- 		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
-- 		(
-- 			SELECT array_to_json(
-- 				ARRAY_AGG (r))
-- 			FROM
-- 			(
-- 				SELECT
-- 					R."LotteryChannelId",
-- 					LC."LotteryChannelName",
-- 					R."TotalTrans",
-- 					R."TotalTransDup",
-- 					R."IsScratchcard"
-- 				FROM "Transition" R
-- 					JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = R."LotteryChannelId"
-- 				WHERE R."TransitionDate" = T."TransitionDate"
-- 				ORDER BY LC."LotteryChannelTypeId"
-- 			) r
-- 		)::TEXT AS "DetailData"
-- 	FROM "Transition" T
-- 		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
-- 		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
-- 		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
-- 		JOIN "User" U ON U."UserId" = T."ManagerId"
-- 	WHERE T."ShiftDistributeId" = p_shift_distribute_id
-- 	GROUP BY
-- 		T."TransitionDate",
-- 		T."TransitionTypeId",
-- 		TT."TransitionTypeName",
-- 		T."ManagerId",
-- 		U."FullName",
-- 		T."ConfirmStatusId",
-- 		T."ConfirmDate",
-- 		CS."ConfirmStatusName",
-- 		T."FromSalePointId",
-- 		T."ToSalePointId",
-- 		SP."SalePointName";
	
-- END;
$$;


ALTER FUNCTION public.crm_activity_trans_log(p_shift_distribute_id integer) OWNER TO postgres;

--
-- Name: crm_activity_update_const_price(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_const_price(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN

	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		
		IF NOT EXISTS(
			SELECT 1 FROM "Constant" C
			WHERE C."ConstId" = (ele->>'ConstId')::INT
				AND C."Price" = (ele->>'Price')::NUMERIC
			ORDER BY C."CreatedDate" DESC
			LIMIT 1
		) THEN
			
			INSERT INTO "Constant"(
				"ConstantName",
				"Price",
				"ConstId",
				"CreatedBy",
				"CreatedByName",
				"CreatedDate"
			)
			VALUES(
				(ele->>'ConstantName')::VARCHAR,
				(ele->>'Price')::NUMERIC,
				(ele->>'ConstId')::INT,
				p_action_by,
				p_action_by_name,
				v_time
			);
		END IF;
	
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	END LOOP;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_const_price(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_update_isdeleted_salepoint_log(integer, character varying, integer, integer, character varying, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_isdeleted_salepoint_log(p_action_by integer, p_action_by_name character varying, p_count integer, p_salepoint_id integer, p_number character varying, p_lottery_channel_id integer, p_day timestamp without time zone) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
v_lenght_number INT := LENGTH(p_number);
BEGIN   
 		v_id := -1;
    v_mess := 'Update khong thanh cong';

	IF p_count < (SELECT 
									COUNT(*)
								FROM "SalePointLog" S
								WHERE (S."LotteryDate" BETWEEN (p_day::DATE - INTERVAL'5 day') AND p_day::DATE )
										AND right(S."FourLastNumber", p_count_number) = right(p_number, p_count_number)
										AND right(S."FourLastNumber", p_count_number+1) != right(p_number, p_count_number+1)
										AND S."IsDeleted" = FALSE
										AND S."SalePointId" = p_salepoint_id
										AND S."LotteryChannelId" = p_lottery_channel_id
					LIMIT 1)
	THEN
		FOR ele IN  1..(p_count) LOOP
			WITH tmp AS
			(		SELECT 
						S."SalePointLogId"
					FROM "SalePointLog" S
					WHERE (S."LotteryDate" BETWEEN (p_day::DATE - INTERVAL'5 day') AND p_day::DATE )
							AND right(S."FourLastNumber", v_lenght_number) = p_number
							AND right(S."FourLastNumber", v_lenght_number+1) != p_number
							AND S."IsDeleted" = FALSE
							AND S."SalePointId" = p_salepoint_id
							AND S."LotteryChannelId" = p_lottery_channel_id
					LIMIT 1
			)
		
			UPDATE "SalePointLog"
				SET 
					"IsDeleted" = TRUE,
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name
			 WHERE "SalePointLogId" = (SELECT * FROM tmp);
		END LOOP;

    v_id := 1;
    v_mess := 'Update thanh cong';
	ELSE
		v_id := -1;
    v_mess := 'Update khong thanh cong';
	END IF;
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_isdeleted_salepoint_log(p_action_by integer, p_action_by_name character varying, p_count integer, p_salepoint_id integer, p_number character varying, p_lottery_channel_id integer, p_day timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_update_lottery_price_agency(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_lottery_price_agency(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT UPDATE
	IF p_action_type = 1 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
					INSERT INTO "LotteryPriceAgency"(
						"AgencyId",
						"LotteryChannelId",
						"Price",
						"CreatedBy",
						"CreatedByName",
						"CreatedDate",
						"IsDeleted" 
					)
					VALUES(
						(ele->>'AgencyId')::INT,
						(ele->>'LotteryChannelId')::INT,
						(ele->>'Price')::NUMERIC,
						p_action_by,
						p_action_by_name,
						v_time,
						FALSE
					);
					
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "LotteryPriceAgency" 
			SET "IsDeleted" = TRUE
			WHERE "LotteryPriceAgencyId" = (ele->>'LotteryPriceAgencyId')::INT;
		END LOOP;
		v_id := 1;
		v_mess := 'Xoá thành công';
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_lottery_price_agency(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_update_lottery_price_sub_agency(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_lottery_price_sub_agency(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT UPDATE
	IF p_action_type = 1 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
					INSERT INTO "LotteryPriceSubAgency"(
						"AgencyId",
						"LotteryChannelId",
						"Price",
						"CreatedBy",
						"CreatedByName",
						"CreatedDate",
						"IsDeleted" 
					)
					VALUES(
						(ele->>'AgencyId')::INT,
						(ele->>'LotteryChannelId')::INT,
						(ele->>'Price')::NUMERIC,
						p_action_by,
						p_action_by_name,
						v_time,
						FALSE
					);
					
		END LOOP;
		
		v_id := 1;
		v_mess := 'Thao tác thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "LotteryPriceSubAgency" 
			SET "IsDeleted" = TRUE
			WHERE "LotteryPriceAgencyId" = (ele->>'LotteryPriceAgencyId')::INT;
		END LOOP;
		v_id := 1;
		v_mess := 'Xoá thành công';
	ELSE
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "LotteryPriceSubAgency" 
				SET "Price" = (ele->>'Price')::NUMERIC
			WHERE "LotteryPriceAgencyId" = (ele->>'LotteryPriceAgencyId')::INT;
		END LOOP;
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_lottery_price_sub_agency(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_activity_update_price_for_guest(integer, numeric, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_price_for_guest(p_guest_id integer, p_scratch_price numeric, p_whole_sale_price numeric) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
BEGIN
   
		Update "Guest"
		Set 
			"WholesalePrice" = p_whole_sale_price,
			"ScratchPrice" = p_scratch_price
		WHERE "GuestId" = p_guest_id;
		
		INSERT INTO 
			"MarketPrice" 
		VALUES 
		(
			NOW(),
			p_whole_sale_price,
			p_scratch_price,
			p_guest_id,
			(SELECT "FullName" FROM "Guest" WHERE "GuestId" = p_guest_id),
			(SELECT "Phone" FROM "Guest" WHERE "GuestId" = p_guest_id)
		);
		v_id := 1;
		v_mess := 'Cập nhật giá tiền thành công';
    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_price_for_guest(p_guest_id integer, p_scratch_price numeric, p_whole_sale_price numeric) OWNER TO postgres;

--
-- Name: crm_activity_update_price_for_lottery_of_sub_agency(integer, numeric, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_price_for_lottery_of_sub_agency(p_agency_id integer, p_price numeric, p_date timestamp without time zone) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
BEGIN
		UPDATE "SubAgency"
		SET "Price" = p_price,
		"ModifiedDate" = p_date 
		WHERE "AgencyId" = p_agency_id;
    v_id:= 1;
		v_mess:='Sửa giá thành công';
		RETURN QUERY
    SELECT v_id, v_mess;


    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_price_for_lottery_of_sub_agency(p_agency_id integer, p_price numeric, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_activity_update_reward_lottery(integer, text, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_reward_lottery(p_region_id integer, p_promotion_text text, p_step integer, p_lottery_channel_list text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
    
		INSERT INTO "Promotion" ("RegionId","PromotionText","LotteryChannelList","Step")
		VALUES (p_region_id,p_promotion_text,p_lottery_channel_list,p_step);
		v_id:=1;
		v_mess:='Thêm Thành Công';
    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_reward_lottery(p_region_id integer, p_promotion_text text, p_step integer, p_lottery_channel_list text) OWNER TO postgres;

--
-- Name: crm_activity_update_static_fee(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_activity_update_static_fee(p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
		ele := p_data::JSON; 
    IF NOT EXISTS ( SELECT 1 FROM "StaticFee" ST WHERE ST."SalePointId" = (ele ->> 'SalePointId') :: INT AND ST."Month" = (ele ->> 'Month')::VARCHAR  )  THEN 
				INSERT INTO "StaticFee" ("SalePointId", "SalePointName", "InternetFee", "WaterFee","EstateFee", "ElectronicFee","Month" )
				VALUES ( (ele ->> 'SalePointId') :: INT, (ele ->> 'SalePointName') :: VARCHAR, (ele ->> 'InternetFee') :: INT, (ele ->> 'WaterFee') :: INT, (ele ->> 'EstateFee') :: INT, (ele ->> 'ElectronicFee') :: INT, (ele ->> 'Month')::VARCHAR );
			v_id := 1;
			v_mess := 'Thêm thành công';
		ELSE 
				UPDATE "StaticFee"
				SET "InternetFee" = (CASE WHEN (ele ->> 'Number') :: INT = 0 THEN (ele ->> 'Fee') :: INT ELSE (SELECT S."InternetFee" FROM "StaticFee" S WHERE S."SalePointId" = (ele ->> 'SalePointId') :: INT)END),
				"WaterFee" = (CASE WHEN (ele ->> 'Number') :: INT = 1 THEN (ele ->> 'Fee') :: INT ELSE (SELECT S."WaterFee" FROM "StaticFee" S WHERE S."SalePointId" = (ele ->> 'SalePointId') :: INT)END),
				"EstateFee" = (CASE WHEN (ele ->> 'Number') :: INT = 2 THEN (ele ->> 'Fee') :: INT ELSE (SELECT S."EstateFee" FROM "StaticFee" S WHERE S."SalePointId" = (ele ->> 'SalePointId') :: INT)END),
				"ElectronicFee" = (CASE WHEN (ele ->> 'Number') :: INT = 3 THEN (ele ->> 'Fee') :: INT ELSE (SELECT S."ElectronicFee" FROM "StaticFee" S WHERE S."SalePointId" = (ele ->> 'SalePointId') :: INT)END)
				WHERE "SalePointId" = (ele ->> 'SalePointId') :: INT;
			v_id := 1;
			v_mess := 'Cập nhật thành công';
		END IF;
			RETURN QUERY
			SELECT v_id, v_mess;
    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_activity_update_static_fee(p_data text) OWNER TO postgres;

--
-- Name: crm_agency_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_agency_ddl() RETURNS TABLE("Id" integer, "Name" character varying, "IsActive" boolean, "InactiveDate" date)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		A."AgencyId",
		A."AgencyName",
		A."IsActive", 
		A."InactiveDate"
	FROM "Agency" A
	WHERE A."IsDeleted" IS false
	ORDER BY A."AgencyId";
	
END;
$$;


ALTER FUNCTION public.crm_agency_ddl() OWNER TO postgres;

--
-- Name: crm_agency_ddl_bk(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_agency_ddl_bk() RETURNS TABLE("Id" integer, "Name" character varying, "IsActive" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		A."AgencyId",
		A."AgencyName",
		A."IsActive"
	FROM "Agency" A
	WHERE A."IsDeleted" IS FALSE
	ORDER BY A."AgencyId";
	
END;
$$;


ALTER FUNCTION public.crm_agency_ddl_bk() OWNER TO postgres;

--
-- Name: crm_auth_change_password(integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_auth_change_password(p_user_id integer, p_current_password character varying, p_new_password character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_log_content VARCHAR;
BEGIN

	SELECT 
		U."UserId"
	INTO
		v_id
	FROM "User" U
	WHERE U."UserId" = p_user_id AND U."Password" = p_current_password
		AND U."IsActive" IS TRUE AND U."IsDeleted" IS FALSE;
	
	IF COALESCE(v_id, 0) <> 0 THEN
		
		UPDATE "User"
		SET
			"Password" = p_new_password
		WHERE "UserId" = v_id;
		
		v_log_content := 'Mật khẩu cũ: '||p_current_password||', Mật khẩu mới: '||p_new_password;
		INSERT INTO "AuthLog"(
			"UserId",
			"ActionType",
			"LogContent"
		) VALUES(
			v_id,
			'Đổi mật khẩu',
			v_log_content
		);
		
		v_mess := 'Đổi mật khẩu thành công';
		
	ELSE
		
		v_mess := 'Mật khẩu cũ không đúng';
	
	END IF;
	
	RETURN QUERY 
	SELECT COALESCE(v_id, 0), v_mess;

END;
$$;


ALTER FUNCTION public.crm_auth_change_password(p_user_id integer, p_current_password character varying, p_new_password character varying) OWNER TO postgres;

--
-- Name: crm_auth_checklogin(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_auth_checklogin(p_account character varying, p_password character varying, p_mac_address character varying, p_ip_address character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	--
	v_user_role_id INT;
	v_sale_point_id INT;
	v_shift_dis_id INT;
BEGIN
	
	SELECT 
		U."UserId"
	INTO
		v_id
	FROM "User" U
	WHERE (LOWER(U."Email") = LOWER(p_account) OR LOWER(U."Account") = LOWER(p_account)) AND U."Password" = p_password
		AND U."IsActive" IS TRUE AND U."IsDeleted" IS FALSE;
	
	IF COALESCE(v_id, 0) <> 0 THEN
		
		SELECT UR."UserRoleId" INTO v_user_role_id
		FROM "UserRole" UR
		WHERE UR."UserId" = v_id;
		
		SELECT 
			"SalePointId",
			"ShiftDistributeId"
		INTO 
			v_sale_point_id,
			v_shift_dis_id
		FROM fn_get_shift_info(v_user_role_id);
		
		INSERT INTO "AuthLog"(
			"UserId",
			"ActionType",
			"LogContent",
			"SalePointId",
			"ShiftDistributeId"
		) VALUES(
			v_id,
			'Đăng nhập',
			'Đăng nhập thành công',
			v_sale_point_id,
			v_shift_dis_id
		);
		
		v_mess := 'Đăng nhập thành công';
		
	ELSE
		
		v_mess := 'Sai tên đăng nhập hoặc mậu khẩu';
	
	END IF;
	
	RETURN QUERY 
	SELECT COALESCE(v_id, -1), v_mess;
	
END;
$$;


ALTER FUNCTION public.crm_auth_checklogin(p_account character varying, p_password character varying, p_mac_address character varying, p_ip_address character varying) OWNER TO postgres;

--
-- Name: crm_auth_forgot_password(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_auth_forgot_password(p_email character varying, p_new_password character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_old_password VARCHAR;
	v_log_content VARCHAR;
BEGIN
	
	SELECT U."UserId", U."Password" 
	INTO v_id, v_old_password 
	FROM "User" U 
	WHERE U."IsActive" IS TRUE AND U."IsDeleted" IS FALSE
		AND LOWER("Email") = LOWER(p_email);
	
	IF COALESCE(v_id, 0) <> 0 THEN
		
		UPDATE "User"
		SET
			"Password" = p_new_password
		WHERE "UserId" = v_id;
		
		v_log_content := 'Mật khẩu cũ: '||v_old_password||', Mật khẩu cấp lại: '||p_new_password;
		INSERT INTO "AuthLog"(
			"UserId",
			"ActionType",
			"LogContent"
		) VALUES(
			v_id,
			'Cấp lại mật khẩu',
			v_log_content
		);
		
		v_mess := 'Cấp lại mật khẩu mới thành công';
		
	ELSE
		
		v_mess := 'Email không tồn tại trong hệ thống';
	
	END IF;
	
	RETURN QUERY 
	SELECT COALESCE(v_id, 0), v_mess;

END;
$$;


ALTER FUNCTION public.crm_auth_forgot_password(p_email character varying, p_new_password character varying) OWNER TO postgres;

--
-- Name: crm_auth_get_permission(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_auth_get_permission(p_user_role_id integer) RETURNS TABLE("RoleDisplayName" character varying, "RoleName" character varying, "ActionName" character varying, "IsShowMenu" boolean, "PermissionName" character varying, "ControllerName" character varying, "CssIcon" text, "IsSubMenu" boolean, "Sort" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_title_id INT := (SELECT "UserTitleId" FROM "UserRole" WHERE "UserRoleId" = p_user_role_id);
	v_array_title INT[] := (SELECT "SubUserTitleId" FROM "UserRole" WHERE "UserRoleId" = p_user_role_id);
BEGIN 
	v_array_title := array_append(v_array_title, v_user_title_id);
	RETURN QUERY
  SELECT DISTINCT
		PR."RoleDisplayName",
		PR."RoleName",
		PR."ActionName",
		PR."IsShowMenu",
		P."PermissionName",
		P."ControllerName",
		P."CssIcon",
		PR."IsSubMenu",
		PR."Sort"
	FROM "PermissionRoleTitles" PRT
		JOIN "PermissionRole" PR ON PR."PermissionRoleId" = PRT."PermissionRoleId"
		JOIN "Permission" P ON P."PermissionId" = PR."PermissionId"
	WHERE PRT."UserTitleId" = ANY(v_array_title)
		AND PR."IsDelete" IS FALSE
		AND PR."IsActive" IS TRUE
	ORDER BY PR."Sort";
	
END; $$;


ALTER FUNCTION public.crm_auth_get_permission(p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_base_get_type_name_ddl(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_base_get_type_name_ddl(p_transaction_type_id integer DEFAULT 0) RETURNS TABLE("TypeNameId" integer, "Name" character varying, "TransactionTypeId" integer, "TransactionTypeName" character varying, "Price" numeric, "RequireSalePoint" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS(
		SELECT 
			C."Price",
			C."ConstId"
		FROM "Constant" C 
		WHERE C."ConstId" IN (7,8,9)
			AND C."CreatedDate" >= ALL (
				SELECT 
					A."CreatedDate"
				FROM "Constant" A
				WHERE A."ConstId" = C."ConstId"
			)
	)
	SELECT
		TN."TypeNameId",
		TN."Name",
		TN."TransactionTypeId",
		TT."TransactionTypeName",
		T."Price",
		TN."RequireSalePoint"
	FROM "TypeName" TN 
		JOIN "TransactionType" TT ON TN."TransactionTypeId" = TT."TransactionTypeId"
		LEFT JOIN tmp T ON T."ConstId" = TN."ConstId"
	WHERE TN."IsActive" IS TRUE
		AND (TN."TransactionTypeId" = p_transaction_type_id OR COALESCE(p_transaction_type_id, 0) = 0)
	ORDER BY TN."TransactionTypeId", TN."TypeNameId";
END;
$$;


ALTER FUNCTION public.crm_base_get_type_name_ddl(p_transaction_type_id integer) OWNER TO postgres;

--
-- Name: crm_constants_bulk_update(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_constants_bulk_update(p_constants_list text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
/*
    Name: crm_constants_bulk_update
    Description: Function update list constants
    Params:
        [p_constants_list: text] list string of json
    Author: TuanBui
    History:
        [2024-06-08]: Created function
*/
DECLARE
    v_id   INT;
    v_mess TEXT;
    v_record JSONB;
BEGIN
    FOR v_record IN (SELECT * FROM jsonb_array_elements(p_constants_list::jsonb))
    LOOP
        raise notice 'update constants id: % price: %', v_record->>'ConstantId', v_record->>'Price';
        UPDATE "Constant"
        SET "Price" = CAST(v_record->>'Price' as numeric(64, 4))
        WHERE "ConstantId" = CAST(v_record->>'ConstantId' as integer);
    END LOOP ;
    v_id := 1;
    v_mess := 'Update successful';
    RETURN QUERY
        SELECT v_id,
               v_mess;

EXCEPTION
    WHEN OTHERS THEN
        BEGIN
            v_id := -1;
            v_mess := sqlerrm;
            RETURN QUERY
                SELECT v_id,
                       v_mess;
        END;
END;
$$;


ALTER FUNCTION public.crm_constants_bulk_update(p_constants_list text) OWNER TO postgres;

--
-- Name: crm_create_sub_agency(character varying, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_create_sub_agency(p_agency_name character varying, p_price numeric) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
		INSERT INTO "SubAgency"
		("AgencyName","Price")
		VALUES (p_agency_name,p_price);
		v_mess := 'Tạo mới thành công';
		v_id := 1;
    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_create_sub_agency(p_agency_name character varying, p_price numeric) OWNER TO postgres;

--
-- Name: crm_delete_shift_transfer(date, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_delete_shift_transfer(p_date date, p_shift_id integer, p_sale_point integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_shift_dis INT;
	v_shift_dis_after INT;
BEGIN
	IF p_shift_id = 1 THEN 
		SELECT 
			"ShiftDistributeId" INTO v_shift_dis
		FROM "ShiftDistribute"
		WHERE "SalePointId" = p_sale_point
			AND "ShiftId" = p_shift_id
			AND "DistributeDate" :: DATE = p_date::DATE;
		
		SELECT 
			"ShiftDistributeId" INTO v_shift_dis_after
		FROM "ShiftDistribute"
		WHERE "SalePointId" = p_sale_point
			AND "ShiftId" = 2
			AND "DistributeDate" :: DATE = (p_date::DATE);
			
		IF NOT EXISTS(SELECT 1 FROM "ShiftTransfer" WHERE "ShiftDistributeId" = v_shift_dis_after) 
			AND NOT EXISTS(SELECT 1 FROM "ShiftTransfer" WHERE "ActionDate"::DATE >= ((p_date::DATE) + INTERVAL '1 day')::DATE)
		THEN 
			IF EXISTS(SELECT 1 FROM "ShiftTransfer" WHERE "ShiftDistributeId" = v_shift_dis) THEN
				DELETE FROM "ShiftTransfer" WHERE "SalePointid" = p_sale_point AND "ShiftDistributeId" = v_shift_dis;
				v_id := 0;
				v_mess := 'Xoá thành công';
			ELSE
				v_id := 0;
				v_mess := 'Không có ca làm này trong kết ca';
			END IF;
		ELSE
			v_id := 0;
			v_mess := 'Ca làm sau đã kết thúc nên không thể xoá lịch sử kết ca';
		END IF;
	ELSE 
		SELECT 
			"ShiftDistributeId" INTO v_shift_dis
		FROM "ShiftDistribute"
		WHERE "SalePointId" = p_sale_point
			AND "ShiftId" = p_shift_id
			AND "DistributeDate" :: DATE = p_date::DATE;
		
		IF NOT EXISTS(SELECT 1 FROM "ShiftTransfer" WHERE "ActionDate"::DATE >= ((p_date::DATE) + INTERVAL '1 day')::DATE) THEN
			IF EXISTS(SELECT 1 FROM "ShiftTransfer" WHERE "ShiftDistributeId" = v_shift_dis) THEN
				DELETE FROM "ShiftTransfer" WHERE "SalePointid" = p_sale_point AND "ShiftDistributeId" = v_shift_dis;
				v_id := 0;
				v_mess := 'Xoá thành công';
			ELSE
				v_id := 0;
				v_mess := 'Không có ca làm này trong kết ca';
			END IF;
		ELSE
			v_id := 0;
			v_mess := 'Ca làm sau đã kết thúc nên không thể xoá lịch sử kết ca';
		END IF;
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

	RETURN QUERY
	SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_delete_shift_transfer(p_date date, p_shift_id integer, p_sale_point integer) OWNER TO postgres;

--
-- Name: crm_get_all_shift_of_one_employee(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_all_shift_of_one_employee(p_user_role integer, p_month character varying) RETURNS TABLE("UserId" integer, "DistributeDate" date, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "ShiftName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_user_id INT;
BEGIN
	SELECT UR."UserId" INTO v_user_id FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role;
	RETURN QUERY
		SELECT 
			SD."UserId",
			SD."DistributeDate",
			SD."SalePointId",
			SP."SalePointName",
			SD."ShiftId",
			S."ShiftName",
			SD."ShiftTypeId",
			ST."ShiftTypeName"
		FROM "ShiftDistribute" SD
			JOIN "SalePoint" SP ON SD."SalePointId" = SP."SalePointId"
			JOIN "Shift" S ON SD."ShiftId" = S."ShiftId"
			JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId"
		WHERE SD."UserId" = v_user_id AND TO_CHAR(SD."DistributeDate", 'YYYY-MM')=p_month
		ORDER BY SD."DistributeDate", SP."SalePointId", S."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_get_all_shift_of_one_employee(p_user_role integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_average_lottery_price_in_date(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_average_lottery_price_in_date(p_lottery_channel_id integer, p_date timestamp without time zone DEFAULT now()) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_result NUMERIC;
BEGIN
	
	--Vé thường
	IF NOT EXISTS (SELECT 1 FROM "LotteryChannel" LC WHERE LC."LotteryChannelId" = p_lottery_channel_id AND LC."IsScratchcard" IS TRUE) THEN
		
		WITH tmp AS (
			SELECT 
				ROW_NUMBER() OVER(PARTITION BY LP."AgencyId", LP."LotteryChannelId" ORDER BY LP."CreatedDate" DESC) AS "Id",
				LP."AgencyId",
				LP."Price"
			FROM "LotteryPriceAgency" LP
			WHERE LP."IsDeleted" IS FALSE
				AND (p_date::DATE IS NULL OR LP."CreatedDate" <= p_date::DATE)
				AND LP."LotteryChannelId" = p_lottery_channel_id
		),
		tmp2 AS (
			SELECT
				A."AgencyId",
				A."Price"
			FROM tmp A
			WHERE A."Id" = 1
		),
		tmp3 AS (
			SELECT
				I."AgencyId",
				SUM(I."TotalReceived") AS "TotalReceived"
			FROM "InventoryFull" I
			WHERE I."LotteryChannelId" = p_lottery_channel_id
				AND I."LotteryDate" = p_date::DATE
			GROUP BY 
				I."AgencyId"
		)
		SELECT
			COALESCE(SUM(T."TotalReceived" * A."Price"), 0) /(  CASE WHEN COALESCE(SUM(T."TotalReceived"), 0) = 0 THEN 1 END) INTO v_result
		FROM tmp3 T
			LEFT JOIN tmp2 A ON T."AgencyId" = A."AgencyId";
	--Vé cào
	ELSE
	
		v_result := (
			SELECT 
				C."Price"
			FROM "Constant" C 
			WHERE C."CreatedDate"::DATE <= p_date::DATE
				AND C."ConstId" = 12
				AND C."CreatedDate" >= ALL(
					SELECT 
						CC."CreatedDate"
					FROM "Constant" CC
					WHERE CC."ConstId" = C."ConstId"
						AND CC."CreatedDate"::DATE <= p_date::DATE
				)
		)::NUMERIC;
		
	END IF;
	
	RETURN v_result;
END;
$$;


ALTER FUNCTION public.crm_get_average_lottery_price_in_date(p_lottery_channel_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_get_average_lottery_price_in_date_of_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_average_lottery_price_in_date_of_month(p_month character varying) RETURNS TABLE("LotteryChannelId" integer, "Date" date, "Price" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
		v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
		v_time TIMESTAMP := NOW();
BEGIN
	RETURN QUERY
	--Lấy danh sách đài theo ngày
	WITH tmp0 AS (
		SELECT 
			(p_month||'-'||T."Date")::DATE AS "Date",
			UNNEST((SELECT ARRAY_AGG(A."Id") FROM crm_lottery_channel_ddl(2, (p_month||'-'||T."Date")::TIMESTAMP) A)::INT[]) AS "LotteryChannelId"
		FROM (
			SELECT * FROM generate_series(1, v_total_date) AS "Date"
		) T
		UNION ALL
		SELECT 
			NULL::DATE AS "Date",
			LC."LotteryChannelId"
		FROM "LotteryChannel" LC
		WHERE LC."IsScratchcard" IS TRUE 
	)
	SELECT 
		T."LotteryChannelId",
		T."Date",
		CASE WHEN 
		(SELECT * FROM crm_get_average_lottery_price_in_date(T."LotteryChannelId", T."Date"::TIMESTAMP))::INT <> 0 THEN (SELECT * FROM crm_get_average_lottery_price_in_date(T."LotteryChannelId", T."Date"::TIMESTAMP))::NUMERIC
		ELSE 1 
		END
	FROM tmp0 T;
	
END;
$$;


ALTER FUNCTION public.crm_get_average_lottery_price_in_date_of_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_constants_with_const_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_constants_with_const_id(p_const_id integer) RETURNS TABLE("ConstantId" integer, "ConstantName" character varying, "Price" numeric)
    LANGUAGE plpgsql
    AS $$
/*
    Name: crm_get_constants_with_const_id
    Description: Function get list of constants with ConstId
    Params:
        [p_const_id: integer] parent ConstId
    Author: TuanBui
    History:
        [2024-06-08]: Created function
*/
BEGIN
    RETURN QUERY (
        SELECT CON."ConstantId", CON."ConstantName", CON."Price"
        FROM "Constant" as CON
        WHERE CON."ConstId" = p_const_id
        ORDER BY CON."ConstantId"
    );

END;
$$;


ALTER FUNCTION public.crm_get_constants_with_const_id(p_const_id integer) OWNER TO postgres;

--
-- Name: crm_get_current_store_of_sale_point_by_channel(integer, integer, integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_current_store_of_sale_point_by_channel(p_sale_point_id integer, p_channel_id integer, p_lottery_type_id integer, p_lottery_date date) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	IF p_lottery_type_id = 1 THEN
		RETURN (SELECT I."TotalRemaining"
						FROM "Inventory" I
						WHERE I."LotteryDate" = p_lottery_date
							AND I."LotteryChannelId" = p_channel_id
							AND I."SalePointId" = p_sale_point_id);
	ELSEIF p_lottery_type_id = 2 THEN
		RETURN (SELECT I."TotalDupRemaining"
						FROM "Inventory" I
						WHERE I."LotteryDate" = p_lottery_date
							AND I."LotteryChannelId" = p_channel_id
							AND I."SalePointId" = p_sale_point_id);
	ELSE 
		RETURN (SELECT S."TotalRemaining"
						FROM "Scratchcard" S
						WHERE S."SalePointId" = p_sale_point_id);
	END IF;
END;
$$;


ALTER FUNCTION public.crm_get_current_store_of_sale_point_by_channel(p_sale_point_id integer, p_channel_id integer, p_lottery_type_id integer, p_lottery_date date) OWNER TO postgres;

--
-- Name: crm_get_event_date_ddl(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_event_date_ddl(p_month character varying) RETURNS TABLE("EventDate" date)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_time TIMESTAMP := NOW();
BEGIN
RETURN QUERY
	  SELECT 
			E."Date" as "EventDate"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE;
END;
$$;


ALTER FUNCTION public.crm_get_event_date_ddl(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_every_payed_debt_and_new_debt_all_time(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_every_payed_debt_and_new_debt_all_time(p_user_id integer) RETURNS TABLE("UserId" integer, "PayedDebtData" text, "DebtData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	with tmp AS(
		SELECT
			D."UserId",
			D."TotalDebt"
		FROM "Debt" D
			LEFT JOIN "UserRole" UR ON UR."UserId" = D."UserId"
		WHERE D."IsAdded" IS TRUE AND D."UserId" = p_user_id
	), tmp1 AS(
		SELECT
			D."UserId",
			D."PayedDebt"
		FROM "Debt" D
			LEFT JOIN "UserRole" UR ON UR."UserId" = D."UserId"
		WHERE D."UserId" = p_user_id
	),tmp2 AS(
		SELECT 
			T1."UserId",
			array_agg(T1."PayedDebt")::TEXT AS "PayedData" 
		FROM tmp1 T1 
		GROUP BY T1."UserId"
	),tmp3 AS(
		SELECT 
			T."UserId",
			array_agg(T."TotalDebt")::TEXT AS "DebtData" 
		FROM tmp T
		GROUP BY T."UserId"
	)
	SELECT T."UserId",T."PayedData",T1."DebtData" FROM tmp2 T LEFT JOIN tmp3 T1 ON T."UserId" = T1."UserId"
	;
END;
$$;


ALTER FUNCTION public.crm_get_every_payed_debt_and_new_debt_all_time(p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_history_scratch_card_full_log(date, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_history_scratch_card_full_log(p_date date, p_page_size integer, p_page_number integer) RETURNS TABLE("ScratchcardFullLogId" integer, "AgencyName" character varying, "ActionByName" character varying, "ActionDate" character varying, "TotalReceive" integer, "LotteryChannelName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN

	RETURN QUERY
	SELECT
		SFL."ScratchcardFullLogId",
		A."AgencyName",
		SFL."ActionByName",
		TO_CHAR(SFL."ActionDate",'YYYY-MM-DD HH:MM')::VARCHAR(255),
		SFL."TotalReceived",
		LC."LotteryChannelName"
	FROM "ScratchcardFullLog" SFL 
	LEFT JOIN "Agency" A ON SFL."AgencyId" = A."AgencyId"
	LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SFL."LotteryChannelId"
	WHERE SFL."ActionDate"::DATE = p_date
	ORDER BY SFL."ScratchcardFullLogId" 
	OFFSET v_offset_row LIMIT p_page_size;
END;
$$;


ALTER FUNCTION public.crm_get_history_scratch_card_full_log(p_date date, p_page_size integer, p_page_number integer) OWNER TO postgres;

--
-- Name: crm_get_inventory_inday_of_all_salepoint(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_inventory_inday_of_all_salepoint(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "TotalReceived" bigint, "TotalRemaining" bigint, "TotalDupReceived" bigint, "TotalDupRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	WITH tmp AS(
		SELECT
			I."SalePointId",
			I."LotteryDate",
			SUM(I."TotalReceived") "TotalReceived", 
			SUM(I."TotalRemaining") "TotalRemaining", 
			SUM(I."TotalDupReceived") "TotalDupReceived", 
			SUM(I."TotalDupRemaining") "TotalDupRemaining" 
		FROM "Inventory" I
		WHERE TO_CHAR(I."LotteryDate",'YYYY-MM') = p_month
		GROUP BY I."SalePointId", I."LotteryDate"
	)
	SELECT 
		SP."SalePointId",
		SP."SalePointName",
		A."LotteryDate",
		A."TotalReceived",
		A."TotalRemaining",
		A."TotalDupReceived",
		A."TotalDupRemaining"			
	FROM "SalePoint" SP 
		JOIN tmp A ON SP."SalePointId" = A."SalePointId";
		 
END;
$$;


ALTER FUNCTION public.crm_get_inventory_inday_of_all_salepoint(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_inventory_inday_of_all_salepoint_v2(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_inventory_inday_of_all_salepoint_v2(p_month character varying, p_sale_point_id integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "TotalReceived" bigint, "TotalRemaining" bigint, "TotalDupReceived" bigint, "TotalDupRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	WITH tmp AS(
		SELECT
			I."SalePointId",
			I."LotteryDate",
			SUM(I."TotalReceived") "TotalReceived", 
			SUM(I."TotalRemaining") "TotalRemaining", 
			SUM(I."TotalDupReceived") "TotalDupReceived", 
			SUM(I."TotalDupRemaining") "TotalDupRemaining" 
		FROM "Inventory" I
		WHERE TO_CHAR(I."LotteryDate",'YYYY-MM') = p_month
		AND I."LotteryDate" BETWEEN (date_trunc('MONTH',(p_month || '-01')::DATE)::DATE) AND NOW()::DATE
			AND (COALESCE(p_sale_point_id, 0) = 0 OR I."SalePointId" = p_sale_point_id)
		GROUP BY I."SalePointId", I."LotteryDate"
	)
	SELECT 
		SP."SalePointId",
		SP."SalePointName",
		A."LotteryDate",
		A."TotalReceived",
		A."TotalRemaining",
		A."TotalDupReceived",
		A."TotalDupRemaining"			
	FROM "SalePoint" SP 
		JOIN tmp A ON SP."SalePointId" = A."SalePointId";
		 
END;
$$;


ALTER FUNCTION public.crm_get_inventory_inday_of_all_salepoint_v2(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_get_inventory_inday_of_all_salepoint_v3(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_inventory_inday_of_all_salepoint_v3(p_month character varying, p_sale_point_id integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "TotalReceived" bigint, "TotalRemaining" bigint, "TotalDupReceived" bigint, "TotalDupRemaining" bigint, "TransferTicket" bigint, "TicketsReceived" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	WITH tmp AS (
    SELECT
        I."SalePointId",
        I."LotteryDate",
        SUM(I."TotalReceived") AS "TotalReceived", 
        SUM(I."TotalRemaining") AS "TotalRemaining", 
        SUM(I."TotalDupReceived") AS "TotalDupReceived", 
        SUM(I."TotalDupRemaining") AS "TotalDupRemaining" 
    FROM "Inventory" I
    WHERE TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
        AND I."LotteryDate" BETWEEN (date_trunc('MONTH',(p_month || '-01')::DATE)::DATE) AND NOW()::DATE
        AND (COALESCE(p_sale_point_id, 0) = 0 OR I."SalePointId" = p_sale_point_id)
    GROUP BY I."SalePointId", I."LotteryDate"
),
tmp2 AS (
    SELECT
        SUM(R."SoldRetail") AS "SoldRetail",
        SUM(R."SoldWholeSale") AS "SoldWholeSale",
        R."LotteryDate",
        R."SalePointId"
    FROM "ReportLottery" R 
    WHERE TO_CHAR(R."LotteryDate", 'YYYY-MM') = p_month 
        AND "SalePointId" > 0
    GROUP BY "SalePointId", R."LotteryDate"
)
SELECT 
    SP."SalePointId",
    SP."SalePointName",
    A."LotteryDate",
    A."TotalReceived",
    A."TotalRemaining",
    A."TotalDupReceived",
    A."TotalDupRemaining",
    B."TransferTicket",
    B."TicketsReceived",
    C."SoldRetail",
    C."SoldWholeSale"
FROM "SalePoint" SP 
JOIN tmp A ON SP."SalePointId" = A."SalePointId"
LEFT JOIN crm_report_get_transiton_type_offset_v4(p_month) B ON SP."SalePointId" = B."SalePointId" AND A."LotteryDate" = B."TransitionDate"
LEFT JOIN tmp2 C ON SP."SalePointId" = C."SalePointId" AND A."LotteryDate" = C."LotteryDate";

END;
$$;


ALTER FUNCTION public.crm_get_inventory_inday_of_all_salepoint_v3(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_get_inventory_inday_of_all_salepoint_v4(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_inventory_inday_of_all_salepoint_v4(p_month character varying, p_sale_point_id integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "TotalReceived" bigint, "TotalRemaining" bigint, "TotalDupReceived" bigint, "TotalDupRemaining" bigint, "TransferTicket" bigint, "TicketsReceived" bigint, "SoldRetail" bigint, soldwholesale bigint)
    LANGUAGE plpgsql
    AS $$
    /*
        History:
            [2024-06-25 21:00:00][TuanBui]: Get correct total retail tickets;
     */
BEGIN

    RETURN QUERY
        WITH tmp AS (
            SELECT
                I."SalePointId",
                I."LotteryDate",
                SUM(I."TotalReceived") AS "TotalReceived",
                SUM(I."TotalRemaining") AS "TotalRemaining",
                SUM(I."TotalDupReceived") AS "TotalDupReceived",
                SUM(I."TotalDupRemaining") AS "TotalDupRemaining"
            FROM "Inventory" I
            WHERE TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
              AND I."LotteryDate" BETWEEN (date_trunc('MONTH',(p_month || '-01')::DATE)::DATE) AND NOW()::DATE
              AND (COALESCE(p_sale_point_id, 0) = 0 OR I."SalePointId" = p_sale_point_id)
            GROUP BY I."SalePointId", I."LotteryDate"
        ),
             tmp2 AS (
                 SELECT
                     SUM(R."SoldRetail" + R."SoldRetailDup") :: BIGINT AS "SoldRetail",
                     SUM(R."SoldWholeSale") AS "SoldWholeSale",
                     R."Date" as "LotteryDate",
                     R."SalePointId"
                 FROM "ReportLottery" R
                 WHERE TO_CHAR(R."Date", 'YYYY-MM') = p_month
                 GROUP BY R."SalePointId", R."Date"
             )
        SELECT
            SP."SalePointId",
            SP."SalePointName",
            A."LotteryDate",
            A."TotalReceived",
            A."TotalRemaining",
            A."TotalDupReceived",
            A."TotalDupRemaining",
            B."TransferTicket",
            B."TicketsReceived",
            C."SoldRetail",
            C."SoldWholeSale"
        FROM "SalePoint" SP
                 JOIN tmp A ON SP."SalePointId" = A."SalePointId"
                 LEFT JOIN crm_report_get_transiton_type_offset_v4(p_month) B ON SP."SalePointId" = B."SalePointId" AND A."LotteryDate" = B."TransitionDate"
                 LEFT JOIN tmp2 C ON SP."SalePointId" = C."SalePointId" AND A."LotteryDate" = C."LotteryDate";

END;
$$;


ALTER FUNCTION public.crm_get_inventory_inday_of_all_salepoint_v4(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_get_inventory_inmonth_of_all_salepoint(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_inventory_inmonth_of_all_salepoint(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "TotalReceived" bigint, "TotalRemaining" bigint, "TotalDupReceived" bigint, "TotalDupRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
			SP."SalePointId",
			SP."SalePointName",
			A."TotalReceived",
			A."TotalRemaining",
			A."TotalDupReceived",
			A."TotalDupRemaining"			
	FROM "SalePoint" SP LEFT JOIN (
		SELECT
			I."SalePointId",
			SUM(I."TotalReceived") "TotalReceived", 
			SUM(I."TotalRemaining") "TotalRemaining", 
			SUM(I."TotalDupReceived") "TotalDupReceived", 
			SUM(I."TotalDupRemaining") "TotalDupRemaining" 
		FROM "Inventory" I
		WHERE TO_CHAR(I."LotteryDate",'YYYY-MM') = p_month
		GROUP BY I."SalePointId") A ON SP."SalePointId" = A."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_get_inventory_inmonth_of_all_salepoint(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_list_criteria_ddl(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_criteria_ddl(p_user_title_id integer DEFAULT 0) RETURNS TABLE("CriteriaId" integer, "CriteriaName" character varying, "Coef" numeric, "MaxValue" numeric, "UserTitleId" integer)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	SELECT
		C."CriteriaId",
		C."CriteriaName",
		C."Coef",
		C."MaxValue",
		C."UserTitleId"
	FROM "Criteria" C
	WHERE C."IsActive" IS TRUE
		AND (C."UserTitleId" = p_user_title_id OR p_user_title_id = 0)
	ORDER BY
		C."UserTitleId",
		C."CriteriaId";	
END;
$$;


ALTER FUNCTION public.crm_get_list_criteria_ddl(p_user_title_id integer) OWNER TO postgres;

--
-- Name: crm_get_list_guest_ddl(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_guest_ddl(p_sale_point_id integer DEFAULT 0, p_guest_id integer DEFAULT 0) RETURNS TABLE("GuestId" integer, "FullName" character varying, "Phone" character varying, "SalePointId" integer, "WholesalePriceId" integer, "WholesalePrice" numeric, "ScratchPriceId" integer, "ScratchPrice" numeric, "Debt" numeric, "CanBuyWholesale" boolean)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	WITH tmp AS (
-- 		SELECT
-- 			GA."GuestId",
-- 			GA."SalePointId",
-- 			SUM((CASE WHEN GA."GuestActionTypeId" = 1 THEN GA."TotalPrice" 
-- 								WHEN GA."GuestActionTypeId" = 2 OR GA."GuestActionTypeId" = 3 THEN -GA."TotalPrice"
-- 								ELSE 0 END)) AS "Debt"
-- 		FROM "GuestAction" GA
-- 		GROUP BY
-- 			GA."GuestId",
-- 			GA."SalePointId"
		SELECT 
			SPL."GuestId",
			SPL."SalePointId",
			SUM(SPL."TotalValue") AS "Debt"
		FROM "SalePointLog" SPL
		WHERE (SPL."GuestId" IS NOT NULL AND SPL."GuestId" <> 0)
		GROUP BY 
			SPL."SalePointId",
			SPL."GuestId"
	),
	tmp2 AS (
		SELECT
			GA."GuestId",
			GA."SalePointId",
			COALESCE((SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2)), 0) - COALESCE((SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 3)), 0) AS "Debt"
		FROM "GuestAction" GA
		GROUP BY
			GA."GuestId",
			GA."SalePointId"
	)
	SELECT 
		G."GuestId",
		G."FullName",
		G."Phone",
		G."SalePointId",
		G."WholesalePriceId",
		LT."Price" AS "WholesalePrice",
		G."ScratchPriceId",
		LT2."Price" AS "ScratchPrice",
		COALESCE(T."Debt", 0) - COALESCE(TT."Debt", 0) AS "Debt",
		(CASE WHEN G."WholesalePriceId" IS NOT NULL AND G."ScratchPriceId" IS NOT NULL THEN TRUE ELSE FALSE END) AS "CanBuyWholesale"
	FROM "Guest" G
		LEFT JOIN "LotteryPrice" LT ON G."WholesalePriceId" = LT."LotteryPriceId"
		LEFT JOIN "LotteryPrice" LT2 ON G."ScratchPriceId" = LT2."LotteryPriceId"
		LEFT JOIN tmp T ON T."GuestId" = G."GuestId" AND T."SalePointId" = G."SalePointId"
		LEFT JOIN tmp2 TT ON TT."GuestId" = G."GuestId" AND TT."SalePointId" = G."SalePointId"
	WHERE (COALESCE(p_guest_id, 0) = 0 OR G."GuestId" = p_guest_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 OR G."SalePointId" = p_sale_point_id)
	ORDER BY G."FullName";
END;
$$;


ALTER FUNCTION public.crm_get_list_guest_ddl(p_sale_point_id integer, p_guest_id integer) OWNER TO postgres;

--
-- Name: crm_get_list_guest_ddl_v2(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_guest_ddl_v2(p_sale_point_id integer DEFAULT 0, p_guest_id integer DEFAULT 0) RETURNS TABLE("GuestId" integer, "FullName" character varying, "Phone" character varying, "SalePointId" integer, "WholesalePriceId" integer, "WholesalePrice" numeric, "ScratchPriceId" integer, "ScratchPrice" numeric, "Debt" numeric, "CanBuyWholesale" boolean)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	WITH tmp AS (
-- 		SELECT
-- 			GA."GuestId",
-- 			GA."SalePointId",
-- 			SUM((CASE WHEN GA."GuestActionTypeId" = 1 THEN GA."TotalPrice" 
-- 								WHEN GA."GuestActionTypeId" = 2 OR GA."GuestActionTypeId" = 3 THEN -GA."TotalPrice"
-- 								ELSE 0 END)) AS "Debt"
-- 		FROM "GuestAction" GA
-- 		GROUP BY
-- 			GA."GuestId",
-- 			GA."SalePointId"
		SELECT 
			SPL."GuestId",
			SPL."SalePointId",
			SUM(SPL."TotalValue") AS "Debt"
		FROM "SalePointLog" SPL
		WHERE (SPL."GuestId" IS NOT NULL AND SPL."GuestId" <> 0)
		GROUP BY 
			SPL."SalePointId",
			SPL."GuestId"
	),
	tmp2 AS (
		SELECT
			GA."GuestId",
			GA."SalePointId",
			COALESCE((SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2)), 0) - COALESCE((SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 3)), 0) AS "Debt"
		FROM "GuestAction" GA
		GROUP BY
			GA."GuestId",
			GA."SalePointId"
	)
	SELECT 
		G."GuestId",
		G."FullName",
		G."Phone",
		G."SalePointId",
		G."WholesalePriceId",
		LT."Price" AS "WholesalePrice",
		G."ScratchPriceId",
		LT2."Price" AS "ScratchPrice",
		COALESCE(T."Debt", 0) - COALESCE(TT."Debt", 0) AS "Debt",
		(CASE WHEN G."WholesalePriceId" IS NOT NULL AND G."ScratchPriceId" IS NOT NULL THEN TRUE ELSE FALSE END) AS "CanBuyWholesale"
	FROM "Guest" G
		LEFT JOIN "LotteryPrice" LT ON G."WholesalePriceId" = LT."LotteryPriceId"
		LEFT JOIN "LotteryPrice" LT2 ON G."ScratchPriceId" = LT2."LotteryPriceId"
		LEFT JOIN tmp T ON T."GuestId" = G."GuestId" AND T."SalePointId" = G."SalePointId"
		LEFT JOIN tmp2 TT ON TT."GuestId" = G."GuestId" AND TT."SalePointId" = G."SalePointId"
	WHERE (COALESCE(p_guest_id, 0) = 0 OR G."GuestId" = p_guest_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 OR G."SalePointId" = p_sale_point_id)
	ORDER BY G."FullName";
END;
$$;


ALTER FUNCTION public.crm_get_list_guest_ddl_v2(p_sale_point_id integer, p_guest_id integer) OWNER TO postgres;

--
-- Name: crm_get_list_item_ddl(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_item_ddl(p_item_id integer DEFAULT 0) RETURNS TABLE("ItemId" integer, "ItemName" character varying, "UnitId" integer, "UnitName" character varying, "Price" integer, "Quotation" integer, "TypeOfItemId" integer, "TypeName" character varying)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	SELECT 
		I."ItemId",
		I."ItemName",
		I."UnitId",
		U."UnitName",
		I."Price",
		I."Quotation",
		I."TypeOfItemId",
		TI."TypeName"
	FROM "Item" I
		JOIN "Unit" U ON I."UnitId" = U."UnitId"
		JOIN "TypeOfItem" TI ON I."TypeOfItemId" = TI."TypeOfItemId"
	WHERE COALESCE(p_item_id, 0) = 0 OR I."ItemId" = p_item_id
	ORDER BY I."TypeOfItemId";
END;
$$;


ALTER FUNCTION public.crm_get_list_item_ddl(p_item_id integer) OWNER TO postgres;

--
-- Name: crm_get_list_payment_for_confirm(integer, integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_payment_for_confirm(p_page_size integer, p_page_number integer, p_salepoint_id integer, p_date timestamp without time zone) RETURNS TABLE("ArrayGuestActionId" text, "SalePointId" integer, "SalePointName" character varying, "GuestId" integer, "FullName" character varying, "CreatedDate" timestamp without time zone, "Note" character varying, "TotalPrice" numeric, "GuestActionTypeId" integer, "TypeName" character varying, "GuestInfo" text, "DoneTransfer" boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT
			JSON_AGG(GA."GuestActionId")::TEXT AS "ArrayGuestActionId",
			GA."SalePointId",
			SP."SalePointName",
			GA."GuestId",
			G."FullName",
			MAX(GA."CreatedDate") AS "CreatedDate",
			GA."Note",
			SUM(GA."TotalPrice") AS "TotalPrice",
			GA."GuestActionTypeId",
			GA."GuestInfo",
			GA."DoneTransfer"
		FROM "GuestAction" GA
			LEFT JOIN "Guest" G ON GA."GuestId" = G."GuestId"
			JOIN "SalePoint" SP ON GA."SalePointId" = SP."SalePointId"
		WHERE GA."FormPaymentId" = 2
			AND (GA."SalePointId" = p_salepoint_id OR COALESCE(p_salepoint_id, 0) = 0)
			AND (COALESCE(p_date, NULL) IS NULL OR GA."CreatedDate"::DATE = p_date::DATE)
			AND GA."IsDeleted" IS FALSE
		GROUP BY 
			GA."Note",
			GA."SalePointId",
			SP."SalePointName",
			GA."GuestId",
			G."FullName",
			GA."DoneTransfer",
			GA."GuestActionTypeId",
			GA."GuestInfo"
	)	
	SELECT
		T."ArrayGuestActionId",
		T."SalePointId",
		T."SalePointName",
		T."GuestId",
		T."FullName",
		T."CreatedDate",
		T."Note",
		T."TotalPrice",
		T."GuestActionTypeId",
		GA."TypeName",
		T."GuestInfo",
		T."DoneTransfer"
	FROM tmp T
		JOIN "GuestActionType" GA ON T."GuestActionTypeId" = GA."GuestActionTypeId"
	ORDER BY
		T."DoneTransfer",
		T."CreatedDate" DESC
	OFFSET v_offset_row LIMIT p_page_size;
END;
$$;


ALTER FUNCTION public.crm_get_list_payment_for_confirm(p_page_size integer, p_page_number integer, p_salepoint_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_get_list_percent_salepoint_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_percent_salepoint_in_month(p_month character varying) RETURNS TABLE("SalePointId" integer, "MainUserId" integer[], "PercentMainUserId" numeric[])
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
		SPL."SalePointId",
		SPL."MainUserId",
		SPL."PercentMainUserId"
	FROM "SalePointPercentLog" SPL 
	WHERE SPL."ActionDate"::DATE <= (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day')::DATE
		AND SPL."ActionDate" >= ALL(
			SELECT
				T."ActionDate"
			FROM "SalePointPercentLog" T
			WHERE T."ActionDate"::DATE <= (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day')::DATE
				AND T."SalePointId" = SPL."SalePointId"
		);
END;
$$;


ALTER FUNCTION public.crm_get_list_percent_salepoint_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_list_sale_point(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_sale_point(p_id integer DEFAULT 0) RETURNS TABLE("Id" integer, "Name" character varying, "IsActive" boolean, "ActionBy" integer, "ActionByName" character varying, "FullAddress" character varying, "Note" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY 
	SELECT
		S."SalePointId",
		S."SalePointName",
		S."IsActive",
		COALESCE(S."ModifyBy", S."ActionBy"),
		COALESCE(S."ModifyByName", S."ActionByName"),
		S."FullAddress",
		S."Note"
	FROM "SalePoint" S 
	WHERE	S."IsDeleted" IS FALSE  
		AND (p_id = 0 OR p_id= "SalePointId") 
	ORDER BY S."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_get_list_sale_point(p_id integer) OWNER TO postgres;

--
-- Name: crm_get_list_sale_point_v2(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_sale_point_v2(p_id integer DEFAULT 0) RETURNS TABLE("Id" integer, "Name" character varying, "IsActive" boolean, "ActionBy" integer, "ActionByName" character varying, "FullAddress" character varying, "Note" character varying, "RentHomeFee" bigint, "InternetFee" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY 
	SELECT
		S."SalePointId",
		S."SalePointName",
		S."IsActive",
		COALESCE(S."ModifyBy", S."ActionBy"),
		COALESCE(S."ModifyByName", S."ActionByName"),
		S."FullAddress",
		S."Note",
		S."RentHomeFee",
		S."InternetFee"
	FROM "SalePoint" S 
	WHERE	S."IsDeleted" IS FALSE  
		AND (p_id = 0 OR p_id= "SalePointId") 
	ORDER BY S."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_get_list_sale_point_v2(p_id integer) OWNER TO postgres;

--
-- Name: crm_get_list_salepoint_of_leader(integer, timestamp without time zone, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_salepoint_of_leader(p_user_id integer DEFAULT 0, p_date timestamp without time zone DEFAULT now(), p_option integer DEFAULT NULL::integer, p_month character varying DEFAULT NULL::character varying) RETURNS TABLE("UserId" integer, "SalePointId" integer, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user INT;
	v_trigger INT;
BEGIN
	IF p_month IS NOT NULL THEN
		RETURN QUERY 
		WITH tmp AS (
			SELECT 
				GS."UserId",
				UNNEST(GS."SalePointIds") AS "SalePointId"
			FROM "GroupSalePoint" GS
			WHERE (GS."UserId" = p_user_id OR p_user_id = 0)
				AND GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
				AND GS."Option" = 0
				AND GS."CreatedDate" >= ALL(	
					SELECT
						C."CreatedDate"
					FROM "GroupSalePoint" C 
					WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
						AND C."UserId" = GS."UserId"
						AND C."Option" = 0
				)
		)
		SELECT 
			G."UserId",
			G."SalePointId",
			SP."SalePointName"
		FROM tmp G 
			JOIN "SalePoint" SP ON SP."SalePointId" = G."SalePointId"
		ORDER BY 
			G."UserId",
			G."SalePointId"; 
		
	ELSE 
	
		SELECT 
			COALESCE(LOF."UserId", 0) INTO v_user
		FROM "LeaderOffLog" LOF 
		WHERE LOF."WorkingDate"::DATE = p_date::DATE
			AND LOF."IsDeleted" IS FALSE;
		
		SELECT 
			LAA."TriggerSalePoint" INTO v_trigger
		FROM "LeaderAttendent" LAA 
		WHERE LAA."CreatedDate"::DATE <= p_date::DATE
			AND LAA."UserId" = v_user
			AND LAA."CreatedDate" >= ALL(
					SELECT 					
						LA."CreatedDate"
					FROM "LeaderAttendent" LA
					WHERE LA."CreatedDate"::DATE <= p_date::DATE
						AND LA."TriggerSalePoint" = LAA."TriggerSalePoint"
			);
				
		RETURN QUERY
		WITH tmp AS (
			SELECT 
				GS."UserId",
				UNNEST(GS."SalePointIds") AS "SalePointId"
			FROM "GroupSalePoint" GS
			WHERE (GS."UserId" = p_user_id OR p_user_id = 0)
				AND GS."Option" = COALESCE(p_option, v_trigger, 0)
				AND GS."CreatedDate"::DATE <= p_date::DATE
				AND GS."CreatedDate" >= ALL(
					SELECT 
						GSS."CreatedDate"
					FROM "GroupSalePoint" GSS
					WHERE GSS."CreatedDate"::DATE <= p_date::DATE
						AND GSS."Option" = GS."Option"
				)
		)
		SELECT 
			G."UserId",
			G."SalePointId",
			SP."SalePointName"
		FROM tmp G 
			JOIN "SalePoint" SP ON SP."SalePointId" = G."SalePointId"
		ORDER BY 
			G."UserId",
			G."SalePointId";
	END IF;
END;
$$;


ALTER FUNCTION public.crm_get_list_salepoint_of_leader(p_user_id integer, p_date timestamp without time zone, p_option integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_list_unit_ddl(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_list_unit_ddl(p_unit_id integer DEFAULT 0) RETURNS TABLE("UnitId" integer, "UnitName" character varying)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	SELECT 
		U."UnitId",
		U."UnitName"
	FROM "Unit" U 
	WHERE COALESCE(p_unit_id, 0) = 0 OR U."UnitId" = p_unit_id
	ORDER BY U."UnitId";
END;
$$;


ALTER FUNCTION public.crm_get_list_unit_ddl(p_unit_id integer) OWNER TO postgres;

--
-- Name: crm_get_pre_shift_distribute_id_transfer_dup_remaining(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_pre_shift_distribute_id_transfer_dup_remaining(p_shift_dis_id integer, p_channel_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_salePoint_id INT;
	v_date DATE;
BEGIN
	SELECT SD."ShiftId", SD."SalePointId", SD."DistributeDate" INTO v_shift_id, v_salePoint_id, v_date
	FROM "ShiftDistribute" SD 
	WHERE SD."ShiftDistributeId" = p_shift_dis_id;
	IF v_shift_id = 1 THEN
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = (v_date - INTERVAL '1 DAY') :: DATE
			AND SD."ShiftId" =  2
			AND SD."SalePointId" =  v_salePoint_id;
	ELSE
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = v_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_salePoint_id;
	END IF;
	RETURN(
	SELECT SF."TotalDupRemaining" AS "TotalDupRemaining"
	FROM "ShiftTransfer" SF 
	WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id AND SF."LotteryChannelId" = p_channel_id);
END;
$$;


ALTER FUNCTION public.crm_get_pre_shift_distribute_id_transfer_dup_remaining(p_shift_dis_id integer, p_channel_id integer) OWNER TO postgres;

--
-- Name: crm_get_pre_shift_distribute_id_transfer_remaining(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_pre_shift_distribute_id_transfer_remaining(p_shift_dis_id integer, p_channel_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_salePoint_id INT;
	v_date DATE;
BEGIN
	SELECT SD."ShiftId", SD."SalePointId", SD."DistributeDate" INTO v_shift_id, v_salePoint_id, v_date
	FROM "ShiftDistribute" SD 
	WHERE SD."ShiftDistributeId" = p_shift_dis_id;
	IF v_shift_id = 1 THEN
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = (v_date - INTERVAL '1 DAY') :: DATE
			AND SD."ShiftId" =  2
			AND SD."SalePointId" =  v_salePoint_id;
	ELSE
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = v_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_salePoint_id;
	END IF;
	RETURN(
	SELECT SF."TotalRemaining" AS "TotalRemaining"
	FROM "ShiftTransfer" SF 
	WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id AND SF."LotteryChannelId" = p_channel_id);
END;
$$;


ALTER FUNCTION public.crm_get_pre_shift_distribute_id_transfer_remaining(p_shift_dis_id integer, p_channel_id integer) OWNER TO postgres;

--
-- Name: crm_get_previous_remaining(integer, integer, integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_previous_remaining(p_shift_dis_id integer, p_channel_id integer, p_lottery_type_id integer, p_date date) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_salePoint_id INT;
	v_date DATE;
	v_pre_stock INT;
	v_invent_log INT;
	v_sold INT;
	v_stock_sratch_card INT;
	v_trans INT;
	v_return INT;
BEGIN
	SELECT SD."ShiftId", SD."SalePointId", SD."DistributeDate" INTO v_shift_id, v_salePoint_id, v_date
	FROM "ShiftDistribute" SD 
	WHERE SD."ShiftDistributeId" = p_shift_dis_id;
	IF v_shift_id = 1 THEN
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = (v_date - INTERVAL '1 DAY') :: DATE
			AND SD."ShiftId" =  2
			AND SD."SalePointId" =  v_salePoint_id;
					
		SELECT 
			("TotalReceived" - (SELECT SUM("Quantity") FROM "SalePointLog" WHERE "ActionDate"::DATE < p_date AND "LotteryTypeId" = 3 AND "SalePointId" = v_salePoint_id))
		INTO v_stock_sratch_card
		FROM "Scratchcard" WHERE "SalePointId" = v_salePoint_id;
		
	ELSE
	
		SELECT SD."ShiftDistributeId" INTO v_shift_bef_dis_id 
		FROM "ShiftDistribute" SD 
		WHERE SD."DistributeDate" = v_date
			AND SD."ShiftId" =  1
			AND SD."SalePointId" =  v_salePoint_id;
						
		SELECT 
			("TotalReceived" - (SELECT SUM("Quantity") FROM "SalePointLog" WHERE "ActionDate"::DATE <= p_date AND "LotteryTypeId" = 3 AND "SalePointId" = v_salePoint_id AND "ShiftDistributeId" <> p_shift_dis_id))
		INTO v_stock_sratch_card
		FROM "Scratchcard" WHERE "SalePointId" = v_salePoint_id;
		
	END IF;
	
	IF p_lottery_type_id <> 3 THEN

		SELECT SF."TotalRemaining", SF."TotalSold" INTO v_pre_stock, v_sold
		FROM "ShiftTransfer" SF 
		WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id 
			AND SF."LotteryChannelId" = p_channel_id 
			AND SF."LotteryTypeId" = p_lottery_type_id 
			AND (SF."LotteryDate" = p_date OR (p_date IS NULL));
			
		WITH tmp AS(
			SELECT 
				T."TransitionTypeId",
				SUM(T."TotalTrans") AS "TotalTrans",
				SUM(T."TotalTransDup") AS "TotalTransDup"
			FROM "Transition" T
			WHERE T."ShiftDistributeId" = v_shift_bef_dis_id 
				AND T."LotteryChannelId" = p_channel_id
				AND T."LotteryDate" = p_date::DATE
				AND T."ConfirmStatusId" = 2
			GROUP BY
				T."TransitionTypeId"
		)	
				
		SELECT (CASE WHEN p_lottery_type_id = 1 THEN SUM(tmp."TotalTrans") ELSE SUM(tmp."TotalTransDup") END)::INT INTO v_trans
		FROM tmp
		WHERE tmp."TransitionTypeId" = 1;
		
		WITH tmp AS(
			SELECT 
				T."TransitionTypeId",
				SUM(T."TotalTrans") AS "TotalTrans",
				SUM(T."TotalTransDup") AS "TotalTransDup"
			FROM "Transition" T
			WHERE T."ShiftDistributeId" = v_shift_bef_dis_id 
				AND T."LotteryChannelId" = p_channel_id
				AND T."LotteryDate" = p_date::DATE
				AND T."ConfirmStatusId" = 2
			GROUP BY
				T."TransitionTypeId"
		)	
				
		SELECT (CASE WHEN p_lottery_type_id = 1 THEN SUM(tmp."TotalTrans") ELSE SUM(tmp."TotalTransDup") END)::INT INTO v_return
		FROM tmp
		WHERE tmp."TransitionTypeId" = 2;
	
	
		SELECT  
			(CASE WHEN p_lottery_type_id = 1 THEN SUM(IL."TotalReceived")
						WHEN p_lottery_type_id = 2 THEN SUM(IL."TotalDupReceived") END) INTO v_invent_log
		FROM "InventoryLog" IL 
		WHERE IL."LotteryChannelId" = p_channel_id 
			AND IL."LotteryDate" = p_date 
			AND IL."SalePointId" = v_salePoint_id;
		
			IF(EXISTS (
					SELECT 1
					FROM "ShiftTransfer" SF 
					WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id AND SF."LotteryChannelId" = p_channel_id AND SF."LotteryTypeId" = p_lottery_type_id AND (SF."LotteryDate" = p_date OR (p_date IS NULL))
				)) THEN
				RETURN(
					SELECT SF."TotalRemaining"
					FROM "ShiftTransfer" SF 
					WHERE SF."ShiftDistributeId" = v_shift_bef_dis_id AND SF."LotteryChannelId" = p_channel_id AND SF."LotteryTypeId" = p_lottery_type_id AND (SF."LotteryDate" = p_date OR (p_date IS NULL))
				);
			ELSEIF v_shift_id = 2 THEN 
				RETURN (
					SELECT (CASE WHEN p_lottery_type_id = 1 THEN I."TotalRemaining"
											 WHEN p_lottery_type_id = 2 THEN I."TotalDupRemaining" ELSE 0 END)
					FROM "Inventory" I
					WHERE I."LotteryChannelId" = p_channel_id
						AND I."LotteryDate" = p_date
						AND I."SalePointId" = v_salePoint_id
					LIMIT 1
				);
			ELSE 
				RETURN (v_invent_log);
			END IF;
	
	ELSE
	
		RETURN (
			SELECT v_stock_sratch_card
		);
	
	END IF;

END;
$$;


ALTER FUNCTION public.crm_get_previous_remaining(p_shift_dis_id integer, p_channel_id integer, p_lottery_type_id integer, p_date date) OWNER TO postgres;

--
-- Name: crm_get_previous_remaining_v2(integer, integer, integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_previous_remaining_v2(p_shift_dis_id integer, p_channel_id integer, p_lottery_type_id integer, p_lottery_date date, p_date date) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_salePoint_id INT;
	v_date DATE;
	v_pre_stock INT;
	v_invent_log INT;
	v_sold INT;
	v_stock_sratch_card INT;
	v_trans INT;
	v_return INT;
BEGIN
	SELECT SD."ShiftId", SD."SalePointId", SD."DistributeDate" INTO v_shift_id, v_salePoint_id, v_date
	FROM "ShiftDistribute" SD 
	WHERE SD."ShiftDistributeId" = p_shift_dis_id;
	
	IF v_shift_id = 1 THEN
		
		WITH tmp AS(
			SELECT 
				T."TransitionTypeId",
				T."TotalTrans",
				T."TotalTransDup"
			FROM "Transition" T
			WHERE T."LotteryChannelId" = p_channel_id
				AND T."TransitionDate"::DATE < p_date::DATE
				AND T."ConfirmStatusId" = 2
				AND (T."FromSalePointId" = v_salePoint_id OR T."ToSalePointId" = v_salePoint_id)
				AND T."IsScratchcard" IS TRUE
		)
		SELECT 
			(CASE WHEN p_lottery_type_id = 3 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 1) ELSE 
				SUM(0) FILTER(WHERE tmp."TransitionTypeId" = 1) END)::INT,
			(CASE WHEN p_lottery_type_id = 3 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 2) ELSE 
				SUM(0) FILTER(WHERE tmp."TransitionTypeId" = 2) END)::INT 
		INTO v_trans, v_return
		FROM tmp;
					
		SELECT 
			("TotalReceived" - COALESCE((SELECT SUM("Quantity") FROM "SalePointLog" WHERE "ActionDate"::DATE < p_date AND "LotteryTypeId" = 3 AND "SalePointId" = v_salePoint_id AND "IsDeleted" IS FALSE AND "LotteryChannelId" = p_channel_id), 0) - COALESCE(v_trans, 0) + COALESCE(v_return, 0))
		INTO v_stock_sratch_card
		FROM "Scratchcard" 
		WHERE "SalePointId" = v_salePoint_id AND "LotteryChannelId" = p_channel_id;
		
		WITH tmp AS(
			SELECT 
				T."TransitionTypeId",
				T."TotalTrans",
				T."TotalTransDup"
			FROM "Transition" T
			WHERE T."LotteryChannelId" = p_channel_id
				AND T."LotteryDate" = p_lottery_date::DATE
				AND T."TransitionDate"::DATE < p_date::DATE
				AND T."ConfirmStatusId" = 2
				AND (T."FromSalePointId" = v_salePoint_id OR T."ToSalePointId" = v_salePoint_id)
				AND T."IsScratchcard" IS FALSE
		)
		SELECT 
			(CASE WHEN p_lottery_type_id = 1 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 1) ELSE 
				SUM(tmp."TotalTransDup") FILTER(WHERE tmp."TransitionTypeId" = 1) END)::INT,
			(CASE WHEN p_lottery_type_id = 1 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 2) ELSE 
				SUM(tmp."TotalTransDup") FILTER(WHERE tmp."TransitionTypeId" = 2) END)::INT 
		INTO v_trans, v_return
		FROM tmp;	
		
		SELECT
			SUM(SL."Quantity") INTO v_sold
		FROM "SalePointLog" SL 
		WHERE "ActionDate"::DATE < p_date
 			AND SL."LotteryChannelId" = p_channel_id 
 			AND SL."LotteryTypeId" = p_lottery_type_id 
 			AND SL."LotteryDate" = p_lottery_date
			AND SL."SalePointId" = v_salePoint_id
			AND SL."IsDeleted" IS FALSE;
		
		
	ELSE
	
		WITH tmp AS(
			SELECT 
				T."TransitionTypeId",
				T."TotalTrans",
				T."TotalTransDup"
			FROM "Transition" T
			WHERE T."ShiftDistributeId" <> p_shift_dis_id
				AND T."LotteryChannelId" = p_channel_id
				AND T."TransitionDate"::DATE <= p_date::DATE
				AND T."ConfirmStatusId" = 2
				AND (T."FromSalePointId" = v_salePoint_id OR T."ToSalePointId" = v_salePoint_id)
				AND T."IsScratchcard" IS TRUE
		)
		SELECT 
			(CASE WHEN p_lottery_type_id = 3 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 1) ELSE 
				SUM(0) FILTER(WHERE tmp."TransitionTypeId" = 1) END)::INT,
			(CASE WHEN p_lottery_type_id = 3 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 2) ELSE 
				SUM(0) FILTER(WHERE tmp."TransitionTypeId" = 2) END)::INT 
		INTO v_trans, v_return
		FROM tmp;
		
		SELECT 
			("TotalReceived" - COALESCE((SELECT SUM("Quantity") FROM "SalePointLog" WHERE "ActionDate"::DATE <= p_date AND "LotteryTypeId" = 3 AND "SalePointId" = v_salePoint_id AND "ShiftDistributeId" <> p_shift_dis_id AND "IsDeleted" IS FALSE AND "LotteryChannelId" = p_channel_id), 0) - COALESCE(v_trans, 0) + COALESCE(v_return, 0))
		INTO v_stock_sratch_card
		FROM "Scratchcard" WHERE "SalePointId" = v_salePoint_id AND "LotteryChannelId" = p_channel_id;
	
		WITH tmp AS(
			SELECT 
				T."TransitionTypeId",
				T."TotalTrans",
				T."TotalTransDup"
			FROM "Transition" T
			WHERE T."ShiftDistributeId" <> p_shift_dis_id
				AND T."LotteryChannelId" = p_channel_id
				AND T."LotteryDate" = p_lottery_date::DATE
				AND T."TransitionDate"::DATE <= p_date::DATE
				AND T."ConfirmStatusId" = 2
				AND (T."FromSalePointId" = v_salePoint_id OR T."ToSalePointId" = v_salePoint_id)
				AND T."IsScratchcard" IS FALSE
		)
		SELECT 
			(CASE WHEN p_lottery_type_id = 1 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 1) ELSE 
				SUM(tmp."TotalTransDup") FILTER(WHERE tmp."TransitionTypeId" = 1) END)::INT,
			(CASE WHEN p_lottery_type_id = 1 THEN 
				SUM(tmp."TotalTrans") FILTER(WHERE tmp."TransitionTypeId" = 2) ELSE 
				SUM(tmp."TotalTransDup") FILTER(WHERE tmp."TransitionTypeId" = 2) END)::INT
		INTO v_trans, v_return
		FROM tmp;
		
		SELECT
			SUM(SL."Quantity") INTO v_sold
		FROM "SalePointLog" SL 
		WHERE SL."ShiftDistributeId" <> p_shift_dis_id
			AND "ActionDate"::DATE <= p_date
 			AND SL."LotteryChannelId" = p_channel_id 
 			AND SL."LotteryTypeId" = p_lottery_type_id 
 			AND SL."LotteryDate" = p_lottery_date
			AND SL."SalePointId" = v_salePoint_id
			AND SL."IsDeleted" IS FALSE;
						
	
		
	END IF;
	
	IF p_lottery_type_id <> 3 THEN

		SELECT  
			(CASE WHEN p_lottery_type_id = 1 THEN SUM(IL."TotalReceived")
						WHEN p_lottery_type_id = 2 THEN SUM(IL."TotalDupReceived") END) INTO v_invent_log
		FROM "InventoryLog" IL 
		WHERE IL."LotteryChannelId" = p_channel_id 
			AND IL."LotteryDate" = p_lottery_date 
			AND IL."SalePointId" = v_salePoint_id;

		-- RAISE NOTICE 'v_invent_log: %, v_sold: %, v_trans: %, v_return: %', v_invent_log, v_sold, v_trans, v_return;
		RETURN COALESCE(v_invent_log, 0) - COALESCE(v_sold, 0) - COALESCE(v_trans, 0) + COALESCE(v_return, 0);
		
	ELSE
	
		RETURN (
			SELECT v_stock_sratch_card
		);
	
	END IF;

END;
$$;


ALTER FUNCTION public.crm_get_previous_remaining_v2(p_shift_dis_id integer, p_channel_id integer, p_lottery_type_id integer, p_lottery_date date, p_date date) OWNER TO postgres;

--
-- Name: crm_get_previous_remaining_v3(integer, integer, integer, date, date, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_previous_remaining_v3(p_shift_dis_id integer, p_channel_id integer, p_lottery_type_id integer, p_lottery_date date, p_date date, p_user_role integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_shift_id INT;
	v_shift_bef_dis_id INT;
	v_salePoint_id INT;
	v_date DATE;
	v_pre_stock INT;
	v_invent_log INT;
	v_sold INT;
	v_stock_sratch_card INT8;
	v_trans INT;
	v_return INT;
	omgjson json := (SELECT F."ScratchcardData"::TEXT FROM crm_activity_sell_get_data_v5(p_shift_dis_id,p_user_role,p_date) F)::JSON;
	omgjson2 json := (SELECT F."TodayData"::TEXT FROM crm_activity_sell_get_data_v5(p_shift_dis_id,p_user_role,p_date) F)::JSON;
	i json;
BEGIN
	IF p_lottery_type_id = 3 THEN 
		SELECT SD."ShiftId", SD."SalePointId", SD."DistributeDate" INTO v_shift_id, v_salePoint_id,v_date
		FROM "ShiftDistribute" SD 
		WHERE SD."ShiftDistributeId" = p_shift_dis_id;
		FOR i IN SELECT * FROM json_array_elements(omgjson) LOOP 
		IF ((i->>'LotteryChannelId')::INT = p_channel_id) THEN
		SELECT i->>'TotalRemaining' INTO v_stock_sratch_card;
		END IF;
		END LOOP;
	ELSE
		SELECT SD."ShiftId", SD."SalePointId", SD."DistributeDate" INTO v_shift_id, v_salePoint_id,v_date
		FROM "ShiftDistribute" SD 
		WHERE SD."ShiftDistributeId" = p_shift_dis_id;
		FOR i IN SELECT * FROM json_array_elements(omgjson2) LOOP 
		IF ((i->>'LotteryChannelId')::INT = p_channel_id) THEN
		SELECT i->>'TotalRemaining' INTO v_stock_sratch_card;
		END IF;
		END LOOP;
	END IF;
	RETURN v_stock_sratch_card;
END;
$$;


ALTER FUNCTION public.crm_get_previous_remaining_v3(p_shift_dis_id integer, p_channel_id integer, p_lottery_type_id integer, p_lottery_date date, p_date date, p_user_role integer) OWNER TO postgres;

--
-- Name: crm_get_salary_divide_for_salepoint(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_divide_for_salepoint(p_month character varying) RETURNS TABLE("Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
		v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
		v_user RECORD;
		v_row JSON;
		v_total INT;
		v_time TIMESTAMP := NOW();
		v_sub INT;
		v_shift_dis INT;
		v_employee INT := 5;
		v_leader INT := 4;
		v_sale_point_id INT;
		v_date DATE;
		v_normal_price NUMERIC;
		v_sub_price NUMERIC;
		v_rice DECIMAL;
		v_overtime DECIMAL;
		v_event DECIMAL;
		v_salary_leader NUMERIC;
		v_coef_leader NUMERIC;
		v_KPI NUMERIC;
		v_sale_loto NUMERIC;
		v_type_name_0 VARCHAR := '"Lương thường"';
		v_type_name_1 VARCHAR := '"Lương tăng ca"';
		v_type_name_2 VARCHAR := '"Lương thưởng"';
		v_type_name_3 VARCHAR := '"Lương cộng thêm"';
		v_shift_id INT;
BEGIN
	--Bảng tạm chứa số tiền chi lương mỗi điểm bán
	CREATE TEMP TABLE SPoint ON COMMIT DROP AS (
		SELECT 
			SP."SalePointId",
			0::NUMERIC AS "TotalSalary",
			0::NUMERIC AS "TotalSalarySub",
			0::NUMERIC AS "TotalPriceForLunch",
			0::NUMERIC AS "TotalPriceTarget",
			'[]'::TEXT AS "LogData"
		FROM "SalePoint" SP
		WHERE SP."IsDeleted" IS FALSE
			AND SP."IsActive" IS TRUE
	);
	--Bảng tạm chứa danh sách ca làm
	CREATE TEMP TABLE ShiftD ON COMMIT DROP AS(
		SELECT 
			SD."ShiftDistributeId",
			SD."UserId",
			SD."SalePointId",
			SD."ShiftId",
			SD."DistributeDate"
		FROM "ShiftDistribute" SD
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
	);
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
	
	--Lấy các khoản lương của user
	CREATE TEMP TABLE KPIData ON COMMIT DROP AS (
		WITH tmp0 AS (
			SELECT 	
				K."UserId",
				ROUND(SUM(K."AverageKPI")/(CASE WHEN COUNT(K."AverageKPI") = 0 THEN 1 ELSE COUNT(K."AverageKPI") END), 2) AS "KPI"
			FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
			GROUP BY
				K."UserId"
		),
		tmp1 AS(
			SELECT 
				U."UserId",
				U."UserTitleId"
			FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
				LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId"
		),
		tmp2 AS (
			SELECT 
				TD."TargetDataTypeId",
				TD."FromValue",
				TD."ToValue",
				TD."Value"
			FROM "TargetData" TD
			WHERE TD."IsDeleted" IS FALSE
		),
		--Doanh số nhân viên
		tmp3 AS (
			SELECT 
				T."UserId",
				T."Average"
			FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
		),
		-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
		tmp4 AS (
			SELECT 
				T."TransactionId",
				T."TotalPrice",
				T."UserId",
				T."ShiftDistributeId",
				T."SalePointId",
				T."TransactionTypeId",
				T."TypeNameId"
			FROM "Transaction" T 
			WHERE T."IsDeleted" IS FALSE
				AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM ShiftD SD)
					OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."ActionDate", 'YYYY-MM') = p_month)
		),
		--Tính các loại thưởng
		tmp5 AS (
			SELECT 
				T."UserId",
				COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
				COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto"																	--Doanh thu loto
			FROM tmp4 T
			GROUP BY 
				T."UserId"
		),
		--Quy đổi hệ số 
		tmp6 AS (
			SELECT 	
				U."UserId",
				U."UserTitleId",
				COALESCE(A."Average", 0) AS "Average",
				COALESCE(S."SaleOfVietlott", 0) AS "SaleOfVietlott",
				COALESCE(S."SaleOfLoto", 0) AS "SaleOfLoto",
				COALESCE(K."KPI", 0) AS "KPI",
				(CASE
					WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
						THEN 0
					WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
						THEN 0
					ELSE T."Value" END ) AS "KPICoafficient"
			FROM tmp1 U
				LEFT JOIN tmp3 A ON U."UserId" = A."UserId"
				LEFT JOIN tmp5 S ON U."UserId" = S."UserId"
				LEFT JOIN tmp0 K ON K."UserId" = U."UserId"
				LEFT JOIN tmp2 T
					ON (T."TargetDataTypeId" = 4 
						AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
						AND U."UserTitleId" = v_employee)
					OR (T."TargetDataTypeId" = 5 
						AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
						AND U."UserTitleId" = v_leader)
			WHERE U."UserTitleId" IN (v_leader, v_employee)
		),
		tmp7 AS (
			SELECT 
				U.*,
				(
					CASE 
						WHEN U."UserTitleId" <> v_leader THEN
						(
							CASE
								WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
									THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
								WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
									THEN 0
								ELSE P."Value" 
							END
						)
						ELSE 0
					END
				) AS "ReponsibilityLottery",
				(CASE
					WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
					WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
						THEN 0
					ELSE V."Value" END) AS "VietlottLottery",
				(CASE
					WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
						THEN 0
					ELSE T."Value" END) AS "TraditionalLottery"
			FROM tmp6 U 
				LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
				LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
				LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue" AND T."ToValue")
		)
		SELECT 
			U.*,
			(U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalAward"
		FROM tmp7 U
	);
		
	--bảng tạm chứa lương cơ bản mỗi nhân viên
	CREATE TEMP TABLE BSalary ON COMMIT DROP AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	);
	
	FOR v_user IN (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId"
	) LOOP
			
		-- Nhân viên
		IF v_user."UserTitleId" = v_employee THEN 
		
			--Lương cơ bản 1 ngày 
			SELECT 
				B."SalaryOneDate",
				B."SalaryOneDateSub"
			INTO 
				v_normal_price,
				v_sub_price
			FROM BSalary B
			WHERE B."UserId" = v_user."UserId";
		
			--Tổng số ca đã làm
			SELECT
				COUNT(1) INTO v_total
			FROM "ShiftDistribute" SD 
			WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
				AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
				AND SD."UserId" = v_user."UserId";
			
			--Lấy số ca tăng ca
			v_sub := v_total - v_total_date;

			--Nếu có tăng ca thì cập nhật lại số ca trong vòng lặp và cộng thêm một công
			IF v_sub >= 0 THEN 
				v_total := v_total_date;
								
				UPDATE SPoint 
				SET 
					"TotalSalary" = "TotalSalary" + v_normal_price,
					"TotalPriceForLunch" = "TotalPriceForLunch" + v_rice,
					"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '||v_normal_price||',"PriceForLunch": '||v_rice||',"TypeId": '||3||',"TypeName": '||v_type_name_3||'}')::JSONB)::TEXT
 				WHERE "SalePointId" = v_user."SalePointId";
				
			END IF;
			
			--Lặp qua số ca thường
			WHILE v_total > 0 LOOP
				
				SELECT 
					SD."ShiftDistributeId",
					SD."DistributeDate",
					SD."SalePointId",
					SD."ShiftId"
				INTO 
					v_shift_dis,
					v_date,
					v_sale_point_id,
					v_shift_id
				FROM ShiftD SD
				WHERE SD."UserId" = v_user."UserId"		
					AND SD."SalePointId" = v_user."SalePointId" 
				ORDER BY 
					SD."DistributeDate",
					SD."ShiftId"
				LIMIT 1;
				
				--Nếu ko tồn tại ca làm
				IF v_shift_dis IS  NULL THEN 
					SELECT 
						SD."ShiftDistributeId",
						SD."DistributeDate",
						SD."SalePointId",
						SD."ShiftId"
					INTO 
						v_shift_dis,
						v_date,
						v_sale_point_id,
						v_shift_id
					FROM ShiftD SD
					WHERE SD."UserId" = v_user."UserId"		
					ORDER BY 
						SD."DistributeDate",
						SD."ShiftId"
					LIMIT 1;
				END IF;
				
				--Xoá khỏi bảng tạm
				DELETE FROM ShiftD WHERE ShiftD."ShiftDistributeId" = v_shift_dis;
				--Tính tiền cho điểm bán
				UPDATE SPoint 
				SET "TotalSalary" = "TotalSalary" + v_normal_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date	AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END),
						"TotalPriceForLunch" = "TotalPriceForLunch" + v_rice,
						"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '|| v_normal_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date	AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END)||',"PriceForLunch": '||v_rice||',"TypeId": '||0||',"TypeName": '||v_type_name_0||',"ShiftId": '||v_shift_id||',"DistributeDate": "'||v_date||'"}')::JSONB)::TEXT
 				WHERE "SalePointId" = v_sale_point_id;
							
				--Cập nhật lại giá trị lặp
				v_total := v_total - 1;
				
				--Xoá các giá trị 
				v_shift_dis := NULL;	
				v_date := NULL;
				v_sale_point_id := NULL;	
				v_shift_id := NULL;		
								
			END LOOP;
			
			--Lặp qua số ca tăng ca 
			WHILE v_sub > 0 LOOP
			
				--Lấy id ca làm không phải ca của điểm bán gốc
				SELECT 
					SD."ShiftDistributeId",
					SD."DistributeDate",
					SD."SalePointId",
					SD."ShiftId"
				INTO 
					v_shift_dis,
					v_date,
					v_sale_point_id,
					v_shift_id
				FROM ShiftD SD
				WHERE SD."UserId" = v_user."UserId"		
					AND SD."SalePointId" <> v_user."SalePointId" 
				ORDER BY 
					SD."DistributeDate",
					SD."ShiftId"
				LIMIT 1;
				
				--Nếu ko tồn tại ca làm
				IF v_shift_dis IS  NULL THEN 
					SELECT 
						SD."ShiftDistributeId",
						SD."DistributeDate",
						SD."SalePointId",
						SD."ShiftId"
					INTO 
						v_shift_dis,
						v_date,
						v_sale_point_id,
						v_shift_id
					FROM ShiftD SD
					WHERE SD."UserId" = v_user."UserId"	
						AND SD."SalePointId" = v_user."SalePointId" 
					ORDER BY 
						SD."DistributeDate",
						SD."ShiftId"
					LIMIT 1;
				END IF;
				
				--Xoá khỏi bảng tạm
				DELETE FROM ShiftD WHERE ShiftD."ShiftDistributeId" = v_shift_dis;
				--Tính tiền cho điểm bán
				UPDATE SPoint 
				SET "TotalSalarySub" = "TotalSalarySub" + v_sub_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END),
						"TotalPriceForLunch" = "TotalPriceForLunch" + v_rice,
						"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '|| v_sub_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END)||',"PriceForLunch": '||v_rice||',"TypeId": '||1||',"TypeName": '||v_type_name_1||',"ShiftId": '||v_shift_id||',"DistributeDate": "'||v_date||'"}')::JSONB)::TEXT
				WHERE "SalePointId" = v_sale_point_id;
				
			
				--Cập nhật lại giá trị lặp
				v_sub := v_sub - 1;
				
				--Xoá các giá trị 
				v_shift_dis := NULL;	
				v_date := NULL;
				v_sale_point_id := NULL;	
				v_shift_id := NULL;
			END LOOP;
		
			IF (SELECT D."TotalAward" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC > 0 THEN 
			--Trả thưởng target
				UPDATE SPoint 
				SET 
					"TotalPriceTarget" = "TotalPriceTarget" + COALESCE((SELECT D."TotalAward" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC, 0),
					"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '|| COALESCE((SELECT D."TotalAward" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC, 0) ||',"TypeId": '||2||',"TypeName": '||v_type_name_2||'}')::JSONB)::TEXT
				WHERE "SalePointId" = v_user."SalePointId"; 
			END IF;
						
		--Trưởng nhóm
		ELSEIF v_user."UserTitleId" = v_leader THEN
			
			v_KPI := (SELECT D."KPICoafficient" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC;
			FOR v_row IN SELECT json_array_elements((v_user."ListSalePoint")::JSON) LOOP
			
				UPDATE SPoint
				SET 
					"TotalSalary" = "TotalSalary" + v_salary_leader * v_coef_leader,
					"TotalPriceTarget" = v_KPI * v_salary_leader,
					"LogData" = ("LogData"::JSONB || 
											('{"UserId": '||v_user."UserId"||',"Salary": '||v_salary_leader * v_coef_leader||',"TypeId": '||0||',"TypeName": '||v_type_name_0||'}')::JSONB ||
											('{"UserId": '||v_user."UserId"||',"Salary": '|| v_KPI * v_salary_leader ||',"TypeId": '||2||',"TypeName": '||v_type_name_2||'}')::JSONB)::TEXT
				WHERE "SalePointId" = (v_row->>'SalePointId')::INT; 
				
			END LOOP;
		
		END IF;
			
	END LOOP; 
	

	RETURN QUERY 
	SELECT
		TO_JSONB(T.*)::TEXT
	FROM SPoint T;
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_divide_for_salepoint(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_salary_divide_for_salepoint_v1(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_divide_for_salepoint_v1(p_month character varying) RETURNS TABLE("Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
		v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
		v_user RECORD;
		v_row JSON;
		v_total INT;
		v_time TIMESTAMP := NOW();
		v_sub INT;
		v_shift_dis INT;
		v_employee INT := 5;
		v_leader INT := 4;
		v_sale_point_id INT;
		v_date DATE;
		v_normal_price NUMERIC;
		v_sub_price NUMERIC;
		v_rice DECIMAL;
		v_overtime DECIMAL;
		v_event DECIMAL;
		v_salary_leader NUMERIC;
		v_coef_leader NUMERIC;
		v_KPI NUMERIC;
		v_sale_loto NUMERIC;
		v_type_name_0 VARCHAR := '"Lương thường"';
		v_type_name_1 VARCHAR := '"Lương tăng ca"';
		v_type_name_2 VARCHAR := '"Lương thưởng"';
		v_type_name_3 VARCHAR := '"Lương cộng thêm"';
		v_shift_id INT;
BEGIN
	--Bảng tạm chứa số tiền chi lương mỗi điểm bán
	CREATE TEMP TABLE SPoint ON COMMIT DROP AS (
		SELECT 
			SP."SalePointId",
			0::NUMERIC AS "TotalSalary",
			0::NUMERIC AS "TotalSalarySub",
			0::NUMERIC AS "TotalPriceForLunch",
			0::NUMERIC AS "TotalPriceTarget",
			'[]'::TEXT AS "LogData"
		FROM "SalePoint" SP
		WHERE SP."IsDeleted" IS FALSE
			AND SP."IsActive" IS TRUE
	);
	--Bảng tạm chứa danh sách ca làm
	CREATE TEMP TABLE ShiftD ON COMMIT DROP AS(
		SELECT 
			SD."ShiftDistributeId",
			SD."UserId",
			SD."SalePointId",
			SD."ShiftId",
			SD."DistributeDate"
		FROM "ShiftDistribute" SD
		WHERE 
		
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(SD."DistributeDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(SD."DistributeDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			END
		
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
	);
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
	
	--Lấy các khoản lương của user
	CREATE TEMP TABLE KPIData ON COMMIT DROP AS (
		WITH tmp0 AS (
			SELECT 	
				K."UserId",
				ROUND(SUM(K."AverageKPI")/(CASE WHEN COUNT(K."AverageKPI") = 0 THEN 1 ELSE COUNT(K."AverageKPI") END), 2) AS "KPI"
			FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
			GROUP BY
				K."UserId"
		),
		tmp1 AS(
			SELECT 
				U."UserId",
				U."UserTitleId"
			FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
				LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId"
		),
		tmp2 AS (
			SELECT 
				TD."TargetDataTypeId",
				TD."FromValue",
				TD."ToValue",
				TD."Value"
			FROM "TargetData" TD
			WHERE TD."IsDeleted" IS FALSE
		),
		--Doanh số nhân viên
		tmp3 AS (
			SELECT 
				T."UserId",
				T."Average"
			FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
		),
		-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
		tmp4 AS (
			SELECT 
				T."TransactionId",
				T."TotalPrice",
				T."UserId",
				T."ShiftDistributeId",
				T."SalePointId",
				T."TransactionTypeId",
				T."TypeNameId"
			FROM "Transaction" T 
			WHERE T."IsDeleted" IS FALSE
				AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM ShiftD SD)
					OR T."ShiftDistributeId" IS NULL AND 
					
					(CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
						THEN TO_CHAR(T."ActionDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
						AND TO_CHAR(T."ActionDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
					ELSE
						TO_CHAR(T."ActionDate", 'YYYY-MM') = p_month
					END))
		),
		--Tính các loại thưởng
		tmp5 AS (
			SELECT 
				T."UserId",
				COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
				COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto"																	--Doanh thu loto
			FROM tmp4 T
			GROUP BY 
				T."UserId"
		),
		--Quy đổi hệ số 
		tmp6 AS (
			SELECT 	
				U."UserId",
				U."UserTitleId",
				COALESCE(A."Average", 0) AS "Average",
				COALESCE(S."SaleOfVietlott", 0) AS "SaleOfVietlott",
				COALESCE(S."SaleOfLoto", 0) AS "SaleOfLoto",
				COALESCE(K."KPI", 0) AS "KPI",
				(CASE
					WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
						THEN 0
					WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
						THEN 0
					ELSE T."Value" END ) AS "KPICoafficient"
			FROM tmp1 U
				LEFT JOIN tmp3 A ON U."UserId" = A."UserId"
				LEFT JOIN tmp5 S ON U."UserId" = S."UserId"
				LEFT JOIN tmp0 K ON K."UserId" = U."UserId"
				LEFT JOIN tmp2 T
					ON (T."TargetDataTypeId" = 4 
						AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
						AND U."UserTitleId" = v_employee)
					OR (T."TargetDataTypeId" = 5 
						AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
						AND U."UserTitleId" = v_leader)
			WHERE U."UserTitleId" IN (v_leader, v_employee)
		),
		tmp7 AS (
			SELECT 
				U.*,
				(
					CASE 
						WHEN U."UserTitleId" <> v_leader THEN
						(
							CASE
								WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
									THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
								WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
									THEN 0
								ELSE P."Value" 
							END
						)
						ELSE 0
					END
				) AS "ReponsibilityLottery",
				(CASE
					WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
					WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
						THEN 0
					ELSE V."Value" END) AS "VietlottLottery",
				(CASE
					WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
						THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
						THEN 0
					ELSE T."Value" END) AS "TraditionalLottery"
			FROM tmp6 U 
				LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
				LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
				LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue" AND T."ToValue")
		)
		SELECT 
			U.*,
			(U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalAward"
		FROM tmp7 U
	);
		
	--bảng tạm chứa lương cơ bản mỗi nhân viên
	CREATE TEMP TABLE BSalary ON COMMIT DROP AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	);
	
	FOR v_user IN (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId"
	) LOOP
			
		-- Nhân viên
		IF v_user."UserTitleId" = v_employee THEN 
		
			--Lương cơ bản 1 ngày 
			SELECT 
				B."SalaryOneDate",
				B."SalaryOneDateSub"
			INTO 
				v_normal_price,
				v_sub_price
			FROM BSalary B
			WHERE B."UserId" = v_user."UserId";
		
			--Tổng số ca đã làm
			SELECT
				COUNT(1) INTO v_total
			FROM "ShiftDistribute" SD 
			WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
				AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
				AND SD."UserId" = v_user."UserId";
			
			--Lấy số ca tăng ca
			v_sub := v_total - v_total_date;

			
			IF v_sub >= 0 THEN v_total := v_total_date; END IF;
			--Nếu có tăng ca thì cập nhật lại số ca trong vòng lặp và cộng thêm một công
			IF v_total >= v_total_date - 2 THEN 
								
				UPDATE SPoint 
				SET 
					"TotalSalary" = "TotalSalary" + v_normal_price,
					"TotalPriceForLunch" = "TotalPriceForLunch" + v_rice,
					"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '||v_normal_price||',"PriceForLunch": '||v_rice||',"TypeId": '||3||',"TypeName": '||v_type_name_3||'}')::JSONB)::TEXT
 				WHERE "SalePointId" = v_user."SalePointId";
				
			END IF;
			
			--Lặp qua số ca thường
			WHILE v_total > 0 LOOP
				
				SELECT 
					SD."ShiftDistributeId",
					SD."DistributeDate",
					SD."SalePointId",
					SD."ShiftId"
				INTO 
					v_shift_dis,
					v_date,
					v_sale_point_id,
					v_shift_id
				FROM ShiftD SD
				WHERE SD."UserId" = v_user."UserId"		
					AND SD."SalePointId" = v_user."SalePointId" 
				ORDER BY 
					SD."DistributeDate",
					SD."ShiftId"
				LIMIT 1;
				
				--Nếu ko tồn tại ca làm
				IF v_shift_dis IS  NULL THEN 
					SELECT 
						SD."ShiftDistributeId",
						SD."DistributeDate",
						SD."SalePointId",
						SD."ShiftId"
					INTO 
						v_shift_dis,
						v_date,
						v_sale_point_id,
						v_shift_id
					FROM ShiftD SD
					WHERE SD."UserId" = v_user."UserId"		
					ORDER BY 
						SD."DistributeDate",
						SD."ShiftId"
					LIMIT 1;
				END IF;
				
				--Xoá khỏi bảng tạm
				DELETE FROM ShiftD WHERE ShiftD."ShiftDistributeId" = v_shift_dis;
				--Tính tiền cho điểm bán
				UPDATE SPoint 
				SET "TotalSalary" = "TotalSalary" + v_normal_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date	AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END),
						"TotalPriceForLunch" = "TotalPriceForLunch" + v_rice,
						"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '|| v_normal_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date	AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END)||',"PriceForLunch": '||v_rice||',"TypeId": '||0||',"TypeName": '||v_type_name_0||',"ShiftId": '||v_shift_id||',"DistributeDate": "'||v_date||'"}')::JSONB)::TEXT
 				WHERE "SalePointId" = v_sale_point_id;
							
				--Cập nhật lại giá trị lặp
				v_total := v_total - 1;
				
				--Xoá các giá trị 
				v_shift_dis := NULL;	
				v_date := NULL;
				v_sale_point_id := NULL;	
				v_shift_id := NULL;		
								
			END LOOP;
			
			--Lặp qua số ca tăng ca 
			WHILE v_sub > 0 LOOP
			
				--Lấy id ca làm không phải ca của điểm bán gốc
				SELECT 
					SD."ShiftDistributeId",
					SD."DistributeDate",
					SD."SalePointId",
					SD."ShiftId"
				INTO 
					v_shift_dis,
					v_date,
					v_sale_point_id,
					v_shift_id
				FROM ShiftD SD
				WHERE SD."UserId" = v_user."UserId"		
					AND SD."SalePointId" <> v_user."SalePointId" 
				ORDER BY 
					SD."DistributeDate",
					SD."ShiftId"
				LIMIT 1;
				
				--Nếu ko tồn tại ca làm
				IF v_shift_dis IS  NULL THEN 
					SELECT 
						SD."ShiftDistributeId",
						SD."DistributeDate",
						SD."SalePointId",
						SD."ShiftId"
					INTO 
						v_shift_dis,
						v_date,
						v_sale_point_id,
						v_shift_id
					FROM ShiftD SD
					WHERE SD."UserId" = v_user."UserId"	
						AND SD."SalePointId" = v_user."SalePointId" 
					ORDER BY 
						SD."DistributeDate",
						SD."ShiftId"
					LIMIT 1;
				END IF;
				
				--Xoá khỏi bảng tạm
				DELETE FROM ShiftD WHERE ShiftD."ShiftDistributeId" = v_shift_dis;
				--Tính tiền cho điểm bán
				UPDATE SPoint 
				SET "TotalSalarySub" = "TotalSalarySub" + v_sub_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END),
						"TotalPriceForLunch" = "TotalPriceForLunch" + v_rice,
						"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '|| v_sub_price
							* (CASE WHEN EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = v_date AND E."IsDeleted" IS FALSE) THEN v_event ELSE 1 END)||',"PriceForLunch": '||v_rice||',"TypeId": '||1||',"TypeName": '||v_type_name_1||',"ShiftId": '||v_shift_id||',"DistributeDate": "'||v_date||'"}')::JSONB)::TEXT
				WHERE "SalePointId" = v_sale_point_id;
				
			
				--Cập nhật lại giá trị lặp
				v_sub := v_sub - 1;
				
				--Xoá các giá trị 
				v_shift_dis := NULL;	
				v_date := NULL;
				v_sale_point_id := NULL;	
				v_shift_id := NULL;
			END LOOP;
		
			IF (SELECT D."TotalAward" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC > 0 THEN 
			--Trả thưởng target
				UPDATE SPoint 
				SET 
					"TotalPriceTarget" = "TotalPriceTarget" + COALESCE((SELECT D."TotalAward" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC, 0),
					"LogData" = ("LogData"::JSONB || ('{"UserId": '||v_user."UserId"||',"Salary": '|| COALESCE((SELECT D."TotalAward" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC, 0) ||',"TypeId": '||2||',"TypeName": '||v_type_name_2||'}')::JSONB)::TEXT
				WHERE "SalePointId" = v_user."SalePointId"; 
			END IF;
						
		--Trưởng nhóm
		ELSEIF v_user."UserTitleId" = v_leader THEN
			
			v_KPI := (SELECT D."KPICoafficient" FROM KPIData D WHERE D."UserId" = v_user."UserId")::NUMERIC;
			FOR v_row IN SELECT json_array_elements((v_user."ListSalePoint")::JSON) LOOP
			
				UPDATE SPoint
				SET 
					"TotalSalary" = "TotalSalary" + v_salary_leader * v_coef_leader,
					"TotalPriceTarget" = v_KPI * v_salary_leader,
					"LogData" = ("LogData"::JSONB || 
											('{"UserId": '||v_user."UserId"||',"Salary": '||v_salary_leader * v_coef_leader||',"TypeId": '||0||',"TypeName": '||v_type_name_0||'}')::JSONB ||
											('{"UserId": '||v_user."UserId"||',"Salary": '|| v_KPI * v_salary_leader ||',"TypeId": '||2||',"TypeName": '||v_type_name_2||'}')::JSONB)::TEXT
				WHERE "SalePointId" = (v_row->>'SalePointId')::INT; 
				
			END LOOP;
		
		END IF;
			
	END LOOP; 
	

	RETURN QUERY 
	SELECT
		TO_JSONB(T.*)::TEXT
	FROM SPoint T;
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_divide_for_salepoint_v1(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."ActionDate", 'YYYY-MM') = p_month)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - U."Insure" - U."PriceUnion" - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			ROUND(T."KPI", 2) AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND(T."Advance", 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			ROUND(T."TotalNormal", 0) AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			ROUND(T."KPICoafficient", 2) AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		UNION
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			ROUND(SUM(T."KPI"), 2) AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND(SUM(T."Advance"), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v10(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v10(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$

DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_day_current INT := (SELECT EXTRACT('Day' FROM NOW())) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId",
			(COALESCE(T."six45", 0) + COALESCE(T."six55", 0) + COALESCE(T."keno", 0) + COALESCE(T."Ticket3d", 0) + COALESCE(T."Ticket3dPro", 0) - COALESCE(T."CancleTicket", 0)) AS "SaleOfVietlott"
		FROM "Transaction" T 
		LEFT JOIN tmp1 SD ON T."ShiftDistributeId" = SD."ShiftDistributeId"
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	-- Lấy nợ cả năm
	tmp3_1 AS(
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			SD."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		LEFT JOIN tmp1 SD ON T."ShiftDistributeId" = SD."ShiftDistributeId"
		WHERE T."IsDeleted" IS FALSE
			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD) 
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM(T."SaleOfVietlott") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8 ), 0) AS "Debt",																					--Nợ	
		COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtAllTime",
		COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 14), 0) AS "DebtAllTime1",
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		left JOIN tmp3_1 T1 ON T1."UserId" = T."UserId" and T1."TransactionId"=T."TransactionId"
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(P."DebtAllTime", 0) + COALESCE(P."DebtAllTime1", 0)AS "DebtAllTime",																					--Nợ all time
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			COALESCE(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * (CASE 
					WHEN COALESCE(S."TotalNormal", 0) > v_day_current
						THEN  COALESCE(v_day_current, 0)
					WHEN COALESCE(S."TotalNormal", 0) = v_total_date + 1
						THEN COALESCE(S."TotalNormal", 0)
				END)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ COALESCE(U."L30",0) * v_l30
					+ COALESCE(U."L60",0) * v_l60
					+ COALESCE(U."L90",0) * v_l90
				) 
				ELSE U."BaseSalary" END, 0) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice ) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
-- 			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" - U."Punish" - U."Debt" ) AS "RealSalary"
			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (+ U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Punish" - U."Advance" - U."Debt" ) AS "RealSalary"
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime",2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
-- 			(CASE WHEN z."IsIntern" IS TRUE THEN ROUND(T."RealSalary", 2) ELSE ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) END) AS "RealSalary", 
			ROUND((CASE 
				WHEN z."IsIntern" IS TRUE 
					THEN
					COALESCE(T."MainSalary", 0) + COALESCE(T."TotalCommission",0) + COALESCE(T."Award",0) + (fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") * (COALESCE(T."ReponsibilityLottery", 0) + COALESCE(T."VietlottLottery",0) + COALESCE(T."TraditionalLottery", 0) + v_sale_loto * COALESCE(T."SaleOfLoto", 0)))
				ELSE 
						(COALESCE(T."MainSalary", 0) + COALESCE(T."TotalCommission",0) + COALESCE(T."Award",0) + (fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") * (COALESCE(T."ReponsibilityLottery", 0) + COALESCE(T."VietlottLottery",0) + COALESCE(T."TraditionalLottery", 0) + v_sale_loto * COALESCE(T."SaleOfLoto", 0)))  - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0)) - COALESCE(T."Punish", 0) - COALESCE(T."Advance", 0) - COALESCE(T."Debt", 0)
			END), 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
-- 			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			(CASE 
					WHEN COALESCE(T."TotalNormal", 0) > v_day_current
						THEN v_day_current
					WHEN COALESCE(T."TotalNormal", 0) = v_total_date + 1
						THEN COALESCE(T."TotalNormal", 0)
					ELSE COALESCE(T."TotalNormal", 0)	
				END) AS "TotalNormal",
			ROUND((CASE 
				WHEN z."IsIntern" IS TRUE 
					THEN
						T."MainSalary" + T."TotalCommission" + T."Award" + (fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") * (T."ReponsibilityLottery" + T."VietlottLottery" + T."TraditionalLottery" + v_sale_loto * T."SaleOfLoto"))
				ELSE 
						T."MainSalary" + T."TotalCommission" + T."Award" + (fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") * (T."ReponsibilityLottery" + T."VietlottLottery" + T."TraditionalLottery" + v_sale_loto * T."SaleOfLoto")) - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0)
			END), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T, "User" z
		WHERE T."UserTitleId" NOT IN (3,4,6) 
		AND T."UserId" = z."UserId"

		UNION
	
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
-- 			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
-- 			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",

ROUND(T."RealSalary", 2) AS "RealSalary",
ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
		
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
		UNION
		
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
	),
	
	tmp14 as (
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."DebtAllTime"), 2) AS "DebtAllTime",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
			
		FROM tmp13 T 
		UNION
		
		SELECT * FROM tmp13
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp14 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;

$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v10(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v10_bk(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v10_bk(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$

DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	-- Lấy nợ cả năm
	tmp3_1 AS(
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD) 
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8 ), 0) AS "Debt",																					--Nợ	
		COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtAllTime",
		COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 14), 0) AS "DebtAllTime1",
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		left JOIN tmp3_1 T1 ON T1."UserId" = T."UserId" and T1."TransactionId"=T."TransactionId"
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(P."DebtAllTime", 0) + COALESCE(P."DebtAllTime1", 0)AS "DebtAllTime",																					--Nợ all time
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")  ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime",2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			(CASE WHEN z."IsIntern" IS TRUE THEN ROUND(T."RealSalary", 2) ELSE ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) END) AS "RealSalary", 
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			(CASE WHEN z."IsIntern" IS TRUE THEN ROUND(T."TotalSalary", 2) ELSE ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) END) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T, "User" z
		WHERE T."UserTitleId" NOT IN (3,4,6) 
		AND T."UserId" = z."UserId"

		UNION
	
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
		
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
		UNION
		
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
	),
	
	tmp14 as (
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."DebtAllTime"), 2) AS "DebtAllTime",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
			
		FROM tmp13 T 
		UNION
		
		SELECT * FROM tmp13
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp14 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;

$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v10_bk(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v2(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."ActionDate", 'YYYY-MM') = p_month)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId"),0) -
			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId"),0) - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND(T."Advance", 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			ROUND(T."TotalNormal", 0) AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		UNION
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND(SUM(T."Advance"), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v3(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v3(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT (C."Price" + 0.01) FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."ActionDate", 'YYYY-MM') = p_month)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId"),0) -
			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId"),0) - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND(T."Advance", 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			ROUND(T."TotalNormal", 0) AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		UNION
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND(SUM(T."Advance"), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v3(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v4(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v4(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM("TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) -
			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND(T."Advance", 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt"+ T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND(T."Advance", 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT ) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
				UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND(T."Advance", 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(T."BaseSalary"+ 2000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt" + T."OnePercentLoto" + T."VietlottLottery"+T."TraditionalLottery" + T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."BaseSalary"+ 2000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
		UNION
		
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v4(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v5(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v5(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	-- Lấy nợ cả năm
	tmp3_1 AS(
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtOfAllTime",
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		JOIN tmp3_1 T1 ON T1."UserId" = T."UserId"
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(P."DebtOfAllTime", 0) AS "DebtOfAllTime",																					--Nợ all time
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) -
			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month AND SC."IsDeleted" IS FALSE)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtOfAllTime",2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt"+ T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT ) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
				UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(T."BaseSalary"+ 2000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt" + T."OnePercentLoto" + T."VietlottLottery"+T."TraditionalLottery" + T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."BaseSalary"+ 2000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
		UNION
		
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND(SUM(T."Advance"),2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v5(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v6(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v6(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	-- Lấy nợ cả năm
	tmp3_1 AS(
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtOfAllTime",
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		JOIN tmp3_1 T1 ON T1."UserId" = T."UserId"
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(P."DebtOfAllTime", 0) AS "DebtOfAllTime",																					--Nợ all time
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) -
			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtOfAllTime",2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt"+ T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT ) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
				UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(T."BaseSalary"+ 2000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt" + T."OnePercentLoto" + T."VietlottLottery"+T."TraditionalLottery" + T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."BaseSalary"+ 2000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
		UNION
		
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v6(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v7(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v7(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	-- Lấy nợ cả năm
	tmp3_1 AS(
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
			COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtOfAllTime",
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		JOIN tmp3_1 T1 ON T1."UserId" = T."UserId"
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(P."DebtOfAllTime", 0) AS "DebtOfAllTime",																					--Nợ all time
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) -
			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtOfAllTime",2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary", 2) AS "RealSalary",
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			CASE WHEN (SELECT U."IsIntern"	FROM "User" U WHERE U."UserId" = T."UserId") IS FALSE THEN
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END)
			ELSE ( (SELECT COUNT(S."ShiftId") FROM "ShiftDistributeForIntern" S WHERE TO_CHAR(S."DistributeDate",'YYYY-MM') = p_month) + (CASE WHEN (SELECT COUNT(S."ShiftId") FROM "ShiftDistributeForIntern" S WHERE TO_CHAR(S."DistributeDate",'YYYY-MM') = p_month) > v_total_date THEN 1 ELSE 0 END )) END AS "TotalNormal",
			ROUND(T."TotalSalary", 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt"+ T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT ) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
				UNION
				SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."Award", 2) AS "Award",
			ROUND(NULL, 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(NULL, 2) AS "PriceUnion",
			ROUND(T."BaseSalary"+ 2000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt" + T."OnePercentLoto" + T."VietlottLottery"+T."TraditionalLottery" + T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."BaseSalary"+ 2000000, 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
		UNION
		
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND(SUM(T."Advance"),2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" NOT IN (3,4,6)
		
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp13 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v7(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_salary_of_user_by_month_v89(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_salary_of_user_by_month_v89(p_month character varying, p_user_id integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$


DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_union DECIMAL;
	v_rice DECIMAL;
	v_insure DECIMAL;
	v_sale_loto DECIMAL;
	v_overtime DECIMAL;
	v_event DECIMAL;
	v_l30 DECIMAL;
	v_l60 DECIMAL;
	v_l90 DECIMAL;
	v_time TIMESTAMP := NOW();
	v_salary_leader NUMERIC;
	v_coef_leader NUMERIC;
	v_employee INT := 5;
	v_leader INT := 4;
	v_hr INT := 6;
BEGIN
	
	--Lấy các hằng số
	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	
	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
	RETURN QUERY
	WITH tmp00 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
	),
	--Lấy doanh số bán vé
	tmp0 AS (
		SELECT 
			T."UserId",
			T."Average"
		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
	),
	--Lấy lương trưởng nhóm
	tmp01 AS (
		SELECT 
			GS."UserId",
			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
		FROM "GroupSalePoint" GS
		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND GS."Option" = 0
			AND GS."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "GroupSalePoint" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."UserId" = GS."UserId"
					AND C."Option" = 0
			)
	),
	--Lấy lương căn bản 1 ngày của tất cả nhân viên
	tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
	--Lấy danh sách ca đã làm tới thời điểm hiện tại
	tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),	
	--Lấy bảng TargetData
	tmp2 AS (
		SELECT 
			TD."TargetDataTypeId",
			TD."FromValue",
			TD."ToValue",
			TD."Value"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
	tmp3 AS (
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
	),
	-- Lấy nợ cả năm
	tmp3_1 AS(
		SELECT 
			T."TransactionId",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			T."SalePointId",
			T."TransactionTypeId",
			T."TypeNameId"
		FROM "Transaction" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD) 
	),
	--Tính các loại thưởng
	tmp4 AS (
		SELECT 
			T."UserId",
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8 ), 0) AS "Debt",																					--Nợ	
		COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtAllTime",
		COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 14), 0) AS "DebtAllTime1",
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
		FROM tmp3 T
		left JOIN tmp3_1 T1 ON T1."UserId" = T."UserId" and T1."TransactionId"=T."TransactionId"
		GROUP BY 
			T."UserId"
	),
	--Lấy danh sách ngày lễ
	tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),
	--Lấy các giá trị cần thiết
	tmp6 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			U."UserTitleId",
			UT."UserTitleName",
			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
			COALESCE(P."L30", 0) AS "L30",
			COALESCE(P."L60", 0) AS "L60",
			COALESCE(P."L90", 0) AS "L90",
			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
			COALESCE(P."DebtAllTime", 0) + COALESCE(P."DebtAllTime1", 0)AS "DebtAllTime",																					--Nợ all time
			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
		FROM tmp00 U
			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
			LEFT JOIN tmp B ON U."UserId" = B."UserId"
			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
		ORDER BY 
			U."UserTitleId",
			U."UserId"
	),
	--Tính số công
	tmp7 AS (
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal",
			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	--Lấy list "KPI"
	tmpf8 AS (
		SELECT 	
			K."UserId",
			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
		GROUP BY
			K."UserId"
	),
	tmp8 AS (
		SELECT 	
			U."UserId",
			COALESCE(K."KPI", 0) AS "KPI",
			(CASE
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
					THEN 0
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
					THEN 0
				ELSE T."Value" END ) AS "KPICoafficient"
		FROM tmp00 U
			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp2 T
				ON (T."TargetDataTypeId" = 4 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
					AND U."UserTitleId" = v_employee)
				OR (T."TargetDataTypeId" = 5 
					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
					AND U."UserTitleId" = v_leader)
		WHERE U."UserTitleId" IN (v_leader, v_employee)
	),
	--QUY đổi các "TargetData" và tính bảo hiểm
	tmp9 AS (
		SELECT 
			U.*,
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'Insure') 
				FROM "SalaryConfirm" SC 
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
			(
				CASE 
					WHEN U."UserTitleId" <> v_leader THEN
					(
						CASE
							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
								THEN 0
							ELSE P."Value" 
						END
					)
					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
				END
			) AS "ReponsibilityLottery",
			(CASE
				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
					THEN 0
				ELSE V."Value" END) AS "VietlottLottery",
			(CASE
				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
					THEN 0
				ELSE T."Value" END) AS "TraditionalLottery"
		FROM tmp6 U 
			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

	),
	--Lấy hoa hồng nhân viên
	tmp10 AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		GROUP BY C."UserId"
	), 
	--Tính lương chính
	tmp11 AS (
		SELECT
			U.*,
			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
			COALESCE(S."TotalSub", 0) AS "TotalSub",
			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
				THEN (
					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
					+ U."L30" * v_l30
					+ U."L60" * v_l60
					+ U."L90" * v_l90
				) 
				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
			COALESCE((
				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
				FROM "SalaryConfirm" SC
				WHERE U."UserId" = SC."UserId" 
					AND SC."IsDeleted" IS FALSE 
					AND SC."Month" = p_month
			)::NUMERIC, v_union) AS "PriceUnion",
			COALESCE(K."KPI", 0) AS "KPI",
			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
		FROM tmp9 U
			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
	),
	--Tính lương thực lãnh
	tmp12 AS (
		SELECT
			U.*,
			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
			(U."MainSalary" + U."TotalCommission" + U."Award" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" - U."Punish" - U."Debt" ) AS "RealSalary" 
		FROM tmp11 U 
	),
	--Làm tròn
	tmp13 AS (
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime",2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(T."MainSalary", 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			(CASE WHEN z."IsIntern" IS TRUE THEN ROUND(T."RealSalary", 2) ELSE ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) END) AS "RealSalary", 
			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			(CASE WHEN z."IsIntern" IS TRUE THEN ROUND(T."TotalSalary", 2) ELSE ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) END) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
		FROM tmp12 T, "User" z
		WHERE T."UserTitleId" NOT IN (3,4,6) 
		AND T."UserId" = z."UserId"

		UNION
	
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary", 
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 4
		UNION
		
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(NULL, 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			0 AS "OnePercentLoto",
			0 AS "SaleOfVietlott",
			0 AS "TotalCommission",
			0 AS "VietlottLottery",
			0 AS "SalaryOneDateSub",
			0 AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 3
		UNION
		
		SELECT 
			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
			T."UserId",
			T."FullName",
			T."UserTitleId",
			T."UserTitleName",
			T."SalePointId",
			T."SalePointName",
			T."ListSalePoint",
			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
			ROUND(T."L30", 0) AS "L30",
			ROUND(T."L60", 0) AS "L60",
			ROUND(T."L90", 0) AS "L90",
			ROUND(T."Debt", 2) AS "Debt",
			ROUND(T."DebtAllTime", 2) AS "DebtAllTime",
			ROUND(T."Award", 2) AS "Award",
			ROUND(T."Insure", 2) AS "Insure",
			ROUND(T."Punish", 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(T."Average", 2) AS "Average",
			ROUND(T."Overtime", 2) AS "Overtime",
			ROUND(T."TotalSub", 0) AS "TotalSub",
			ROUND(T."BaseSalary", 2) AS "BaseSalary",
			ROUND(NULL, 2) AS "MainSalary",
			ROUND(T."PriceUnion", 2) AS "PriceUnion",
			ROUND(T."RealSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "RealSalary",
			ROUND(NULL, 2) AS "SaleOfLoto",
			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
			ROUND(T."TotalSalary" - COALESCE(T."Insure", 0) - COALESCE(T."PriceUnion", 0), 2) AS "TotalSalary",
			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
			ROUND(T."TotalCommission", 2) AS "TotalCommission",
			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
			ROUND(NULL, 2) AS "ReponsibilityLottery"
		FROM tmp12 T
		WHERE T."UserTitleId" = 6
	),
	
	tmp14 as (
		SELECT
			NULL AS "SalaryConfirmId",
			0 AS "UserId",
			'Tổng Cộng' AS "FullName",
			0 AS "UserTitleId",
			NULL AS "UserTitleName",
			0 AS "SalePointId",
			NULL AS "SalePointName",
			NULL "ListSalePoint",
			NULL AS "KPI",
			ROUND(SUM(T."L30"), 0) AS "L30",
			ROUND(SUM(T."L60"), 0) AS "L60",
			ROUND(SUM(T."L90"), 0) AS "L90",
			ROUND(SUM(T."Debt"), 2) AS "Debt",
			ROUND(SUM(T."DebtAllTime"), 2) AS "DebtAllTime",
			ROUND(SUM(T."Award"), 2) AS "Award",
			ROUND(SUM(T."Insure"), 2) AS "Insure",
			ROUND(SUM(T."Punish"), 2) AS "Punish",
			ROUND((SELECT T."Price" from crm_salepoint_get_list_transaction(p_month,0,0) T WHERE T."UserId" = p_user_id And T."TransactionTypeId" = 5), 2) AS "Advance",
			ROUND(SUM(T."Average"), 2) AS "Average",
			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
			
		FROM tmp13 T 
		UNION
		
		SELECT * FROM tmp13
	)
	SELECT 
		T."UserId",
		T."FullName",
		T."UserTitleId",
		T."UserTitleName",
		TO_JSONB(T.*)::TEXT AS "SalaryData"
	FROM tmp14 T
	WHERE T."UserId" = p_user_id or p_user_id = 0
	ORDER BY 
		T."SalePointId",
		T."UserId";
	
END;




-- DECLARE
-- 	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
-- 	v_union DECIMAL;
-- 	v_rice DECIMAL;
-- 	v_insure DECIMAL;
-- 	v_sale_loto DECIMAL;
-- 	v_overtime DECIMAL;
-- 	v_event DECIMAL;
-- 	v_l30 DECIMAL;
-- 	v_l60 DECIMAL;
-- 	v_l90 DECIMAL;
-- 	v_time TIMESTAMP := NOW();
-- 	v_salary_leader NUMERIC;
-- 	v_coef_leader NUMERIC;
-- 	v_employee INT := 5;
-- 	v_leader INT := 4;
-- 	v_hr INT := 6;
-- BEGIN
	
-- 	--Lấy các hằng số
-- 	CREATE TEMP TABLE ConstData ON COMMIT DROP AS (
-- 		SELECT
-- 			A."ConstId",
-- 			A."Price"
-- 		FROM "Constant" A
-- 		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
-- 			AND A."CreatedDate" >= ALL(	
-- 				SELECT
-- 					C."CreatedDate"
-- 				FROM "Constant" C 
-- 				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
-- 					AND C."ConstId" = A."ConstId"
-- 			)
-- 	);
	
-- 	v_union := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 1)::NUMERIC;									--Công đoàn
-- 	v_rice := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 2)::NUMERIC;										--Tiền cơm
-- 	v_insure := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 3)::NUMERIC;									--bảo hiểm
-- 	v_sale_loto := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 4)::NUMERIC;							--loto
-- 	v_overtime := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 5)::NUMERIC;								--tăng ca
-- 	v_event := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 6)::NUMERIC;									--lễ
-- 	v_l30 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 7)::NUMERIC;										--tăng ca 30ph
-- 	v_l60 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 8)::NUMERIC;										--tăng ca 60ph
-- 	v_l90 := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 9)::NUMERIC;										--tăng ca 90ph;
-- 	v_salary_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 10)::NUMERIC;					--Lương cơ bản trưởng nhóm;
-- 	v_coef_leader := (SELECT C."Price" FROM ConstData C WHERE C."ConstId" = 11)::NUMERIC;						--Hệ số lương cơ bản trưởng nhóm;
		
-- 	RETURN QUERY
-- 	WITH tmp00 AS (
-- 		SELECT 
-- 			U."UserId",
-- 			U."FullName",
-- 			U."UserTitleId",
-- 			U."SalePointId",
-- 			U."ListSalePoint",
-- 			SP."SalePointName"
-- 		FROM crm_get_user_ddl(0, (p_month||'-01')::TIMESTAMP) U
-- 			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
-- 	),
-- 	--Lấy doanh số bán vé
-- 	tmp0 AS (
-- 		SELECT 
-- 			T."UserId",
-- 			T."Average"
-- 		FROM crm_report_average_lottery_sell_of_user_to_current_date(p_month, 0, 0) T
-- 	),
-- 	--Lấy lương trưởng nhóm
-- 	tmp01 AS (
-- 		SELECT 
-- 			GS."UserId",
-- 			ARRAY_LENGTH(GS."SalePointIds", 1) AS "Length"
-- 		FROM "GroupSalePoint" GS
-- 		WHERE GS."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
-- 			AND GS."Option" = 0
-- 			AND GS."CreatedDate" >= ALL(	
-- 				SELECT
-- 					C."CreatedDate"
-- 				FROM "GroupSalePoint" C 
-- 				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
-- 					AND C."UserId" = GS."UserId"
-- 					AND C."Option" = 0
-- 			)
-- 	),
-- 	--Lấy lương căn bản 1 ngày của tất cả nhân viên
-- 	tmp AS (
-- 		SELECT 
-- 			B."UserId", 
-- 			B."CreatedDate",
-- 			B."Salary",
-- 			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
-- 			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
-- 		FROM "BasicSalary" B
-- 		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
-- 			AND B."CreatedDate" >= ALL(
-- 				SELECT T."CreatedDate"
-- 				FROM "BasicSalary" T 
-- 				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
-- 					AND T."UserId" = B."UserId"
-- 			)
-- 		ORDER BY 
-- 			B."UserId"
-- 	),
-- 	--Lấy danh sách ca đã làm tới thời điểm hiện tại
-- 	tmp1 AS (
-- 		SELECT
-- 			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
-- 			SD."UserId",
-- 			SD."ShiftDistributeId",
-- 			SD."DistributeDate",
-- 			SD."ShiftId",
-- 			SD."SalePointId"
-- 		FROM "ShiftDistribute" SD 
-- 		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
-- 			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
-- 		GROUP BY
-- 			SD."UserId",
-- 			SD."ShiftDistributeId",
-- 			SD."DistributeDate",
-- 			SD."ShiftId",
-- 			SD."SalePointId"
-- 		ORDER BY 
-- 			SD."UserId", 
-- 			SD."DistributeDate", 
-- 			SD."ShiftId"
-- 	),	
-- 	--Lấy bảng TargetData
-- 	tmp2 AS (
-- 		SELECT 
-- 			TD."TargetDataTypeId",
-- 			TD."FromValue",
-- 			TD."ToValue",
-- 			TD."Value"
-- 		FROM "TargetData" TD
-- 		WHERE TD."IsDeleted" IS FALSE
-- 	),
-- 	-- Lấy danh sách lương làm thêm giờ/ thưởng/ phạt /Nọ
-- 	tmp3 AS (
-- 		SELECT 
-- 			T."TransactionId",
-- 			T."TotalPrice",
-- 			T."UserId",
-- 			T."ShiftDistributeId",
-- 			T."SalePointId",
-- 			T."TransactionTypeId",
-- 			T."TypeNameId"
-- 		FROM "Transaction" T 
-- 		WHERE T."IsDeleted" IS FALSE
-- 			AND (T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
-- 				OR T."ShiftDistributeId" IS NULL AND TO_CHAR(T."Date", 'YYYY-MM') = p_month)
-- 	),
-- 	-- Lấy nợ cả năm
-- 	tmp3_1 AS(
-- 		SELECT 
-- 			T."TransactionId",
-- 			T."TotalPrice",
-- 			T."UserId",
-- 			T."ShiftDistributeId",
-- 			T."SalePointId",
-- 			T."TransactionTypeId",
-- 			T."TypeNameId"
-- 		FROM "Transaction" T 
-- 		WHERE T."IsDeleted" IS FALSE
-- 			AND T."ShiftDistributeId" = ANY(SELECT SD."ShiftDistributeId" FROM tmp1 SD)
-- 	),
-- 	--Tính các loại thưởng
-- 	tmp4 AS (
-- 		SELECT 
-- 			T."UserId",
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott", 															--Doanh thu vietlot
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",																		--Doanh thu loto
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 4), 0) AS "Punish",																				--Phạt
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 5), 0) AS "Advance",																			--Ứng lương
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" NOT IN (4,5,6)), 0) AS "Overtime",		--Làm lố giờ loại khác
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 7), 0) AS "Award",																				--Thưởng
-- 			COALESCE(SUM(T."TotalPrice") FILTER(WHERE T."TransactionTypeId" = 8), 0) AS "Debt",																					--Nợ
-- 			COALESCE(SUM(T1."TotalPrice") FILTER(WHERE T1."TransactionTypeId" = 8), 0) AS "DebtOfAllTime",
-- 			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 4), 0) AS "L30",														--làm lố 30p
-- 			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 5), 0) AS "L60",														--làm lố 60p
-- 			COALESCE(COUNT(1) FILTER(WHERE T."TransactionTypeId" = 6 AND T."TypeNameId" = 6), 0) AS "L90"															--làm lố 90p
-- 		FROM tmp3 T
-- 		JOIN tmp3_1 T1 ON T1."UserId" = T."UserId"
-- 		GROUP BY 
-- 			T."UserId"
-- 	),
-- 	--Lấy danh sách ngày lễ
-- 	tmp5 AS(
-- 		SELECT 
-- 			E."Date"
-- 		FROM "EventDay" E
-- 		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
-- 			AND E."IsDeleted" IS FALSE
-- 	),
-- 	--Lấy các giá trị cần thiết
-- 	tmp6 AS (
-- 		SELECT 
-- 			U."UserId",
-- 			U."FullName",
-- 			U."SalePointId",
-- 			U."SalePointName",
-- 			U."ListSalePoint",
-- 			U."UserTitleId",
-- 			UT."UserTitleName",
-- 			(CASE WHEN U."UserTitleId" <> v_leader THEN COALESCE(B."Salary", 0) ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader * v_coef_leader END) AS "BaseSalary",
-- 			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDate", 0) ELSE 0 END) AS "SalaryOneDate", 
-- 			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) THEN COALESCE(B."SalaryOneDateSub", 0) ELSE 0 END) AS "SalaryOneDateSub",
-- 			COALESCE(P."L30", 0) AS "L30",
-- 			COALESCE(P."L60", 0) AS "L60",
-- 			COALESCE(P."L90", 0) AS "L90",
-- 			COALESCE(P."SaleOfVietlott", 0) AS "SaleOfVietlott",											--Doanh thu vietlot
-- 			COALESCE(P."SaleOfLoto", 0) AS "SaleOfLoto",															--Doanh thu loto
-- 			COALESCE(P."Punish", 0) AS "Punish",																			--Phạt
-- 			COALESCE(P."Advance",	0) AS "Advance",																		--Ứng lương
-- 			COALESCE(P."Overtime", 0) AS "Overtime",																	--Làm lố giờ loại khác
-- 			COALESCE(P."Award",	0) AS "Award",																				--Thưởng
-- 			COALESCE(P."Debt", 0) AS "Debt",																					--Nợ
-- 			COALESCE(P."DebtOfAllTime", 0) AS "DebtOfAllTime",																					--Nợ all time
-- 			COALESCE(T."Average", 0) AS "Average"																			--Doanh số
-- 		FROM tmp00 U
-- 			JOIN "UserTitle" UT ON U."UserTitleId" = UT."UserTitleId"
-- 			LEFT JOIN tmp B ON U."UserId" = B."UserId"
-- 			LEFT JOIN tmp4 P ON P."UserId" = U."UserId"
-- 			LEFT JOIN tmp0 T ON T."UserId" = U."UserId"
-- 		WHERE U."UserTitleId" IN (v_employee, v_leader, v_hr,3)											--Chỉ lấy nhân viên, trưởng nhóm và nhân sự
-- 		ORDER BY 
-- 			U."UserTitleId",
-- 			U."UserId"
-- 	),
-- 	--Tính số công
-- 	tmp7 AS (
-- 		SELECT
-- 			SD."UserId",
-- 			3 AS "TotalNormal",
-- 			SUM((CASE WHEN SD."Id" > v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END)) ::NUMERIC AS "TotalSub"
-- 		FROM tmp1 SD
-- 			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
-- 			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
-- 		GROUP BY 
-- 			SD."UserId"
-- 	),
-- 	--Lấy list "KPI"
-- 	tmpf8 AS (
-- 		SELECT 	
-- 			K."UserId",
-- 			ROUND(SUM(K."AverageKPI")/COUNT(K."AverageKPI"), 2) AS "KPI"
-- 		FROM crm_user_get_average_KPI_of_user_by_month(p_month, 0) K
-- 		GROUP BY
-- 			K."UserId"
-- 	),
-- 	tmp8 AS (
-- 		SELECT 	
-- 			U."UserId",
-- 			COALESCE(K."KPI", 0) AS "KPI",
-- 			(CASE
-- 				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0)> (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC 
-- 					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
-- 				WHEN U."UserTitleId" = v_employee AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 4)::NUMERIC
-- 					THEN 0
-- 				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC 
-- 					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
-- 				WHEN U."UserTitleId" = v_leader AND COALESCE(K."KPI", 0) < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 5)::NUMERIC
-- 					THEN 0
-- 				ELSE T."Value" END ) AS "KPICoafficient"
-- 		FROM tmp00 U
-- 			LEFT JOIN tmpf8 K ON K."UserId" = U."UserId"
-- 			LEFT JOIN tmp2 T
-- 				ON (T."TargetDataTypeId" = 4 
-- 					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue")
-- 					AND U."UserTitleId" = v_employee)
-- 				OR (T."TargetDataTypeId" = 5 
-- 					AND (COALESCE(K."KPI", 0) > T."FromValue" AND COALESCE(K."KPI", 0) <= T."ToValue") 
-- 					AND U."UserTitleId" = v_leader)
-- 		WHERE U."UserTitleId" IN (v_leader, v_employee)
-- 	),
-- 	--QUY đổi các "TargetData" và tính bảo hiểm
-- 	tmp9 AS (
-- 		SELECT 
-- 			U.*,
-- 			COALESCE((
-- 				SELECT ((SC."Data"::JSON)->>'Insure') 
-- 				FROM "SalaryConfirm" SC 
-- 				WHERE U."UserId" = SC."UserId" 
-- 					AND SC."IsDeleted" IS FALSE 
-- 					AND SC."Month" = p_month
-- 			)::NUMERIC ,U."BaseSalary" * v_insure, 0) AS "Insure",														--Bảo hiểm
-- 			(
-- 				CASE 
-- 					WHEN U."UserTitleId" <> v_leader THEN
-- 					(
-- 						CASE
-- 							WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC 
-- 								THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE P."TargetDataTypeId" = 1)::NUMERIC
-- 							WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 1)::NUMERIC
-- 								THEN 0
-- 							ELSE P."Value" 
-- 						END
-- 					)
-- 					ELSE (SELECT L."Length" FROM tmp01 L WHERE L."UserId" = U."UserId" )::NUMERIC * v_salary_leader 
-- 				END
-- 			) AS "ReponsibilityLottery",
-- 			(CASE
-- 				WHEN U."SaleOfVietlott" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC 
-- 					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE T."TargetDataTypeId" = 2)::NUMERIC
-- 				WHEN U."SaleOfVietlott" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 2)::NUMERIC
-- 					THEN 0
-- 				ELSE V."Value" END) AS "VietlottLottery",
-- 			(CASE
-- 				WHEN U."Average" > (SELECT MAX(C."ToValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC 
-- 					THEN (SELECT MAX(C."Value") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
-- 				WHEN U."Average" < (SELECT MIN(C."FromValue") FROM tmp2 C WHERE C."TargetDataTypeId" = 3)::NUMERIC
-- 					THEN 0
-- 				ELSE T."Value" END) AS "TraditionalLottery"
-- 		FROM tmp6 U 
-- 			LEFT JOIN tmp2 P ON P."TargetDataTypeId" = 1 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN P."FromValue"::NUMERIC AND P."ToValue"::NUMERIC)
-- 			LEFT JOIN tmp2 V ON V."TargetDataTypeId" = 2 AND (ROUND(U."SaleOfVietlott", 0)::NUMERIC BETWEEN V."FromValue"::NUMERIC AND V."ToValue"::NUMERIC)
-- 			LEFT JOIN tmp2 T ON T."TargetDataTypeId" = 3 AND (ROUND(U."Average", 0)::NUMERIC BETWEEN T."FromValue"::NUMERIC AND T."ToValue"::NUMERIC)

-- 	),
-- 	--Lấy hoa hồng nhân viên
-- 	tmp10 AS (
-- 		SELECT 
-- 			C."UserId",
-- 			SUM(C."TotalCommision")::NUMERIC / 2 AS "TotalCommission"			 --Trả 1/2 hoa hồng
-- 		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
-- 		GROUP BY C."UserId"
-- 	), 
-- 	--Tính lương chính
-- 	tmp11 AS (
-- 		SELECT
-- 			U.*,
-- 			COALESCE(S."TotalNormal", 0) AS "TotalNormal",
-- 			COALESCE(S."TotalSub", 0) AS "TotalSub",
-- 			(CASE WHEN U."UserTitleId" NOT IN (v_leader, v_hr) 
-- 				THEN (
-- 					U."SalaryOneDate" * COALESCE(S."TotalNormal", 0)
-- 					+ U."SalaryOneDateSub" * COALESCE(S."TotalSub", 0)
-- 					+ U."L30" * v_l30
-- 					+ U."L60" * v_l60
-- 					+ U."L90" * v_l90
-- 				) 
-- 				ELSE U."BaseSalary" END) AS "MainSalary",																																							--Lương chính
-- 			((COALESCE(S."TotalNormal", 0) + COALESCE(S."TotalSub", 0)) * v_rice) AS "PriceForLunch",																--Tiền cơm
-- 			COALESCE((
-- 				SELECT ((SC."Data"::JSON)->>'PriceUnion') 
-- 				FROM "SalaryConfirm" SC
-- 				WHERE U."UserId" = SC."UserId" 
-- 					AND SC."IsDeleted" IS FALSE 
-- 					AND SC."Month" = p_month
-- 			)::NUMERIC, v_union) AS "PriceUnion",
-- 			COALESCE(K."KPI", 0) AS "KPI",
-- 			COALESCE(K."KPICoafficient", 0) AS "KPICoafficient",
-- 			COALESCE(C."TotalCommission", 0) AS "TotalCommission"	--Hoa hồng
-- 		FROM tmp9 U
-- 			LEFT JOIN tmp7 S ON U."UserId" = S."UserId"
-- 			LEFT JOIN tmp8 K ON K."UserId" = U."UserId"
-- 			LEFT JOIN tmp10 C ON C."UserId" = U."UserId"
-- 	),
-- 	--Tính lương thực lãnh
-- 	tmp12 AS (
-- 		SELECT
-- 			U.*,
-- 			v_sale_loto * U."SaleOfLoto" AS "OnePercentLoto",
-- 			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto")) AS "TotalSalary",
-- 			(U."MainSalary" + U."PriceForLunch" + U."KPICoafficient" * (U."ReponsibilityLottery" + U."VietlottLottery" + U."TraditionalLottery" + v_sale_loto * U."SaleOfLoto") - U."Advance" + U."TotalCommission" + U."Award" - U."Punish" - COALESCE((SELECT ((SL."Data"::JSON) ->> 'Insure')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) -
-- 			 COALESCE((SELECT ((SL."Data"::JSON) ->> 'PriceUnion')::INT8 FROM "SalaryConfirm" SL WHERE SL."UserId" = U."UserId" LIMIT 1),0) - U."Debt" ) AS "RealSalary" 
-- 		FROM tmp11 U 
-- 	),
-- 	--Làm tròn
-- 	tmp13 AS (
-- 		SELECT 
-- 			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
-- 			T."UserId",
-- 			T."FullName",
-- 			T."UserTitleId",
-- 			T."UserTitleName",
-- 			T."SalePointId",
-- 			T."SalePointName",
-- 			T."ListSalePoint",
-- 			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
-- 			ROUND(T."L30", 0) AS "L30",
-- 			ROUND(T."L60", 0) AS "L60",
-- 			ROUND(T."L90", 0) AS "L90",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."DebtOfAllTime",2) AS "DebtAllTime",
-- 			ROUND(T."Award", 2) AS "Award",
-- 			ROUND(T."Insure", 2) AS "Insure",
-- 			ROUND(T."Punish", 2) AS "Punish",
-- 			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
-- 			ROUND(T."Average", 2) AS "Average",
-- 			ROUND(T."Overtime", 2) AS "Overtime",
-- 			ROUND(T."TotalSub", 0) AS "TotalSub",
-- 			ROUND(T."BaseSalary", 2) AS "BaseSalary",
-- 			ROUND(T."MainSalary", 2) AS "MainSalary",
-- 			ROUND(T."PriceUnion", 2) AS "PriceUnion",
-- 			ROUND(T."RealSalary", 2) AS "RealSalary",
-- 			ROUND(T."SaleOfLoto", 2) AS "SaleOfLoto",
-- 			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
-- 			ROUND(T."TotalSalary", 2) AS "TotalSalary",
-- 			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
-- 			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
-- 			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
-- 			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
-- 			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
-- 			ROUND(T."TotalCommission", 2) AS "TotalCommission",
-- 			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
-- 			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
-- 			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
-- 			ROUND(T."ReponsibilityLottery", 2) AS "ReponsibilityLottery"
-- 		FROM tmp12 T
-- 		WHERE T."UserTitleId" NOT IN (3,4,6)
-- 		UNION
-- 				SELECT 
-- 			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
-- 			T."UserId",
-- 			T."FullName",
-- 			T."UserTitleId",
-- 			T."UserTitleName",
-- 			T."SalePointId",
-- 			T."SalePointName",
-- 			T."ListSalePoint",
-- 			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
-- 			ROUND(T."L30", 0) AS "L30",
-- 			ROUND(T."L60", 0) AS "L60",
-- 			ROUND(T."L90", 0) AS "L90",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."Award", 2) AS "Award",
-- 			ROUND(NULL, 2) AS "Insure",
-- 			ROUND(T."Punish", 2) AS "Punish",
-- 			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
-- 			ROUND(T."Average", 2) AS "Average",
-- 			ROUND(T."Overtime", 2) AS "Overtime",
-- 			ROUND(T."TotalSub", 0) AS "TotalSub",
-- 			ROUND(NULL, 2) AS "BaseSalary",
-- 			ROUND(NULL, 2) AS "MainSalary", 
-- 			ROUND(NULL, 2) AS "PriceUnion",
-- 			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt"+ T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
-- 			ROUND(NULL, 2) AS "SaleOfLoto",
-- 						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
-- 			ROUND(3000000* (SELECT T1."Length"::INT FROM tmp01 T1 WHERE T1."UserId" = T."UserId") + 1000000, 2) AS "TotalSalary",
-- 			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
-- 			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
-- 			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
-- 			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
-- 			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
-- 			ROUND(T."TotalCommission", 2) AS "TotalCommission",
-- 			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
-- 			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
-- 			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
-- 			ROUND(NULL, 2) AS "ReponsibilityLottery"
-- 		FROM tmp12 T
-- 		WHERE T."UserTitleId" = 4
-- 		UNION
-- 				SELECT 
-- 			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
-- 			T."UserId",
-- 			T."FullName",
-- 			T."UserTitleId",
-- 			T."UserTitleName",
-- 			T."SalePointId",
-- 			T."SalePointName",
-- 			T."ListSalePoint",
-- 			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
-- 			ROUND(T."L30", 0) AS "L30",
-- 			ROUND(T."L60", 0) AS "L60",
-- 			ROUND(T."L90", 0) AS "L90",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."Award", 2) AS "Award",
-- 			ROUND(NULL, 2) AS "Insure",
-- 			ROUND(T."Punish", 2) AS "Punish",
-- 			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
-- 			ROUND(T."Average", 2) AS "Average",
-- 			ROUND(T."Overtime", 2) AS "Overtime",
-- 			ROUND(T."TotalSub", 0) AS "TotalSub",
-- 			ROUND(NULL, 2) AS "BaseSalary",
-- 			ROUND(NULL, 2) AS "MainSalary",
-- 			ROUND(NULL, 2) AS "PriceUnion",
-- 			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT ) AS "RealSalary",
-- 			ROUND(NULL, 2) AS "SaleOfLoto",
-- 						(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
-- 			ROUND(1500000 * (SELECT COUNT(*) OVER() FROM "SalePoint" WHERE "IsActive" IS TRUE LIMIT 1)::INT, 2) AS "TotalSalary",
-- 			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
-- 			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
-- 			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
-- 			0 AS "OnePercentLoto",
-- 			0 AS "SaleOfVietlott",
-- 			0 AS "TotalCommission",
-- 			0 AS "VietlottLottery",
-- 			0 AS "SalaryOneDateSub",
-- 			0 AS "TraditionalLottery",
-- 			ROUND(NULL, 2) AS "ReponsibilityLottery"
-- 		FROM tmp12 T
-- 		WHERE T."UserTitleId" = 3
-- 				UNION
-- 				SELECT 
-- 			(SELECT SC."SalaryConfirmId" FROM "SalaryConfirm" SC WHERE SC."UserId" = T."UserId" AND SC."Month" = p_month)::INT AS "SalaryConfirmId",
-- 			T."UserId",
-- 			T."FullName",
-- 			T."UserTitleId",
-- 			T."UserTitleName",
-- 			T."SalePointId",
-- 			T."SalePointName",
-- 			T."ListSalePoint",
-- 			fn_user_KPI_of_user_by_month(p_month, T."UserId") AS "KPI",
-- 			ROUND(T."L30", 0) AS "L30",
-- 			ROUND(T."L60", 0) AS "L60",
-- 			ROUND(T."L90", 0) AS "L90",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."Debt", 2) AS "Debt",
-- 			ROUND(T."Award", 2) AS "Award",
-- 			ROUND(NULL, 2) AS "Insure",
-- 			ROUND(T."Punish", 2) AS "Punish",
-- 			COALESCE(ROUND((SELECT A."Price" from crm_salepoint_get_list_transaction(p_month,0,0) A WHERE A."UserId" = T."UserId" And A."TransactionTypeId" = 5), 2),0) AS "Advance",
-- 			ROUND(T."Average", 2) AS "Average",
-- 			ROUND(T."Overtime", 2) AS "Overtime",
-- 			ROUND(T."TotalSub", 0) AS "TotalSub",
-- 			ROUND(T."BaseSalary", 2) AS "BaseSalary",
-- 			ROUND(NULL, 2) AS "MainSalary",
-- 			ROUND(NULL, 2) AS "PriceUnion",
-- 			ROUND(T."BaseSalary"+ 2000000 - T."Advance"-T."PriceForLunch" + T."TotalCommission" + T."Award" - T."Punish" - T."Debt" + T."OnePercentLoto" + T."VietlottLottery"+T."TraditionalLottery" + T."SaleOfVietlott" + T."Average", 2) AS "RealSalary",
-- 			ROUND(NULL, 2) AS "SaleOfLoto",
-- 			(CASE WHEN T."TotalNormal" >= v_total_date - 2 THEN T."TotalNormal" + 1 ELSE T."TotalNormal" END) AS "TotalNormal",
-- 			ROUND(T."BaseSalary"+ 2000000, 2) AS "TotalSalary",
-- 			ROUND(T."PriceForLunch", 2) AS "PriceForLunch",
-- 			ROUND(T."SalaryOneDate", 2) AS "SalaryOneDate",
-- 			fn_user_kpi_coafficient_of_user_by_month(p_month, T."UserId") AS "KPICoafficient",
-- 			ROUND(T."OnePercentLoto", 2) AS "OnePercentLoto",
-- 			ROUND(T."SaleOfVietlott", 2) AS "SaleOfVietlott",
-- 			ROUND(T."TotalCommission", 2) AS "TotalCommission",
-- 			ROUND(T."VietlottLottery", 2) AS "VietlottLottery",
-- 			ROUND(T."SalaryOneDateSub", 2) AS "SalaryOneDateSub",
-- 			ROUND(T."TraditionalLottery", 2) AS "TraditionalLottery",
-- 			ROUND(NULL, 2) AS "ReponsibilityLottery"
-- 		FROM tmp12 T
-- 		WHERE T."UserTitleId" = 6
-- 		UNION
		
-- 		SELECT
-- 			NULL AS "SalaryConfirmId",
-- 			0 AS "UserId",
-- 			'Tổng Cộng' AS "FullName",
-- 			0 AS "UserTitleId",
-- 			NULL AS "UserTitleName",
-- 			0 AS "SalePointId",
-- 			NULL AS "SalePointName",
-- 			NULL "ListSalePoint",
-- 			NULL AS "KPI",
-- 			ROUND(SUM(T."L30"), 0) AS "L30",
-- 			ROUND(SUM(T."L60"), 0) AS "L60",
-- 			ROUND(SUM(T."L90"), 0) AS "L90",
-- 			ROUND(SUM(T."Debt"), 2) AS "Debt",
-- 			ROUND(SUM(T."Debt"), 2) AS "Debt",
-- 			ROUND(SUM(T."Award"), 2) AS "Award",
-- 			ROUND(SUM(T."Insure"), 2) AS "Insure",
-- 			ROUND(SUM(T."Punish"), 2) AS "Punish",
-- 			ROUND(SUM(T."Advance"),2) AS "Advance",
-- 			ROUND(SUM(T."Average"), 2) AS "Average",
-- 			ROUND(SUM(T."Overtime"), 2) AS "Overtime",
-- 			ROUND(SUM(T."TotalSub"), 0) AS "TotalSub",
-- 			ROUND(SUM(T."BaseSalary"), 2) AS "BaseSalary",
-- 			ROUND(SUM(T."MainSalary"), 2) AS "MainSalary",
-- 			ROUND(SUM(T."PriceUnion"), 2) AS "PriceUnion",
-- 			ROUND(SUM(T."RealSalary"), 2) AS "RealSalary",
-- 			ROUND(SUM(T."SaleOfLoto"), 2) AS "SaleOfLoto",
-- 			ROUND(SUM(T."TotalNormal"), 0) AS "TotalNormal",
-- 			ROUND(SUM(T."TotalSalary"), 2) AS "TotalSalary",
-- 			ROUND(SUM(T."PriceForLunch"), 2) AS "PriceForLunch",
-- 			ROUND(SUM(T."SalaryOneDate"), 2) AS "SalaryOneDate",
-- 			ROUND(SUM(T."KPICoafficient"), 2) AS "KPICoafficient",
-- 			ROUND(SUM(T."OnePercentLoto"), 2) AS "OnePercentLoto",
-- 			ROUND(SUM(T."SaleOfVietlott"), 2) AS "SaleOfVietlott",
-- 			ROUND(SUM(T."TotalCommission"), 2) AS "TotalCommission",
-- 			ROUND(SUM(T."VietlottLottery"), 2) AS "VietlottLottery",
-- 			ROUND(SUM(T."SalaryOneDateSub"), 2) AS "SalaryOneDateSub",
-- 			ROUND(SUM(T."TraditionalLottery"), 2) AS "TraditionalLottery",
-- 			ROUND(SUM(T."ReponsibilityLottery"), 2) AS "ReponsibilityLottery"
-- 		FROM tmp12 T
-- 		WHERE T."UserTitleId" NOT IN (3,4,6)
		
-- 	)
-- 	SELECT 
-- 		T."UserId",
-- 		T."FullName",
-- 		T."UserTitleId",
-- 		T."UserTitleName",
-- 		TO_JSONB(T.*)::TEXT AS "SalaryData"
-- 	FROM tmp13 T
-- 	WHERE T."UserId" = p_user_id or p_user_id = 0
-- 	ORDER BY 
-- 		T."SalePointId",
-- 		T."UserId";
	
-- END;
$$;


ALTER FUNCTION public.crm_get_salary_of_user_by_month_v89(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_get_sale_divide_for_user(text, text, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_sale_divide_for_user(p_list_user_id text, p_list_percent text, p_sale numeric) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_list INT[] := TRANSLATE(p_list_user_id, '[]', '{}')::INT[];
	v_percent_list NUMERIC[] := TRANSLATE(p_list_percent, '[]', '{}')::NUMERIC[];
	v_user_id INT;
	v_result JSONB := '[]'::JSONB;
	v_index INT;
	v_user_name VARCHAR;
BEGIN
	
	IF ARRAY_LENGTH(v_user_list, 1) > 0 THEN
	
		FOR v_index IN 1..ARRAY_LENGTH(v_user_list, 1) LOOP
			
			v_user_id := v_user_list[v_index];
			
			SELECT
				U."FullName" INTO v_user_name
			FROM "User" U
			WHERE U."UserId" = v_user_id;
			
			IF v_user_name IS NOT NULL THEN
				
				v_result := v_result || ('{"UserId": '||v_user_id||',"FullName": "'||v_user_name||'","Percent": '||v_percent_list[v_index]||',"Sale": '||ROUND(p_sale * v_percent_list[v_index], 0)||'}')::JSONB;
				
			END IF;
			
			v_user_name := NULL;
			
		END LOOP;
	END IF;
	
	RETURN v_result::TEXT;
END;
$$;


ALTER FUNCTION public.crm_get_sale_divide_for_user(p_list_user_id text, p_list_percent text, p_sale numeric) OWNER TO postgres;

--
-- Name: crm_get_total_distribute_of_all_user_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_total_distribute_of_all_user_in_month(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "TotalReceived" bigint, "TotalRemaining" bigint, "TotalDupReceived" bigint, "TotalDupRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
			SP."SalePointId",
			SP."SalePointName",
			A."TotalReceived",
			A."TotalRemaining",
			A."TotalDupReceived",
			A."TotalDupRemaining"			
	FROM "SalePoint" SP LEFT JOIN (
		SELECT
			I."SalePointId",
			SUM(I."TotalReceived") "TotalReceived", 
			SUM(I."TotalRemaining") "TotalRemaining", 
			SUM(I."TotalDupReceived") "TotalDupReceived", 
			SUM(I."TotalDupRemaining") "TotalDupRemaining" 
		FROM "Inventory" I
		WHERE TO_CHAR(I."LotteryDate",'YYYY-MM') = p_month
		GROUP BY I."SalePointId") A ON SP."SalePointId" = A."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_get_total_distribute_of_all_user_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_get_total_sale_of_sale_point_by_shiftdis(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_total_sale_of_sale_point_by_shiftdis(p_salepoint_id integer, p_shift_dis_id integer) RETURNS TABLE("SalePointId" integer, "LotteryTypeId" integer, "LotteryChannelId" integer, "LotteryDate" date, "Quantity" integer, "TotalSoldMoney" numeric, "TotalRetail" integer, "TotalRetailMoney" numeric, "TotalWholesale" integer, "TotalWholesaleMoney" numeric, "ShiftDistributeId" integer, "ShiftId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_quantity INT;
	v_total_money NUMERIC;
BEGIN
RETURN QUERY
	SELECT 
		SPL."SalePointId",
		SPL."LotteryTypeId",
		SPL."LotteryChannelId",
		SPL."LotteryDate",
		SUM(SPL."Quantity") ::INT, 
		SUM(SPL."TotalValue"),
		SUM(SPL."Quantity") FILTER (WHERE SPL."GuestId" IS NULL)  :: INT AS "TotalRetail",
		SUM(SPL."TotalValue") FILTER (WHERE  SPL."GuestId" IS NULL) AS "TotalRetailMoney",
		SUM(SPL."Quantity") FILTER (WHERE  SPL."GuestId" IS NOT NULL) :: INT AS "TotalWholesale",
		SUM(SPL."TotalValue") FILTER (WHERE  SPL."GuestId" IS NOT NULL) AS "TotalWholesaleMoney",
		SPL."ShiftDistributeId",
		SD."ShiftId"
	FROM "SalePointLog" SPL
		JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = SPL."ShiftDistributeId"
	WHERE SPL."SalePointId" = p_salepoint_id
		AND SPL."IsDeleted" IS FALSE
		AND SPL."ShiftDistributeId" = p_shift_dis_id
	GROUP BY SPL."SalePointId", SPL."LotteryTypeId", SPL."LotteryChannelId", SPL."LotteryDate", SPL."ShiftDistributeId", SD."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_get_total_sale_of_sale_point_by_shiftdis(p_salepoint_id integer, p_shift_dis_id integer) OWNER TO postgres;

--
-- Name: crm_get_user_ddl(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_get_user_ddl(p_usertitle_id integer, p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("UserId" integer, "Account" character varying, "Phone" character varying, "FullName" character varying, "Email" character varying, "IsActive" boolean, "IsDeleted" boolean, "StartDate" date, "EndDate" date, "UserTitleId" integer, "UserTitleName" character varying, "SalePointId" integer, "SalePointName" character varying, "ListSalePoint" text)
    LANGUAGE plpgsql
    AS $$ 
BEGIN
	
	RETURN QUERY 
	SELECT 
		U."UserId",
		U."Account",
		U."Phone",
		U."FullName",
		U."Email",
		U."IsActive",
		U."IsDeleted",
		U."StartDate",
		U."EndDate",
		UT."UserTitleId",
		UT."UserTitleName",
		U."SalePointId",
		(SELECT
				S."SalePointName"
			FROM "SalePoint" S 
			LEFT JOIN "User" U1 ON S."SalePointId" = U1."SalePointId"
			WHERE U1."UserId" = U."UserId") AS "SalePointName",
		(CASE WHEN UT."UserTitleId" <> 4 THEN NULL::TEXT 
					ELSE (SELECT JSON_AGG(json_build_object('SalePointId', A."SalePointId", 'SalePointName', A."SalePointName"))::TEXT FROM crm_get_list_salepoint_of_leader(U."UserId", p_date, 0, TO_CHAR(p_date, 'YYYY-MM')) A)::TEXT END) AS "SalePointId"
	FROM "User" U
		JOIN "UserRole" UR ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
	WHERE (COALESCE(p_usertitle_id, 0) = 0 OR UT."UserTitleId" = p_usertitle_id)
		AND UT."UserTitleId" <> 1
		AND (U."IsActive" IS TRUE OR (U."IsActive" IS FALSE AND U."EndDate" >= p_date))
		AND U."IsActive" IS TRUE
	ORDER BY 

		UT."UserTitleId",
		U."UserId";	
END;
$$;


ALTER FUNCTION public.crm_get_user_ddl(p_usertitle_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_insert_exception_worker(text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_insert_exception_worker(p_exception_name text, p_exception_value text, p_stacktrace integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
	INSERT INTO "ExceptionWorker"("ExceptionName","ExceptionData","StackTrace")
	VALUES(p_exception_name, p_exception_value, p_stacktrace);
    
    v_id := 1;
    v_mess := 'Insert successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_insert_exception_worker(p_exception_name text, p_exception_value text, p_stacktrace integer) OWNER TO postgres;

--
-- Name: crm_insert_log_inventory_log(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_insert_log_inventory_log() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF COALESCE(NEW."TotalReceived", 0) <> COALESCE(OLD."TotalReceived", 0) OR COALESCE(NEW."TotalDupReceived", 0) <> COALESCE(OLD."TotalDupReceived", 0) THEN
		INSERT INTO "InventoryDetailLog"(
			"LotteryDate",
			"LotteryChannelId",
			"AgencyId",
			"TotalReceived",
			"TotalDupReceived",
			"SalePointId",
			"ActionDate",
			"ActionBy",
			"ActionByName"
		)
		VALUES(
			NEW."LotteryDate",
			NEW."LotteryChannelId",
			NEW."AgencyId",
			COALESCE(NEW."TotalReceived", 0) - COALESCE(OLD."TotalReceived", 0),
			COALESCE(NEW."TotalDupReceived", 0) - COALESCE(OLD."TotalDupReceived", 0),
			NEW."SalePointId",
			NEW."ActionDate",
			NEW."ActionBy",
			NEW."ActionByName"
		);
	END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.crm_insert_log_inventory_log() OWNER TO postgres;

--
-- Name: crm_insert_transition_log(integer, character varying, integer, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_insert_transition_log(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_tran_data text, p_tran_type_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_tran_data::JSON;
	v_sale_point_id INT;
	v_user_id INT;
	ele JSON;
	v_inventory_id INT;
	v_total INT;
	v_total_dup INT;
BEGIN
	
	SELECT 
		UR."UserId" INTO v_user_id
	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
	
	SELECT
		SD."SalePointId" INTO v_sale_point_id
	FROM "ShiftDistribute" SD WHERE SD."UserId" = v_user_id AND SD."DistributeDate" = NOW()::DATE;
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
			IF p_tran_type_id = 1 THEN 
			
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					v_sale_point_id,
					0,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					1,
					p_action_by,
					p_action_by_name
				);
				
				IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
				
				IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
					
					INSERT INTO "Inventory"(
						"LotteryDate",
						"LotteryChannelId",
						"TotalReceived",
						"TotalRemaining",
						"TotalDupReceived",
						"TotalDupRemaining",
						"SalePointId"
					) VALUES (
						(ele ->> 'LotteryDate')::DATE,
						(ele ->> 'LotteryChannelId')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTransDup')::INT,
						(ele ->> 'TotalTransDup')::INT,
						0
					);
					
				ELSE 
				
					UPDATE "Inventory" I
					SET
						"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
						"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
						"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
						"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
					WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND I."SalePointId" = 0;
				
				END IF;
				
				v_id := v_sale_point_id;
				v_mess := 'Chuyển vé thành công';
			
			ELSEIF p_tran_type_id = 2 THEN
			
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					v_sale_point_id,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name
				);
				
				IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalRemaining" = "TotalRemaining" + (ele ->> 'TotalTrans')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalDupRemaining" = "TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				SELECT "InventoryId", "TotalRemaining", "TotalDupRemaining"
				INTO  v_inventory_id, v_total, v_total_dup
				FROM "Inventory" I
				WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
					AND I."SalePointId" = 0;
				
				IF v_total >= (ele ->> 'TotalTrans')::INT THEN 
				
					UPDATE "Inventory" I
					SET
						"TotalRemaining" = I."TotalRemaining" -  (ele ->> 'TotalTrans')::INT
					WHERE I."InventoryId" = v_inventory_id;
				
				END IF;
				
				IF v_total_dup >= (ele ->> 'TotalTransDup')::INT THEN 
				
					UPDATE "Inventory" I
					SET
						"TotalDupRemaining" = I."TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
					WHERE I."InventoryId" = v_inventory_id;
				
				END IF;
			
				v_id := v_sale_point_id;
				v_mess := 'Nhận vé thành công';
		
			ELSEIF p_tran_type_id = 3 THEN
				
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					v_sale_point_id,
					0,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					3,
					p_action_by,
					p_action_by_name
				);
				
				IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
				
				IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
					
					INSERT INTO "Inventory"(
						"LotteryDate",
						"LotteryChannelId",
						"TotalReceived",
						"TotalRemaining",
						"TotalDupReceived",
						"TotalDupRemaining",
						"SalePointId"
					) VALUES (
						(ele ->> 'LotteryDate')::DATE,
						(ele ->> 'LotteryChannelId')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTransDup')::INT,
						(ele ->> 'TotalTransDup')::INT,
						0
					);
					
				ELSE 
				
					UPDATE "Inventory" I
					SET
						"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
						"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
						"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
						"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
					WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND I."SalePointId" = 0;
				
				END IF;
				
				v_id := v_sale_point_id;
				v_mess := 'Trả ế thành công';
			
			ELSE
			
				v_id := 0;
				v_mess := 'Xảy ra lỗi';
			
			END IF;
	
		END LOOP;

	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_insert_transition_log(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_tran_data text, p_tran_type_id integer) OWNER TO postgres;

--
-- Name: crm_insert_transition_log_v2(integer, character varying, integer, text, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_insert_transition_log_v2(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_tran_data text, p_tran_type_id integer, p_shift_dis_id integer, p_manager_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_tran_data::JSON;
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_user_id INT;
	ele JSON;
	v_inventory_id INT;
	v_total INT;
	v_total_dup INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN
	
-- 	SELECT 
-- 		UR."UserId" INTO v_user_id
-- 	FROM "UserRole" UR WHERE UR."UserRoleId" = p_user_role_id;
-- 	
-- 	SELECT
-- 		SD."SalePointId" INTO v_sale_point_id
-- 	FROM "ShiftDistribute" SD WHERE SD."UserId" = v_user_id AND SD."DistributeDate" = NOW()::DATE;

	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
			IF p_tran_type_id = 1 THEN 
			
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
					"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					v_sale_point_id,
					0,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					1,
					p_action_by,
					p_action_by_name,
					v_shift_dis_id,
					p_manager_id,
					1
				);
				
				IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
				
				IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
					
					INSERT INTO "Inventory"(
						"LotteryDate",
						"LotteryChannelId",
						"TotalReceived",
						"TotalRemaining",
						"TotalDupReceived",
						"TotalDupRemaining",
						"SalePointId"
					) VALUES (
						(ele ->> 'LotteryDate')::DATE,
						(ele ->> 'LotteryChannelId')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTransDup')::INT,
						(ele ->> 'TotalTransDup')::INT,
						0
					);
					
				ELSE 
				
					UPDATE "Inventory" I
					SET
						"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
						"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
						"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
						"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
					WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND I."SalePointId" = 0;
				
				END IF;
				
				v_id := v_sale_point_id;
				v_mess := 'Chuyển vé thành công';
			
			ELSEIF p_tran_type_id = 2 THEN
			
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
					"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					v_sale_point_id,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					v_shift_dis_id,
					p_manager_id,
					1
				);
				
				IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalRemaining" = "TotalRemaining" + (ele ->> 'TotalTrans')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalDupRemaining" = "TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				SELECT "InventoryId", "TotalRemaining", "TotalDupRemaining"
				INTO  v_inventory_id, v_total, v_total_dup
				FROM "Inventory" I
				WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
					AND I."SalePointId" = 0;
				
				IF v_total >= (ele ->> 'TotalTrans')::INT THEN 
				
					UPDATE "Inventory" I
					SET
						"TotalRemaining" = I."TotalRemaining" -  (ele ->> 'TotalTrans')::INT
					WHERE I."InventoryId" = v_inventory_id;
				
				END IF;
				
				IF v_total_dup >= (ele ->> 'TotalTransDup')::INT THEN 
				
					UPDATE "Inventory" I
					SET
						"TotalDupRemaining" = I."TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
					WHERE I."InventoryId" = v_inventory_id;
				
				END IF;
			
				v_id := v_sale_point_id;
				v_mess := 'Nhận vé thành công';
		
			ELSEIF p_tran_type_id = 3 THEN
				
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
					"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					v_sale_point_id,
					0,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					3,
					p_action_by,
					p_action_by_name,
					v_shift_dis_id,
					p_manager_id,
					1
				);
				
				IF COALESCE((ele ->> 'TotalTrans')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalRemaining" = "TotalRemaining" - (ele ->> 'TotalTrans')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
			
				IF COALESCE((ele ->> 'TotalTransDup')::INT, 0) > 0 THEN
				
					UPDATE "Inventory"
					SET
						"TotalDupRemaining" = "TotalDupRemaining" - (ele ->> 'TotalTransDup')::INT
					WHERE "SalePointId" = v_sale_point_id
						AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT;
				
				END IF;
				
				IF NOT EXISTS (SELECT 1 FROM "Inventory" WHERE "SalePointId" = 0 
					AND "LotteryDate" = (ele ->> 'LotteryDate')::DATE
					AND "LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT) THEN
					
					INSERT INTO "Inventory"(
						"LotteryDate",
						"LotteryChannelId",
						"TotalReceived",
						"TotalRemaining",
						"TotalDupReceived",
						"TotalDupRemaining",
						"SalePointId"
					) VALUES (
						(ele ->> 'LotteryDate')::DATE,
						(ele ->> 'LotteryChannelId')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTrans')::INT,
						(ele ->> 'TotalTransDup')::INT,
						(ele ->> 'TotalTransDup')::INT,
						0
					);
					
				ELSE 
				
					UPDATE "Inventory" I
					SET
						"TotalReceived" = I."TotalReceived" + (ele ->> 'TotalTrans')::INT,
						"TotalRemaining" = I."TotalRemaining" + (ele ->> 'TotalTrans')::INT,
						"TotalDupReceived" = I."TotalDupReceived" + (ele ->> 'TotalTransDup')::INT,
						"TotalDupRemaining" = I."TotalDupRemaining" + (ele ->> 'TotalTransDup')::INT
					WHERE I."LotteryDate" = (ele ->> 'LotteryDate')::DATE
						AND I."LotteryChannelId" = (ele ->> 'LotteryChannelId')::INT
						AND I."SalePointId" = 0;
				
				END IF;
				
				v_id := v_sale_point_id;
				v_mess := 'Trả ế thành công';
			
			ELSE
			
				v_id := 0;
				v_mess := 'Xảy ra lỗi';
			
			END IF;
	
		END LOOP;

	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_insert_transition_log_v2(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_tran_data text, p_tran_type_id integer, p_shift_dis_id integer, p_manager_id integer) OWNER TO postgres;

--
-- Name: crm_insert_transition_log_v3(integer, character varying, integer, text, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_insert_transition_log_v3(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_tran_data text, p_tran_type_id integer, p_shift_dis_id integer, p_manager_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_tran_data::JSON;
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_user_id INT;
	ele JSON;
	v_inventory_id INT;
	v_total INT;
	v_total_dup INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
			IF p_tran_type_id = 1 THEN 
			
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
					"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					v_sale_point_id,
					0,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					1,
					p_action_by,
					p_action_by_name,
					v_shift_dis_id,
					p_manager_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
				);
				
				v_id := v_sale_point_id;
				v_mess := 'Tạo yêu cầu chuyển vé thành công';
			
			ELSEIF p_tran_type_id = 2 THEN
			
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
					"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					0,
					v_sale_point_id,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					2,
					p_action_by,
					p_action_by_name,
					v_shift_dis_id,
					p_manager_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
				);
				
				v_id := v_sale_point_id;
				v_mess := 'Tạo yêu cầu nhận vé thành công';
		
			ELSEIF p_tran_type_id = 3 THEN
				
				INSERT INTO "Transition"(
					"LotteryDate",
					"LotteryChannelId",
					"FromSalePointId",
					"ToSalePointId",
					"TotalTrans",
					"TotalTransDup",
					"TransitionDate",
					"TransitionTypeId",
					"ActionBy",
					"ActionByName",
					"ShiftDistributeId",
					"ManagerId",
					"ConfirmStatusId",
					"IsScratchcard"
				) VALUES(
					(ele ->> 'LotteryDate')::DATE,
					(ele ->> 'LotteryChannelId')::INT,
					v_sale_point_id,
					0,
					COALESCE((ele ->> 'TotalTrans')::INT, 0),
					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
					NOW(),
					3,
					p_action_by,
					p_action_by_name,
					v_shift_dis_id,
					p_manager_id,
					1,
					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
				);
				
				v_id := v_sale_point_id;
				v_mess := 'Tạo yêu cầu trả ế thành công';
			
			ELSE
			
				v_id := 0;
				v_mess := 'Xảy ra lỗi';
			
			END IF;
	
		END LOOP;

	ELSE 
 
		v_id := 0;
		v_mess := 'Nhân viên không trong ca làm việc';
 
	END IF;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;








--bản cũ

-- DECLARE 
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	v_data JSON := p_tran_data::JSON;
-- 	v_sale_point_id INT;
-- 	v_shift_dis_id INT;
-- 	v_user_id INT;
-- 	ele JSON;
-- 	v_inventory_id INT;
-- 	v_total INT;
-- 	v_total_dup INT;
-- 	v_is_super_admin BOOL;
-- 	v_is_manager BOOL;
-- 	v_is_staff BOOL;
-- BEGIN
	
-- 	SELECT 
-- 		f."IsSuperAdmin",
-- 		f."IsManager",
-- 		f."IsStaff",
-- 		f."SalePointId",
-- 		f."ShiftDistributeId"
-- 	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
-- 	FROM fn_get_shift_info(p_user_role_id) f;
	
-- 	IF COALESCE(v_sale_point_id, 0) > 0 THEN
	
-- 		FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
-- 			IF p_tran_type_id = 1 THEN 
			
-- 				INSERT INTO "Transition"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"FromSalePointId",
-- 					"ToSalePointId",
-- 					"TotalTrans",
-- 					"TotalTransDup",
-- 					"TransitionDate",
-- 					"TransitionTypeId",
-- 					"ActionBy",
-- 					"ActionByName",
-- 					"ShiftDistributeId",
-- 					"ManagerId",
-- 					"ConfirmStatusId",
-- 					"IsScratchcard"
-- 				) VALUES(
-- 					(ele ->> 'LotteryDate')::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					v_sale_point_id,
-- 					0,
-- 					COALESCE((ele ->> 'TotalTrans')::INT, 0),
-- 					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
-- 					NOW(),
-- 					1,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					v_shift_dis_id,
-- 					p_manager_id,
-- 					1,
-- 					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
-- 				);
				
-- 				v_id := v_sale_point_id;
-- 				v_mess := 'Tạo yêu cầu chuyển vé thành công';
			
-- 			ELSEIF p_tran_type_id = 2 THEN
			
-- 				INSERT INTO "Transition"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"FromSalePointId",
-- 					"ToSalePointId",
-- 					"TotalTrans",
-- 					"TotalTransDup",
-- 					"TransitionDate",
-- 					"TransitionTypeId",
-- 					"ActionBy",
-- 					"ActionByName",
-- 					"ShiftDistributeId",
-- 					"ManagerId",
-- 					"ConfirmStatusId",
-- 					"IsScratchcard"
-- 				) VALUES(
-- 					(ele ->> 'LotteryDate')::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					0,
-- 					v_sale_point_id,
-- 					COALESCE((ele ->> 'TotalTrans')::INT, 0),
-- 					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
-- 					NOW(),
-- 					2,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					v_shift_dis_id,
-- 					p_manager_id,
-- 					1,
-- 					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
-- 				);
				
-- 				v_id := v_sale_point_id;
-- 				v_mess := 'Tạo yêu cầu nhận vé thành công';
		
-- 			ELSEIF p_tran_type_id = 3 THEN
				
-- 				INSERT INTO "Transition"(
-- 					"LotteryDate",
-- 					"LotteryChannelId",
-- 					"FromSalePointId",
-- 					"ToSalePointId",
-- 					"TotalTrans",
-- 					"TotalTransDup",
-- 					"TransitionDate",
-- 					"TransitionTypeId",
-- 					"ActionBy",
-- 					"ActionByName",
-- 					"ShiftDistributeId",
-- 					"ManagerId",
-- 					"ConfirmStatusId",
-- 					"IsScratchcard"
-- 				) VALUES(
-- 					(ele ->> 'LotteryDate')::DATE,
-- 					(ele ->> 'LotteryChannelId')::INT,
-- 					v_sale_point_id,
-- 					0,
-- 					COALESCE((ele ->> 'TotalTrans')::INT, 0),
-- 					COALESCE((ele ->> 'TotalTransDup')::INT, 0),
-- 					NOW(),
-- 					3,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					v_shift_dis_id,
-- 					p_manager_id,
-- 					1,
-- 					COALESCE((ele ->> 'IsScratchcard')::BOOL, FALSE)
-- 				);
				
-- 				v_id := v_sale_point_id;
-- 				v_mess := 'Tạo yêu cầu trả ế thành công';
			
-- 			ELSE
			
-- 				v_id := 0;
-- 				v_mess := 'Xảy ra lỗi';
			
-- 			END IF;
	
-- 		END LOOP;

-- 	ELSE 
 
-- 		v_id := 0;
-- 		v_mess := 'Nhân viên không trong ca làm việc';
 
-- 	END IF;
	
-- 	RETURN QUERY 
-- 	SELECT 	v_id, v_mess;
	
-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN				
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
		
-- 		RETURN QUERY 
-- 		SELECT 	v_id, v_mess;
-- 	END;

-- END;
$$;


ALTER FUNCTION public.crm_insert_transition_log_v3(p_action_by integer, p_action_by_name character varying, p_user_role_id integer, p_tran_data text, p_tran_type_id integer, p_shift_dis_id integer, p_manager_id integer) OWNER TO postgres;

--
-- Name: crm_insert_update_confirm_for_manager_borrow(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_insert_update_confirm_for_manager_borrow(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_check INT;
	ele JSON := (p_data::JSON);
	elele JSON;
	v_data TEXT;
	v_user_id INT;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		INSERT INTO "ConfirmLog" (
			"Data",
			"ActionDate",
			"ActionBy",
			"ActionByName",
			"ConfirmStatusId",
			"ConfirmFor",
			"DataActionInfo"
		) VALUES (
			ele::TEXT,
			v_time,
			p_action_by,
			p_action_by_name,
			1,
			5,
			(ele->>'UserId')::TEXT
		) RETURNING "ConfirmLogId" INTO v_id;
				
		v_mess := 'Thêm thành công';
		
	--UPDATE
	ELSEIF p_action_type = 2 THEN
		
		SELECT 
			CL."ConfirmStatusId",  
			CL."Data",
			CL."DataActionInfo"::INT
		INTO
			v_check,
			v_data,
			v_user_id
		FROM "ConfirmLog" CL
		WHERE CL."ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		
		IF v_check = 1 THEN
			UPDATE "ConfirmLog"
			SET
				"ConfirmStatusId" = 2,
				"ConfirmDate" = v_time
			WHERE "ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
 	
			FOR elele IN SELECT * FROM json_array_elements(((v_data::JSON)->>'DataForConfirm')::JSON) LOOP
			IF (SELECT SUM("Price") FROM "ManagerBorrow" WHERE "CreatedDate"::DATE = v_time::DATE) < 150000000 THEN
							-- If the condition is met, perform an INSERT into "ManagerBorrow" table
							INSERT INTO "ManagerBorrow" (
								"UserId",
								"FormPaymentId",
								"Price",
								"CreatedBy",
								"CreatedByName",
								"CreatedDate",
								"Note",
								"IsDeleted",
								"Commission",
								"CommissionTranfer",
								"ReceivedSalePoint",
								"ReceivedAcc",
								"ReceivedTranfer"
							
							)
							VALUES (
								v_user_id,
								(elele->>'FormPaymentId')::INT,
								(elele->>'Price')::NUMERIC,
								p_action_by,
								p_action_by_name,
								v_time,
								((v_data::JSON)->>'Note')::VARCHAR,
								FALSE,
								(elele->>'commission')::NUMERIC,
								(elele->>'CommissionTranfer')::NUMERIC,
								(elele->>'ReceivedSalePoint')::NUMERIC,
								(elele->>'ReceivedAcc')::NUMERIC,
								(elele->>'ReceivedTranfer')::NUMERIC
							
							);

			else
			INSERT INTO "ManagerBorrow"(
					"UserId",
					"FormPaymentId",
					"Price",
					"CreatedBy",
					"CreatedByName",
					"CreatedDate",
					"Note",
					"IsDeleted",
					"Commission",
					"Tax",
					"CommissionTranfer",
					"ReceivedSalePoint",
					"ReceivedAcc",
					"ReceivedTranfer"
				)
				VALUES (
								v_user_id,
								(elele->>'FormPaymentId')::INT,
								(elele->>'Price')::NUMERIC,
								p_action_by,
								p_action_by_name,
								v_time,
								((v_data::JSON)->>'Note')::VARCHAR,
								FALSE,
								(elele->>'commission')::NUMERIC,
								((elele->>'Price')::NUMERIC * 0.3)::NUMERIC, -- Fixed the syntax issue here
								(elele->>'CommissionTranfer')::NUMERIC,
								(elele->>'ReceivedSalePoint')::NUMERIC,
								(elele->>'ReceivedAcc')::NUMERIC,
								(elele->>'ReceivedTranfer')::NUMERIC
							);
			
			END iF;
			END LOOP;
						
		ELSE 
			RAISE 'Yêu cầu đã được xác nhận trước đó';
		END IF;
		
		v_id := 1;
		v_mess := 'Xác nhận thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		SELECT 
			CL."ConfirmStatusId",  
			CL."Data",
			CL."DataActionInfo"::INT
		INTO
			v_check,
			v_data,
			v_user_id
		FROM "ConfirmLog" CL
		WHERE CL."ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		
		IF v_check = 1 THEN
			UPDATE "ConfirmLog"
			SET
				"ConfirmStatusId" = 3,
				"ConfirmDate" = v_time
			WHERE "ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		ELSE 
			RAISE 'Yêu cầu đã được xác nhận trước đó';
		END IF;
		
		v_id := 1;
		v_mess := 'Huỷ thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;








-- DECLARE
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	v_check INT;
-- 	ele JSON := (p_data::JSON);
-- 	elele JSON;
-- 	v_data TEXT;
-- 	v_user_id INT;
-- 	v_time TIMESTAMP := NOW();
-- 	v_sum_Pay Numeric;
-- BEGIN
-- 	--INSERT
-- 	IF p_action_type = 1 THEN 
-- 		INSERT INTO "ConfirmLog" (
-- 			"Data",
-- 			"ActionDate",
-- 			"ActionBy",
-- 			"ActionByName",
-- 			"ConfirmStatusId",
-- 			"ConfirmFor",
-- 			"DataActionInfo"
-- 		) VALUES (
-- 			ele::TEXT,
-- 			v_time,
-- 			p_action_by,
-- 			p_action_by_name,
-- 			1,
-- 			5,
-- 			(ele->>'UserId')::TEXT
-- 		) RETURNING "ConfirmLogId" INTO v_id;
				
-- 		v_mess := 'Thêm thành công';
		
-- 	--UPDATE
-- 	ELSEIF p_action_type = 2 THEN
		
-- 		SELECT 
-- 			CL."ConfirmStatusId",  
-- 			CL."Data",
-- 			CL."DataActionInfo"::INT
-- 		INTO
-- 			v_check,
-- 			v_data,
-- 			v_user_id
-- 		FROM "ConfirmLog" CL
-- 		WHERE CL."ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		
-- 		IF v_check = 1 THEN
-- 			UPDATE "ConfirmLog"
-- 			SET
-- 				"ConfirmStatusId" = 2,
-- 				"ConfirmDate" = v_time
-- 			WHERE "ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
 	
-- 			FOR elele IN SELECT * FROM json_array_elements(((v_data::JSON)->>'DataForConfirm')::JSON) LOOP
-- 			SELECT SUM("Price") FROM "ManagerBorrow" WHERE "CreatedDate"::DATE = v_time::DATE INTO v_sum_Pay;
-- 			v_sum_Pay=v_sum_Pay+(elele->>'Price')::NUMERIC;
-- 			IF v_sum_Pay <= 150000000 THEN
-- 							-- If the condition is met, perform an INSERT into "ManagerBorrow" table
-- 							INSERT INTO "ManagerBorrow" (
-- 								"UserId",
-- 								"FormPaymentId",
-- 								"Price",
-- 								"CreatedBy",
-- 								"CreatedByName",
-- 								"CreatedDate",
-- 								"Note",
-- 								"IsDeleted",
-- 								"Commission"
							
-- 							)
-- 							VALUES (
-- 								v_user_id,
-- 								(elele->>'FormPaymentId')::INT,
-- 								(elele->>'Price')::NUMERIC,
-- 								p_action_by,
-- 								p_action_by_name,
-- 								v_time,
-- 								((v_data::JSON)->>'Note')::VARCHAR,
-- 								FALSE,
-- 								(elele->>'commission')::NUMERIC
							
-- 							);

-- 			else
-- 			INSERT INTO "ManagerBorrow"(
-- 					"UserId",
-- 					"FormPaymentId",
-- 					"Price",
-- 					"CreatedBy",
-- 					"CreatedByName",
-- 					"CreatedDate",
-- 					"Note",
-- 					"IsDeleted",
-- 					"Commission",
-- 					"Tax"
-- 				)
-- 				VALUES (
-- 								v_user_id,
-- 								(elele->>'FormPaymentId')::INT,
-- 								(elele->>'Price')::NUMERIC,
-- 								p_action_by,
-- 								p_action_by_name,
-- 								v_time,
-- 								((v_data::JSON)->>'Note')::VARCHAR,
-- 								FALSE,
-- 								(elele->>'commission')::NUMERIC,
-- 								((elele->>'commission')::NUMERIC * 0.3)::NUMERIC -- Fixed the syntax issue here
-- 							);
			
-- 			END iF;
-- 			END LOOP;
						
-- 		ELSE 
-- 			RAISE 'Yêu cầu đã được xác nhận trước đó';
-- 		END IF;
		
-- 		v_id := 1;
-- 		v_mess := 'Xác nhận thành công';
		
-- 	--DELETE
-- 	ELSEIF p_action_type = 3 THEN
	
-- 		SELECT 
-- 			CL."ConfirmStatusId",  
-- 			CL."Data",
-- 			CL."DataActionInfo"::INT
-- 		INTO
-- 			v_check,
-- 			v_data,
-- 			v_user_id
-- 		FROM "ConfirmLog" CL
-- 		WHERE CL."ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		
-- 		IF v_check = 1 THEN
-- 			UPDATE "ConfirmLog"
-- 			SET
-- 				"ConfirmStatusId" = 3,
-- 				"ConfirmDate" = v_time
-- 			WHERE "ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
-- 		ELSE 
-- 			RAISE 'Yêu cầu đã được xác nhận trước đó';
-- 		END IF;
		
-- 		v_id := 1;
-- 		v_mess := 'Huỷ thành công';
		
-- 	END IF;
	
-- 	RETURN QUERY
-- 	SELECT v_id, v_mess;

-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
-- 		RETURN QUERY
-- 		SELECT v_id, v_mess;
-- 	END;

-- END;









-- DECLARE
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	v_check INT;
-- 	ele JSON := (p_data::JSON);
-- 	elele JSON;
-- 	v_data TEXT;
-- 	v_user_id INT;
-- 	v_time TIMESTAMP := NOW();
-- BEGIN
-- 	--INSERT
-- 	IF p_action_type = 1 THEN 
-- 		INSERT INTO "ConfirmLog" (
-- 			"Data",
-- 			"ActionDate",
-- 			"ActionBy",
-- 			"ActionByName",
-- 			"ConfirmStatusId",
-- 			"ConfirmFor",
-- 			"DataActionInfo"
-- 		) VALUES (
-- 			ele::TEXT,
-- 			v_time,
-- 			p_action_by,
-- 			p_action_by_name,
-- 			1,
-- 			5,
-- 			(ele->>'UserId')::TEXT
-- 		) RETURNING "ConfirmLogId" INTO v_id;
				
-- 		v_mess := 'Thêm thành công';
		
-- 	--UPDATE
-- 	ELSEIF p_action_type = 2 THEN
		
-- 		SELECT 
-- 			CL."ConfirmStatusId",  
-- 			CL."Data",
-- 			CL."DataActionInfo"::INT
-- 		INTO
-- 			v_check,
-- 			v_data,
-- 			v_user_id
-- 		FROM "ConfirmLog" CL
-- 		WHERE CL."ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		
-- 		IF v_check = 1 THEN
-- 			UPDATE "ConfirmLog"
-- 			SET
-- 				"ConfirmStatusId" = 2,
-- 				"ConfirmDate" = v_time
-- 			WHERE "ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
 	
-- 			FOR elele IN SELECT * FROM json_array_elements(((v_data::JSON)->>'DataForConfirm')::JSON) LOOP
-- 				INSERT INTO "ManagerBorrow"(
-- 					"UserId",
-- 					"FormPaymentId",
-- 					"Price",
-- 					"CreatedBy",
-- 					"CreatedByName",
-- 					"CreatedDate",
-- 					"Note",
-- 					"IsDeleted"
-- 				)
-- 				VALUES(
-- 					v_user_id,
-- 					(elele->>'FormPaymentId')::INT,
-- 					(elele->>'Price')::NUMERIC,
-- 					p_action_by,
-- 					p_action_by_name,
-- 					v_time,
-- 					((v_data::JSON)->>'Note')::VARCHAR,
-- 					FALSE
-- 				);	
-- 			END LOOP;
						
-- 		ELSE 
-- 			RAISE 'Yêu cầu đã được xác nhận trước đó';
-- 		END IF;
		
-- 		v_id := 1;
-- 		v_mess := 'Xác nhận thành công';
		
-- 	--DELETE
-- 	ELSEIF p_action_type = 3 THEN
	
-- 		SELECT 
-- 			CL."ConfirmStatusId",  
-- 			CL."Data",
-- 			CL."DataActionInfo"::INT
-- 		INTO
-- 			v_check,
-- 			v_data,
-- 			v_user_id
-- 		FROM "ConfirmLog" CL
-- 		WHERE CL."ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
		
-- 		IF v_check = 1 THEN
-- 			UPDATE "ConfirmLog"
-- 			SET
-- 				"ConfirmStatusId" = 3,
-- 				"ConfirmDate" = v_time
-- 			WHERE "ConfirmLogId" = (ele->>'ConfirmLogId')::INT;
-- 		ELSE 
-- 			RAISE 'Yêu cầu đã được xác nhận trước đó';
-- 		END IF;
		
-- 		v_id := 1;
-- 		v_mess := 'Huỷ thành công';
		
-- 	END IF;
	
-- 	RETURN QUERY
-- 	SELECT v_id, v_mess;

-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
-- 		RETURN QUERY
-- 		SELECT v_id, v_mess;
-- 	END;

-- END;
$$;


ALTER FUNCTION public.crm_insert_update_confirm_for_manager_borrow(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_intern_by_title(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_intern_by_title() RETURNS TABLE("Id" integer, "Name" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		U."UserId",
		U."FullName"
	FROM "User" U
		JOIN "UserRole" UR ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
	WHERE U."IsActive" IS TRUE
		AND UR."UserTitleId" = 5
		AND U."IsIntern" = TRUE;
END;
$$;


ALTER FUNCTION public.crm_intern_by_title() OWNER TO postgres;

--
-- Name: crm_intern_by_title_v1(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_intern_by_title_v1() RETURNS TABLE("Id" integer, "Name" character varying, "IsIntern" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		U."UserId",
		U."FullName",
		U."IsIntern"
	FROM "User" U
		JOIN "UserRole" UR ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
	WHERE U."IsActive" IS TRUE
		AND UR."UserTitleId" = 5;
-- 		AND U."IsIntern" = TRUE;
END;
$$;


ALTER FUNCTION public.crm_intern_by_title_v1() OWNER TO postgres;

--
-- Name: crm_item_create_or_update(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_item_create_or_update(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	ele JSON := p_data::JSON;
BEGIN
		IF(COALESCE((ele ->> 'ItemId')::INT,0)=0 ) THEN
			INSERT INTO "Item"(
				"ItemName",
				"Price",
				"UnitId",
				"CreateBy",
				"CreateByName",
				"CreatedDate",
				"Quotation",
				"TypeOfItemId"
			)
			VALUES(
				(ele ->> 'ItemName'):: VARCHAR,
				(ele ->> 'Price'):: INT,
				(ele ->> 'UnitId'):: INT,
				p_action_by,
				p_action_by_name,
				NOW(),
				(ele ->> 'Quotation'):: INT,
				COALESCE((ele ->> 'TypeOfItemId'):: INT, 1)
			) RETURNING "ItemId" INTO v_id;
			v_mess := 'Thao tác tạo thành công';
		ELSE
			v_id:=(ele ->> 'ItemId')::INT ;
			UPDATE "Item"
			SET 
				"ItemName" = COALESCE((ele ->> 'ItemName'):: VARCHAR,"ItemName") ,
				"Price" =  COALESCE((ele ->> 'Price'):: INT,"Price"),
				"UnitId" =  COALESCE((ele ->> 'UnitId'):: INT,"UnitId"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = NOW(),
				"IsActive" = COALESCE((ele ->> 'IsActive'):: BOOLEAN,"IsActive"),
				"Quotation" = COALESCE((ele ->> 'Quotation'):: INT,"Quotation"),
				"TypeOfItemId" = COALESCE((ele ->> 'TypeOfItemId'):: INT,"TypeOfItemId") 
			WHERE "ItemId" = v_id;
			v_mess := 'Thao tác tạo thành công';
		END IF;
	 
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_item_create_or_update(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_item_get_list_confirm(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_item_get_list_confirm(p_month character varying, p_sale_point_id integer DEFAULT 0, p_confirm_for_type_id integer DEFAULT 1) RETURNS TABLE("ItemConfirmLogId" integer, "ConfirmForTypeName" character varying, "Data" text, "TypeActionId" integer, "ItemTypeName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying, "RequestBy" integer, "RequestByName" character varying, "RequestDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "ConfirmDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	
BEGIN
	RETURN QUERY 
		SELECT 
			IL."ConfirmLogId" AS "ItemConfirmLogId",
			CFT."ConfirmForTypeName",
			(
				SELECT 
					array_to_json(array_agg(
						A.*::JSONB 
						||('{"ItemName": "'||(SELECT I."ItemName" FROM "Item" I WHERE I."ItemId" = (A->>'ItemId')::INT)::TEXT||'"}')::JSONB
						||('{"UnitId": '||(SELECT I."UnitId" FROM "Item" I WHERE I."ItemId" = (A->>'ItemId')::INT)::INT||'}')::JSONB
						||('{"UnitName": "'||(SELECT U."UnitName" FROM "Item" I JOIN "Unit" U ON I."UnitId" = U."UnitId" WHERE I."ItemId" = (A->>'ItemId')::INT)::TEXT||'"}')::JSONB
					))
				FROM json_array_elements(IL."Data"::JSON) A
			)::TEXT,
			IL."TypeActionId",
			(CASE 
				WHEN COALESCE(p_confirm_for_type_id,1) = 1 THEN  IT."ItemTypeName"
				WHEN p_confirm_for_type_id = 2 THEN  GT."TypeName"
			END) ,
			IL."ConfirmStatusId",
			CS."ConfirmStatusName",
			IL."ActionBy" AS "RequestBy",
			IL."ActionByName" AS "RequestByName",
			Il."ActionDate" AS "RequestDate",
			IL."ConfirmBy",
			IL."ConfirmByName",
			IL."ConfirmDate"
		FROM "ConfirmLog" IL 
			JOIN "ConfirmStatus" CS ON IL."ConfirmStatusId" = CS."ConfirmStatusId"
			JOIN "ItemType" IT ON IT."ItemTypeId" =IL."TypeActionId"
			JOIN "GuestActionType" GT ON GT."GuestActionTypeId" = IL."TypeActionId"
			JOIN "ConfirmForType" CFT ON CFT."ConfirmForTypeId" = IL."ConfirmFor"
		WHERE 
 			(COALESCE(p_month, NULL) IS NULL OR TO_CHAR(IL."ActionDate",'YYYY-MM') = p_month)
			AND IL."ConfirmFor" = COALESCE(p_confirm_for_type_id,1)
			AND (COALESCE(p_sale_point_id,0) = 0 OR p_sale_point_id = (((IL."Data" ::JSON)->> 0)::JSON ->> 'SalePointId')::INT)
		ORDER BY IL."ActionDate" DESC;
END;
$$;


ALTER FUNCTION public.crm_item_get_list_confirm(p_month character varying, p_sale_point_id integer, p_confirm_for_type_id integer) OWNER TO postgres;

--
-- Name: crm_item_get_list_confirm_v1(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_item_get_list_confirm_v1(p_month character varying, p_sale_point_id integer DEFAULT 0, p_confirm_for_type_id integer DEFAULT 1) RETURNS TABLE("ItemConfirmLogId" integer, "ConfirmForTypeName" character varying, "Data" text, "TypeActionId" integer, "ItemTypeName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying, "RequestBy" integer, "RequestByName" character varying, "RequestDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "ConfirmDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	
BEGIN
	RETURN QUERY 
		SELECT 
			IL."ConfirmLogId" AS "ItemConfirmLogId",
			CFT."ConfirmForTypeName",
			(
				SELECT 
					array_to_json(array_agg(
						A.*::JSONB 
						||('{"ItemName": "'||(SELECT I."ItemName" FROM "Item" I WHERE I."ItemId" = (A->>'ItemId')::INT )::TEXT||'"}')::JSONB
						||('{"UnitId": '||(SELECT I."UnitId" FROM "Item" I WHERE I."ItemId" = (A->>'ItemId')::INT)::INT||'}')::JSONB
						||('{"UnitName": "'||(SELECT U."UnitName" FROM "Item" I JOIN "Unit" U ON I."UnitId" = U."UnitId" WHERE I."ItemId" = (A->>'ItemId')::INT )::TEXT||'"}')::JSONB
					))
				FROM json_array_elements(IL."Data"::JSON) A
-- 				WHERE   (A->>'ItemId')::INT <> 13 AND  (A->>'ItemId')::INT <> 27
			)::TEXT AS "Data",
			IL."TypeActionId",
			(CASE 
				WHEN COALESCE(p_confirm_for_type_id,1) = 1 THEN  IT."ItemTypeName"
				WHEN p_confirm_for_type_id = 2 THEN  GT."TypeName"
			END) ,
			IL."ConfirmStatusId",
			CS."ConfirmStatusName",
			IL."ActionBy" AS "RequestBy",
			IL."ActionByName" AS "RequestByName",
			Il."ActionDate" AS "RequestDate",
			IL."ConfirmBy",
			IL."ConfirmByName",
			IL."ConfirmDate"
		FROM "ConfirmLog" IL 
			JOIN "ConfirmStatus" CS ON IL."ConfirmStatusId" = CS."ConfirmStatusId"
			JOIN "ItemType" IT ON IT."ItemTypeId" =IL."TypeActionId"
			JOIN "GuestActionType" GT ON GT."GuestActionTypeId" = IL."TypeActionId"
			JOIN "ConfirmForType" CFT ON CFT."ConfirmForTypeId" = IL."ConfirmFor"
		WHERE 
 			(COALESCE(p_month, NULL) IS NULL OR TO_CHAR(IL."ActionDate",'YYYY-MM') = p_month)
			AND IL."ConfirmFor" = COALESCE(p_confirm_for_type_id,1)
			AND (COALESCE(p_sale_point_id,0) = 0 OR p_sale_point_id = (((IL."Data" ::JSON)->> 0)::JSON ->> 'SalePointId')::INT)
-- 			AND (IL."Data"::JSON ->> 'ItemId')::INT8 <> 27 OR (IL."Data"::JSON ->> 'ItemId')::INT8 <> 13 
		ORDER BY IL."ActionDate" DESC;
END;
$$;


ALTER FUNCTION public.crm_item_get_list_confirm_v1(p_month character varying, p_sale_point_id integer, p_confirm_for_type_id integer) OWNER TO postgres;

--
-- Name: crm_lottery_channel_ddl(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_lottery_channel_ddl(p_region_id integer, p_date timestamp without time zone) RETURNS TABLE("Id" integer, "Name" character varying, "ShortName" character varying, "ChannelTypeShortName" character varying, "IsScratchcard" boolean, "DayIds" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_dow INT := EXTRACT(ISODOW FROM p_date);
BEGIN
	
	RETURN QUERY 
	SELECT 
		LC."LotteryChannelId",
		LC."LotteryChannelName",
		LC."ShortName",
		LT."ShortName" AS "ChannelTypeShortName",
		LC."IsScratchcard",
		TRANSLATE(LC."DayIds" ::TEXT, '{}', '[]')
	FROM "LotteryChannel" LC
		JOIN "LotteryChannelType" LT ON LT."LotteryChannelTypeId" = LC."LotteryChannelTypeId"
	WHERE LC."IsActive" IS TRUE 
		AND LC."IsDeleted" IS FALSE
		AND LC."RegionId" IN (p_region_id, 3)
		AND (p_date IS NULL OR v_dow = ANY(LC."DayIds"))
	ORDER BY LT."LotteryChannelTypeId", LC."LotteryChannelId";
	
END;
$$;


ALTER FUNCTION public.crm_lottery_channel_ddl(p_region_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_lottery_price_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_lottery_price_ddl() RETURNS TABLE("LotteryPriceId" integer, "LotteryPriceName" character varying, "Price" numeric, "Value" real, "Step" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		LP."LotteryPriceId",
		LP."LotteryPriceName",
		LP."Price",
		LP."Value",
		LP."Step"
	FROM "LotteryPrice" LP
	ORDER BY LP."LotteryPriceId";
	
END;
$$;


ALTER FUNCTION public.crm_lottery_price_ddl() OWNER TO postgres;

--
-- Name: crm_lottery_price_ddl_v2(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_lottery_price_ddl_v2(p_lottery_type_id integer) RETURNS TABLE("LotteryPriceId" integer, "LotteryPriceName" character varying, "Price" numeric, "Value" real, "Step" integer, "LotteryTypeIds" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		LP."LotteryPriceId",
		LP."LotteryPriceName",
		LP."Price",
		LP."Value",
		LP."Step",
		LP."LotteryTypeIds"::VARCHAR
	FROM "LotteryPrice" LP
	WHERE COALESCE(p_lottery_type_id, 0) = 0 OR p_lottery_type_id = ANY(LP."LotteryTypeIds")
	ORDER BY LP."LotteryPriceId";
	
END;
$$;


ALTER FUNCTION public.crm_lottery_price_ddl_v2(p_lottery_type_id integer) OWNER TO postgres;

--
-- Name: crm_lottery_type_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_lottery_type_ddl() RETURNS TABLE("Id" integer, "Name" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		L."LotteryTypeId",
		L."LotteryTypeName"
	FROM "LotteryType" L
	ORDER BY L."LotteryTypeId";
	
END;
$$;


ALTER FUNCTION public.crm_lottery_type_ddl() OWNER TO postgres;

--
-- Name: crm_manager_get_list_history(timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_manager_get_list_history(p_date timestamp without time zone, p_sale_point integer, p_shift_id integer) RETURNS TABLE("HistoryOfOrderId" integer, "SalePointId" integer, "PrintTimes" integer, "ListPrint" text, "Data" text, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_shift_distribute_id INT := (SELECT SD."ShiftDistributeId" FROM "ShiftDistribute" SD WHERE SD."SalePointId" = p_sale_point AND SD."ShiftId" = p_shift_id AND SD."DistributeDate" = p_date::DATE)::INT;
BEGIN
	RETURN QUERY
	SELECT * 
	FROM crm_salepoint_get_list_history_order(p_date, p_sale_point, v_shift_distribute_id);
END;
$$;


ALTER FUNCTION public.crm_manager_get_list_history(p_date timestamp without time zone, p_sale_point integer, p_shift_id integer) OWNER TO postgres;

--
-- Name: crm_permission_get_by_title(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_permission_get_by_title(p_title integer) RETURNS TABLE("RoleId" integer, "RoleName" character varying, "PermissionId" integer, "PermissionName" character varying, "ControllerName" character varying, "IsCheck" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN 
	
	RETURN QUERY
	SELECT 
		PR."PermissionRoleId",
		COALESCE(PR."RoleDisplayName", PR."RoleName"),
		P."PermissionId",
		P."PermissionName",
		P."ControllerName",
		(CASE WHEN PTR."PermissionRoleId" IS NULL THEN FALSE ELSE TRUE END)
	FROM "PermissionRole" PR
		JOIN "Permission" P ON P."PermissionId" = PR."PermissionId"
		LEFT JOIN "PermissionRoleTitles" PTR ON PR."PermissionRoleId" = PTR."PermissionRoleId" AND PTR."UserTitleId" = p_title
		JOIN "UserTitle" UT ON UT."UserTitleId" = p_title
	WHERE PR."IsDelete" IS FALSE
		AND PR."IsActive" IS TRUE
	ORDER BY 
		P."Sort" ASC, 
		P."PermissionId" ASC, 
		PR."Sort" ASC, 
		PR."PermissionRoleId" ASC; 
			
END; 
$$;


ALTER FUNCTION public.crm_permission_get_by_title(p_title integer) OWNER TO postgres;

--
-- Name: crm_permission_get_first_page_show(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_permission_get_first_page_show(p_user_role_id integer) RETURNS TABLE("ActionName" character varying, "ControllerName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_title_id INT := (SELECT "UserTitleId" FROM "UserRole" WHERE "UserRoleId" = p_user_role_id);
BEGIN

	RETURN QUERY
	SELECT 
		PR."ActionName",
		P."ControllerName"
	FROM "PermissionRole" PR
		JOIN "Permission" P ON P."PermissionId" = PR."PermissionId"
		JOIN "PermissionRoleTitles" PTR ON PR."PermissionRoleId" = PTR."PermissionRoleId" AND PTR."UserTitleId" = v_user_title_id
	WHERE PR."IsShowMenu" IS TRUE
	ORDER BY P."Sort" ASC, P."PermissionId" ASC, PR."Sort" ASC, PR."PermissionRoleId" ASC
	LIMIT 1;

END; $$;


ALTER FUNCTION public.crm_permission_get_first_page_show(p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_permission_update_title_role(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_permission_update_title_role(p_action_by integer, p_action_by_name character varying, p_title integer, p_list_role text) RETURNS TABLE(id integer, message text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT4;
	v_msg TEXT;
	v_list_role JSON;
	v_role JSON;
	v_ischeck BOOL;
	v_role_id INT4;
BEGIN 

	v_list_role := p_list_role::json;
	
	FOR v_role IN SELECT * FROM json_array_elements(v_list_role) ele LOOP
		
		v_ischeck := (v_role->>'IsCheck')::BOOL;
		v_role_id := (v_role->>'RoleId')::INT4;
		
		IF v_ischeck IS TRUE AND NOT EXISTS (SELECT 1 FROM "PermissionRoleTitles" WHERE "PermissionRoleId" = v_role_id AND "UserTitleId" = p_title) THEN
		
			INSERT INTO "PermissionRoleTitles"(
				"PermissionRoleId",
				"UserTitleId",
				"CreatedBy",
				"CreatedByName"
			)
			VALUES(
				v_role_id,
				p_title,
				p_action_by,
				p_action_by_name
			);
			
		ELSEIF v_ischeck IS FALSE AND EXISTS (SELECT 1 FROM "PermissionRoleTitles" WHERE "PermissionRoleId" = v_role_id AND "UserTitleId" = p_title) THEN
			
			DELETE FROM "PermissionRoleTitles" WHERE "PermissionRoleId" = v_role_id AND "UserTitleId" = p_title;
			
		END IF;
		
	END LOOP;
	
	v_id := 1;
	v_msg := 'Update permission successful!';
	
	RETURN QUERY 
	SELECT 	v_id AS "Id", v_msg AS "Message";
					
	EXCEPTION WHEN others THEN
	BEGIN
		v_id := -1;
		v_msg := sqlerrm;	
	END;
	
	RETURN QUERY 
	SELECT 	v_id AS "Id", v_msg AS "Message";
			
END; $$;


ALTER FUNCTION public.crm_permission_update_title_role(p_action_by integer, p_action_by_name character varying, p_title integer, p_list_role text) OWNER TO postgres;

--
-- Name: crm_potential_get_total_and_other_parts_of_potential_v1(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_potential_get_total_and_other_parts_of_potential_v1(p_user_id integer) RETURNS TABLE("ActivityCode" integer, "ActivityName" character varying, "TotalPotential" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
-- 	v_user_role_id INT := (SELECT UR."UserRoleId" FROM "UserRole" UR WHERE UR."UserId" = v_user_id);
-- 	v_user_title_ids INT[] := (SELECT UR."UserTitleIds" FROM "UserRole" UR WHERE UR."UserId" = v_user_id);
	v_list_activity_code INT[] := ARRAY[100, 2006, 2002, 2001, 2009];
BEGIN
	RETURN QUERY

		SELECT
				A."ActivityCode",
				A."ActivityName",
				COUNT(1) FILTER (WHERE P."PotentialId" IS NOT NULL) AS "TotalPotential"
			FROM "Activity" A
				LEFT JOIN "Potential" P ON A."ActivityCode" = P."ActivityCode" 
				LEFT JOIN "Student" S ON S."PotentialId" = P."PotentialId"
				LEFT JOIN "User" U ON U."UserId" = P."AssignToUserId"
				WHERE  A."ActivityCode"  = ANY (v_list_activity_code)  AND U."UserId" = p_user_id or p_user_id = 0 AND A."ActivityCode"  = ANY (v_list_activity_code)
				AND A."IsActive" IS TRUE 
			GROUP BY 
				A."ActivityCode",
				A."ActivityName"
			ORDER BY 
				SUBSTRING(A."ActivityName", 1, 2)::INT;
	
	
	

	
END;
$$;


ALTER FUNCTION public.crm_potential_get_total_and_other_parts_of_potential_v1(p_user_id integer) OWNER TO postgres;

--
-- Name: crm_report_average_lottery_sell_of_user_to_current_date(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_average_lottery_sell_of_user_to_current_date(p_month character varying, p_userid integer, p_lottery_type integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "Average" numeric)
    LANGUAGE plpgsql
    AS $$
    /*
        History:
            [2024-06-23 08:27][TuanBui]: Calculate avg with days in month
                Trường hợp 1: nếu số ngày làm nhỏ hơn số ngày trong tháng thì Doanh số NVBH = tổng doanh số chia cho tổng ngày trong tháng
                Trường hợp 2 : nếu số ngày làm lớn hơn số ngày trong tháng thì Doanh số NVBH = tổng doanh số chia cho tổng công làm ( công thường + công tăng ca )
    */
DECLARE
    v_current_date INT = 0;
BEGIN

    SELECT DATE_PART('days', DATE_TRUNC('month', NOW()) + '1 MONTH'::INTERVAL - '1 DAY'::INTERVAL)
    INTO v_current_date;

    RETURN QUERY
        WITH tmp AS (SELECT U."UserId",
                            U."FullName",
                            U."TypeUserId"
                     FROM "User" U
                              JOIN "UserRole" UR ON U."UserId" = UR."UserId"
                              JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
                     WHERE UT."IsStaff" IS TRUE
                       AND U."IsDeleted" IS FALSE
                       AND U."IsActive" IS TRUE),
             tmp1 AS (SELECT SPL."ActionBy",
                             SPL."SalePointId",
                             SPL."LotteryTypeId",
                             LT."LotteryTypeName",
                             TO_CHAR(COALESCE(SPL."LotteryDate", SPL."ActionDate"), 'YYYY-MM-DD') AS "DateSell",
                             SUM(SPL."Quantity")                                                  AS "TotalLottery"
                      FROM "SalePointLog" SPL,
                           "LotteryType" LT
                      WHERE (SPL."ActionDate" <= NOW())
                        AND (TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month)
                        AND SPL."LotteryTypeId" = LT."LotteryTypeId"
                        AND (COALESCE(p_lottery_type, 0) = 0
                          OR (p_lottery_type = 3 AND SPL."LotteryTypeId" = p_lottery_type)
                          OR (p_lottery_type <> 3 AND SPL."LotteryTypeId" IN (1, 2)))
                        AND SPL."IsDeleted" IS FALSE
                      GROUP BY SPL."ActionBy",
                               SPL."SalePointId",
                               SPL."LotteryTypeId",
                               LT."LotteryTypeName",
                               TO_CHAR(COALESCE(SPL."LotteryDate", SPL."ActionDate"), 'YYYY-MM-DD')),
             tmp2 AS (SELECT TT."ActionBy",
                             SP."SalePointId",
                             SP."SalePointName",
                             TT."LotteryTypeId",
                             TT."LotteryTypeName",
                             TT."DateSell",
                             TT."TotalLottery"
                      FROM "SalePoint" SP
                               JOIN tmp1 TT ON SP."SalePointId" = TT."SalePointId"),
             tmp3 AS (SELECT U."UserId",
                             U."FullName",
                             U."TypeUserId",
                             SUM(A."TotalLottery") AS "Total"
                      FROM tmp U
                               LEFT JOIN tmp2 A ON U."UserId" = A."ActionBy"
                      WHERE COALESCE(p_userId, 0) = 0
                         OR U."UserId" = p_userId
                      GROUP BY U."UserId", U."FullName", U."TypeUserId"),
             tmp4 AS (SELECT SD."UserId",
                             COUNT(1) FILTER (WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month ) AS "TotalShift"
                      FROM "ShiftDistribute" SD
                      WHERE (COALESCE(p_userId, 0) = 0 OR SD."UserId" = p_userId)
                        AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP +
                             (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END) || ' hour') :: INTERVAL)) <= NOW()
                      GROUP BY SD."UserId")
        SELECT tmp3."UserId",
               tmp3."FullName",
                (
                    CASE WHEN COALESCE(tmp4."TotalShift", 0) < v_current_date
                    THEN
                        ROUND(COALESCE(tmp3."Total", 0) / v_current_date)
                    ELSE
                        ROUND(ROUND(COALESCE(tmp3."Total", 0) / COALESCE(tmp4."TotalShift", 1)))
                    END
                )   AS "Average"
               -- [TuanBui] comment
               /*ROUND(COALESCE(tmp3."Total", 0) /
                     (CASE WHEN COALESCE(tmp4."TotalShift", 0) = 0 THEN 1 ELSE COALESCE(tmp4."TotalShift", 1) END),
                     0) AS "Average"*/
        FROM tmp3
                 LEFT JOIN tmp4 ON tmp3."UserId" = tmp4."UserId"
        ORDER BY tmp3."TypeUserId", tmp3."UserId";
END;
$$;


ALTER FUNCTION public.crm_report_average_lottery_sell_of_user_to_current_date(p_month character varying, p_userid integer, p_lottery_type integer) OWNER TO postgres;

--
-- Name: crm_report_check_update_kpi(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_check_update_kpi(p_user_id integer, p_week_id integer, p_month character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
	UPDATE "KPILog"
	SET
		"IsSumKPI" = FALSE
	WHERE "UserId" = p_user_id AND "WeekId" = p_week_id AND "Month" = p_month;
    
    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_report_check_update_kpi(p_user_id integer, p_week_id integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift(p_user_role integer) RETURNS TABLE("LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalStocks" integer, "TotalTrans" bigint, "TotalReceived" bigint, "TotalReturns" bigint, "TotalRemaining" integer, "TotalSold" integer, "TotalSoldMoney" numeric, "ShiftDistributeId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_shift_dis_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
BEGIN
		
	SELECT FN."UserId", FN."SalePointId", FN."ShiftDistributeId" INTO v_user_id, v_salepoint_id, v_shift_dis_id  FROM fn_get_shift_info(p_user_role) FN;
	SELECT SD."ShiftId" INTO v_shift_id FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  v_shift_dis_id;

	RETURN QUERY
		WITH LoadData AS 
				(
				SELECT 
					(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
					SP."SalePointName",
					T."LotteryDate",
					T."LotteryChannelId",
					LC."LotteryChannelName",
					LT."LotteryTypeId",
					LT."LotteryTypeName",
					SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 1 THEN T."TotalTrans" 
									 WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
					SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 1 THEN T."TotalTrans" 
									 WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
					SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 1 THEN T."TotalTrans" 
									 WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
					T."ShiftDistributeId"
				FROM "Transition" T 
							JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
							JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId",
							"LotteryType" LT	
				WHERE LT."LotteryTypeId" <> 3	AND T."ShiftDistributeId" = v_shift_dis_id
				GROUP BY 
					(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), 
					SP."SalePointName",
					T."LotteryChannelId",
					LC."LotteryChannelName",
					T."LotteryDate",
					LT."LotteryTypeId",
					LT."LotteryTypeName",
					T."ShiftDistributeId"
				ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
			),
			GetInventory AS 
			(
				SELECT 
					I."SalePointId",
					SP."SalePointName",
					I."LotteryDate",
					LT."LotteryTypeId",
					LT."LotteryTypeName",
					LC."LotteryChannelId",
					LC."LotteryChannelName"
				FROM "Inventory" I, "LotteryType" LT, "SalePoint" SP, "LotteryChannel" LC
				WHERE (I."LotteryDate" = NOW() ::DATE OR I."LotteryDate" = (NOW() + INTERVAL '1 DAY') ::DATE) 
					AND LT."LotteryTypeId" <> 3
					AND I."SalePointId" = v_salepoint_id
					AND SP."SalePointId" = I."SalePointId"
					AND I."LotteryChannelId" = LC."LotteryChannelId"
				ORDER BY I."LotteryDate", I."LotteryChannelId"
			)	,
			GetData AS 
			(
				SELECT 
					GI."LotteryDate",
					GI."SalePointId",
					GI."SalePointName",
					GI."LotteryChannelId",
					GI."LotteryChannelName",
					GI."LotteryTypeId",
					GI."LotteryTypeName",
					COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
					COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
					COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
					v_shift_dis_id AS "ShiftDistributeId"			
				FROM GetInventory GI LEFT JOIN LoadData L ON GI."LotteryDate" = L."LotteryDate"
																										AND GI."LotteryChannelId" = L."LotteryChannelId"
																										AND GI."LotteryTypeId" = L."LotteryTypeId"
			),
			MoneyData AS
			(
				SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, v_shift_dis_id)
			)				
				SELECT * FROM 
						((SELECT 
						G."LotteryDate",
						G."LotteryChannelId",
						G."LotteryChannelName",
						G."LotteryTypeId",
						G."LotteryTypeName",
						COALESCE(crm_get_previous_remaining(G."ShiftDistributeId", G."LotteryChannelId", G."LotteryTypeId", G."LotteryDate"), 0) AS "FirstStore",
						G."LotteryTrans",
						G."LotteryReceive",
						G."LotteryReturn" ,
						COALESCE(crm_get_current_store_of_sale_point_by_channel(G."SalePointId",G."LotteryChannelId",G."LotteryTypeId",G."LotteryDate"), 0) 
						AS "Last",
						COALESCE(M."Quantity", 0) AS "TotalSell",
						COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
						G."ShiftDistributeId"					
					FROM GetData G 
					  FULL JOIN MoneyData M ON (G."LotteryTypeId" = M."LotteryTypeId"
																AND G."LotteryChannelId" = M."LotteryChannelId"
																AND G."LotteryDate" = M."LotteryDate")
					WHERE G."SalePointId" = v_salepoint_id AND G."ShiftDistributeId" = v_shift_dis_id
					ORDER BY G."LotteryDate")
					UNION
					(SELECT
						NULL,
						NULL,
						NULL,
						LT."LotteryTypeId",
						LT."LotteryTypeName",
						COALESCE(crm_get_previous_remaining(v_shift_dis_id, 0, LT."LotteryTypeId", NULL), 0) AS "FirstStore",
						0,
						0,
						0,
						COALESCE(crm_get_current_store_of_sale_point_by_channel(v_salepoint_id,0,LT."LotteryTypeId",NULL), 0) 
						AS "Last",
						COALESCE(M."Quantity", 0) AS "TotalSell",
						COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
						v_shift_dis_id
					FROM "LotteryType" LT LEFT JOIN MoneyData M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = 0)
					WHERE LT."LotteryTypeId" = 3)) A
				ORDER BY A."LotteryDate", A."LotteryChannelId", A."LotteryTypeId";
END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift(p_user_role integer) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_v2(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_v2(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalStocks" integer, "TotalTrans" bigint, "TotalReceived" bigint, "TotalReturns" bigint, "TotalRemaining" bigint, "TotalSold" integer, "TotalSoldMoney" numeric, "TotalRetail" integer, "TotalRetailMoney" numeric, "TotalWholesale" integer, "TotalWholesaleMoney" numeric, "ShiftDistributeId" integer, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
BEGIN
		
	SELECT 
		SD."ShiftId", SD."UserId", SD."SalePointId"
	INTO v_shift_id, v_user_id, v_salepoint_id
	FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;

	RETURN QUERY
	WITH LoadData AS 
	(
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			SP."SalePointName",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
			SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
			T."ShiftDistributeId"
		FROM "Transition" T 
			JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "LotteryType" LT	ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
		WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			SP."SalePointName",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."ShiftDistributeId",
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	GetInventory AS 
	(
		SELECT 
			I."SalePointId",
			SP."SalePointName",
			I."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			LC."LotteryChannelId",
			LC."LotteryChannelName"
		FROM "Inventory" I, "LotteryType" LT, "SalePoint" SP, "LotteryChannel" LC
		WHERE (I."LotteryDate" = p_lottery_date::DATE OR I."LotteryDate" = (p_lottery_date + INTERVAL '1 DAY') ::DATE) 
			AND LT."LotteryTypeId" <> 3
			AND I."SalePointId" = v_salepoint_id
			AND SP."SalePointId" = I."SalePointId"
			AND I."LotteryChannelId" = LC."LotteryChannelId"
		ORDER BY I."LotteryDate", I."LotteryChannelId"
	),
	GetData AS 
	(
		SELECT 
			GI."LotteryDate",
			GI."SalePointId",
			GI."SalePointName",
			GI."LotteryChannelId",
			GI."LotteryChannelName",
			GI."LotteryTypeId",
			GI."LotteryTypeName",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			p_shift_dis_id AS "ShiftDistributeId"			
		FROM GetInventory GI 
			LEFT JOIN LoadData L ON GI."LotteryDate" = L."LotteryDate" 
				AND L."IsScratchcard" IS FALSE
				AND GI."LotteryChannelId" = L."LotteryChannelId"
				AND GI."LotteryTypeId" = L."LotteryTypeId"
	),
	MoneyData AS
	(
		SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
	)				
	SELECT 
		A."LotteryDate",
		A."LotteryChannelId",
		A."LotteryChannelName",
		A."LotteryTypeId",
		A."LotteryTypeName",
		A."FirstStore",
		A."LotteryTrans",
		A."LotteryReceive",
		A."LotteryReturn" ,
		(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell") AS "TotalRemaining",
		A."TotalSell",
		A."TotalSoldMoney",
		A."TotalRetail",
		A."TotalRetailMoney",
		A."TotalWholesale",
		A."TotalWholesaleMoney",
		A."ShiftDistributeId",
		COALESCE(LC."ShortName",'Vé cào')
	FROM 
	(
		SELECT 
			G."LotteryDate",
			G."LotteryChannelId",
			G."LotteryChannelName",
			G."LotteryTypeId",
			G."LotteryTypeName",
			COALESCE(crm_get_previous_remaining_v2(G."ShiftDistributeId", G."LotteryChannelId", G."LotteryTypeId", G."LotteryDate", p_lottery_date::DATE), 0) AS "FirstStore",
			G."LotteryTrans",
			G."LotteryReceive",
			G."LotteryReturn" ,
			--COALESCE(crm_get_current_store_of_sale_point_by_channel(G."SalePointId",G."LotteryChannelId",G."LotteryTypeId",G."LotteryDate"), 0) 
			COALESCE(M."Quantity", 0) AS "TotalSell",
			COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
			COALESCE(M."TotalRetail", 0) AS "TotalRetail",
			COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			G."ShiftDistributeId"
		FROM GetData G 
			FULL JOIN MoneyData M ON G."LotteryTypeId" = M."LotteryTypeId" AND G."LotteryChannelId" = M."LotteryChannelId" AND G."LotteryDate" = M."LotteryDate"
		WHERE G."SalePointId" = v_salepoint_id AND G."ShiftDistributeId" = p_shift_dis_id
		
		UNION
		
		SELECT
			NULL,
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			COALESCE(crm_get_previous_remaining_v2(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE), 0) AS "FirstStore",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			--COALESCE(crm_get_current_store_of_sale_point_by_channel(v_salepoint_id,0,LT."LotteryTypeId",NULL), 0) 
			COALESCE(M."Quantity", 0) AS "TotalSell",
			COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
			COALESCE(M."TotalRetail", 0) AS "TotalRetail",
			COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			p_shift_dis_id
		FROM "Scratchcard" SC
			FULL JOIN LoadData L ON L."IsScratchcard" IS TRUE
				AND SC."LotteryChannelId" = L."LotteryChannelId"
				AND L."LotteryTypeId" = 3
			LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
			LEFT JOIN MoneyData M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
			LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
		WHERE SC."SalePointId" = v_salepoint_id
	) A
	LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
	WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
	ORDER BY A."LotteryDate",A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId";

END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_v2(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_v3(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_v3(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("MoneyData" text, "LotteryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
BEGIN
		
	SELECT 
		SD."ShiftId", SD."UserId", SD."SalePointId"
	INTO v_shift_id, v_user_id, v_salepoint_id
	FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;

	RETURN QUERY
	--Lấy tổng chuyển nhận
	WITH tmp AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			SP."SalePointName",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
			SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
			T."ShiftDistributeId"
		FROM "Transition" T 
			JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "LotteryType" LT	ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
		WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			SP."SalePointName",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."ShiftDistributeId",
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy master từ kho
	tmp2 AS (--GetInventory
		SELECT 
			I."SalePointId",
			SP."SalePointName",
			I."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			LC."LotteryChannelId",
			LC."LotteryChannelName"
		FROM "Inventory" I, "LotteryType" LT, "SalePoint" SP, "LotteryChannel" LC
		WHERE (I."LotteryDate" = p_lottery_date::DATE OR I."LotteryDate" = (p_lottery_date + INTERVAL '1 DAY') ::DATE) 
			AND LT."LotteryTypeId" <> 3
			AND I."SalePointId" = v_salepoint_id
			AND SP."SalePointId" = I."SalePointId"
			AND I."LotteryChannelId" = LC."LotteryChannelId"
		ORDER BY I."LotteryDate", I."LotteryChannelId"
	),
	--Hợp hai bảng tạm 
	tmp3 AS (--GetData
	
		SELECT 
			GI."LotteryDate",
			GI."SalePointId",
			GI."SalePointName",
			GI."LotteryChannelId",
			GI."LotteryChannelName",
			GI."LotteryTypeId",
			GI."LotteryTypeName",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			p_shift_dis_id AS "ShiftDistributeId"			
		FROM tmp2 GI 
			LEFT JOIN tmp L ON GI."LotteryDate" = L."LotteryDate" 
				AND L."IsScratchcard" IS FALSE
				AND GI."LotteryChannelId" = L."LotteryChannelId"
				AND GI."LotteryTypeId" = L."LotteryTypeId"
	),
	--Lấy tổng bán hàng
	tmp4 AS ( --MoneyData
		SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
	),
	--Tổng hợp lại
	tmp5 AS (
		SELECT 
			A."LotteryDate",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."LotteryTypeId",
			A."LotteryTypeName",
			A."FirstStore" AS "TotalStocks",
			A."LotteryTrans" AS "TotalTrans",
			A."LotteryReceive" AS "TotalReceived",
			A."LotteryReturn" AS "TotalReturns",
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell") AS "TotalRemaining",
			A."TotalSell" AS "TotalSold",
			A."TotalSoldMoney",
			A."TotalRetail",
			A."TotalRetailMoney",
			A."TotalWholesale",
			A."TotalWholesaleMoney",
			A."ShiftDistributeId",
			COALESCE(LC."ShortName",'Vé cào') AS "ShortName"
		FROM 
		(
			SELECT 
				G."LotteryDate",
				G."LotteryChannelId",
				G."LotteryChannelName",
				G."LotteryTypeId",
				G."LotteryTypeName",
				COALESCE(crm_get_previous_remaining_v3(G."ShiftDistributeId", G."LotteryChannelId", G."LotteryTypeId", G."LotteryDate", p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
				G."LotteryTrans",
				G."LotteryReceive",
				G."LotteryReturn" ,
				COALESCE(M."Quantity", 0) AS "TotalSell",
				COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
				COALESCE(M."TotalRetail", 0) AS "TotalRetail",
				COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
				COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
				COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
				G."ShiftDistributeId"
			FROM tmp3 G 
				FULL JOIN tmp4 M ON G."LotteryTypeId" = M."LotteryTypeId" AND G."LotteryChannelId" = M."LotteryChannelId" AND G."LotteryDate" = M."LotteryDate"
			WHERE G."SalePointId" = v_salepoint_id AND G."ShiftDistributeId" = p_shift_dis_id
			
			UNION
			
			SELECT
				NULL,
				LC."LotteryChannelId",
				LC."LotteryChannelName",
				LT."LotteryTypeId",
				LT."LotteryTypeName",
				COALESCE(crm_get_previous_remaining_v3(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
				COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
				COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
				COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
				COALESCE(M."Quantity", 0) AS "TotalSell",
				COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
				COALESCE(M."TotalRetail", 0) AS "TotalRetail",
				COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
				COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
				COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
				p_shift_dis_id
			FROM "Scratchcard" SC
				FULL JOIN tmp L ON L."IsScratchcard" IS TRUE
					AND SC."LotteryChannelId" = L."LotteryChannelId"
					AND L."LotteryTypeId" = 3
				LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
				LEFT JOIN tmp4 M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
				LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
			WHERE SC."SalePointId" = v_salepoint_id
		) A
		LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
		WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
		ORDER BY A."LotteryDate",A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId"
	),
	--Khách nợ
	tmp6 AS (
		SELECT 
			SUM(SPL."TotalValue") AS "TotalGuestDebt"
		FROM "SalePointLog" SPL 
		WHERE SPL."GuestId" IS NOT NULL	
			AND SPL."IsDeleted" IS FALSE
			AND SPL."ShiftDistributeId" = p_shift_dis_id
	),
	--Khách trả
	tmp7 AS (
		SELECT
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalTranferForGuest",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestPay",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestTransferConfirm",
				SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS FALSE) AS "TotalGuestTransferNotConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 3 AND GA."DoneTransfer" IS TRUE) AS "TotalPayForGuest"
		FROM "GuestAction" GA
		WHERE GA."IsDeleted" IS FALSE
			AND GA."ShiftDistributeId" = p_shift_dis_id
	),
	tmp8 AS (
		SELECT
			W."WinningTypeId",
			WT."WinningTypeName",
			SUM(W."WinningPrice") AS "WinningPrice"
		FROM "Winning" W
			JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
		WHERE W."ShiftDistributeId" = p_shift_dis_id
		GROUP BY
			W."WinningTypeId",
			WT."WinningTypeName"
	),
	tmp9 AS (
		SELECT
			SUM(W."WinningPrice") AS "WinningPrice",
			array_to_json(array_agg(W.*)) AS "WinningData"
		FROM tmp8 W
	),
	tmp10 AS (
		SELECT 
			SUM(T."TotalSoldMoney") AS "TotalSoldMoney"
		FROM tmp5 T
	),
	tmp11 AS (
		SELECT 
			SUM(T."TotalPrice") AS "TotalFeeOutSite"
		FROM crm_sale_point_get_list_fee_outsite(NOW()::TIMESTAMP, 0, p_shift_dis_id) T
	),
	tmp12 AS (
		SELECT
			0 AS "TotalGuestDebt",
			COALESCE(tmp7."TotalTranferForGuest", 0) AS "TotalTranferForGuest",
			COALESCE(tmp7."TotalGuestPay", 0) AS "TotalGuestPay",
			COALESCE(tmp7."TotalGuestTransferConfirm", 0) AS "TotalGuestTransferConfirm",
			COALESCE(tmp7."TotalGuestTransferNotConfirm", 0) AS "TotalGuestTransferNotConfirm",
			COALESCE(tmp7."TotalPayForGuest", 0) AS "TotalPayForGuest",
			COALESCE(tmp9."WinningPrice", 0) AS "WinningPrice",
			COALESCE(tmp11."TotalFeeOutSite", 0) AS "TotalFeeOutSite",
			tmp9."WinningData",
			COALESCE(tmp10."TotalSoldMoney", 0) AS "TotalSoldMoney"
		FROM tmp6, tmp7, tmp9, tmp10, tmp11
	),
	tmp13 AS (
		SELECT 
			T.*,
			(T."TotalSoldMoney"
			- T."TotalGuestDebt"
			+ T."TotalTranferForGuest"
			+ T."TotalGuestPay"
			- T."TotalPayForGuest"
		
			- T."TotalFeeOutSite"
			- T."WinningPrice"
			) AS "TotalMoneyReturn"
		FROM tmp12 T
	)
	SELECT 
	(
		SELECT 
			TO_JSONB(T.*)
		FROM tmp13 T
	)::TEXT AS "MoneyData",
	(
		SELECT
			array_to_json(array_agg(TO_JSONB(T.*)))
		FROM tmp5 T
	)::TEXT AS "LotteryData";
	

END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_v3(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_v4(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_v4(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalStocks" integer, "TotalTrans" bigint, "TotalReceived" bigint, "TotalReturns" bigint, "TotalRemaining" bigint, "TotalSold" integer, "TotalSoldMoney" numeric, "TotalRetail" integer, "TotalRetailMoney" numeric, "TotalWholesale" integer, "TotalWholesaleMoney" numeric, "ShiftDistributeId" integer, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
	v_is_shift INT;
BEGIN
		
	SELECT 
		SD."ShiftId", SD."UserId", SD."SalePointId"
	INTO v_shift_id, v_user_id, v_salepoint_id
	FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;
	RETURN QUERY
	WITH LoadData AS 
	(
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			SP."SalePointName",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
			SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
			T."ShiftDistributeId"
		FROM "Transition" T 
			JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "LotteryType" LT	ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
		WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			SP."SalePointName",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."ShiftDistributeId",
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	GetInventory AS 
	(
		SELECT 
			I."SalePointId",
			SP."SalePointName",
			I."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			LC."LotteryChannelId",
			LC."LotteryChannelName"
		FROM "Inventory" I, "LotteryType" LT, "SalePoint" SP, "LotteryChannel" LC
		WHERE (I."LotteryDate" = p_lottery_date::DATE OR I."LotteryDate" = (p_lottery_date + INTERVAL '1 DAY') ::DATE) 
			AND LT."LotteryTypeId" <> 3
			AND I."SalePointId" = v_salepoint_id
			AND SP."SalePointId" = I."SalePointId"
			AND I."LotteryChannelId" = LC."LotteryChannelId"
		ORDER BY I."LotteryDate", I."LotteryChannelId"
	),
	GetData AS 
	(
		SELECT 
			GI."LotteryDate",
			GI."SalePointId",
			GI."SalePointName",
			GI."LotteryChannelId",
			GI."LotteryChannelName",
			GI."LotteryTypeId",
			GI."LotteryTypeName",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			p_shift_dis_id AS "ShiftDistributeId"			
		FROM GetInventory GI 
			LEFT JOIN LoadData L ON GI."LotteryDate" = L."LotteryDate" 
				AND L."IsScratchcard" IS FALSE
				AND GI."LotteryChannelId" = L."LotteryChannelId"
				AND GI."LotteryTypeId" = L."LotteryTypeId"
	),
	MoneyData AS
	(
		SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
	)				
	SELECT 
		A."LotteryDate",
		A."LotteryChannelId",
		A."LotteryChannelName",
		A."LotteryTypeId",
		A."LotteryTypeName",
		(CASE WHEN A."LotteryTypeId" = 3 
		THEN
			A."FirstStore" - fn_totalreceived(v_salepoint_id, p_lottery_date,A."LotteryChannelId" , v_shift_id) 
		ELSE
			A."FirstStore"
		END) AS "FirstStore",
		A."LotteryTrans",
		(CASE WHEN A."LotteryTypeId" = 3
		THEN
			A."LotteryReceive" + fn_totalreceived(v_salepoint_id, p_lottery_date, A."LotteryChannelId",v_shift_id)
		ELSE
			A."LotteryReceive"
		END) AS "LotteryReceive",
		A."LotteryReturn" ,
		(CASE WHEN v_shift_id = 1
		THEN
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell" - fn_totalreceived(v_salepoint_id, p_lottery_date,A."LotteryChannelId" ,2))
		ELSE
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell")
		END ) AS "TotalRemaining",
		A."TotalSell",
		A."TotalSoldMoney",
		A."TotalRetail",
		A."TotalRetailMoney",
		A."TotalWholesale",
		A."TotalWholesaleMoney",
		A."ShiftDistributeId",
		COALESCE(LC."ShortName",'Vé cào')
	FROM 
	(
		SELECT 
			G."LotteryDate",
			G."LotteryChannelId",
			G."LotteryChannelName",
			G."LotteryTypeId",
			G."LotteryTypeName",
			COALESCE(crm_get_previous_remaining_v2(G."ShiftDistributeId", G."LotteryChannelId", G."LotteryTypeId", G."LotteryDate", p_lottery_date::DATE), 0) AS "FirstStore",
			G."LotteryTrans",
			G."LotteryReceive",
			G."LotteryReturn" ,
			--COALESCE(crm_get_current_store_of_sale_point_by_channel(G."SalePointId",G."LotteryChannelId",G."LotteryTypeId",G."LotteryDate"), 0) 
			COALESCE(M."Quantity", 0) AS "TotalSell",
			COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
			COALESCE(M."TotalRetail", 0) AS "TotalRetail",
			COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			G."ShiftDistributeId"
		FROM GetData G 
			FULL JOIN MoneyData M ON G."LotteryTypeId" = M."LotteryTypeId" AND G."LotteryChannelId" = M."LotteryChannelId" AND G."LotteryDate" = M."LotteryDate"
		WHERE G."SalePointId" = v_salepoint_id AND G."ShiftDistributeId" = p_shift_dis_id
		
		UNION
		
		SELECT
			NULL,
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			COALESCE(crm_get_previous_remaining_v2(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE), 0) AS "FirstStore",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			--COALESCE(crm_get_current_store_of_sale_point_by_channel(v_salepoint_id,0,LT."LotteryTypeId",NULL), 0) 
			COALESCE(M."Quantity", 0) AS "TotalSell",
			COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
			COALESCE(M."TotalRetail", 0) AS "TotalRetail",
			COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			p_shift_dis_id
		FROM "Scratchcard" SC
			FULL JOIN LoadData L ON L."IsScratchcard" IS TRUE
				AND SC."LotteryChannelId" = L."LotteryChannelId"
				AND L."LotteryTypeId" = 3
			LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
			LEFT JOIN MoneyData M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
			LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
		WHERE SC."SalePointId" = v_salepoint_id
	) A
	LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
	WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
	ORDER BY A."LotteryDate",A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId";

END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_v4(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_v5(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_v5(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("MoneyData" text, "LotteryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
BEGIN
		
	SELECT 
		SD."ShiftId", SD."UserId", SD."SalePointId"
	INTO v_shift_id, v_user_id, v_salepoint_id
	FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;

	RETURN QUERY
	--Lấy tổng chuyển nhận
	WITH tmp AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			SP."SalePointName",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
			SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
			T."ShiftDistributeId"
		FROM "Transition" T 
			JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "LotteryType" LT	ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
		WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			SP."SalePointName",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."ShiftDistributeId",
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy master từ kho
	tmp2 AS (--GetInventory
		SELECT 
			I."SalePointId",
			SP."SalePointName",
			I."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			LC."LotteryChannelId",
			LC."LotteryChannelName"
		FROM "Inventory" I, "LotteryType" LT, "SalePoint" SP, "LotteryChannel" LC
		WHERE (I."LotteryDate" = p_lottery_date::DATE OR I."LotteryDate" = (p_lottery_date + INTERVAL '1 DAY') ::DATE) 
			AND LT."LotteryTypeId" <> 3
			AND I."SalePointId" = v_salepoint_id
			AND SP."SalePointId" = I."SalePointId"
			AND I."LotteryChannelId" = LC."LotteryChannelId"
		ORDER BY I."LotteryDate", I."LotteryChannelId"
	),
	--Hợp hai bảng tạm 
	tmp3 AS (--GetData
	
		SELECT 
			GI."LotteryDate",
			GI."SalePointId",
			GI."SalePointName",
			GI."LotteryChannelId",
			GI."LotteryChannelName",
			GI."LotteryTypeId",
			GI."LotteryTypeName",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			p_shift_dis_id AS "ShiftDistributeId"			
		FROM tmp2 GI 
			LEFT JOIN tmp L ON GI."LotteryDate" = L."LotteryDate" 
				AND L."IsScratchcard" IS FALSE
				AND GI."LotteryChannelId" = L."LotteryChannelId"
				AND GI."LotteryTypeId" = L."LotteryTypeId"
	),
	--Lấy tổng bán hàng
	tmp4 AS ( --MoneyData
		SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
	),
	--Tổng hợp lại
	tmp5 AS (
		SELECT 
			A."LotteryDate",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."LotteryTypeId",
			A."LotteryTypeName",
			A."FirstStore" AS "TotalStocks",
			A."LotteryTrans" AS "TotalTrans",
			A."LotteryReceive" AS "TotalReceived",
			A."LotteryReturn" AS "TotalReturns",
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell") AS "TotalRemaining",
			A."TotalSell" AS "TotalSold",
			A."TotalSoldMoney",
			A."TotalRetail",
			A."TotalRetailMoney",
			A."TotalWholesale",
			A."TotalWholesaleMoney",
			A."ShiftDistributeId",
			COALESCE(LC."ShortName",'Vé cào') AS "ShortName"
		FROM 
		(
			SELECT 
				G."LotteryDate",
				G."LotteryChannelId",
				G."LotteryChannelName",
				G."LotteryTypeId",
				G."LotteryTypeName",
				COALESCE(crm_get_previous_remaining_v3(G."ShiftDistributeId", G."LotteryChannelId", G."LotteryTypeId", G."LotteryDate", p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
				G."LotteryTrans",
				G."LotteryReceive",
				G."LotteryReturn" ,
				COALESCE(M."Quantity", 0) AS "TotalSell",
				COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
				COALESCE(M."TotalRetail", 0) AS "TotalRetail",
				COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
				COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
				COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
				G."ShiftDistributeId"
			FROM tmp3 G 
				FULL JOIN tmp4 M ON G."LotteryTypeId" = M."LotteryTypeId" AND G."LotteryChannelId" = M."LotteryChannelId" AND G."LotteryDate" = M."LotteryDate"
			WHERE G."SalePointId" = v_salepoint_id AND G."ShiftDistributeId" = p_shift_dis_id
			
			UNION
			
			SELECT
				NULL,
				LC."LotteryChannelId",
				LC."LotteryChannelName",
				LT."LotteryTypeId",
				LT."LotteryTypeName",
				COALESCE(crm_get_previous_remaining_v3(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
				COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
				COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
				COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
				COALESCE(M."Quantity", 0) AS "TotalSell",
				COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
				COALESCE(M."TotalRetail", 0) AS "TotalRetail",
				COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
				COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
				COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
				p_shift_dis_id
			FROM "Scratchcard" SC
				FULL JOIN tmp L ON L."IsScratchcard" IS TRUE
					AND SC."LotteryChannelId" = L."LotteryChannelId"
					AND L."LotteryTypeId" = 3
				LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
				LEFT JOIN tmp4 M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
				LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
			WHERE SC."SalePointId" = v_salepoint_id
		) A
		LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
		WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
		ORDER BY A."LotteryDate",A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId"
	),
	--Khách nợ
	tmp6 AS (
		SELECT 
			SUM(SPL."TotalValue") AS "TotalGuestDebt"
		FROM "SalePointLog" SPL 
		WHERE SPL."GuestId" IS NOT NULL	
			AND SPL."IsDeleted" IS FALSE
			AND SPL."ShiftDistributeId" = p_shift_dis_id
	),
	--Khách trả
	tmp7 AS (
		SELECT
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS FALSE) AS "TotalTransferForGuestNotConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalTransferForGuestConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestPay",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestTransferConfirm",
				SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS FALSE) AS "TotalGuestTransferNotConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 3 AND GA."DoneTransfer" IS TRUE) AS "TotalPayForGuest"
		FROM "GuestAction" GA
		WHERE GA."IsDeleted" IS FALSE
			AND GA."ShiftDistributeId" = p_shift_dis_id
	),
	tmp8 AS (
		SELECT
			W."WinningTypeId",
			WT."WinningTypeName",
			SUM(W."WinningPrice") AS "WinningPrice"
		FROM "Winning" W
			JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
		WHERE W."ShiftDistributeId" = p_shift_dis_id
		GROUP BY
			W."WinningTypeId",
			WT."WinningTypeName"
	),
	tmp9 AS (
		SELECT
			SUM(W."WinningPrice") AS "WinningPrice",
			array_to_json(array_agg(W.*)) AS "WinningData"
		FROM tmp8 W
	),
	tmp10 AS (
		SELECT 
			SUM(T."TotalSoldMoney") AS "TotalSoldMoney"
		FROM tmp5 T
	),
	tmp11 AS (
		SELECT 
			SUM(T."TotalPrice") AS "TotalFeeOutSite"
		FROM crm_sale_point_get_list_fee_outsite(NOW()::TIMESTAMP, 0, p_shift_dis_id) T
	),
	tmp12 AS (
		SELECT
			0 AS "TotalGuestDebt",
			COALESCE(tmp7."TotalTransferForGuestConfirm", 0) AS "TotalTransferForGuestConfirm",
			COALESCE(tmp7."TotalTransferForGuestNotConfirm", 0) AS "TotalTransferForGuestNotConfirm",
			COALESCE(tmp7."TotalGuestPay", 0) AS "TotalGuestPay",
			COALESCE(tmp7."TotalGuestTransferConfirm", 0) AS "TotalGuestTransferConfirm",
			COALESCE(tmp7."TotalGuestTransferNotConfirm", 0) AS "TotalGuestTransferNotConfirm",
			COALESCE(tmp7."TotalPayForGuest", 0) AS "TotalPayForGuest",
			COALESCE(tmp9."WinningPrice", 0) AS "WinningPrice",
			COALESCE(tmp11."TotalFeeOutSite", 0) AS "TotalFeeOutSite",
			tmp9."WinningData",
			COALESCE(tmp10."TotalSoldMoney", 0) AS "TotalSoldMoney"
		FROM tmp6, tmp7, tmp9, tmp10, tmp11
	),
	tmp13 AS (
		SELECT 
			T.*,
			(T."TotalSoldMoney"
			- T."TotalGuestDebt"
			+ T."TotalTransferForGuestConfirm"
			+ T."TotalGuestPay"
			- T."TotalPayForGuest"
		
			- T."TotalFeeOutSite"
			- T."WinningPrice"
			) AS "TotalMoneyReturn"
		FROM tmp12 T
	)
	SELECT 
	(
		SELECT 
			TO_JSONB(T.*)
		FROM tmp13 T
	)::TEXT AS "MoneyData",
	(
		SELECT
			array_to_json(array_agg(TO_JSONB(T.*)))
		FROM tmp5 T
	)::TEXT AS "LotteryData";

END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_v5(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_v5_reuse(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_v5_reuse(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("MoneyData" text, "LotteryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_user_id INT;
    v_salepoint_id INT;
    v_shift_id INT;
    v_quantity INT;
    v_total_money NUMERIC;
BEGIN
    SELECT 
        SD."ShiftId", SD."UserId", SD."SalePointId"
    INTO v_shift_id, v_user_id, v_salepoint_id
    FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;
    RETURN QUERY
    --Lấy tổng chuyển nhận
    WITH tmp AS (
        SELECT
            (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
            SP."SalePointName",
            T."LotteryDate",
            T."LotteryChannelId",
            LC."LotteryChannelName",
            LT."LotteryTypeId",
            LT."LotteryTypeName",
            T."IsScratchcard",
            SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
                            WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
            SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
                            WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
            SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
                            WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
            T."ShiftDistributeId"
        FROM "Transition" T 
            JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
            JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
            JOIN "LotteryType" LT   ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
        WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2 
        GROUP BY
            (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
            SP."SalePointName",
            T."LotteryChannelId",
            LC."LotteryChannelName",
            T."LotteryDate",
            LT."LotteryTypeId",
            LT."LotteryTypeName",
            T."ShiftDistributeId",
            T."IsScratchcard"
        ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
    ),
    --Lấy tổng bán hàng
    tmp4 AS ( --MoneyData
        SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
    ),
    --Tổng hợp lại
    tmp5 AS (
        SELECT 
            A."LotteryDate",
            A."LotteryChannelId",
            A."LotteryChannelName",
            A."LotteryTypeId",
            A."LotteryTypeName",
            A."FirstStore" AS "TotalStocks",
            A."LotteryTrans" AS "TotalTrans",
            A."LotteryReceive" AS "TotalReceived",
            A."LotteryReturn" AS "TotalReturns",
            (A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell") AS "TotalRemaining",
            A."TotalSell" AS "TotalSold",
            A."TotalSoldMoney",
            A."TotalRetail",
            A."TotalRetailMoney",
            A."TotalWholesale",
            A."TotalWholesaleMoney",
            A."ShiftDistributeId",
            COALESCE(LC."ShortName",'Vé cào') AS "ShortName"
        FROM 
        (
            SELECT
                NULL AS "LotteryDate",
                LC."LotteryChannelId",
                LC."LotteryChannelName",
                LT."LotteryTypeId",
                LT."LotteryTypeName",
                COALESCE(crm_get_previous_remaining_v3(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
                COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
                COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
                COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
                COALESCE(M."Quantity", 0) AS "TotalSell",
                COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
                COALESCE(M."TotalRetail", 0) AS "TotalRetail",
                COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
                COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
                COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
                p_shift_dis_id AS "ShiftDistributeId"
            FROM "Scratchcard" SC
                FULL JOIN tmp L ON L."IsScratchcard" IS TRUE
                    AND SC."LotteryChannelId" = L."LotteryChannelId"
                    AND L."LotteryTypeId" = 3
                LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
                LEFT JOIN tmp4 M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
                LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
            WHERE SC."SalePointId" = v_salepoint_id
        ) A
        LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
        WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
        ORDER BY A."LotteryDate",A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId"
    ),
    --Khách nợ
    tmp6 AS (
        SELECT 
            SUM(SPL."TotalValue") AS "TotalGuestDebt"
        FROM "SalePointLog" SPL 
        WHERE SPL."GuestId" IS NOT NULL 
            AND SPL."IsDeleted" IS FALSE
            AND SPL."ShiftDistributeId" = p_shift_dis_id
    ),
    --Khách trả
    tmp7 AS (
        SELECT
            SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS FALSE) AS "TotalTransferForGuestNotConfirm",
            SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalTransferForGuestConfirm",
            SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestPay",
            SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestTransferConfirm",
                SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS FALSE) AS "TotalGuestTransferNotConfirm",
            SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 3 AND GA."DoneTransfer" IS TRUE) AS "TotalPayForGuest"
        FROM "GuestAction" GA
        WHERE GA."IsDeleted" IS FALSE
            AND GA."ShiftDistributeId" = p_shift_dis_id
    ),
    tmp8 AS (
        SELECT
            W."WinningTypeId",
            WT."WinningTypeName",
            SUM(W."WinningPrice") AS "WinningPrice"
        FROM "Winning" W
            JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
        WHERE W."ShiftDistributeId" = p_shift_dis_id
        GROUP BY
            W."WinningTypeId",
            WT."WinningTypeName"
    ),
    tmp9 AS (
        SELECT
            SUM(W."WinningPrice") AS "WinningPrice",
            array_to_json(array_agg(W.*)) AS "WinningData"
        FROM tmp8 W
    ),
    tmp10 AS (
        SELECT 
            SUM(SL."TotalValue") AS "TotalSoldMoney"
        FROM "SalePointLog" SL WHERE SL."ShiftDistributeId" = p_shift_dis_id AND SL."IsDeleted" IS FALSE
    ),
    tmp11 AS (
        SELECT 
            SUM(T."TotalPrice") AS "TotalFeeOutSite"
        FROM crm_sale_point_get_list_fee_outsite(NOW()::TIMESTAMP, 0, p_shift_dis_id) T
    ),
    tmp12 AS (
        SELECT
            0 AS "TotalGuestDebt",
            COALESCE(tmp7."TotalTransferForGuestConfirm", 0) AS "TotalTransferForGuestConfirm",
            COALESCE(tmp7."TotalTransferForGuestNotConfirm", 0) AS "TotalTransferForGuestNotConfirm",
            COALESCE(tmp7."TotalGuestPay", 0) AS "TotalGuestPay",
            COALESCE(tmp7."TotalGuestTransferConfirm", 0) AS "TotalGuestTransferConfirm",
            COALESCE(tmp7."TotalGuestTransferNotConfirm", 0) AS "TotalGuestTransferNotConfirm",
            COALESCE(tmp7."TotalPayForGuest", 0) AS "TotalPayForGuest",
            COALESCE(tmp9."WinningPrice", 0) AS "WinningPrice",
            COALESCE(tmp11."TotalFeeOutSite", 0) AS "TotalFeeOutSite",
            tmp9."WinningData",
            COALESCE(tmp10."TotalSoldMoney", 0) AS "TotalSoldMoney"
        FROM tmp6, tmp7, tmp9, tmp10, tmp11
    ),
    tmp13 AS (
        SELECT 
            T.*,
            (T."TotalSoldMoney"
            - T."TotalGuestDebt"
            + T."TotalTransferForGuestConfirm"
            + T."TotalGuestPay"
            - T."TotalPayForGuest"
            - T."TotalFeeOutSite"
            - T."WinningPrice"
            ) AS "TotalMoneyReturn"
        FROM tmp12 T
    )
    SELECT 
    (
        SELECT 
            TO_JSONB(T.*)
        FROM tmp13 T
    )::TEXT AS "MoneyData",
    (
        SELECT
            array_to_json(array_agg(TO_JSONB(T.*)))
        FROM tmp5 T WHERE T."LotteryDate" IS NULL
    )::TEXT AS "LotteryData";
END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_v5_reuse(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_v6(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_v6(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("MoneyData" text, "LotteryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
BEGIN
		
	SELECT 
		SD."ShiftId", SD."UserId", SD."SalePointId"
	INTO v_shift_id, v_user_id, v_salepoint_id
	FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;

	RETURN QUERY
	--Lấy tổng chuyển nhận
	WITH tmp AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			SP."SalePointName",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
			SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
			T."ShiftDistributeId"
		FROM "Transition" T 
			JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "LotteryType" LT	ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
		WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2 
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			SP."SalePointName",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."ShiftDistributeId",
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy master từ kho
	tmp2 AS (--GetInventory
		SELECT 
			I."SalePointId",
			SP."SalePointName",
			I."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			LC."LotteryChannelId",
			LC."LotteryChannelName"
		FROM "Inventory" I, "LotteryType" LT, "SalePoint" SP, "LotteryChannel" LC
		WHERE (I."LotteryDate" = p_lottery_date::DATE OR I."LotteryDate" = (p_lottery_date + INTERVAL '1 DAY') ::DATE) 
			AND LT."LotteryTypeId" <> 3
			AND I."SalePointId" = v_salepoint_id
			AND SP."SalePointId" = I."SalePointId"
			AND I."LotteryChannelId" = LC."LotteryChannelId"
		ORDER BY I."LotteryDate", I."LotteryChannelId"
	),
	--Hợp hai bảng tạm 
	tmp3 AS (--GetData
	
		SELECT 
			GI."LotteryDate",
			GI."SalePointId",
			GI."SalePointName",
			GI."LotteryChannelId",
			GI."LotteryChannelName",
			GI."LotteryTypeId",
			GI."LotteryTypeName",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			p_shift_dis_id AS "ShiftDistributeId"			
		FROM tmp2 GI 
			LEFT JOIN tmp L ON GI."LotteryDate" = L."LotteryDate" 
				AND L."IsScratchcard" IS FALSE
				AND GI."LotteryChannelId" = L."LotteryChannelId"
				AND GI."LotteryTypeId" = L."LotteryTypeId"
	),
	--Lấy tổng bán hàng
	tmp4 AS ( --MoneyData
		SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
	),
	--Tổng hợp lại
	tmp5 AS (
		SELECT 
			A."LotteryDate",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."LotteryTypeId",
			A."LotteryTypeName",
			A."FirstStore" AS "TotalStocks",
			A."LotteryTrans" AS "TotalTrans",
			A."LotteryReceive" AS "TotalReceived",
			A."LotteryReturn" AS "TotalReturns",
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell") AS "TotalRemaining",
			A."TotalSell" AS "TotalSold",
			A."TotalSoldMoney",
			A."TotalRetail",
			A."TotalRetailMoney",
			A."TotalWholesale",
			A."TotalWholesaleMoney",
			A."ShiftDistributeId",
			COALESCE(LC."ShortName",'Vé cào') AS "ShortName"
		FROM 
		(
			SELECT 
				G."LotteryDate",
				G."LotteryChannelId",
				G."LotteryChannelName",
				G."LotteryTypeId",
				G."LotteryTypeName",
				COALESCE(crm_get_previous_remaining_v3(G."ShiftDistributeId", G."LotteryChannelId", G."LotteryTypeId", G."LotteryDate", p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
				G."LotteryTrans",
				G."LotteryReceive",
				G."LotteryReturn" ,
				COALESCE(M."Quantity", 0) AS "TotalSell",
				COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
				COALESCE(M."TotalRetail", 0) AS "TotalRetail",
				COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
				COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
				COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
				G."ShiftDistributeId"
			FROM tmp3 G 
				FULL JOIN tmp4 M ON G."LotteryTypeId" = M."LotteryTypeId" AND G."LotteryChannelId" = M."LotteryChannelId" AND G."LotteryDate" = M."LotteryDate"
			WHERE G."SalePointId" = v_salepoint_id AND G."ShiftDistributeId" = p_shift_dis_id
			
			UNION
			
			SELECT
				NULL,
				LC."LotteryChannelId",
				LC."LotteryChannelName",
				LT."LotteryTypeId",
				LT."LotteryTypeName",
				COALESCE(crm_get_previous_remaining_v3(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE,p_user_role), 0) AS "FirstStore",
				COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
				COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
				COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
				COALESCE(M."Quantity", 0) AS "TotalSell",
				COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
				COALESCE(M."TotalRetail", 0) AS "TotalRetail",
				COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
				COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
				COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
				p_shift_dis_id
			FROM "Scratchcard" SC
				FULL JOIN tmp L ON L."IsScratchcard" IS TRUE
					AND SC."LotteryChannelId" = L."LotteryChannelId"
					AND L."LotteryTypeId" = 3
				LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
				LEFT JOIN tmp4 M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
				LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
			WHERE SC."SalePointId" = v_salepoint_id
		) A
		LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
		WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
		ORDER BY A."LotteryDate",A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId"
	),
	--Khách nợ
	tmp6 AS (
		SELECT 
			SUM(SPL."TotalValue") AS "TotalGuestDebt"
		FROM "SalePointLog" SPL 
		WHERE SPL."GuestId" IS NOT NULL	
			AND SPL."IsDeleted" IS FALSE
			AND SPL."ShiftDistributeId" = p_shift_dis_id
	),
	--Khách trả
	tmp7 AS (
		SELECT
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS FALSE) AS "TotalTransferForGuestNotConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalTransferForGuestConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 1 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestPay",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS TRUE) AS "TotalGuestTransferConfirm",
				SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 2 AND GA."FormPaymentId" = 2 AND GA."DoneTransfer" IS FALSE) AS "TotalGuestTransferNotConfirm",
			SUM(GA."TotalPrice") FILTER (WHERE GA."GuestActionTypeId" = 3 AND GA."DoneTransfer" IS TRUE) AS "TotalPayForGuest"
		FROM "GuestAction" GA
		WHERE GA."IsDeleted" IS FALSE
			AND GA."ShiftDistributeId" = p_shift_dis_id
	),
	tmp8 AS (
		SELECT
			W."WinningTypeId",
			WT."WinningTypeName",
			SUM(W."WinningPrice") AS "WinningPrice"
		FROM "Winning" W
			JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
		WHERE W."ShiftDistributeId" = p_shift_dis_id
		GROUP BY
			W."WinningTypeId",
			WT."WinningTypeName"
	),
	tmp9 AS (
		SELECT
			SUM(W."WinningPrice") AS "WinningPrice",
			array_to_json(array_agg(W.*)) AS "WinningData"
		FROM tmp8 W
	),
	tmp10 AS (
		SELECT 
			SUM(T."TotalSoldMoney") AS "TotalSoldMoney"
		FROM tmp5 T
	),
	tmp11 AS (
		SELECT 
			SUM(T."TotalPrice") AS "TotalFeeOutSite"
		FROM crm_sale_point_get_list_fee_outsite(NOW()::TIMESTAMP, 0, p_shift_dis_id) T
	),
	tmp12 AS (
		SELECT
			0 AS "TotalGuestDebt",
			COALESCE(tmp7."TotalTransferForGuestConfirm", 0) AS "TotalTransferForGuestConfirm",
			COALESCE(tmp7."TotalTransferForGuestNotConfirm", 0) AS "TotalTransferForGuestNotConfirm",
			COALESCE(tmp7."TotalGuestPay", 0) AS "TotalGuestPay",
			COALESCE(tmp7."TotalGuestTransferConfirm", 0) AS "TotalGuestTransferConfirm",
			COALESCE(tmp7."TotalGuestTransferNotConfirm", 0) AS "TotalGuestTransferNotConfirm",
			COALESCE(tmp7."TotalPayForGuest", 0) AS "TotalPayForGuest",
			COALESCE(tmp9."WinningPrice", 0) AS "WinningPrice",
			COALESCE(tmp11."TotalFeeOutSite", 0) AS "TotalFeeOutSite",
			tmp9."WinningData",
			COALESCE(tmp10."TotalSoldMoney", 0) AS "TotalSoldMoney"
		FROM tmp6, tmp7, tmp9, tmp10, tmp11
	),
	tmp13 AS (
		SELECT 
			T.*,
			(T."TotalSoldMoney"
			- T."TotalGuestDebt"
			+ T."TotalTransferForGuestConfirm"
			+ T."TotalGuestPay"
			- T."TotalPayForGuest"
		
			- T."TotalFeeOutSite"
			- T."WinningPrice"
			) AS "TotalMoneyReturn"
		FROM tmp12 T
	)
	SELECT 
	(
		SELECT 
			TO_JSONB(T.*)
		FROM tmp13 T
	)::TEXT AS "MoneyData",
	(
		SELECT
			array_to_json(array_agg(TO_JSONB(T.*)))
		FROM tmp5 T WHERE T."LotteryDate" IS NULL
	)::TEXT AS "LotteryData";

END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_v6(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_data_finish_shift_without_lottery(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_data_finish_shift_without_lottery(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone DEFAULT now()) RETURNS TABLE("LotteryDate" date, "LotteryChannelId" integer, "LotteryChannelName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalStocks" integer, "TotalTrans" bigint, "TotalReceived" bigint, "TotalReturns" bigint, "TotalRemaining" bigint, "TotalSold" integer, "TotalSoldMoney" numeric, "TotalRetail" integer, "TotalRetailMoney" numeric, "TotalWholesale" integer, "TotalWholesaleMoney" numeric, "ShiftDistributeId" integer, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_id INT;
	v_salepoint_id INT;
	v_shift_id INT;
	v_quantity INT;
	v_total_money NUMERIC;
	v_is_shift INT;
BEGIN
		
	SELECT 
		SD."ShiftId", SD."UserId", SD."SalePointId"
	INTO v_shift_id, v_user_id, v_salepoint_id
	FROM "ShiftDistribute" SD WHERE SD."ShiftDistributeId" =  p_shift_dis_id;
	RETURN QUERY
	WITH LoadData AS 
	(
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			SP."SalePointName",
			T."LotteryDate",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 1 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 2 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReceive",
			SUM(CASE WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" IN (1, 3) THEN T."TotalTrans" 
							WHEN T."TransitionTypeId" = 3 AND LT."LotteryTypeId" = 2 THEN T."TotalTransDup" ELSE 0 END) AS "LotteryReturn",
			T."ShiftDistributeId"
		FROM "Transition" T 
			JOIN "SalePoint" SP ON (T."ToSalePointId" = SP."SalePointId" OR T."FromSalePointId" = SP."SalePointId")
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "LotteryType" LT	ON (CASE WHEN T."IsScratchcard" IS TRUE THEN LT."LotteryTypeId" = 3 ELSE LT."LotteryTypeId" <> 3 END)
		WHERE T."ShiftDistributeId" = p_shift_dis_id AND T."ConfirmStatusId" = 2 AND T."LotteryChannelId" >999
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			SP."SalePointName",
			T."LotteryChannelId",
			LC."LotteryChannelName",
			T."LotteryDate",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			T."ShiftDistributeId",
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	
	MoneyData AS
	(
		SELECT * FROM crm_get_total_sale_of_sale_point_by_shiftdis(v_salepoint_id, p_shift_dis_id)
	)				
	SELECT 
		NULL::Date,
		A."LotteryChannelId",
		A."LotteryChannelName",
		A."LotteryTypeId",
		A."LotteryTypeName",
		(CASE WHEN A."LotteryTypeId" = 3 
		THEN
			A."FirstStore" - fn_totalreceived(v_salepoint_id, p_lottery_date,A."LotteryChannelId" , v_shift_id) 
		ELSE
			A."FirstStore"
		END) AS "FirstStore",
		A."LotteryTrans",
		(CASE WHEN A."LotteryTypeId" = 3
		THEN
			A."LotteryReceive" + fn_totalreceived(v_salepoint_id, p_lottery_date, A."LotteryChannelId",v_shift_id)
		ELSE
			A."LotteryReceive"
		END) AS "LotteryReceive",
		A."LotteryReturn" ,
		(CASE WHEN v_shift_id = 1
		THEN
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell" - fn_totalreceived(v_salepoint_id, p_lottery_date,A."LotteryChannelId" ,2))
		ELSE
			(A."FirstStore" - A."LotteryTrans" + A."LotteryReceive" - A."TotalSell")
		END ) AS "TotalRemaining",
		A."TotalSell",
		A."TotalSoldMoney",
		A."TotalRetail",
		A."TotalRetailMoney",
		A."TotalWholesale",
		A."TotalWholesaleMoney",
		A."ShiftDistributeId",
		COALESCE(LC."ShortName",'Vé cào')
	FROM 
	(

		SELECT
			NULL,
			LC."LotteryChannelId",
			LC."LotteryChannelName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			COALESCE(crm_get_previous_remaining_v2(p_shift_dis_id, SC."LotteryChannelId", 3, p_lottery_date::DATE, p_lottery_date::DATE), 0) AS "FirstStore",
			COALESCE(L."LotteryTrans", 0) AS "LotteryTrans",
			COALESCE(L."LotteryReceive", 0) AS "LotteryReceive",
			COALESCE(L."LotteryReturn", 0) AS "LotteryReturn",
			--COALESCE(crm_get_current_store_of_sale_point_by_channel(v_salepoint_id,0,LT."LotteryTypeId",NULL), 0) 
			COALESCE(M."Quantity", 0) AS "TotalSell",
			COALESCE(M."TotalSoldMoney", 0) AS "TotalSoldMoney",
			COALESCE(M."TotalRetail", 0) AS "TotalRetail",
			COALESCE(M."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(M."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(M."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			p_shift_dis_id as "ShiftDistributeId"
		FROM "Scratchcard" SC
			FULL JOIN LoadData L ON L."IsScratchcard" IS TRUE
				AND SC."LotteryChannelId" = L."LotteryChannelId"
				AND L."LotteryTypeId" = 3
			LEFT JOIN "LotteryType" LT ON LT."LotteryTypeId" = 3 AND SC."SalePointId" = v_salepoint_id
			LEFT JOIN MoneyData M ON (LT."LotteryTypeId" = M."LotteryTypeId" AND M."LotteryChannelId" = SC."LotteryChannelId")
			LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SC."LotteryChannelId"
		WHERE SC."SalePointId" = v_salepoint_id
	) A
	LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
	WHERE A."FirstStore" <> 0 OR A."LotteryTrans" <> 0 OR A."LotteryReceive" <> 0 OR A."TotalSell" <> 0 OR A."LotteryTypeId" = 1
	ORDER BY A."LotteryTypeId" DESC, LC."DayIds", LC."LotteryChannelTypeId";

END;
$$;


ALTER FUNCTION public.crm_report_data_finish_shift_without_lottery(p_user_role integer, p_shift_dis_id integer, p_lottery_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_delete_all_loto(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_delete_all_loto(p_action_by integer, p_action_by_name character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_mess TEXT;
	v_id INT;
BEGIN
	-- update lotonew table
	update public."LotoNew"
	 set "IsDelete" = false,
	 "ActionBy" = p_action_by,
	 "Time" = Now()
	where "IsDelete" = true;
	
	-- update transactionType table 
	update public."Transaction"
	 set "IsDeleted" = true,
	 "ActionBy" = p_action_by,
	 "ActionByName" = p_action_by_name,
	 "ModifyDate" = Now()
	where "TransactionTypeId" = 3 and "IsDeleted" = false;
	v_mess := 'Thao tác thành công';
	v_id := 1;
	

	RETURN QUERY 
	SELECT 	v_id, v_mess;

END;
$$;


ALTER FUNCTION public.crm_report_delete_all_loto(p_action_by integer, p_action_by_name character varying) OWNER TO postgres;

--
-- Name: crm_report_delete_shift_transfer(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_delete_shift_transfer(p_action_by integer, p_action_by_name character varying, p_shift_distribute_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_check INT;
	v_user_id INT;
	v_user_name VARCHAR;
	v_salepoint_id INT;
BEGIN
	SELECT "ShiftDistributeId"
		INTO v_check
		FROM "ShiftTransfer" WHERE "ShiftDistributeId"= p_shift_distribute_id LIMIT 1;
	
	IF(COALESCE(v_check, 0)=0) THEN
		v_id := -1;
		v_mess := 'Ca làm việc chưa kết thúc HOẶC đã được huỷ kết ca';
	ELSE
		--GET DATA
		SELECT
			SD."SalePointId",
			SD."UserId",
			U."FullName"
		INTO
			v_salepoint_id,
			v_user_id,
			v_user_name
		FROM "ShiftDistribute" SD 
			JOIN "User" U ON U."UserId" = Sd."UserId"
			WHERE SD."ShiftDistributeId"  = v_check;
		--DELETE
		DELETE FROM "ShiftTransfer" 
			WHERE "ShiftDistributeId" = v_check;
		--INSERT LOG
		INSERT INTO "ShiftTransferLog" (
			"ActionBy",
			"ActionByName",
			"ActionDate",
			"ShiftDistributeId",
			"SalePointId",
			"UserId",
			"UserName"
		)VALUES(
			p_action_by,
			p_action_by_name,
			NOW(),
			v_check,
			v_salepoint_id,
			v_user_id,
			v_user_name
		);
		 
		v_id := 1;
		v_mess := 'Thao tác thành công';
	END IF;
	

	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_report_delete_shift_transfer(p_action_by integer, p_action_by_name character varying, p_shift_distribute_id integer) OWNER TO postgres;

--
-- Name: crm_report_get_all_lottery_data_of_staff(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_all_lottery_data_of_staff(p_month text) RETURNS TABLE("TotalProfitInAMonth" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	with tmp AS(
		SELECT SUM(SPL."TotalValue") AS "TotalLotteryValue" FROM "SalePointLog" SPL 
			WHERE TO_CHAR(SPL."LotteryDate",'YYYY-MM') = p_month AND "LotteryTypeId" = 1
	), tmp2 AS(
		SELECT SPL."TotalValue" AS "TotalSratchLotteryValue" FROM "SalePointLog" SPL 
			WHERE TO_CHAR(SPL."LotteryDate",'YYYY-MM') = p_month AND "LotteryTypeId" = 3
	), tmp3 AS(
		SELECT SUM(T."Price") AS "TotalVietlot" FROM "Transaction" T 
			WHERE TO_CHAR(T."Date",'YYYY-MM') = p_month AND T."TransactionTypeId" = 2
	), tmp4 AS(
		SELECT SUM(T."Price") AS "TotalLoto" FROM "Transaction" T 
			WHERE TO_CHAR(T."Date",'YYYY-MM') = p_month AND T."TransactionTypeId" = 3
	)
	SELECT json_build_object('TotalVietlot',T."TotalVietlot")::TEXT FROM tmp3 T
	UNION
	SELECT json_build_object('TotalLotteryValue',T."TotalLotteryValue")::TEXT FROM tmp T
	UNION 
	SELECT json_build_object('TotalSratchLotteryValue',T."TotalSratchLotteryValue")::TEXT FROM tmp2 T
	UNION
	SELECT json_build_object('TotalLoto',T."TotalLoto")::TEXT FROM tmp4 T;
	
END;
$$;


ALTER FUNCTION public.crm_report_get_all_lottery_data_of_staff(p_month text) OWNER TO postgres;

--
-- Name: crm_report_get_data_item_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_item_in_month(p_month character varying) RETURNS TABLE("ItemId" integer, "SalePointId" integer, "TotalReceive" integer, "TotalRemaining" integer, "Import" integer, "Export" integer, "Use" integer, "ImportPrice" integer, "ExportPrice" integer, "UsePrice" integer, "Quotation" integer, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "BalancePrice" integer, "AVGPrice" numeric, "TypeOfItemId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_last_date DATE := ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date;
	v_pre_last_date DATE := ((p_month||'-01' )::date - interval '1 day')::date;
	v_check BOOLEAN:= (SELECT COALESCE(IL."TotalRemaining",0)::BOOLEAN FROM "ItemFullLog" IL WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date AND  IL."Month"::date >= (p_month||'-01' )::date LIMIT 1);
BEGIN
	

	--Lấy số tồn cuối tháng 
	
		
	IF v_check IS NOT NULL THEN 
	RETURN QUERY
	WITH tmp AS(
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate"::TIMESTAMP DESC) AS "Id",
				IL."ItemId",
				IL."SalePointId",
				IL."TotalRemaining",
				IL."CreateDate",
				IL."Quantity",
				IL."ItemTypeId",
				IL."TotalPrice",
				IL."Month",
				COALESCE(IL."ModifyBy", IL."CreateBy") AS "ActionBy",
				COALESCE(IL."ModifyByName", IL."CreateByName") AS "ActionByName",
				COALESCE(IL."ModifyDate", IL."CreateDate") AS "ActionDate",
				IL."BalancePrice"
		FROM "ItemFullLog" IL
		WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date
		AND  IL."Month"::date >= (p_month||'-01' )::date
	
	),

		--Lấy số tồn đầu tháng 
	tmp1 AS(
			SELECT 
				ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate" DESC) AS "Id",
					IL."ItemId",
					IL."SalePointId",
					IL."TotalRemaining",
					IL."CreateDate",
					IL."Month"
			FROM "ItemFullLog" IL
			WHERE IL."Month"::date <= ((p_month||'-01' )::date - interval '1 day')::date
	),
	--Tính tổng sử dụng trong tháng
	tmp2 AS(
		SELECT 
			tm."SalePointId",
			tm."ItemId",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1) AS "Import",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =2) AS "Export",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =3) AS "Use",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =1) AS "ImportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ExportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =3) AS "UsePrice"
		FROM tmp tm
		WHERE date_part('month',  tm."Month")  = date_part('month',  to_date(p_month, 'YYYY-MM'))
		GROUP BY tm."SalePointId", tm."ItemId"
),
	tmp3 AS(
		SELECT
			COALESCE(A."ItemId",B."ItemId") AS "ItemId",
			COALESCE(A."SalePointId",B."SalePointId") AS "SalePointId",
			COALESCE(B."TotalRemaining",0) ::INT AS "TotalReceive",
			COALESCE(A."TotalRemaining",0) ::INT AS "TotalRemaining",
			COALESCE(C."Import",0)::INT AS "Import",
 			COALESCE(C."Export",0)::INT  AS "Export",
 			COALESCE(C."Use",0)::INT  AS "Use",
			COALESCE(C."ImportPrice",0)::INT  AS "ImportPrice",
 			COALESCE(C."ExportPrice",0)::INT  AS "ExportPrice",
 			COALESCE(C."UsePrice",0)::INT  AS "UsePrice",
			I."Quotation",
			(CASE WHEN COALESCE(A."TotalRemaining",0) / I."Quotation" = 0 THEN 'Cần bổ sung gấp'
					WHEN COALESCE(A."TotalRemaining",0) ::NUMERIC /I."Quotation" > 0.5 THEN 'Đủ Dùng'
					ELSE 'Cần bổ sung gấp'
				END ) AS "Note",
			A."ActionBy",
			A."ActionByName",
			A."ActionDate",
			A."BalancePrice",
			(CASE WHEN A."TotalRemaining"= 0 THEN I."Price" ELSE A."BalancePrice" / A."TotalRemaining" END):: NUMERIC AS AVGPrice,
			TOI."TypeOfItemId"
		FROM tmp A
			FULL JOIN tmp1 B ON A."SalePointId"= B."SalePointId" AND A."ItemId"= B."ItemId" AND A."Id"= B."Id"
			LEFT JOIN tmp2 C ON COALESCE(A."SalePointId",B."SalePointId") = C."SalePointId" AND COALESCE(A."ItemId",B."ItemId")= C."ItemId"
			LEFT JOIN "Item" I ON  A."ItemId"=I."ItemId" 
			JOIN "TypeOfItem" TOI ON  TOI."TypeOfItemId"= I."TypeOfItemId" 
		WHERE 
			A."Id" =1 OR B."Id" = 1
	)
		SELECT * FROM tmp3;
ELSE 
	RETURN QUERY
	WITH tmp AS(
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate"::TIMESTAMP DESC) AS "Id",
				IL."ItemId",
				IL."SalePointId",
				IL."TotalRemaining",
				IL."CreateDate",
				IL."Quantity",
				IL."ItemTypeId",
				IL."TotalPrice",
				IL."Month",
				COALESCE(IL."ModifyBy", IL."CreateBy") AS "ActionBy",
				COALESCE(IL."ModifyByName", IL."CreateByName") AS "ActionByName",
				COALESCE(IL."ModifyDate", IL."CreateDate") AS "ActionDate",
				IL."BalancePrice"
		FROM "ItemFullLog" IL
		WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date
	
	),

		--Lấy số tồn đầu tháng 
	tmp1 AS(
			SELECT 
				ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate" DESC) AS "Id",
					IL."ItemId",
					IL."SalePointId",
					IL."TotalRemaining",
					IL."CreateDate",
					IL."Month"
			FROM "ItemFullLog" IL
			WHERE IL."Month"::date <= ((p_month||'-01' )::date - interval '1 day')::date
	),
	--Tính tổng sử dụng trong tháng
	tmp2 AS(
		SELECT 
			tm."SalePointId",
			tm."ItemId",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1) AS "Import",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =2) AS "Export",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =3) AS "Use",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =1) AS "ImportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ExportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =3) AS "UsePrice"
		FROM tmp tm
		WHERE date_part('month',  tm."Month")  = date_part('month',  to_date(p_month, 'YYYY-MM'))
		GROUP BY tm."SalePointId", tm."ItemId"
),
	tmp3 AS(
		SELECT
			COALESCE(A."ItemId",B."ItemId") AS "ItemId",
			COALESCE(A."SalePointId",B."SalePointId") AS "SalePointId",
			COALESCE(B."TotalRemaining",0) ::INT AS "TotalReceive",
			COALESCE(A."TotalRemaining",0) ::INT AS "TotalRemaining",
			COALESCE(C."Import",0)::INT AS "Import",
 			COALESCE(C."Export",0)::INT  AS "Export",
 			COALESCE(C."Use",0)::INT  AS "Use",
			COALESCE(C."ImportPrice",0)::INT  AS "ImportPrice",
 			COALESCE(C."ExportPrice",0)::INT  AS "ExportPrice",
 			COALESCE(C."UsePrice",0)::INT  AS "UsePrice",
			I."Quotation",
			(CASE WHEN COALESCE(A."TotalRemaining",0) / I."Quotation" = 0 THEN 'Cần bổ sung gấp'
					WHEN COALESCE(A."TotalRemaining",0) ::NUMERIC /I."Quotation" > 0.5 THEN 'Đủ Dùng'
					ELSE 'Cần bổ sung gấp'
				END ) AS "Note",
			A."ActionBy",
			A."ActionByName",
			A."ActionDate",
			A."BalancePrice",
			(CASE WHEN A."TotalRemaining"= 0 THEN I."Price" ELSE A."BalancePrice" / A."TotalRemaining" END):: NUMERIC AS AVGPrice,
			TOI."TypeOfItemId"
		FROM tmp A
			FULL JOIN tmp1 B ON A."SalePointId"= B."SalePointId" AND A."ItemId"= B."ItemId" AND A."Id"= B."Id"
			LEFT JOIN tmp2 C ON COALESCE(A."SalePointId",B."SalePointId") = C."SalePointId" AND COALESCE(A."ItemId",B."ItemId")= C."ItemId"
			LEFT JOIN "Item" I ON  A."ItemId"=I."ItemId" 
			JOIN "TypeOfItem" TOI ON  TOI."TypeOfItemId"= I."TypeOfItemId" 
		WHERE 
			A."Id" =1 OR B."Id" = 1
	)
		SELECT * FROM tmp3;
END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_item_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_item_in_month_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_item_in_month_v2(p_month character varying) RETURNS TABLE("ItemId" integer, "SalePointId" integer, "TotalReceive" integer, "TotalRemaining" numeric, "Import" integer, "Export" integer, "Use" integer, "ImportPrice" integer, "ExportPrice" integer, "UsePrice" integer, "Quotation" integer, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "BalancePrice" numeric, "AVGPrice" integer, "TypeOfItemId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_last_date DATE := ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date;
	v_pre_last_date DATE := ((p_month||'-01' )::date - interval '1 day')::date;
BEGIN
	

	--Lấy số tồn cuối tháng 
	RETURN QUERY
	WITH tmp0 AS(
		SELECT 
-- 			ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate"::TIMESTAMP DESC) AS "Id",
				IL."ItemId",
				IL."SalePointId",
				IL."TotalRemaining",
				IL."CreateDate",
				IL."Quantity",
				IL."ItemTypeId",
				IL."TotalPrice",
				IL."Month",
				COALESCE(IL."ModifyBy", IL."CreateBy") AS "ActionBy",
				COALESCE(IL."ModifyByName", IL."CreateByName") AS "ActionByName",
				COALESCE(IL."ModifyDate", IL."CreateDate") AS "ActionDate",
				IL."BalancePrice"
		FROM "ItemFullLog" IL
		WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date
		ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp AS(
	SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" ORDER BY "CreateDate" DESC) AS "Id",
					T.* 
		FROM tmp0 T
		),
		--Lấy số tồn đầu tháng 
 tmp1_0 AS(
			SELECT 
					IL."ItemId",
					IL."SalePointId",
					IL."TotalRemaining",
					IL."CreateDate",
					IL."Month"
			FROM "ItemFullLog" IL
			WHERE IL."Month"::date <= ((p_month||'-01' )::date - interval '1 day')::date     
			ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp1 AS(
		SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" 	ORDER BY T."CreateDate" DESC) AS "Id",
					T.*
		FROM tmp1_0 T 
	
	),
	--Tính tổng sử dụng trong tháng
	tmp2 AS(
		SELECT 
			tm."SalePointId",
			tm."ItemId",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1) AS "Import",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =2) AS "Export",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =3) AS "Use",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =1) AS "ImportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ExportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =3) AS "UsePrice"
		FROM tmp tm
		WHERE date_part('month',  tm."Month")  = date_part('month',  to_date(p_month, 'YYYY-MM'))
		GROUP BY tm."SalePointId", tm."ItemId"
),
	tmp3 AS(
		SELECT
			COALESCE(A."ItemId",B."ItemId") AS "ItemId",
			COALESCE(A."SalePointId",B."SalePointId") AS "SalePointId",
			COALESCE(B."TotalRemaining",0) ::INT AS "TotalReceive",
			COALESCE(A."TotalRemaining",0) ::NUMERIC AS "TotalRemaining",
			COALESCE(C."Import",0)::INT AS "Import",
 			COALESCE(C."Export",0)::INT  AS "Export",
 			COALESCE(C."Use",0)::INT  AS "Use",
			COALESCE(C."ImportPrice",0)::INT  AS "ImportPrice",
 			COALESCE(C."ExportPrice",0)::INT  AS "ExportPrice",
 			COALESCE(C."UsePrice",0)::INT  AS "UsePrice",
			I."Quotation",
			(CASE WHEN COALESCE(A."TotalRemaining",0) / I."Quotation" = 0 THEN 'Cần bổ sung gấp'
					WHEN COALESCE(A."TotalRemaining",0) ::NUMERIC /I."Quotation" > 0.5 THEN 'Đủ Dùng'
					ELSE 'Cần bổ sung gấp'
				END ) AS "Note",
			A."ActionBy",
			A."ActionByName",
			A."ActionDate",
			A."BalancePrice",
			(CASE WHEN A."TotalRemaining"= 0 THEN I."Price" ELSE A."BalancePrice" / A."TotalRemaining" END):: INT AS AVGPrice,
			TOI."TypeOfItemId"
		FROM tmp A
			FULL JOIN tmp1 B ON A."SalePointId"= B."SalePointId" AND A."ItemId"= B."ItemId" AND A."Id"= B."Id"
			LEFT JOIN tmp2 C ON COALESCE(A."SalePointId",B."SalePointId") = C."SalePointId" AND COALESCE(A."ItemId",B."ItemId")= C."ItemId"
			LEFT JOIN "Item" I ON  A."ItemId"=I."ItemId" 
			JOIN "TypeOfItem" TOI ON  TOI."TypeOfItemId"= I."TypeOfItemId" 
		WHERE 
			A."Id" = 1 OR B."Id" = 1
	)
		SELECT * FROM tmp3;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_item_in_month_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_item_in_month_v3(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_item_in_month_v3(p_month character varying) RETURNS TABLE("ItemId" integer, "SalePointId" integer, "TotalReceive" integer, "TotalRemaining" numeric, "Import" integer, "Export" integer, "Use" integer, "ImportPrice" integer, "ExportPrice" integer, "UsePrice" integer, "Quotation" integer, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "BalancePrice" numeric, "AVGPrice" integer, "TypeOfItemId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_last_date DATE := ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date;
	v_pre_last_date DATE := ((p_month||'-01' )::date - interval '1 day')::date;
BEGIN
	

	--Lấy số tồn cuối tháng 
	RETURN QUERY
	WITH tmp0 AS(
		SELECT 
-- 			ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate"::TIMESTAMP DESC) AS "Id",
				IL."ItemId",
				IL."SalePointId",
				IL."TotalRemaining",
				IL."CreateDate",
				IL."Quantity",
				IL."ItemTypeId",
				IL."TotalPrice",
				IL."Month",
				COALESCE(IL."ModifyBy", IL."CreateBy") AS "ActionBy",
				COALESCE(IL."ModifyByName", IL."CreateByName") AS "ActionByName",
				COALESCE(IL."ModifyDate", IL."CreateDate") AS "ActionDate",
				IL."BalancePrice"
		FROM "ItemFullLog" IL
		WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date
		ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp AS(
	SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" ORDER BY "CreateDate" DESC) AS "Id",
					T.* 
		FROM tmp0 T
		),
		--Lấy số tồn đầu tháng 
 tmp1_0 AS(
			SELECT 
					IL."ItemId",
					IL."SalePointId",
					IL."TotalRemaining",
					IL."CreateDate",
					IL."Month"
			FROM "ItemFullLog" IL
			WHERE IL."Month"::date <= ((p_month||'-01' )::date - interval '1 day')::date     
			ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp1 AS(
		SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" 	ORDER BY T."CreateDate" DESC) AS "Id",
					T.*
		FROM tmp1_0 T 
	
	),
	--Tính tổng sử dụng trong tháng
	tmp2 AS(
		SELECT 
			tm."SalePointId",
			tm."ItemId",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1) AS "Import",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =2) AS "Export",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =3) AS "Use",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =1) - SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ImportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ExportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =3) AS "UsePrice"
		FROM tmp tm
		WHERE date_part('month',  tm."Month")  = date_part('month',  to_date(p_month, 'YYYY-MM'))
		GROUP BY tm."SalePointId", tm."ItemId"
),
	tmp3 AS(
		SELECT
			COALESCE(A."ItemId",B."ItemId") AS "ItemId",
			COALESCE(A."SalePointId",B."SalePointId") AS "SalePointId",
			COALESCE(B."TotalRemaining",0) ::INT AS "TotalReceive",
			COALESCE(A."TotalRemaining",0) ::NUMERIC AS "TotalRemaining",
			COALESCE(C."Import",0)::INT AS "Import",
 			COALESCE(C."Export",0)::INT  AS "Export",
 			COALESCE(C."Use",0)::INT  AS "Use",
			COALESCE(C."ImportPrice",0)::INT  AS "ImportPrice",
 			COALESCE(C."ExportPrice",0)::INT  AS "ExportPrice",
 			COALESCE(C."UsePrice",0)::INT  AS "UsePrice",
			I."Quotation",
			(CASE WHEN COALESCE(A."TotalRemaining",0) / I."Quotation" = 0 THEN 'Cần bổ sung gấp'
					WHEN COALESCE(A."TotalRemaining",0) ::NUMERIC /I."Quotation" > 0.5 THEN 'Đủ Dùng'
					ELSE 'Cần bổ sung gấp'
				END ) AS "Note",
			A."ActionBy",
			A."ActionByName",
			A."ActionDate",
			A."BalancePrice",
			(CASE WHEN A."TotalRemaining"= 0 THEN I."Price" ELSE A."BalancePrice" / A."TotalRemaining" END):: INT AS AVGPrice,
			TOI."TypeOfItemId"
		FROM tmp A
			FULL JOIN tmp1 B ON A."SalePointId"= B."SalePointId" AND A."ItemId"= B."ItemId" AND A."Id"= B."Id"
			LEFT JOIN tmp2 C ON COALESCE(A."SalePointId",B."SalePointId") = C."SalePointId" AND COALESCE(A."ItemId",B."ItemId")= C."ItemId"
			LEFT JOIN "Item" I ON  A."ItemId"=I."ItemId" 
			JOIN "TypeOfItem" TOI ON  TOI."TypeOfItemId"= I."TypeOfItemId" 
		WHERE 
			A."Id" = 1 OR B."Id" = 1
	)
		SELECT * FROM tmp3;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_item_in_month_v3(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_item_in_month_v4(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_item_in_month_v4(p_month character varying) RETURNS TABLE("ItemId" integer, "SalePointId" integer, "TotalReceive" integer, "TotalRemaining" numeric, "Import" integer, "Export" integer, "Use" integer, "ImportPrice" integer, "ExportPrice" integer, "UsePrice" integer, "Quotation" integer, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "BalancePrice" numeric, "AVGPrice" integer, "TypeOfItemId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_last_date DATE := ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date;
	v_pre_last_date DATE := ((p_month||'-01' )::date - interval '1 day')::date;
BEGIN
	

	--Lấy số tồn cuối tháng 
	RETURN QUERY
	WITH tmp0 AS(
		SELECT 
-- 			ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate"::TIMESTAMP DESC) AS "Id",
				IL."ItemId",
				IL."SalePointId",
				IL."TotalRemaining",
				IL."CreateDate",
				IL."Quantity",
				IL."ItemTypeId",
				IL."TotalPrice",
				IL."Month",
				COALESCE(IL."ModifyBy", IL."CreateBy") AS "ActionBy",
				COALESCE(IL."ModifyByName", IL."CreateByName") AS "ActionByName",
				COALESCE(IL."ModifyDate", IL."CreateDate") AS "ActionDate",
				IL."BalancePrice"
		FROM "ItemFullLog" IL
		WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date
		ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp AS(
	SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" ORDER BY "CreateDate" DESC) AS "Id",
					T.* 
		FROM tmp0 T
		),
		--Lấy số tồn đầu tháng 
 tmp1_0 AS(
			SELECT 
					IL."ItemId",
					IL."SalePointId",
					IL."TotalRemaining",
					IL."CreateDate",
					IL."Month"
			FROM "ItemFullLog" IL
			WHERE IL."Month"::date <= ((p_month||'-01' )::date - interval '1 day')::date     
			ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp1 AS(
		SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" 	ORDER BY T."CreateDate" DESC) AS "Id",
					T.*
		FROM tmp1_0 T 
	
	),
	--Tính tổng sử dụng trong tháng
	tmp2 AS(
		SELECT 
			tm."SalePointId",
			tm."ItemId",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1)  AS "Import",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =2) AS "Export",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =3) AS "Use",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =4) AS "NotCount",
			CASE WHEN tm."SalePointId" = 0 THEN SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =1) - SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) 
			ELSE  SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1) + SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =4) - SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) END AS"ImportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ExportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =3) AS "UsePrice"
		FROM tmp tm
		WHERE date_part('month',  tm."Month")  = date_part('month',  to_date(p_month, 'YYYY-MM'))
		GROUP BY tm."SalePointId", tm."ItemId"
),
	tmp3 AS(
		SELECT
			COALESCE(A."ItemId",B."ItemId") AS "ItemId",
			COALESCE(A."SalePointId",B."SalePointId") AS "SalePointId",
			COALESCE(B."TotalRemaining",0) ::INT AS "TotalReceive",
			COALESCE(A."TotalRemaining",0) ::NUMERIC AS "TotalRemaining",
			COALESCE(C."Import",0)::INT AS "Import",
 			COALESCE(C."Export",0)::INT - COALESCE(C."NotCount",0)::INT  AS "Export",
 			COALESCE(C."Use",0)::INT  AS "Use",
			COALESCE(C."ImportPrice",0)::INT  AS "ImportPrice",
 			COALESCE(C."ExportPrice",0)::INT  AS "ExportPrice",
 			COALESCE(C."UsePrice",0)::INT  AS "UsePrice",
			I."Quotation",
			(CASE WHEN COALESCE(A."TotalRemaining",0) / I."Quotation" = 0 THEN 'Cần bổ sung gấp'
					WHEN COALESCE(A."TotalRemaining",0) ::NUMERIC /I."Quotation" > 0.5 THEN 'Đủ Dùng'
					ELSE 'Cần bổ sung gấp'
				END ) AS "Note",
			A."ActionBy",
			A."ActionByName",
			A."ActionDate",
			A."BalancePrice",
			(CASE WHEN A."TotalRemaining"= 0 THEN I."Price" ELSE A."BalancePrice" / A."TotalRemaining" END):: INT AS AVGPrice,
			TOI."TypeOfItemId"
		FROM tmp A
			FULL JOIN tmp1 B ON A."SalePointId"= B."SalePointId" AND A."ItemId"= B."ItemId" AND A."Id"= B."Id"
			LEFT JOIN tmp2 C ON COALESCE(A."SalePointId",B."SalePointId") = C."SalePointId" AND COALESCE(A."ItemId",B."ItemId")= C."ItemId"
			LEFT JOIN "Item" I ON  A."ItemId"=I."ItemId" 
			JOIN "TypeOfItem" TOI ON  TOI."TypeOfItemId"= I."TypeOfItemId" 
		WHERE 
			A."Id" = 1 OR B."Id" = 1
	)
		SELECT * FROM tmp3;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_item_in_month_v4(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_item_in_month_v5(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_item_in_month_v5(p_month character varying) RETURNS TABLE("ItemId" integer, "SalePointId" integer, "TotalReceive" integer, "TotalRemaining" numeric, "Import" integer, "Export" integer, "Use" integer, "ImportPrice" integer, "ExportPrice" integer, "UsePrice" integer, "Quotation" integer, "Note" text, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "BalancePrice" numeric, "AVGPrice" integer, "TypeOfItemId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_last_date DATE := ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date;
	v_pre_last_date DATE := ((p_month||'-01' )::date - interval '1 day')::date;
BEGIN
	

	--Lấy số tồn cuối tháng 
	RETURN QUERY
	WITH tmp0 AS(
		SELECT 
-- 			ROW_NUMBER() OVER(PARTITION BY IL."SalePointId", IL."ItemId" ORDER BY "CreateDate"::TIMESTAMP DESC) AS "Id",
				IL."ItemId",
				IL."SalePointId",
				IL."TotalRemaining",
				IL."CreateDate",
				IL."Quantity",
				IL."ItemTypeId",
				IL."TotalPrice",
				IL."Month",
				COALESCE(IL."ModifyBy", IL."CreateBy") AS "ActionBy",
				COALESCE(IL."ModifyByName", IL."CreateByName") AS "ActionByName",
				COALESCE(IL."ModifyDate", IL."CreateDate") AS "ActionDate",
				IL."BalancePrice"
		FROM "ItemFullLog" IL
		WHERE IL."Month"::date <= ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date
		ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp AS(
	SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" ORDER BY "CreateDate" DESC) AS "Id",
					T.* 
		FROM tmp0 T
		),
		--Lấy số tồn đầu tháng 
 tmp1_0 AS(
			SELECT 
					IL."ItemId",
					IL."SalePointId",
					IL."TotalRemaining",
					IL."CreateDate",
					IL."Month"
			FROM "ItemFullLog" IL
			WHERE IL."Month"::date <= ((p_month||'-01' )::date - interval '1 day')::date     
			ORDER BY "CreateDate"::TIMESTAMP DESC
	),tmp1 AS(
		SELECT ROW_NUMBER() OVER(PARTITION BY T."SalePointId", T."ItemId" 	ORDER BY T."CreateDate" DESC) AS "Id",
					T.*
		FROM tmp1_0 T 
	
	),
	--Tính tổng sử dụng trong tháng
	tmp2 AS(
		SELECT 
			tm."SalePointId",
			tm."ItemId",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1)  AS "Import",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =2) AS "Export",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =3) AS "Use",
			SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =4) AS "NotCount",
			CASE WHEN tm."SalePointId" = 0 THEN SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =1) - SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) 
			ELSE  SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =1) + SUM(tm."Quantity") FILTER(WHERE tm."ItemTypeId" =4) - SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) END AS"ImportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =2) AS "ExportPrice",
			SUM(tm."TotalPrice") FILTER(WHERE tm."ItemTypeId" =3) AS "UsePrice"
		FROM tmp tm
		WHERE date_part('month',  tm."Month")  = date_part('month',  to_date(p_month, 'YYYY-MM'))
		GROUP BY tm."SalePointId", tm."ItemId"
),
	tmp3 AS(
		SELECT
			COALESCE(A."ItemId",B."ItemId") AS "ItemId",
			COALESCE(A."SalePointId",B."SalePointId") AS "SalePointId",
			COALESCE(B."TotalRemaining",0) ::INT AS "TotalReceive",
			COALESCE(A."TotalRemaining",0) ::NUMERIC AS "TotalRemaining",
			COALESCE(C."Import",0)::INT AS "Import",
 			COALESCE(C."Export",0)::INT - COALESCE(C."NotCount",0)::INT  AS "Export",
 			COALESCE(C."Use",0)::INT  AS "Use",
			COALESCE(C."ImportPrice",0)::INT  AS "ImportPrice",
 			COALESCE(C."ExportPrice",0)::INT  AS "ExportPrice",
 			COALESCE(C."UsePrice",0)::INT  AS "UsePrice",
			I."Quotation",
			(CASE WHEN COALESCE(A."TotalRemaining",0) / I."Quotation" = 0 THEN 'Cần bổ sung gấp'
					WHEN COALESCE(A."TotalRemaining",0) ::NUMERIC /I."Quotation" > 0.5 THEN 'Đủ Dùng'
					ELSE 'Cần bổ sung gấp'
				END ) AS "Note",
			A."ActionBy",
			A."ActionByName",
			A."ActionDate",
			A."BalancePrice",
			(CASE WHEN A."TotalRemaining"= 0 THEN I."Price" ELSE A."BalancePrice" / A."TotalRemaining" END):: INT AS AVGPrice,
			TOI."TypeOfItemId"
		FROM tmp A
			FULL JOIN tmp1 B ON A."SalePointId"= B."SalePointId" AND A."ItemId"= B."ItemId" AND A."Id"= B."Id"
			LEFT JOIN tmp2 C ON COALESCE(A."SalePointId",B."SalePointId") = C."SalePointId" AND COALESCE(A."ItemId",B."ItemId")= C."ItemId"
			LEFT JOIN "Item" I ON  A."ItemId"=I."ItemId" 
			JOIN "TypeOfItem" TOI ON  TOI."TypeOfItemId"= I."TypeOfItemId" 
		WHERE 
			A."Id" = 1 OR B."Id" = 1
	)
		SELECT * FROM tmp3;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_item_in_month_v5(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_shift_transfer_by_date(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_shift_transfer_by_date(p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "DistributeDate" date, "ShiftId" integer, "ShiftName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalReceived" integer, "TotalReturns" integer, "TotalTrans" integer, "TotalSold" integer, "TotalRemaining" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
		SELECT
			SP."SalePointId",
			SP."SalePointName",
			SF."ShiftDistributeId", 
			SD."DistributeDate", 
			SD."ShiftId",
			S."ShiftName",
			LT."LotteryTypeId",
			LT."LotteryTypeName",
			COALESCE(SF."TotalReceived", 0) AS "TotalReceived", 
			COALESCE(SF."TotalReturns", 0) AS "TotalReturns",
			COALESCE(SF."TotalTrans", 0) AS "TotalTrans",
			COALESCE(SF."TotalSold", 0) AS "TotalSold",
			COALESCE(SF."TotalRemaining", 0) AS "TotalRemaining"
		FROM "ShiftDistribute" SD 
			JOIN "ShiftTransfer" SF ON SD."ShiftDistributeId" = SF."ShiftDistributeId"
			JOIN "SalePoint" SP ON SD."SalePointId" = SP."SalePointId" 
			JOIN "LotteryType" LT ON SF."LotteryTypeId" = LT."LotteryTypeId"
			JOIN "Shift" S ON SD."ShiftId" = S."ShiftId"
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM-DD')::DATE = p_date::DATE
		ORDER BY SP."SalePointId", SD."DistributeDate", LT."LotteryTypeId" ;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_shift_transfer_by_date(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_get_data_shift_transfer_by_date_v2(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_shift_transfer_by_date_v2(p_user_role integer, p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "DistributeDate" date, "ShiftId" integer, "ShiftName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "TotalReceived" integer, "TotalReturns" integer, "TotalTrans" integer, "TotalSold" integer, "TotalRemaining" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_is_leader BOOL;
	v_user_id INT;
BEGIN
	SELECT UT."IsLeader", UR."UserId" INTO v_is_leader, v_user_id
	FROM "UserRole" UR 
		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role;
	
	IF v_is_leader IS TRUE THEN	
		RETURN QUERY
			WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
			SELECT
				SP."SalePointId",
				SP."SalePointName",
				SF."ShiftDistributeId", 
				SD."DistributeDate", 
				SD."ShiftId",
				S."ShiftName",
				LT."LotteryTypeId",
				LT."LotteryTypeName",
				COALESCE(SF."TotalReceived", 0) AS "TotalReceived", 
				COALESCE(SF."TotalReturns", 0) AS "TotalReturns",
				COALESCE(SF."TotalTrans", 0) AS "TotalTrans",
				COALESCE(SF."TotalSold", 0) AS "TotalSold",
				COALESCE(SF."TotalRemaining", 0) AS "TotalRemaining"
			FROM "ShiftDistribute" SD 
				JOIN "ShiftTransfer" SF ON SD."ShiftDistributeId" = SF."ShiftDistributeId"
				JOIN "SalePoint" SP ON SD."SalePointId" = SP."SalePointId" 
				JOIN "LotteryType" LT ON SF."LotteryTypeId" = LT."LotteryTypeId"
				JOIN "Shift" S ON SD."ShiftId" = S."ShiftId"
				JOIN LIST L ON SP."SalePointId" = L."SalePointId"
			WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM-DD')::DATE = p_date::DATE
			ORDER BY SP."SalePointId", SD."DistributeDate", LT."LotteryTypeId" ;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_shift_transfer_by_date_v2(p_user_role integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_get_data_shift_transfer_by_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_shift_transfer_by_month(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "DistributeDate" date, "TotalReceived" bigint, "TotalReturns" bigint, "TotalTrans" bigint, "TotalSold" bigint, "TotalRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN QUERY
	SELECT 
		SP."SalePointId",
		SP."SalePointName",
		SF."LotteryTypeId",
		LT."LotteryTypeName",
		SD."DistributeDate", 
		COALESCE(SUM(CASE WHEN SD."ShiftId" = 1 THEN SF."TotalReceived" END), 0) AS "TotalReceived", 
		COALESCE(SUM(SF."TotalReturns"), 0) AS "TotalReturns",
		COALESCE(SUM(SF."TotalTrans"), 0) AS "TotalTrans",
		COALESCE(SUM(SF."TotalSold"), 0) AS "TotalSold",
		COALESCE(SUM(CASE WHEN SD."ShiftId" = 2 THEN SF."TotalRemaining" END), SUM(CASE WHEN SD."ShiftId" = 1 THEN SF."TotalRemaining" END) , 0) AS "TotalRemaining"
	FROM "ShiftDistribute" SD 
		JOIN "ShiftTransfer" SF ON SD."ShiftDistributeId" = SF."ShiftDistributeId"
		JOIN "LotteryType" LT ON SF."LotteryTypeId" = LT."LotteryTypeId"
		JOIN "SalePoint" SP ON SD."SalePointId" = SP."SalePointId"
	WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
	GROUP BY SD."DistributeDate", SF."LotteryTypeId", LT."LotteryTypeName", SP."SalePointId", SP."SalePointName"
	ORDER BY SP."SalePointId", SD."DistributeDate";
END;
$$;


ALTER FUNCTION public.crm_report_get_data_shift_transfer_by_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_shift_transfer_by_month_v2(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_shift_transfer_by_month_v2(p_user_role integer, p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "DistributeDate" date, "TotalReceived" bigint, "TotalReturns" bigint, "TotalTrans" bigint, "TotalSold" bigint, "TotalRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_is_leader BOOL;
	v_user_id INT;
BEGIN
	SELECT UT."IsLeader", UR."UserId" INTO v_is_leader, v_user_id
	FROM "UserRole" UR 
		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role;
	IF v_is_leader IS TRUE THEN	
		RETURN QUERY
			WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
			SELECT 
				SP."SalePointId",
				SP."SalePointName",
				SF."LotteryTypeId",
				LT."LotteryTypeName",
				SD."DistributeDate", 
				COALESCE(SUM(CASE WHEN SD."ShiftId" = 1 THEN SF."TotalReceived" END), 0) AS "TotalReceived", 
				COALESCE(SUM(SF."TotalReturns"), 0) AS "TotalReturns",
				COALESCE(SUM(SF."TotalTrans"), 0) AS "TotalTrans",
				COALESCE(SUM(SF."TotalSold"), 0) AS "TotalSold",
				COALESCE(SUM(CASE WHEN SD."ShiftId" = 2 THEN SF."TotalRemaining" END), SUM(CASE WHEN SD."ShiftId" = 1 THEN SF."TotalRemaining" END) , 0) AS "TotalRemaining"
			FROM "ShiftDistribute" SD 
				JOIN "ShiftTransfer" SF ON SD."ShiftDistributeId" = SF."ShiftDistributeId"
				JOIN "LotteryType" LT ON SF."LotteryTypeId" = LT."LotteryTypeId"
				JOIN "SalePoint" SP ON SD."SalePointId" = SP."SalePointId"
				JOIN LIST L ON L."SalePointId" = SP."SalePointId"
			WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			GROUP BY SD."DistributeDate", SF."LotteryTypeId", LT."LotteryTypeName", SP."SalePointId", SP."SalePointName"
			ORDER BY SP."SalePointId", SD."DistributeDate";
	END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_shift_transfer_by_month_v2(p_user_role integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_winner_card_by_salepoint(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_winner_card_by_salepoint(p_salepoint_id integer, p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DataWin" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
		RETURN QUERY
		SELECT 
			WW."SalePointId",
			SPS."SalePointName",
			(
				SELECT array_to_json(ARRAY_AGG (r))
				FROM
				(
					SELECT 
						ROW_NUMBER() OVER(ORDER BY W."WinningId") AS "RowNumber",
						W."WinningTypeId",
						WT."WinningTypeName",
						W."LotteryNumber",
						W."LotteryChannelId",
						LC."LotteryChannelName",
						LC."LotteryChannelTypeId",
						LCT."LotteryChannelTypeName",
						W."Quantity",
						W."WinningPrice",
						W."ActionBy",
						W."ActionByName",
						W."ActionDate",
						W."FromSalePointId",
						SP."SalePointName"
					FROM "Winning" W LEFT JOIN "SalePoint" SP ON W."FromSalePointId" = SP."SalePointId", 
						"WinningType" WT, 
						"LotteryChannel" LC, 
						"LotteryChannelType" LCT
					WHERE W."WinningTypeId" = WT."WinningTypeId"
							AND W."SalePointId" = WW."SalePointId"
							AND W."LotteryChannelId" = LC."LotteryChannelId"
							AND LC."LotteryChannelTypeId" = LCT."LotteryChannelTypeId"
							AND TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
				) r
			)	:: TEXT AS "DataWin"
			FROM "Winning" WW
				JOIN "SalePoint" SPS ON SPS."SalePointId" = WW."SalePointId"
			WHERE (COALESCE(p_salepoint_id, 0 ) = 0 OR p_salepoint_id = WW."SalePointId")
			GROUP BY
				WW."SalePointId",
				SPS."SalePointName";
			
END;
$$;


ALTER FUNCTION public.crm_report_get_data_winner_card_by_salepoint(p_salepoint_id integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_data_winner_card_by_salepoint_v2(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_data_winner_card_by_salepoint_v2(p_user_role integer, p_salepoint_id integer, p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DataWin" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_is_leader INT;
	v_user_id INT;
BEGIN
	SELECT UR."UserTitleId", UR."UserId" INTO v_is_leader, v_user_id
	FROM "UserRole" UR 
		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role;
	IF v_is_leader = 4 THEN	
		RETURN QUERY
		WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
		SELECT 
			WW."SalePointId",
			SPS."SalePointName",
			(
				SELECT array_to_json(ARRAY_AGG (r))
				FROM
				(
					SELECT 
						ROW_NUMBER() OVER(ORDER BY W."WinningId") AS "RowNumber",
						W."WinningTypeId",
						WT."WinningTypeName",
						W."LotteryNumber",
						W."LotteryChannelId",
						LC."LotteryChannelName",
						LC."LotteryChannelTypeId",
						LCT."LotteryChannelTypeName",
						W."Quantity",
						W."WinningPrice",
						W."ActionBy",
						W."ActionByName",
						W."ActionDate",
						W."FromSalePointId",
						SP."SalePointName"
					FROM "Winning" W LEFT JOIN "SalePoint" SP ON W."FromSalePointId" = SP."SalePointId", 
						"WinningType" WT, 
						"LotteryChannel" LC, 
						"LotteryChannelType" LCT
					WHERE W."WinningTypeId" = WT."WinningTypeId"
							AND W."SalePointId" = WW."SalePointId"
							AND W."LotteryChannelId" = LC."LotteryChannelId"
							AND LC."LotteryChannelTypeId" = LCT."LotteryChannelTypeId"
							AND TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
				) r
			)	:: TEXT AS "DataWin"
			FROM "Winning" WW
				JOIN "SalePoint" SPS ON SPS."SalePointId" = WW."SalePointId"
				JOIN LIST L ON L."SalePointId" = SPS."SalePointId"
			WHERE (COALESCE(p_salepoint_id, 0 ) = 0 OR p_salepoint_id = WW."SalePointId")
			GROUP BY
				WW."SalePointId",
				SPS."SalePointName";
	END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_data_winner_card_by_salepoint_v2(p_user_role integer, p_salepoint_id integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_deleted_loto(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_deleted_loto(p_month character varying, p_shift_id integer, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("LotoType" character varying, "Type" character varying, "LotteryChannelName" character varying, "Seri" character varying, "IntoMoney" numeric, "ShiftId" integer, "Time" text, "SalePointId" integer, "TransactionCode" integer, "FullName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT
		
					LT."LotoType",
					LT."Type",
					LC."LotteryChannelName",
					LT."Seri",
					LT."IntoMoney",
					LT."ShiftId",
					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time,
					LT."SalePointId",
					LT."TransactionCode",
					U."FullName"
					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
					inner join "User" U on LT."ActionBy"=U."UserId"
					WHERE (LT."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) and TO_CHAR(LT."Time", 'YYYY-MM')=p_month and LT."IsDelete"=false
					and LT."ShiftId" = p_shift_id
					order by LT."Time" DESC;
END;

$$;


ALTER FUNCTION public.crm_report_get_deleted_loto(p_month character varying, p_shift_id integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_get_kpi_manager(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_kpi_manager(p_date character varying, p_type integer) RETURNS TABLE("Kpi" integer, "ManagerId" integer, "Date" character varying)
    LANGUAGE plpgsql ROWS 100
    AS $$
	BEGIN
	RETURN QUERY
	SELECT RKM."Kpi", RKM."ManagerId", RKM."Date"
	FROM "ReportKpiManager" RKM
	WHERE RKM."Date" = p_date AND RKM."Type" = p_type;
END;
$$;


ALTER FUNCTION public.crm_report_get_kpi_manager(p_date character varying, p_type integer) OWNER TO postgres;

--
-- Name: crm_report_get_list_exempt_kpi(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_exempt_kpi(p_month character varying) RETURNS TABLE("ExemptKpiId" bigint, "UserId" bigint, "WeekId" integer, "Month" character varying, "IsSumKpi" boolean)
    LANGUAGE plpgsql
    AS $$
	
BEGIN

	RETURN QUERY
	SELECT
		E."ExemptKpiId",
		E."UserId",
		E."WeekId",
		E."Month",
		E."IsSumKpi"
	FROM "ExemptKpi" E 
	WHERE E."Month" = p_month;
END;
$$;


ALTER FUNCTION public.crm_report_get_list_exempt_kpi(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_list_report_sales(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_report_sales(p_date character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "TotalShiftRegister" integer, "TotalShiftFinished" integer, "TotalCall" integer, "TotalTrial" integer, "TotalSales" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	WITH tmp AS
	(
			-- lấy ra các ca làm trong tháng
			SELECT 
				CH."RequestFromUserId",
				CH."ShiftId",
				CH."CallDateTime"::DATE,
				U."UserId",
				COALESCE(U."FullName", U."FullNameEN") AS "FullName",
				COUNT(CH."ShiftId") AS "Count",
				SUM("CallDuration") AS "TotalCallDuration",
				U."CallRequireTypeId"
			FROM "CallHistory" CH 
			LEFT JOIN "User" U ON U."UserId" = substring(CH."RequestFromUserId" FROM '\d+')::INT4
			LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId"
			LEFT JOIN "UserTitle" UT ON UT."UserTitleId" = ANY(UR."UserTitleIds") AND UT."UserTitleId" IN (2,9)
			WHERE to_char(CH."CallDateTime", 'YYYY-MM') = p_date
				AND UT."UserTitleId" IN (2,9)
			GROUP BY 
				CH."ShiftId",
				CH."CallDateTime"::DATE,
				CH."RequestFromUserId",
				U."UserId"
			ORDER BY CH."RequestFromUserId"
	), tmp1 AS
	(
			-- tổng số ca đi làm
			SELECT 
				T."UserId",
				T."FullName",
				COUNT(T."UserId") AS "TotalShiftRegister",
				COUNT(T."UserId") FILTER (WHERE T."Count" >= CR."CallRequire" AND T."TotalCallDuration" >= CR."CallDurationRequire") AS "TotalShiftFinished"
			FROM tmp T
			LEFT JOIN "CallRequireType" CR ON T."CallRequireTypeId" = CR."CallRequireTypeId"
			GROUP BY 
				T."RequestFromUserId",
				T."UserId",
				T."FullName" 
	),tmp2 AS 
	(	
			-- Lấy ra tổng số cuộc gọi trong tháng
			SELECT 
				U."UserId",
				COALESCE(U."FullName",U."FullNameEN") AS "FullName",
				COUNT( CH."CallHistoryId")AS "Total_Call"
			FROM "CallHistory" CH
			LEFT JOIN "User" U ON U."UserId" = substring(CH."RequestFromUserId" FROM '\d+')::INT4
			LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId"
			LEFT JOIN "UserTitle" UT ON UT."UserTitleId" = ANY(UR."UserTitleIds")
			WHERE to_char(CH."CallDateTime", 'YYYY-MM') = p_date
				AND UT."UserTitleId" IN (2,9)
			GROUP 
			BY "RequestFromUserId",
			U."UserId"
	), tmp3 AS 
	(
			-- tổng số trial/tổng số sales
			SELECT 
				C."SaleId" AS "UserId",
				COUNT(*) FILTER (WHERE C."ClassTypeId" = 1) AS "TotalTrial",
				COUNT(*) FILTER (WHERE C."ClassTypeId" = 2) AS "TotalSales"
			FROM "Class" C
			WHERE to_char(C."CreatedDate", 'YYYY-MM') = p_date 
			GROUP BY C."SaleId"
	)
	SELECT 
	 T1."UserId",
	 T1."FullName",
	 COALESCE(T1."TotalShiftRegister",0)::INT4,
	 COALESCE(T1."TotalShiftFinished",0)::INT4,
	 COALESCE(T2."Total_Call",0)::INT4,
	 COALESCE(T3."TotalTrial",0)::INT4,
	 COALESCE(T3."TotalSales",0)::INT4
	FROM tmp1 T1
	LEFT JOIN tmp2 T2 ON T1."UserId" = T2."UserId"
	LEFT JOIN tmp3 T3 ON T3."UserId" = T1."UserId"
	ORDER BY T1."UserId";
	
	
END;
$$;


ALTER FUNCTION public.crm_report_get_list_report_sales(p_date character varying) OWNER TO postgres;

--
-- Name: crm_report_get_list_sale_for_update(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_sale_for_update(p_sale_point_id integer, p_shift_id integer, p_date timestamp without time zone) RETURNS TABLE("LotteryInfo" text, "SalePointInfo" text, "HistoryInfo" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_shift_dis_id INT := (
					SELECT 
						SD."ShiftDistributeId"
					FROM "ShiftDistribute" SD
					WHERE
						SD."ShiftId"=p_shift_id AND SD."SalePointId"= p_sale_point_id AND SD."DistributeDate"=p_date :: DATE) ::INT;
BEGIN
RETURN QUERY
	WITH tmp0 AS
	(
		SELECT array_to_json(ARRAY_AGG(R)) :: TEXT
		FROM
			(SELECT *FROM
				(
					(
						SELECT 
							LC."LotteryChannelTypeId",
							I."SalePointId",
							I."LotteryDate",
							LC."LotteryChannelId",
							LC."ShortName",
							I."TotalRemaining",
							I."TotalDupRemaining",
							FALSE AS "IsScratchcard"
						FROM "Inventory" I,  "LotteryChannel" LC
						WHERE 
							(I."LotteryDate" = p_date ::DATE OR I."LotteryDate" = (p_date ::DATE + INTERVAL '1 DAY') ::DATE)
							AND I."SalePointId" = p_sale_point_id
							AND I."LotteryChannelId" = LC."LotteryChannelId"
							AND (I."TotalRemaining" > 0 OR I."TotalDupRemaining" > 0)
					) 
					UNION
					(
						SELECT 
							LC."LotteryChannelTypeId",
							SC."SalePointId",
							'9999-01-01' AS "LotteryDate",
							LC."LotteryChannelId",
							LC."ShortName",
							SC."TotalRemaining" ,
							0 AS "TotalDupRemaining",
							TRUE AS "IsScratchcard"
						FROM "Scratchcard" SC
							JOIN "LotteryChannel" LC ON LC."LotteryChannelId"= SC."LotteryChannelId"
						WHERE SC."SalePointId"= p_sale_point_id
					
					)
				) A
				ORDER BY  A."LotteryDate", A."LotteryChannelTypeId"
			)R
	),
	tmp1 AS
	(
			SELECT ROW_TO_JSON(R) :: TEXT
			FROM
				(
					SELECT 
						SD."ShiftDistributeId",
						SD."UserId",
						SD."SalePointId",
						SD."ShiftId",
						COALESCE((SELECT TRUE FROM "ShiftTransfer" WHERE "ShiftDistributeId" = SD."ShiftDistributeId" LIMIT 1),FALSE) AS "IsEndOfShift"
					FROM "ShiftDistribute" SD
					WHERE
						SD."ShiftId"=p_shift_id 
						AND SD."SalePointId"= p_sale_point_id 
						AND SD."DistributeDate"=p_date :: DATE
				) R
	),
	tmp2 AS
	(
		SELECT array_to_json(ARRAY_AGG(R)) :: TEXT
		FROM
			(
				SELECT 
					SPL."ShiftDistributeId",
					SPL."SalePointLogId",
					SPL."LotteryDate",
					SPL."LotteryChannelId",
					SPL."LotteryTypeId",
					LT."LotteryTypeName",
					LC."ShortName",
					SPL."Quantity",
					SPL."TotalValue",
					SPL."ActionDate",
					SPL."FourLastNumber"
				FROM	"SalePointLog" SPL
					JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
					JOIN "LotteryType" LT ON LT."LotteryTypeId"= SPL."LotteryTypeId"
				WHERE SPL."ShiftDistributeId" = v_shift_dis_id 
				  AND SPL."IsDeleted" IS FALSE 
				ORDER BY SPL."ActionDate"
			)R
	)
	SELECT 
		*
	FROM tmp0, tmp1, tmp2;
		

END;
$$;


ALTER FUNCTION public.crm_report_get_list_sale_for_update(p_sale_point_id integer, p_shift_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_get_list_total_number_of_tickets_of_each_manager(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_total_number_of_tickets_of_each_manager(p_month character varying) RETURNS TABLE("FullName" character varying, "LotteryDate" date, "SalePointId" integer, "TotalReceived" bigint, "ManagerId" integer)
    LANGUAGE plpgsql
    AS $$BEGIN

    RETURN QUERY
    WITH tmp AS
    (
        SELECT
            I."LotteryDate",
            I."SalePointId",
            SUM(I."TotalDupReceived" + I."TotalReceived") AS "TotalReceived",
            FN."ManagerId"
        FROM "InventoryLog" I
        LEFT JOIN (
            SELECT
                SP."SalePointId",
                MAX(SP."ManagerId") AS "ManagerId"
            FROM crm_sale_point_manage_v2(
                (SELECT (select * from convert_to_date(p_month || '-01')) + INTERVAL '1 month' - INTERVAL '1 day')
            ) AS SP
            WHERE SP."ManagerId" IS NOT NULL
            GROUP BY SP."SalePointId"
        ) FN ON I."SalePointId" = FN."SalePointId"
        WHERE I."LotteryDate" >= (select * from convert_to_date(p_month || '-01')) AND I."LotteryDate" < ((select * from convert_to_date(p_month || '-01')) + INTERVAL '1 month')
        GROUP BY I."LotteryDate", I."SalePointId", FN."ManagerId"
    )
    SELECT
        U."FullName",
        T.*
    FROM tmp T
    LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
    GROUP BY
        T."LotteryDate",
        T."SalePointId",
        T."ManagerId",
        T."TotalReceived",
        U."FullName";
END;
$$;


ALTER FUNCTION public.crm_report_get_list_total_number_of_tickets_of_each_manager(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_list_total_number_of_tickets_of_each_manager_new(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_total_number_of_tickets_of_each_manager_new(p_month character varying) RETURNS TABLE("FullName" character varying, "LotteryDate" date, "SalePointId" integer, "TotalReceived" bigint, "ManagerId" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN

    RETURN QUERY
    WITH tmp AS
    (
        SELECT
            I."LotteryDate",
            I."SalePointId",
            SUM(I."TotalDupReceived" + I."TotalReceived") AS "TotalReceived",
            FN."ManagerId"
        FROM "InventoryLog" I
        LEFT JOIN (
            SELECT
                SP."SalePointId",
                MAX(SP."ManagerId") AS "ManagerId"
            FROM crm_sale_point_manage_v2_new(
                (SELECT (select * from convert_to_date(p_month || '-01')) + INTERVAL '1 month' - INTERVAL '1 day')
            ) AS SP
            WHERE SP."ManagerId" IS NOT NULL
            GROUP BY SP."SalePointId"
        ) FN ON I."SalePointId" = FN."SalePointId"
        WHERE I."LotteryDate" >= (select * from convert_to_date(p_month || '-01')) AND I."LotteryDate" < ((select * from convert_to_date(p_month || '-01')) + INTERVAL '1 month')
        GROUP BY I."LotteryDate", I."SalePointId", FN."ManagerId"
    )
    SELECT
        U."FullName",
        T.*
    FROM tmp T
    LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
    GROUP BY
        T."LotteryDate",
        T."SalePointId",
        T."ManagerId",
        T."TotalReceived",
        U."FullName";
END;
$$;


ALTER FUNCTION public.crm_report_get_list_total_number_of_tickets_of_each_manager_new(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_list_total_number_of_tickets_of_each_manager_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_total_number_of_tickets_of_each_manager_v2(p_month character varying) RETURNS TABLE("FullName" character varying, "LotteryDate" date, "SalePointId" integer, "TotalReceived" bigint, "ManagerId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
    actual_date DATE := convert_to_date(p_month || '-01');
    next_month_start DATE := actual_date + INTERVAL '1 month';
    next_month_end DATE := next_month_start + INTERVAL '1 day';
BEGIN

	RETURN QUERY
	WITH tmp AS
	(
		 SELECT
			I."LotteryDate",
			I."SalePointId",
			SUM(I."TotalDupReceived" + I."TotalReceived") AS "TotalReceived",
			FN."ManagerId"
		FROM "InventoryLog" I
		LEFT JOIN (
			SELECT
				"SalePointId",
				MAX("ManagerId") AS "ManagerId"
			FROM crm_sale_point_manage_v2(actual_date)
			WHERE "ManagerId" IS NOT NULL
			GROUP BY "SalePointId"
		) FN ON I."SalePointId" = FN."SalePointId"
		WHERE I."LotteryDate" >= actual_date AND I."LotteryDate" < next_month_end
		GROUP BY I."LotteryDate", I."SalePointId", FN."ManagerId"
	)
	SELECT
		U."FullName",
		T.*
	FROM tmp T 
	LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	GROUP BY 
		T."LotteryDate",
		T."SalePointId",
		T."ManagerId",
		T."TotalReceived",
		U."FullName";
END;
$$;


ALTER FUNCTION public.crm_report_get_list_total_number_of_tickets_of_each_manager_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_list_unsold_lottery_ticket(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_list_unsold_lottery_ticket(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "TotalRemaining" bigint)
    LANGUAGE plpgsql
    AS $$

BEGIN
	
	RETURN QUERY
	SELECT
		I."SalePointId",
		COALESCE( S."SalePointName",'Kho') AS "SalePointName",
		I."LotteryDate",
		(SUM(I."TotalRemaining") + SUM(I."TotalDupRemaining")) AS "TotalRemaining"
	FROM "Inventory" I 
	LEFT JOIN "SalePoint" S ON I."SalePointId" = S."SalePointId"
	WHERE 
		TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
		AND I."SalePointId" > 0
	GROUP BY 
		I."LotteryDate",
		I."SalePointId",
		S."SalePointName"
	ORDER BY I."LotteryDate";
		
END;
$$;


ALTER FUNCTION public.crm_report_get_list_unsold_lottery_ticket(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_log_distribute_for_salepoint(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_log_distribute_for_salepoint(p_date timestamp without time zone, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("LotteryDate" date, "LotteryChannelId" integer, "TotalReceived" bigint, "TotalDupReceived" bigint, "SalePointId" integer, "ActionDate" timestamp without time zone, "ShortName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
RETURN QUERY

SELECT
	IL."LotteryDate",
	IL."LotteryChannelId",
	SUM(IL."TotalReceived"),
	SUM(IL."TotalDupReceived"),
	IL."SalePointId",
	IL."ActionDate",
	LC."ShortName"
FROM "InventoryDetailLog" IL 
	JOIN "LotteryChannel" LC ON LC."LotteryChannelId"= IL."LotteryChannelId"
WHERE IL."LotteryDate" = p_date::DATE 
	AND ((COALESCE(p_sale_point_id, 0) = 0) OR IL."SalePointId" = p_sale_point_id)
GROUP BY
	IL."LotteryDate",
	IL."LotteryChannelId",
	IL."ActionDate",
	IL."SalePointId",
	LC."ShortName",
	LC."LotteryChannelTypeId"
ORDER BY
	IL."ActionDate" DESC,
	LC."LotteryChannelTypeId";
	
		
END;
$$;


ALTER FUNCTION public.crm_report_get_log_distribute_for_salepoint(p_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_get_log_distribute_for_salepoint_v4(date, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_log_distribute_for_salepoint_v4(p_date date, p_sale_point_id integer) RETURNS TABLE(lotterydate date, lotterychannelid integer, totalreceived bigint, totaldupreceived bigint, salepointid integer, actiondate timestamp without time zone, shortname character varying, salepointname character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	SELECT
		IL."LotteryDate",
		LC."LotteryChannelId",
		SUM(IL."TotalReceived"),
		SUM(IL."TotalDupReceived"),
		IL."SalePointId",
		IL."ActionDate",
		LC."ShortName",
		SL."SalePointName"
	FROM
		"InventoryDetailLog" IL
		JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = IL."LotteryChannelId"
		JOIN "SalePoint" SL ON IL."SalePointId" = SL."SalePointId"
	WHERE
		IL."LotteryDate" = p_date::DATE
		AND ((COALESCE(p_sale_point_id, 0) = 0) OR IL."SalePointId" = p_sale_point_id)
	GROUP BY
		IL."LotteryDate",
		LC."LotteryChannelId",
		IL."ActionDate",
		IL."SalePointId",
		LC."ShortName",
		SL."SalePointName"
	ORDER BY
	IL."ActionDate" DESC,
	LC."LotteryChannelTypeId";
END;
$$;


ALTER FUNCTION public.crm_report_get_log_distribute_for_salepoint_v4(p_date date, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_get_log_distribute_for_salepoint_v4(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_log_distribute_for_salepoint_v4(p_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE(lotterydate date, lotterychannelid integer, totalreceived bigint, totaldupreceived bigint, salepointid integer, actiondate timestamp without time zone, shortname character varying, salepointname character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	SELECT
		IL."LotteryDate",
		LC."LotteryChannelId",
		SUM(IL."TotalReceived"),
		SUM(IL."TotalDupReceived"),
		IL."SalePointId",
		IL."ActionDate",
		LC."ShortName",
		SL."SalePointName"
	FROM
		"InventoryDetailLog" IL
		JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = IL."LotteryChannelId"
		JOIN "SalePoint" SL ON IL."SalePointId" = SL."SalePointId"
	WHERE
		IL."LotteryDate" = p_date::DATE
		AND ((COALESCE(p_sale_point_id, 0) = 0) OR IL."SalePointId" = p_sale_point_id)
	GROUP BY
		IL."LotteryDate",
		LC."LotteryChannelId",
		IL."ActionDate",
		IL."SalePointId",
		LC."ShortName",
		SL."SalePointName"
	ORDER BY
	IL."ActionDate" DESC,
	LC."LotteryChannelTypeId";
END;
$$;


ALTER FUNCTION public.crm_report_get_log_distribute_for_salepoint_v4(p_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_get_lottery_sell_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_lottery_sell_in_month(p_month character varying) RETURNS TABLE("VT" text, "VTr" text, "VC" text, "SUM" text, "SUMF" text, "Month" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_last_date DATE := ((p_month||'-01' )::date  + interval '1 month' - interval '1 day')::date;
	v_pre_last_date DATE := ((p_month||'-01' )::date - interval '1 day')::date;

BEGIN
	RETURN QUERY
	
		WITH tmp AS(
			SELECT 
				SPL."SalePointId",
				SPL."ActionDate" :: DATE,
				SPL."LotteryTypeId",
				SUM(SPL."Quantity") AS "TotalQuatity",
				SUM(SPL."TotalValue") AS "TotalValue",
				COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryPriceId"= 1),0) AS "Wholesale",
				COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryPriceId"<> 1),0) AS "Retail",
				COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryPriceId"= 1),0) AS "TotalWholesale",
				COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryPriceId"<> 1),0) AS "TotalRetail"
			FROM "SalePointLog" SPL 
			WHERE TO_CHAR("ActionDate",'YYYY-MM')= p_month
			GROUP BY SPL."SalePointId", SPL."ActionDate":: DATE, SPL."LotteryTypeId"
			ORDER BY SPL."SalePointId", SPL."ActionDate":: DATE, SPL."LotteryTypeId"
		), 
		tmp1 AS(
			SELECT array_to_json(array_agg(tm))::TEXT AS "VT"
			FROM (
				SELECT * FROM tmp
				WHERE "LotteryTypeId" = 1
			) tm 
		),
		tmp2 AS(
			SELECT array_to_json(array_agg(tm))::TEXT AS "VTr"
			FROM (
				SELECT * FROM tmp
				WHERE "LotteryTypeId" = 2
			) tm 
		),
		tmp3 AS(
			SELECT array_to_json(array_agg(tm))::TEXT AS "VC"
			FROM (
				SELECT * FROM tmp
				WHERE "LotteryTypeId" = 3
			) tm 
		),
		tmp4 AS(
			SELECT array_to_json(array_agg(sm))::TEXT AS "SUM"
			FROM (
				SELECT					
					tm."SalePointId",
					tm."ActionDate",
					SUM(tm."TotalQuatity") AS "TotalQuatity",
					SUM(tm."TotalValue") AS "TotalValue",
					SUM(tm."Wholesale") AS "Wholesale",
					SUM(tm."Retail") AS "Retail",
					SUM(tm."TotalWholesale") AS "TotalWholesale",
					SUM(tm."TotalRetail") AS "TotalRetail"
				FROM tmp tm
				GROUP BY
					tm."SalePointId", tm."ActionDate":: DATE
				ORDER BY
					tm."SalePointId", tm."ActionDate":: DATE
			) sm 
		),
		tmp5 AS(
			SELECT array_to_json(array_agg(sm))::TEXT AS "SUMF"
			FROM (
				SELECT					
					tm."SalePointId",
					SUM(tm."TotalQuatity") AS "TotalQuatity",
					SUM(tm."TotalValue") AS "TotalValue",
					SUM(tm."Wholesale") AS "Wholesale",
					SUM(tm."Retail") AS "Retail",
					SUM(tm."TotalWholesale") AS "TotalWholesale",
					SUM(tm."TotalRetail") AS "TotalRetail"
				FROM tmp tm
				GROUP BY
					tm."SalePointId"
				ORDER BY
					tm."SalePointId"
			) sm 
		)
		
		SELECT 
			tmp1."VT",
			tmp2."VTr",
			tmp3."VC", 
			tmp4."SUM",
			tmp5."SUMF",
			p_month
		FROM tmp1, tmp2, tmp3, tmp4, tmp5;
END;
$$;


ALTER FUNCTION public.crm_report_get_lottery_sell_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_remain_of_all_salepoint_in_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_remain_of_all_salepoint_in_date() RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "TotalRemainingTheNorth" bigint, "TotalRemainingTheCentral" bigint, "TotalRemainingTheSouth" bigint)
    LANGUAGE plpgsql
    AS $$

BEGIN
	
	RETURN QUERY
	WITH Total AS (
	SELECT 
		SP."SalePointId", 
		SP."SalePointName", 
		SUM(I."TotalRemaining" + I."TotalDupRemaining") FILTER (WHERE L."RegionId" = 1) AS "TotalRemainingTheNorth",
		SUM(I."TotalRemaining" + I."TotalDupRemaining") FILTER (WHERE L."RegionId" = 3) AS "TotalRemainingTheCentral",
		SUM(I."TotalRemaining" + I."TotalDupRemaining") FILTER (WHERE L."RegionId" = 2) AS "TotalRemainingTheSouth"
	FROM "SalePoint" SP JOIN "Inventory" I ON SP."SalePointId" = I."SalePointId"
	LEFT JOIN "LotteryChannel" L ON L."LotteryChannelId" = I."LotteryChannelId"
	LEFT JOIN "Region" R ON R."RegionId" = L."RegionId"
	WHERE I."LotteryDate":: DATE = NOW()::DATE 
	--		OR TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') :: DATE = (NOW() + INTERVAL '1 DAY')::DATE ) 
	GROUP BY SP."SalePointId", SP."SalePointName"
	ORDER BY SP."SalePointId")
	SELECT 
		SP."SalePointId", 
		SP."SalePointName",
		COALESCE( T."TotalRemainingTheNorth",0) AS "TotalRemainingTheNorth",
		COALESCE(T."TotalRemainingTheCentral",0) AS "TotalRemainingTheCentral",
		COALESCE( T."TotalRemainingTheSouth",0) AS "TotalRemainingTheSouth"
	FROM "SalePoint" SP LEFT JOIN Total T ON SP."SalePointId" = T."SalePointId"
	WHERE SP."IsActive" IS TRUE
	ORDER BY SP."SalePointId";	
END;
$$;


ALTER FUNCTION public.crm_report_get_remain_of_all_salepoint_in_date() OWNER TO postgres;

--
-- Name: crm_report_get_remain_of_salepoint_in_date(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_remain_of_salepoint_in_date(p_salepoint_id integer, p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryDate" date, "TotalRemaining" integer, "TotalDupRemaining" integer)
    LANGUAGE plpgsql
    AS $$

BEGIN
	
	RETURN QUERY
	SELECT 
		SP."SalePointId", 
		SP."SalePointName", 
		I."LotteryDate", 
		I."TotalRemaining", 
		I."TotalDupRemaining"
	FROM "SalePoint" SP JOIN "Inventory" I ON SP."SalePointId" = I."SalePointId"
	WHERE TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month 
		AND (COALESCE(p_salepoint_id, 0) = 0 OR I."SalePointId" = p_salepoint_id)
	ORDER BY SP."SalePointId", I."LotteryDate";
	
END;
$$;


ALTER FUNCTION public.crm_report_get_remain_of_salepoint_in_date(p_salepoint_id integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_salary_of_user(bigint, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_salary_of_user(p_user_id bigint, p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalaryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	SELECT F.* FROM crm_get_salary_of_user_by_month(p_month) F
	WHERE F."UserId" = p_user_id or p_user_id = -1 AND F."UserId" <> 0;
END;
$$;


ALTER FUNCTION public.crm_report_get_salary_of_user(p_user_id bigint, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_shift_distribute_of_all_user_to_current_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_shift_distribute_of_all_user_to_current_in_month(p_month character varying) RETURNS TABLE("UserId" integer, "ShiftDistributeId" integer, "DistributeDate" date, "ShiftId" integer, "SalePointId" integer, "MainSalePointId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_time TIMESTAMP := NOW();
BEGIN
RETURN QUERY
	SELECT
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId",
			U."SalePointId" AS "MainSalePointId"
		FROM "ShiftDistribute" SD Join "User" U on SD."UserId" = U."UserId"
		WHERE SD."IsActive" IS TRUE 
		AND
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN
					TO_CHAR(SD."DistributeDate",'YYYY-MM-DD') <= TO_CHAR(NOW(),'YYYY-MM-DD')
					AND TO_CHAR(SD."DistributeDate",'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
				ELSE
					TO_CHAR(SD."DistributeDate",'YYYY-MM') = p_month 
				END 
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId",
			U."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate";
END;
$$;


ALTER FUNCTION public.crm_report_get_shift_distribute_of_all_user_to_current_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_not_sell_by_date(timestamp without time zone, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_not_sell_by_date(p_date timestamp without time zone, p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryChannelId" integer, "LotteryChannelName" character varying, "TotalRemaining" bigint, "TotalDupRemaining" bigint, "DataShift" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF p_month IS NULL THEN
		RETURN QUERY
		WITH tmp AS (
			SELECT 
				I."SalePointId", 
				SPP."SalePointName",
				I."LotteryChannelId",
				LC."LotteryChannelName", 
				COALESCE(SUM(CASE WHEN SFF."LotteryTypeId"=1 THEN SFF."TotalReturns" END), 0) AS "TotalRemaining",
				COALESCE(SUM(CASE WHEN SFF."LotteryTypeId"=2 THEN SFF."TotalReturns" END), 0) AS "TotalDupRemaining",
				(
					SELECT array_to_json(ARRAY_AGG (r))
					FROM
					(
						SELECT
							SD."ShiftId", 
							SD."ShiftDistributeId",
							I."LotteryChannelId",
							COALESCE(SUM(SF."TotalTrans"),0) AS "TotalTrans"
						FROM "ShiftDistribute" SD
							LEFT JOIN "ShiftTransfer" SF ON (SD."ShiftDistributeId" = SF."ShiftDistributeId" AND SF."LotteryChannelId" =  I."LotteryChannelId")
						WHERE SD."DistributeDate" = p_date :: DATE
							AND SD."SalePointId" = I."SalePointId"	
						GROUP BY 
							SD."ShiftId", 
							SD."ShiftDistributeId",
							SF."LotteryChannelId"
						ORDER BY SD."ShiftId"
					) r
				) :: TEXT AS "DataShift"
			FROM "SalePoint" SP
				JOIN "ShiftDistribute" SDD ON (SP."SalePointId" = SDD."SalePointId" AND SDD."DistributeDate" = p_date :: DATE)
				JOIN "ShiftTransfer" SFF ON (SDD."ShiftDistributeId" = SFF."ShiftDistributeId" AND SFF."LotteryTypeId" <> 3)
				RIGHT JOIN "Inventory" I ON (SFF."LotteryChannelId" = I."LotteryChannelId"
																		AND SFF."LotteryDate" = I."LotteryDate"
																		AND I."SalePointId" = SP."SalePointId")
				JOIN "LotteryChannel" LC ON I."LotteryChannelId" = LC."LotteryChannelId"
				JOIN "SalePoint" SPP ON I."SalePointId" = SPP."SalePointId"

			WHERE I."SalePointId" <> 0
				AND (I."LotteryDate" = p_date::DATE OR I."LotteryDate" = ((p_date ::DATE) + INTERVAL '1 DAY')) 
				AND SP."IsActive" IS TRUE
			GROUP BY 
				I."SalePointId",
				SPP."SalePointName",
				I."LotteryChannelId",
				LC."LotteryChannelName"
			ORDER BY I."SalePointId", I."LotteryChannelId"
		)
		SELECT
			A."SalePointId",
			A."SalePointName",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."TotalRemaining",
			A."TotalDupRemaining",
			A."DataShift"
		FROM tmp A
			JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
		ORDER BY A."SalePointId", LC."LotteryChannelTypeId", A."LotteryChannelId";
	ELSE
		RETURN QUERY
		WITH tmp AS (
			SELECT 
				I."SalePointId", 
				SPP."SalePointName",
				I."LotteryChannelId",
				LC."LotteryChannelName", 
				COALESCE(SUM(CASE WHEN SFF."LotteryTypeId"=1 THEN SFF."TotalReturns" END), 0) AS "TotalRemaining",
				COALESCE(SUM(CASE WHEN SFF."LotteryTypeId"=2 THEN SFF."TotalReturns" END), 0) AS "TotalDupRemaining",
				NULL AS "DataShift"
			FROM "SalePoint" SP
				JOIN "ShiftDistribute" SDD ON (SP."SalePointId" = SDD."SalePointId" AND TO_CHAR(SDD."DistributeDate",'YYYY-MM') = p_month)
				JOIN "ShiftTransfer" SFF ON (SDD."ShiftDistributeId" = SFF."ShiftDistributeId" AND SFF."LotteryTypeId" <> 3)
				RIGHT JOIN "Inventory" I ON (SFF."LotteryChannelId" = I."LotteryChannelId"
																		AND SFF."LotteryDate" = I."LotteryDate"
																		AND I."SalePointId" = SP."SalePointId")
				JOIN "LotteryChannel" LC ON I."LotteryChannelId" = LC."LotteryChannelId"
				JOIN "SalePoint" SPP ON I."SalePointId" = SPP."SalePointId"

			WHERE I."SalePointId" <> 0 AND (TO_CHAR(I."LotteryDate", 'YYYY-MM')= p_month) AND SP."IsActive" IS TRUE
			GROUP BY 
				I."SalePointId",
				SPP."SalePointName",
				I."LotteryChannelId",
				LC."LotteryChannelName"
			ORDER BY I."SalePointId", I."LotteryChannelId"
		)
		SELECT
			A."SalePointId",
			A."SalePointName",
			A."LotteryChannelId",
			A."LotteryChannelName",
			A."TotalRemaining",
			A."TotalDupRemaining",
			A."DataShift"
		FROM tmp A
			JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = A."LotteryChannelId"
		ORDER BY A."SalePointId", LC."LotteryChannelTypeId", A."LotteryChannelId";
	END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_not_sell_by_date(p_date timestamp without time zone, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_of_all_agency_in_day(integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_of_all_agency_in_day(p_agency_id integer, p_month character varying) RETURNS TABLE("AgencyId" integer, "Info" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN QUERY
-- 	SELECT 
-- 		I."AgencyId",
-- 		A."AgencyName", 
-- 		I."ActionDate"::DATE,
-- 		SUM(I."TotalReceived") AS "TotalReceived", 
-- 		SUM(I."TotalDupReceived") AS "TotalDupReceived"
-- 	FROM "InventoryLog" I, "Agency" A
-- 	WHERE TO_CHAR(I."ActionDate", 'YYYY-MM') = p_month
-- 		AND A."AgencyId" = I."AgencyId"	
-- 	GROUP BY I."AgencyId", A."AgencyName", I."ActionDate"::DATE
-- 	ORDER BY  I."AgencyId";
WITH tmp AS(
		SELECT 
			I."AgencyId",
			A."AgencyName",
			LC."LotteryChannelId",
			LC."LotteryChannelName", 
			I."LotteryDate"::DATE,
			LC."ShortName",
			SUM(I."TotalReceived") AS "Total"
		FROM "InventoryFull" I, "Agency" A, "LotteryChannel" LC
	WHERE I."LotteryDate" BETWEEN (date_trunc('month', (p_month || '-01')::date))::DATE AND (date_trunc('month', (p_month|| '-01')::date) + interval '1 month' - interval '1 day')::DATE
		AND A."AgencyId" = I."AgencyId"
		AND LC."LotteryChannelId" = I."LotteryChannelId"
		AND A."AgencyId" = p_agency_id
	GROUP BY I."AgencyId", A."AgencyName", I."LotteryDate"::DATE, I."TotalReceived",LC."LotteryChannelId",LC."LotteryChannelName"
	ORDER BY   I."LotteryDate" DESC,LC."LotteryChannelId" DESC
	)
		SELECT 
			T."AgencyId", 
			array_to_json(array_agg(json_build_object( 
				'LotteryId',
				T."LotteryChannelId",
				'LotteryChannelName',
				T."LotteryChannelName", 
				'ShortName',
				T."ShortName",
				'LotteryDate',
				T."LotteryDate"::DATE,
				'Quantity',
				T."Total"
			)))::TEXT AS "AgencyInfo"
		FROM tmp T GROUP BY T."AgencyId";
	
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_of_all_agency_in_day(p_agency_id integer, p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_of_all_agency_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_of_all_agency_in_month(p_month character varying) RETURNS TABLE("AgencyId" integer, "AgencyName" character varying, "ActionDate" date, "TotalReceived" bigint, "TotalDupReceived" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
RETURN QUERY
-- 	SELECT 
-- 		I."AgencyId",
-- 		A."AgencyName", 
-- 		I."ActionDate"::DATE,
-- 		SUM(I."TotalReceived") AS "TotalReceived", 
-- 		SUM(I."TotalDupReceived") AS "TotalDupReceived"
-- 	FROM "InventoryLog" I, "Agency" A
-- 	WHERE TO_CHAR(I."ActionDate", 'YYYY-MM') = p_month
-- 		AND A."AgencyId" = I."AgencyId"
-- 	GROUP BY I."AgencyId", A."AgencyName", I."ActionDate"::DATE
-- 	ORDER BY  I."AgencyId";
	SELECT 
		I."AgencyId",
		A."AgencyName", 
		I."LotteryDate"::DATE,
		SUM(I."TotalReceived") AS "TotalReceived", 
		0 :: INT8
	FROM "InventoryFull" I, "Agency" A
	WHERE TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
		AND A."AgencyId" = I."AgencyId"
	GROUP BY I."AgencyId", A."AgencyName", I."LotteryDate"::DATE
	ORDER BY  I."AgencyId";
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_of_all_agency_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_return_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_return_in_month(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DateReturn" date, "TotalReturn" bigint)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	SELECT 
		T."FromSalePointId",
		SP."SalePointName", 
		T."LotteryDate", 
		SUM(T."TotalTrans") AS "TotalTrans"
	FROM "Transition" T, "SalePoint" SP
	WHERE TO_CHAR(T."LotteryDate", 'YYYY-MM') = p_month 
		AND T."TransitionTypeId" = 3
		AND SP."SalePointId" = T."FromSalePointId"
	GROUP BY T."FromSalePointId", T."LotteryDate", SP."SalePointName";
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_return_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_return_in_month_v2(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_return_in_month_v2(p_month character varying, p_sale_point_id integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DateReturn" date, "TotalReturn" bigint)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	SELECT 
		T."FromSalePointId",
		SP."SalePointName", 
		T."LotteryDate", 
		SUM(T."TotalTrans") AS "TotalTrans"
	FROM "Transition" T
		LEFT JOIN "SalePoint" SP ON SP."SalePointId" = T."FromSalePointId"
	WHERE TO_CHAR(T."LotteryDate", 'YYYY-MM') = p_month 
		AND T."TransitionTypeId" = 3
		AND (COALESCE(p_sale_point_id, 0) = 0 OR SP."SalePointId" = p_sale_point_id)
	GROUP BY T."FromSalePointId", T."LotteryDate", SP."SalePointName";
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_return_in_month_v2(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_sell_of_some_salepoint_is_managed(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_sell_of_some_salepoint_is_managed(p_user_role integer, p_month character varying, p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "ActionDate" date, "TotalSold" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_is_leader BOOL;
	v_user_id INT;
BEGIN

	SELECT UT."IsLeader", UR."UserId" INTO v_is_leader, v_user_id
	FROM "UserRole" UR 
		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role;
	
	IF v_is_leader IS TRUE THEN	
		IF p_month IS NOT NULL THEN
			RETURN QUERY
				WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
				SELECT 
					SPL."SalePointId",
					SP."SalePointName",
					SPL."LotteryTypeId",
					LT."LotteryTypeName",
					SPL."ActionDate" :: DATE,
					COALESCE(SUM(SPL."Quantity"),0) AS "TotalSold"
				FROM "SalePointLog" SPL 
					JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
					JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"	
					JOIN LIST L ON SP."SalePointId" = L."SalePointId"
				WHERE TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month AND SPL."IsDeleted" IS FALSE
				GROUP BY 
					SPL."SalePointId", 
					SP."SalePointName", 
					SPL."LotteryTypeId",
					LT."LotteryTypeName",
					SPL."ActionDate" :: DATE
				ORDER BY SPL."SalePointId",SPL."ActionDate"::DATE, SPL."LotteryTypeId";
			ELSE
				RETURN QUERY 
					WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
					SELECT 
						SPL."SalePointId",
						SP."SalePointName",
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."ActionDate" :: DATE,
						COALESCE(SUM(SPL."Quantity"),0) AS "TotalSold"
					FROM "SalePointLog" SPL 
						JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
						JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"	
					WHERE (SPL."ActionDate" :: DATE) = (p_date :: DATE) AND SPL."IsDeleted" IS FALSE
					GROUP BY 
						SPL."SalePointId", 
						SP."SalePointName", 
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."ActionDate"::DATE
					ORDER BY SPL."SalePointId", SPL."ActionDate"::DATE, SPL."LotteryTypeId";
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_sell_of_some_salepoint_is_managed(p_user_role integer, p_month character varying, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_get_total_lottery_sell_of_some_salepoint_is_managed_(integer, character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_lottery_sell_of_some_salepoint_is_managed_(p_user_role integer, p_month character varying, p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "ActionDate" date, "TotalSold" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_is_manager BOOL;
	v_user_id INT;
BEGIN

	SELECT UT."IsManager", UR."UserId" INTO v_is_manager, v_user_id
	FROM "UserRole" UR 
		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role;
	
	IF v_is_manager IS TRUE THEN	
		IF p_month IS NOT NULL THEN
			RETURN QUERY
				WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
				SELECT 
					SPL."SalePointId",
					SP."SalePointName",
					SPL."LotteryTypeId",
					LT."LotteryTypeName",
					SPL."ActionDate" :: DATE,
					COALESCE(SUM(SPL."Quantity"),0) AS "TotalSold"
				FROM "SalePointLog" SPL 
					JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
					JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"	
					JOIN LIST L ON SP."SalePointId" = L."SalePointId"
				WHERE TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
				GROUP BY 
					SPL."SalePointId", 
					SP."SalePointName", 
					SPL."LotteryTypeId",
					LT."LotteryTypeName",
					SPL."ActionDate" :: DATE
				ORDER BY SPL."SalePointId",SPL."ActionDate"::DATE, SPL."LotteryTypeId";
			ELSE
				RETURN QUERY 
					WITH LIST AS (SELECT * FROM crm_get_list_salepoint_of_leader(v_user_id))
					SELECT 
						SPL."SalePointId",
						SP."SalePointName",
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."ActionDate" :: DATE,
						COALESCE(SUM(SPL."Quantity"),0) AS "TotalSold"
					FROM "SalePointLog" SPL 
						JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
						JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"	
					WHERE (SPL."ActionDate" :: DATE) = (p_date :: DATE)
					GROUP BY 
						SPL."SalePointId", 
						SP."SalePointName", 
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."ActionDate"::DATE
					ORDER BY SPL."SalePointId", SPL."ActionDate"::DATE, SPL."LotteryTypeId";
			END IF;
		END IF;
END;
$$;


ALTER FUNCTION public.crm_report_get_total_lottery_sell_of_some_salepoint_is_managed_(p_user_role integer, p_month character varying, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_report_get_total_shift_of_all_user_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_shift_of_all_user_in_month(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying, "SalePointId" integer, "Quantity" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmpSDD AS (
		SELECT 
			SD."UserId", 
			SD."ShiftTypeId",
			ST."ShiftTypeName",
			SD."SalePointId",
			COUNT(SD."ShiftTypeId") AS "Quantity"
		FROM "ShiftDistribute" SD JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId"
		WHERE SD."IsActive" IS TRUE 
		AND
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN
					TO_CHAR(SD."DistributeDate",'YYYY-MM-DD') <= TO_CHAR(NOW(),'YYYY-MM-DD')
					AND TO_CHAR(SD."DistributeDate",'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
				ELSE
					TO_CHAR(SD."DistributeDate",'YYYY-MM') = p_month 
				END 
		GROUP BY SD."UserId", SD."ShiftTypeId", ST."ShiftTypeName",
			SD."SalePointId"),
		tmp2 AS(
			SELECT COUNT(1) AS "DaysInAMonth"
			FROM   generate_series(date ('2023-03'||'-01')::DATE, (date_trunc('month', ('2023-03'||'-10')::date) + interval '1 month' - interval '1 day')::date, '1 day') day
		)
			
	SELECT 
		U."UserId",
		U."FullName",
		SDD."ShiftTypeId",
		SDD."ShiftTypeName",
		SDD."SalePointId",
		CASE WHEN COALESCE(SDD."Quantity",0) > ( SELECT T."DaysInAMonth" - 2 from tmp2 T ) THEN COALESCE(SDD."Quantity",0) + 1 ELSE COALESCE(SDD."Quantity",0) END
	FROM "User" U JOIN tmpSDD SDD ON U."UserId" = SDD."UserId"
	ORDER BY U."UserId";
END;
$$;


ALTER FUNCTION public.crm_report_get_total_shift_of_all_user_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_shift_of_all_user_in_month_of_salepoint(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_of_salepoint(p_month character varying, p_salepointid integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "SalePointId" integer, "SalePointName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Quantity" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF p_salePointId <> 0 THEN
		RETURN QUERY
		WITH tmpSDD AS (
			SELECT 
				SD."UserId", 
				SD."ShiftTypeId",
				ST."ShiftTypeName",
				SP."SalePointId",
				SP."SalePointName",
				COUNT(SD."ShiftTypeId") AS "Quantity"
			FROM "ShiftDistribute" SD JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId", "SalePoint" SP
			WHERE SD."IsActive" = 't' 
				AND TO_CHAR(SD."DistributeDate",'YYYY-MM') = p_month 
				AND SP."SalePointId" = SD."SalePointId" 
				AND SD."SalePointId" = p_salePointId
			GROUP BY SD."UserId", SD."ShiftTypeId", ST."ShiftTypeName", SP."SalePointId", SP."SalePointName")
		SELECT 
			U."UserId",
			U."FullName",
			SDD."SalePointId",
			SDD."SalePointName",
			SDD."ShiftTypeId",
			SDD."ShiftTypeName",
			COALESCE(SDD."Quantity",0)	
		FROM "User" U JOIN tmpSDD SDD ON U."UserId" = SDD."UserId"
		ORDER BY U."UserId";
	ELSE
		RETURN QUERY
			WITH tmpSDD AS (
				SELECT 
					SD."UserId", 
					SD."ShiftTypeId",
					ST."ShiftTypeName",
					SP."SalePointId",
					SP."SalePointName",
					COUNT(SD."ShiftTypeId") AS "Quantity"
				FROM "ShiftDistribute" SD JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId", "SalePoint" SP
				WHERE SD."IsActive" = 't' 
					AND TO_CHAR(SD."DistributeDate",'YYYY-MM') = p_month 
					AND SP."SalePointId" = SD."SalePointId"
				GROUP BY SD."UserId", SD."ShiftTypeId", ST."ShiftTypeName", SP."SalePointId", SP."SalePointName")
			SELECT 
				U."UserId",
				U."FullName",
				SDD."SalePointId",
				SDD."SalePointName",
				SDD."ShiftTypeId",
				SDD."ShiftTypeName",
				COALESCE(SDD."Quantity",0)	
			FROM "User" U JOIN tmpSDD SDD ON U."UserId" = SDD."UserId"
			ORDER BY U."UserId";
	END IF;
	
END;
$$;


ALTER FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_of_salepoint(p_month character varying, p_salepointid integer) OWNER TO postgres;

--
-- Name: crm_report_get_total_shift_of_all_user_in_month_v1(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_v1(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Quantity" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmpSDD AS (
		SELECT 
			SD."UserId", 
			SD."ShiftTypeId",
			ST."ShiftTypeName",
			COUNT(SD."ShiftTypeId") AS "Quantity"
		FROM "ShiftDistribute" SD JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId"
		WHERE SD."IsActive" IS TRUE AND TO_CHAR(SD."DistributeDate",'YYYY-MM-DD') <= p_month
		GROUP BY SD."UserId", SD."ShiftTypeId", ST."ShiftTypeName")
	SELECT 
		U."UserId",
		U."FullName",
		SDD."ShiftTypeId",
		SDD."ShiftTypeName",
		COALESCE(SDD."Quantity",0)
	FROM "User" U JOIN tmpSDD SDD ON U."UserId" = SDD."UserId"
	ORDER BY U."UserId";
END;
$$;


ALTER FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_v1(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_shift_of_all_user_in_month_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_v2(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying, "SalePointId" integer, "Quantity" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmpSDD AS (
		SELECT 
			SD."UserId", 
			SD."ShiftTypeId",
			ST."ShiftTypeName",
			SD."SalePointId",
			COUNT(SD."ShiftTypeId") AS "Quantity"
		FROM "ShiftDistribute" SD JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId"
		WHERE SD."IsActive" IS TRUE 
		AND
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN
					TO_CHAR(SD."DistributeDate",'YYYY-MM-DD') <= TO_CHAR(NOW(),'YYYY-MM-DD')
					AND TO_CHAR(SD."DistributeDate",'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
				ELSE
					TO_CHAR(SD."DistributeDate",'YYYY-MM') = p_month 
				END 
		GROUP BY SD."UserId", SD."ShiftTypeId", ST."ShiftTypeName",
			SD."SalePointId"),
		tmp2 AS(
			SELECT COUNT(1) AS "DaysInAMonth"
			FROM   generate_series(date ('2023-03'||'-01')::DATE, (date_trunc('month', ('2023-03'||'-10')::date) + interval '1 month' - interval '1 day')::date, '1 day') day
		)
			
	SELECT 
		U."UserId",
		U."FullName",
		SDD."ShiftTypeId",
		SDD."ShiftTypeName",
		SDD."SalePointId",
		CASE WHEN COALESCE(SDD."Quantity",0) > ( SELECT T."DaysInAMonth" - 2 from tmp2 T ) THEN COALESCE(SDD."Quantity",0) + 1 ELSE COALESCE(SDD."Quantity",0) END
	FROM "User" U JOIN tmpSDD SDD ON U."UserId" = SDD."UserId"
	ORDER BY U."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_total_shift_of_all_user_in_month_v3(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_v3(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "SalePointId" integer, "Quantity" bigint, "Sum" bigint, "MainSalePointId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_event INT :=(SELECT 
			COUNT(E."Date") 
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE AND E."Date"::DATE<= NOW()::DATE);
BEGIN
	raise notice 'v_event: %',v_event;
	RETURN QUERY
	WITH tmpSDD AS (
		SELECT 
			SD."UserId", 
			SD."ShiftTypeId",
			ST."ShiftTypeName",
			SD."SalePointId",
			COUNT(SD."ShiftTypeId") AS "Quantity"
		FROM "ShiftDistribute" SD 
		JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId"
		WHERE SD."IsActive" IS TRUE 
		AND
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN
					TO_CHAR(SD."DistributeDate",'YYYY-MM-DD') <= TO_CHAR(NOW(),'YYYY-MM-DD')
					AND TO_CHAR(SD."DistributeDate",'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
				ELSE
					TO_CHAR(SD."DistributeDate",'YYYY-MM') = p_month 
				END 
		GROUP BY SD."UserId", SD."ShiftTypeId", ST."ShiftTypeName",
			SD."SalePointId"),
		tmp2 AS(
			SELECT COUNT(1) AS "DaysInAMonth"
			FROM   generate_series(date ('2023-03'||'-01')::DATE, (date_trunc('month', ('2023-03'||'-10')::date) + interval '1 month' - interval '1 day')::date, '1 day') day
		),tmp3 AS
		(
			SELECT 
				U."UserId",
				U."FullName",
				SDD."ShiftTypeId",
				SDD."ShiftTypeName",
				SDD."SalePointId",
				COALESCE(SDD."Quantity",0) AS "Quantity"
			FROM "User" U JOIN tmpSDD SDD ON U."UserId" = SDD."UserId"
			ORDER BY U."UserId"
		),
		tmp4 AS
		(
			SELECT 
				T3."UserId",
				SUM(T3."Quantity") AS "Sum",
				U."SalePointId"
			FROM tmp3 T3 
			LEFT JOIN "User" U ON U."UserId" = T3."UserId"
			GROUP BY T3."UserId",U."SalePointId"
		)
				SELECT 
					T3."UserId",
					T3."FullName",
					--T3."ShiftTypeId",
					--T3."ShiftTypeName",
					T3."SalePointId",
					SUM(COALESCE(T3."Quantity"+ v_event,v_event))::INT8 AS "Quantity",
					(T4."Sum"+v_event)::INT8,
					T4."SalePointId" AS "MainSalePointId"
				FROM tmp3 T3 
				LEFT JOIN tmp4 T4 ON T3."UserId" = T4."UserId"
				WHERE T4."SalePointId" IS NOT NULL
				GROUP BY 
					T3."UserId",
					T3."FullName",
					T3."SalePointId",
					T4."Sum",
					T4."SalePointId"
				ORDER BY 
					T3."UserId",
					T3."SalePointId";


END;
$$;


ALTER FUNCTION public.crm_report_get_total_shift_of_all_user_in_month_v3(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_transiton_type_offset(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_transiton_type_offset(p_month character varying) RETURNS TABLE("SalePointName" character varying, "SalePointId" integer, "TransitionDate" date, "TransferTicket" bigint, "TicketsReceived" bigint, "Offset" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	WITH tmp AS(
			SELECT
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE,
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 1),0) AS "TransferTicket",
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 2),0) AS "TicketsReceived"
			FROM "Transition" T 
			LEFT JOIN "SalePoint" S ON T."FromSalePointId" = S."SalePointId" OR T."ToSalePointId" = S."SalePointId"
			WHERE --T."TransitionDate"::DATE = p_day::DATE
			--AND 
			TO_CHAR(T."TransitionDate",'YYYY-MM') = p_month
			GROUP BY 
				T."TransitionTypeId",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE
			ORDER BY S."SalePointId"
	)
	SELECT
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE,
		SUM(T."TransferTicket")::INT8 AS "TransferTicket",
		SUM(T."TicketsReceived")::INT8 AS "TicketsReceived",
		(SUM(T."TicketsReceived") - SUM(T."TransferTicket"))::INT8 AS "Offset"
	FROM tmp T 
	GROUP BY 
		T."SalePointId", 
		T."SalePointName",
		T."TransitionDate"::DATE
	ORDER BY 
		T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_get_transiton_type_offset(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_transiton_type_offset_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_transiton_type_offset_v2(p_month character varying) RETURNS TABLE("SalePointName" character varying, "SalePointId" integer, "TransitionDate" date, "TransferTicket" bigint, "TicketsReceived" bigint, "Offset" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	WITH tmp AS (
		SELECT
		  		CASE 
					WHEN T."LotteryChannelId" IN (1000, 1001, 1002, 1004) THEN T."LotteryChannelId"
					ELSE 'OtherGroup' -- Đặt tên cho nhóm còn lại
				END AS "ChannelGroup",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE,
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 1), 0) AS "TransferTicket",
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 2), 0) AS "TicketsReceived"
			FROM "Transition" T 
			LEFT JOIN "SalePoint" S ON T."FromSalePointId" = S."SalePointId" OR T."ToSalePointId" = S."SalePointId"
			WHERE 
				TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			GROUP BY 
				"ChannelGroup", -- Sử dụng "ChannelGroup" thay vì "LotteryChannelId"
				T."TransitionTypeId",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE
			ORDER BY S."SalePointId"
	)
	SELECT
		T."ChannelGroup", -- Sử dụng "ChannelGroup" thay vì "LotteryChannelId"
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE,
		SUM(T."TransferTicket")::INT8 AS "TransferTicket",
		SUM(T."TicketsReceived")::INT8 AS "TicketsReceived",
		(SUM(T."TicketsReceived") - SUM(T."TransferTicket"))::INT8 AS "Offset"
	FROM tmp T 
	GROUP BY 
		T."ChannelGroup", -- Sử dụng "ChannelGroup" thay vì "SalePointId"
		T."SalePointName",
		T."TransitionDate"::DATE
	ORDER BY 
		T."ChannelGroup"; -- Sử dụng "ChannelGroup" thay vì "SalePointId"
		
END;
$$;


ALTER FUNCTION public.crm_report_get_transiton_type_offset_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_transiton_type_offset_v3(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_transiton_type_offset_v3(p_month character varying) RETURNS TABLE("SalePointName" character varying, "SalePointId" integer, "TransitionDate" date, "TransferTicket" bigint, "TicketsReceived" bigint, "Offset" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	WITH tmp AS (
		SELECT
		  		CASE 
					WHEN T."LotteryChannelId" IN (1000, 1001, 1002, 1004) THEN T."LotteryChannelId"
					ELSE -1-- Đặt tên cho nhóm còn lại
				END AS "ChannelGroup",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE,
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 1), 0) AS "TransferTicket",
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 2), 0) AS "TicketsReceived"
			FROM "Transition" T 
			LEFT JOIN "SalePoint" S ON T."FromSalePointId" = S."SalePointId" OR T."ToSalePointId" = S."SalePointId"
			WHERE 
				TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			GROUP BY 
				"ChannelGroup", -- Sử dụng "ChannelGroup" thay vì "LotteryChannelId"
				T."TransitionTypeId",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE
			ORDER BY S."SalePointId"
	)
	SELECT
		T."ChannelGroup", -- Sử dụng "ChannelGroup" thay vì "LotteryChannelId"
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE,
		SUM(T."TransferTicket")::INT8 AS "TransferTicket",
		SUM(T."TicketsReceived")::INT8 AS "TicketsReceived",
		(SUM(T."TicketsReceived") - SUM(T."TransferTicket"))::INT8 AS "Offset"
	FROM tmp T 
	GROUP BY 
		T."ChannelGroup", -- Sử dụng "ChannelGroup" thay vì "SalePointId"
		T."SalePointName",
		T."TransitionDate"::DATE
	ORDER BY 
		T."ChannelGroup"; -- Sử dụng "ChannelGroup" thay vì "SalePointId"
		
END;
$$;


ALTER FUNCTION public.crm_report_get_transiton_type_offset_v3(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_transiton_type_offset_v4(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_transiton_type_offset_v4(p_month character varying) RETURNS TABLE("ChannelGroup" integer, "SalePointName" character varying, "SalePointId" integer, "TransitionDate" date, "TransferTicket" bigint, "TicketsReceived" bigint, "Offset" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	WITH tmp AS (
		SELECT
		  		CASE 
					WHEN T."LotteryChannelId" IN (1000, 1001, 1002, 1004) THEN 1
					ELSE -1
				END AS "ChannelGroup",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE,
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 1 and T."ConfirmStatusId"=2), 0) AS "TransferTicket",
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 2 and  T."ConfirmStatusId"=2), 0) AS "TicketsReceived"
			FROM "Transition" T 
			LEFT JOIN "SalePoint" S ON T."FromSalePointId" = S."SalePointId" OR T."ToSalePointId" = S."SalePointId"
			WHERE 
				TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month AND  T."ShiftDistributeId"<>-1
			GROUP BY 
				"ChannelGroup", 
				T."TransitionTypeId",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE
			ORDER BY S."SalePointId"
	)
	SELECT
		T."ChannelGroup",
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE,
		SUM(T."TransferTicket")::INT8 AS "TransferTicket",
		SUM(T."TicketsReceived")::INT8 AS "TicketsReceived",
		(SUM(T."TicketsReceived") - SUM(T."TransferTicket"))::INT8 AS "Offset"
	FROM tmp T 
	where T."SalePointId" is not null
	GROUP BY 
		T."ChannelGroup", 
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE
	ORDER BY 
		T."ChannelGroup";
		
END;








--Bản cũ

-- DECLARE

-- BEGIN

-- 	RETURN QUERY
-- 	WITH tmp AS (
-- 		SELECT
-- 		  		CASE 
-- 					WHEN T."LotteryChannelId" IN (1000, 1001, 1002, 1004) THEN 1
-- 					ELSE -1
-- 				END AS "ChannelGroup",
-- 				S."SalePointName",
-- 				S."SalePointId",
-- 				T."TransitionDate"::DATE,
-- 				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 1 and T."ConfirmStatusId"=2), 0) AS "TransferTicket",
-- 				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 2 and  T."ConfirmStatusId"=2), 0) AS "TicketsReceived"
-- 			FROM "Transition" T 
-- 			LEFT JOIN "SalePoint" S ON T."FromSalePointId" = S."SalePointId" OR T."ToSalePointId" = S."SalePointId"
-- 			WHERE 
-- 				TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
-- 			GROUP BY 
-- 				"ChannelGroup", 
-- 				T."TransitionTypeId",
-- 				S."SalePointName",
-- 				S."SalePointId",
-- 				T."TransitionDate"::DATE
-- 			ORDER BY S."SalePointId"
-- 	)
-- 	SELECT
-- 		T."ChannelGroup",
-- 		T."SalePointName",
-- 		T."SalePointId",
-- 		T."TransitionDate"::DATE,
-- 		SUM(T."TransferTicket")::INT8 AS "TransferTicket",
-- 		SUM(T."TicketsReceived")::INT8 AS "TicketsReceived",
-- 		(SUM(T."TicketsReceived") - SUM(T."TransferTicket"))::INT8 AS "Offset"
-- 	FROM tmp T 
-- 	where T."SalePointId" is not null
-- 	GROUP BY 
-- 		T."ChannelGroup", 
-- 		T."SalePointName",
-- 		T."SalePointId",
-- 		T."TransitionDate"::DATE
-- 	ORDER BY 
-- 		T."ChannelGroup";
		
-- END;
$$;


ALTER FUNCTION public.crm_report_get_transiton_type_offset_v4(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_get_transiton_type_offset_v5(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_get_transiton_type_offset_v5(p_month character varying) RETURNS TABLE("IsScratchcard" boolean, "SalePointName" character varying, "SalePointId" integer, "TransitionDate" date, "TransferTicket" bigint, "TicketsReceived" bigint, "Offset" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	WITH tmp AS (
		SELECT
		  		
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE,
				L."IsScratchcard",
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 1 and T."ConfirmStatusId"=2), 0) AS "TransferTicket",
				COALESCE( SUM(T."TotalTrans") FILTER (WHERE T."TransitionTypeId" = 2 and  T."ConfirmStatusId"=2), 0) AS "TicketsReceived"
			FROM "Transition" T 
			LEFT JOIN "SalePoint" S ON T."FromSalePointId" = S."SalePointId" OR T."ToSalePointId" = S."SalePointId"
			JOIN "LotteryChannel" L ON T."LotteryChannelId" = L."LotteryChannelId"
			WHERE 
				TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month AND  T."ShiftDistributeId"<>-1
			GROUP BY 
				T."TransitionTypeId",
				S."SalePointName",
				S."SalePointId",
				T."TransitionDate"::DATE,
				L."IsScratchcard"
			ORDER BY S."SalePointId"
	)
	SELECT
		T."IsScratchcard",
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE,
		SUM(T."TransferTicket")::INT8 AS "TransferTicket",
		SUM(T."TicketsReceived")::INT8 AS "TicketsReceived",
		(SUM(T."TicketsReceived") - SUM(T."TransferTicket"))::INT8 AS "Offset"
	FROM tmp T 
	where T."SalePointId" is not null
	GROUP BY 
		T."IsScratchcard", 
		T."SalePointName",
		T."SalePointId",
		T."TransitionDate"::DATE;
END;

$$;


ALTER FUNCTION public.crm_report_get_transiton_type_offset_v5(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_lottery_in_a_day(integer, timestamp without time zone, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_lottery_in_a_day(p_sale_point_id integer, p_date timestamp without time zone, p_shift_id bigint) RETURNS TABLE("Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	with tmp AS(SELECT
		RL.*,
		LC."IsScratchcard"
	FROM "ReportLottery" RL
	LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = RL."LotteryChannelId"
	WHERE RL."Date" = p_date AND (RL."ShiftId" = p_shift_id or p_shift_id = 0) AND (COALESCE( p_sale_point_id , 0) = 0 OR RL."SalePointId" =  p_sale_point_id )
	ORDER BY RL."LotteryDate",LC."LotteryChannelTypeId")
	SELECT array_to_json(array_agg(json_build_object(
		'ReportLotteryId',
		T."ReportLotteryId",
		'ShiftId',
		T."ShiftId",
		'Date',
		T."Date",
		'LotteryChannelId',
		T."LotteryChannelId",
		'SalePointId',
		T."SalePointId",
		'Stock',
		T."Stock",
		'SoldRetail',
		T."SoldRetail",
		'Remaining',
		T."Remaining",
		'LotteryTypeId',
		T."LotteryTypeId",
		'Transfer',
		T."Transfer",
		'Received',
		T."Received",
		'LotteryDate',
		T."LotteryDate",
		'OrdinalNum',
		T."OrdinalNum",
		'SoldRetailMoney',
		T."SoldRetailMoney",
		'SoldWholeSale',
		T."SoldWholeSale",
		'SoldWholeSaleMoney',
		T."SoldWholeSaleMoney",
		'ReceivedDup',
		T."ReceivedDup",
		'TransferDup',
		T."TransferDup",
		'RemainingDup',
		T."RemainingDup",
		'StockDup',
		T."StockDup",
		'SoldRetailDup',
		T."SoldRetailDup",
		'SoldRetailMoneyDup',
		T."SoldRetailMoneyDup",
		'SoldWholeSaleDup',
		T."SoldWholeSaleDup",
		'SoldWholeSaleMoneyDup',
		T."SoldWholeSaleMoneyDup",
		'IsScratchcard',
		T."IsScratchcard"
	)))::TEXT AS "Data" FROM tmp T;
END;
$$;


ALTER FUNCTION public.crm_report_lottery_in_a_day(p_sale_point_id integer, p_date timestamp without time zone, p_shift_id bigint) OWNER TO postgres;

--
-- Name: crm_report_lottery_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_lottery_in_month(p_month character varying) RETURNS TABLE("Date" date, "SoldRetailDup" bigint, "SoldRetail" integer, "SalePointId" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT RLT."Date", RLT."SoldRetailDup", RLT."SoldRetail", RLT."SalePointId" FROM "ReportLottery" RLT WHERE TO_CHAR(RLT."Date", 'YYYY-MM') = p_month;
END
$$;


ALTER FUNCTION public.crm_report_lottery_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_manager_overall(integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE("ScratchcardData" text, "LotteryData" text, "RepaymentData" text, "WinningData" text)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY 
	SELECT
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				ST."ShiftId",
				S."ShiftName",
				ST."TotalReceived",
				ST."TotalRemaining",
				ST."TotalSold",
				ST."TotalSoldMoney"
			FROM "ShiftTransfer" ST
				JOIN "Shift" S ON S."ShiftId" = ST."ShiftId"
			WHERE "LotteryTypeId" = 3 
				AND "ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR ST."SalePointid" = p_sale_point_id)
		) r
	)::TEXT AS "ScratchcardData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				ST."ShiftId",
				S."ShiftName",
				ST."UserId",
				U."FullName",
				SUM(ST."TotalReceived") AS "TotalReceived",
				SUM(ST."TotalRemaining") AS "TotalRemaining",
				ST."LotteryChannelId",
				LC."ShortName",
				ST."LotteryDate",
				SUM(ST."TotalTrans") AS "TotalTrans",
				SUM(ST."TotalReturns") AS "TotalReturns",
				SUM(ST."TotalStocks") AS "TotalStocks",
				SUM(ST."TotalSold") AS "TotalSold",
				SUM(ST."TotalSoldMoney") AS "TotalSoldMoney",
				ST."SalePointid",
				SP."SalePointName"
			FROM "ShiftTransfer" ST
				JOIN "Shift" S ON S."ShiftId" = ST."ShiftId"
				JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = ST."LotteryChannelId"
				JOIN "User" U ON U."UserId" = ST."UserId"
				JOIN "SalePoint" SP ON SP."SalePointId" = ST."SalePointid"
			WHERE ST."LotteryTypeId" <> 3 
				AND ST."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR ST."SalePointid" = p_sale_point_id)
			GROUP BY
				ST."ShiftId",
				S."ShiftName",
				ST."UserId",
				U."FullName",
				ST."LotteryChannelId",
				LC."ShortName",
				ST."LotteryDate",
				ST."SalePointid",
				SP."SalePointName",
				LC."DayIds",
				LC."LotteryChannelTypeId"
			ORDER BY ST."ShiftId", ST."LotteryDate", LC."DayIds", LC."LotteryChannelTypeId"
		) r
	)::TEXT AS "LotteryData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				R."SalePointId",
				SP."SalePointName",
				SD."ShiftId",
				S."ShiftName",
				SUM(R."Amount") AS "TotalRepay"
			FROM "Repayment" R
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = R."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = R."SalePointId"
			WHERE R."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR R."SalePointId" = p_sale_point_id)
			GROUP BY
				R."SalePointId",
				SP."SalePointName",
				SD."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "RepaymentData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName",
				SUM(W."Quantity") AS "TotalQuantity",
				SUM(W."WinningPrice") AS "TotalPrice"
			FROM "Winning" W
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = W."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
				JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			WHERE W."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR W."SalePointId" = p_sale_point_id)
			GROUP BY
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "WinningData";
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_manager_overall_scratchcard_shift(integer, timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall_scratchcard_shift(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer, p_shift_id integer) RETURNS TABLE("ScratchcardData" text, "LotteryData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_role INT;
	v_shift_dis INT;

BEGIN
	--Lấy ca
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role, v_shift_dis
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = p_shift_id;

	
	raise notice 'v_role: %, v_shift_dis: %', v_role, v_shift_dis;
	RETURN QUERY 
	WITH tmp AS (
		SELECT p_shift_id  AS "ShiftId", f.* FROM crm_report_data_finish_shift_without_lottery(v_role, v_shift_dis, p_lottery_date) f
	)
	SELECT
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT t.* FROM tmp t WHERE t."LotteryTypeId" = 3
		) r
	)::TEXT AS "ScratchcardData",
NULL AS "LotteryData";
	
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall_scratchcard_shift(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer, p_shift_id integer) OWNER TO postgres;

--
-- Name: crm_report_manager_overall_v2(integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall_v2(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE("ScratchcardData" text, "LotteryData" text, "RepaymentData" text, "WinningData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_role_1 INT;
	v_shift_dis_1 INT;
	v_role_2 INT;
	v_shift_dis_2 INT;
BEGIN
	--Lấy ca 1
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_1, v_shift_dis_1
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 1;
	--Lấy ca 2
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_2, v_shift_dis_2
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 2;

	RETURN QUERY 
	WITH tmp AS (
		SELECT 1 AS "ShiftId", f.* FROM crm_report_data_finish_shift_v2(v_role_1, v_shift_dis_1, p_lottery_date) f
		UNION
		SELECT 2 AS "ShiftId", f.* FROM crm_report_data_finish_shift_v2(v_role_2, v_shift_dis_2, p_lottery_date) f
	)
	SELECT
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT t.* FROM tmp t WHERE t."LotteryTypeId" = 3
		) r
	)::TEXT AS "ScratchcardData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
				SELECT 
					t.*,
					LC."ShortName"
				FROM tmp t 
					JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = t."LotteryChannelId"
				WHERE (t."TotalStocks" <> 0 OR t."TotalTrans" <> 0 OR t."TotalReceived" <> 0 OR t."TotalRemaining" <> 0 OR t."TotalSold" <> 0 OR t."LotteryTypeId" = 1)
				ORDER BY t."ShiftId", t."LotteryDate",t."LotteryTypeId" <> 2, t."LotteryTypeId", LC."DayIds", LC."LotteryChannelTypeId"
		) r
	)::TEXT AS "LotteryData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				R."SalePointId",
				SP."SalePointName",
				SD."ShiftId",
				S."ShiftName",
				SUM(R."Amount") AS "TotalRepay"
			FROM "Repayment" R
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = R."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = R."SalePointId"
			WHERE R."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR R."SalePointId" = p_sale_point_id)
			GROUP BY
				R."SalePointId",
				SP."SalePointName",
				SD."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "RepaymentData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName",
				SUM(W."Quantity") AS "TotalQuantity",
				SUM(W."WinningPrice") AS "TotalPrice"
			FROM "Winning" W
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = W."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
				JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			WHERE W."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR W."SalePointId" = p_sale_point_id)
			GROUP BY
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "WinningData";
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall_v2(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_manager_overall_v3(integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall_v3(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE("ScratchcardData" text, "LotteryData" text, "RepaymentData" text, "WinningData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_role_1 INT;
	v_shift_dis_1 INT;
	v_role_2 INT;
	v_shift_dis_2 INT;
BEGIN
	--Lấy ca 1
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_1, v_shift_dis_1
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 1;
	--Lấy ca 2
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_2, v_shift_dis_2
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 2;
	
	raise notice 'v_role_1: %, v_shift_dis_1: %, v_role_2: %, v_shift_dis_2: %', v_role_1, v_shift_dis_1, v_role_2, v_shift_dis_2;
	RETURN QUERY 
	WITH tmp AS (
		SELECT 1 AS "ShiftId", f.* FROM crm_report_data_finish_shift_v4(v_role_1, v_shift_dis_1, p_lottery_date) f
		UNION
		SELECT 2 AS "ShiftId", f.* FROM crm_report_data_finish_shift_v4(v_role_2, v_shift_dis_2, p_lottery_date) f
	)
	SELECT
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT t.* FROM tmp t WHERE t."LotteryTypeId" = 3
		) r
	)::TEXT AS "ScratchcardData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
				SELECT 
					t.*,
					LC."ShortName"
				FROM tmp t 
					JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = t."LotteryChannelId"
				WHERE (t."TotalStocks" <> 0 OR t."TotalTrans" <> 0 OR t."TotalReceived" <> 0 OR t."TotalRemaining" <> 0 OR t."TotalSold" <> 0 OR t."LotteryTypeId" = 1 )
				ORDER BY t."ShiftId", t."LotteryDate",t."LotteryTypeId" <> 2, t."LotteryTypeId", LC."DayIds", LC."LotteryChannelTypeId"
		) r
	)::TEXT AS "LotteryData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				R."SalePointId",
				SP."SalePointName",
				SD."ShiftId",
				S."ShiftName",
				SUM(R."Amount") AS "TotalRepay"
			FROM "Repayment" R
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = R."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = R."SalePointId"
			WHERE R."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR R."SalePointId" = p_sale_point_id)
			GROUP BY
				R."SalePointId",
				SP."SalePointName",
				SD."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "RepaymentData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName",
				SUM(W."Quantity") AS "TotalQuantity",
				SUM(W."WinningPrice") AS "TotalPrice"
			FROM "Winning" W
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = W."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
				JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			WHERE W."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR W."SalePointId" = p_sale_point_id)
			GROUP BY
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "WinningData";
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall_v3(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_manager_overall_v4(integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall_v4(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE("ScratchcardData" text, "LotteryData" text, "WinningData" text, "MoneyData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_role_1 INT;
	v_shift_dis_1 INT;
	v_role_2 INT;
	v_shift_dis_2 INT;
BEGIN
	--Lấy ca 1
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_1, v_shift_dis_1
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 1;
	--Lấy ca 2
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_2, v_shift_dis_2
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 2;
	
	raise notice 'v_role_1: %, v_shift_dis_1: %, v_role_2: %, v_shift_dis_2: %', v_role_1, v_shift_dis_1, v_role_2, v_shift_dis_2;
	RETURN QUERY 
	WITH tmp AS (
		SELECT 1 AS "ShiftId", f.* FROM crm_report_data_finish_shift_v4(v_role_1, v_shift_dis_1, p_lottery_date) f
		UNION
		SELECT 2 AS "ShiftId", f.* FROM crm_report_data_finish_shift_v4(v_role_2, v_shift_dis_2, p_lottery_date) f
	)
	SELECT
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT t.* FROM tmp t WHERE t."LotteryTypeId" = 3
		) r
	)::TEXT AS "ScratchcardData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
				SELECT 
					t.*,
					LC."ShortName"
				FROM tmp t 
					JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = t."LotteryChannelId"
				WHERE (t."TotalStocks" <> 0 OR t."TotalTrans" <> 0 OR t."TotalReceived" <> 0 OR t."TotalRemaining" <> 0 OR t."TotalSold" <> 0 OR t."LotteryTypeId" = 1 )
				ORDER BY t."ShiftId", t."LotteryDate",t."LotteryTypeId" <> 2, t."LotteryTypeId", LC."DayIds", LC."LotteryChannelTypeId"
		) r
	)::TEXT AS "LotteryData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName",
				SUM(W."Quantity") AS "TotalQuantity",
				SUM(W."WinningPrice") AS "TotalPrice"
			FROM "Winning" W
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = W."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
				JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			WHERE W."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR W."SalePointId" = p_sale_point_id)
			GROUP BY
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "WinningData",
	(
			SELECT array_to_json(
			ARRAY_AGG (md))
			FROM(
						WITH Moneydata AS
						(
						-- 2 bảng transaction va report money  "TransactionTypeId" IN (2,3)) se chi co duy nhat 1 dong nen sum dc.
								(SELECT 
									1::INT AS "ShiftId",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 2 ),0) AS "Vietllot",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 3 ),0) AS "Loto",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 1 ),0) AS "Cost",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_1 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 2 AND G."DoneTransfer" = TRUE),0) AS "TransferConfirmed",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_1 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 1 AND G."DoneTransfer" = TRUE),0)  AS "TransferToGuest",
									 SUM(R."TotalMoneyInDay")  AS "TotalMoneyInDay"
								FROM "Transaction" T 
								LEFT JOIN "ReportMoney" R ON R."ShiftDistributeId" = v_shift_dis_1
									AND R."ActionDate" = p_lottery_date::DATE
									AND R."ShiftId" = 1
								WHERE T."Date" = p_lottery_date::DATE 
									AND T."SalePointId" = p_sale_point_id
									AND T."ShiftDistributeId" = v_shift_dis_1
								GROUP BY T."SalePointId",T."TransactionTypeId",T."Date",R."TotalMoneyInDay"
								ORDER BY T."TransactionTypeId"
								)
								UNION 
								(SELECT 
									2::INT AS "ShiftId",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 2 ),0) AS "Vietllot",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 3 ),0) AS "Loto",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 1 ),0) AS "Cost",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_2 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 2 AND G."DoneTransfer" = TRUE),0) AS "TransferConfirmed",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_2 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 1 AND G."DoneTransfer" = TRUE),0)  AS "TransferToGuest",
									SUM(R."TotalMoneyInDay")  AS "TotalMoneyInDay"
								FROM "Transaction" T 
								LEFT JOIN "ReportMoney" R ON R."ShiftDistributeId" = v_shift_dis_2 
									AND R."ActionDate" = p_lottery_date::DATE
									AND R."ShiftId" = 2
								WHERE T."Date" = p_lottery_date::DATE AND T."SalePointId" = p_sale_point_id 
									AND T."ShiftDistributeId" = v_shift_dis_2
								GROUP BY T."SalePointId",T."TransactionTypeId",T."Date",R."TotalMoneyInDay"
								ORDER BY T."TransactionTypeId"
								)
						)
							SELECT 
								M."ShiftId",
								SUM(M."Vietllot") AS "Vietllot",
								SUM(M."Loto") AS "Loto",
								SUM(M."Cost") AS "Cost",
								M."TransferConfirmed" AS "TransferConfirmed",
								M."TransferToGuest" AS "TransferToGuest",
								M."TotalMoneyInDay"
							FROM Moneydata M 
							GROUP BY M."ShiftId", M."TotalMoneyInDay",M."TransferToGuest",M."TransferConfirmed"
			)md
	)::TEXT  AS "MoneyData";
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall_v4(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_manager_overall_v5(integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall_v5(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE("ScratchcardData" text, "LotteryData" text, "WinningData" text, "MoneyData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_role_1 INT;
	v_shift_dis_1 INT;
	v_role_2 INT;
	v_shift_dis_2 INT;
BEGIN
	--Lấy ca 1
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_1, v_shift_dis_1
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 1;
	--Lấy ca 2
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_2, v_shift_dis_2
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 2;
	
	raise notice 'v_role_1: %, v_shift_dis_1: %, v_role_2: %, v_shift_dis_2: %', v_role_1, v_shift_dis_1, v_role_2, v_shift_dis_2;
	RETURN QUERY 
	WITH tmp AS (
		SELECT 1 AS "ShiftId", f.* FROM crm_report_data_finish_shift_without_lottery(v_role_1, v_shift_dis_1, p_lottery_date) f
		UNION
		SELECT 2 AS "ShiftId", f.* FROM crm_report_data_finish_shift_without_lottery(v_role_2, v_shift_dis_2, p_lottery_date) f
	)
	SELECT
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT t.* FROM tmp t WHERE t."LotteryTypeId" = 3
		) r
	)::TEXT AS "ScratchcardData",
NULL AS "LotteryData",
	(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName",
				SUM(W."Quantity") AS "TotalQuantity",
				SUM(W."WinningPrice") AS "TotalPrice"
			FROM "Winning" W
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = W."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
				JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			WHERE W."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR W."SalePointId" = p_sale_point_id)
			GROUP BY
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "WinningData",
	(
			SELECT array_to_json(
			ARRAY_AGG (md))
			FROM(
						WITH Moneydata AS
						(
						-- 2 bảng transaction va report money  "TransactionTypeId" IN (2,3)) se chi co duy nhat 1 dong nen sum dc.
								(SELECT 
									1::INT AS "ShiftId",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 2 ),0) AS "Vietllot",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 3 ),0) AS "Loto",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 1 ),0) AS "Cost",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_1 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 2 AND G."DoneTransfer" = TRUE),0) AS "TransferConfirmed",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_1 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 1 AND G."DoneTransfer" = TRUE),0)  AS "TransferToGuest",
									 SUM(R."TotalMoneyInDay")  AS "TotalMoneyInDay"
								FROM "Transaction" T 
								LEFT JOIN "ReportMoney" R ON R."ShiftDistributeId" = v_shift_dis_1
									AND R."ActionDate" = p_lottery_date::DATE
									AND R."ShiftId" = 1
								WHERE T."Date" = p_lottery_date::DATE 
									AND T."SalePointId" = p_sale_point_id
									AND T."ShiftDistributeId" = v_shift_dis_1
								GROUP BY T."SalePointId",T."TransactionTypeId",T."Date",R."TotalMoneyInDay"
								ORDER BY T."TransactionTypeId"
								)
								UNION 
								(SELECT 
									2::INT AS "ShiftId",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 2 ),0) AS "Vietllot",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 3 ),0) AS "Loto",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 1 ),0) AS "Cost",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_2 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 2 AND G."DoneTransfer" = TRUE),0) AS "TransferConfirmed",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_2 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 1 AND G."DoneTransfer" = TRUE),0)  AS "TransferToGuest",
									SUM(R."TotalMoneyInDay")  AS "TotalMoneyInDay"
								FROM "Transaction" T 
								LEFT JOIN "ReportMoney" R ON R."ShiftDistributeId" = v_shift_dis_2 
									AND R."ActionDate" = p_lottery_date::DATE
									AND R."ShiftId" = 2
								WHERE T."Date" = p_lottery_date::DATE AND T."SalePointId" = p_sale_point_id 
									AND T."ShiftDistributeId" = v_shift_dis_2
								GROUP BY T."SalePointId",T."TransactionTypeId",T."Date",R."TotalMoneyInDay"
								ORDER BY T."TransactionTypeId"
								)
						)
							SELECT 
								M."ShiftId",
								SUM(M."Vietllot") AS "Vietllot",
								SUM(M."Loto") AS "Loto",
								SUM(M."Cost") AS "Cost",
								M."TransferConfirmed" AS "TransferConfirmed",
								M."TransferToGuest" AS "TransferToGuest",
								M."TotalMoneyInDay"
							FROM Moneydata M 
							GROUP BY M."ShiftId", M."TotalMoneyInDay",M."TransferToGuest",M."TransferConfirmed"
			)md
	)::TEXT  AS "MoneyData";
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall_v5(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_manager_overall_v6(integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_manager_overall_v6(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) RETURNS TABLE("WinningData" text, "MoneyData" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_role_1 INT;
	v_shift_dis_1 INT;
	v_role_2 INT;
	v_shift_dis_2 INT;
BEGIN
	--Lấy ca 1
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_1, v_shift_dis_1
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 1;
	--Lấy ca 2
	SELECT UR."UserRoleId", SD."ShiftDistributeId"
	INTO v_role_2, v_shift_dis_2
	FROM "ShiftDistribute" SD 
		JOIN "UserRole" UR ON UR."UserId" = SD."UserId"
	WHERE "SalePointId" = p_sale_point_id AND "DistributeDate"::DATE = p_lottery_date::DATE AND "ShiftId" = 2;
	
	raise notice 'v_role_1: %, v_shift_dis_1: %, v_role_2: %, v_shift_dis_2: %', v_role_1, v_shift_dis_1, v_role_2, v_shift_dis_2;
	RETURN QUERY 
	WITH tmp AS (
		SELECT 1 AS "ShiftId", f.* FROM crm_report_data_finish_shift_without_lottery(v_role_1, v_shift_dis_1, p_lottery_date) f
		UNION
		SELECT 2 AS "ShiftId", f.* FROM crm_report_data_finish_shift_without_lottery(v_role_2, v_shift_dis_2, p_lottery_date) f
	)
	SELECT
		(
		SELECT array_to_json(
			ARRAY_AGG (r))
		FROM
		(
			SELECT
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName",
				SUM(W."Quantity") AS "TotalQuantity",
				SUM(W."WinningPrice") AS "TotalPrice"
			FROM "Winning" W
				JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = W."ShiftDistributeId"
				JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
				JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
				JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			WHERE W."ActionDate"::DATE = p_lottery_date::DATE
				AND (COALESCE(p_sale_point_id, 0)= 0 OR W."SalePointId" = p_sale_point_id)
			GROUP BY
				W."WinningTypeId",
				WT."WinningTypeName",
				S."ShiftId",
				S."ShiftName"
		) r
	)::TEXT AS "WinningData",
	(
			SELECT array_to_json(
			ARRAY_AGG (md))
			FROM(
						WITH Moneydata AS
						(
						-- 2 bảng transaction va report money  "TransactionTypeId" IN (2,3)) se chi co duy nhat 1 dong nen sum dc.
								(SELECT 
									1::INT AS "ShiftId",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 2 ),0) AS "Vietllot",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 3 ),0) AS "Loto",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 1 ),0) AS "Cost",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_1 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 2 AND G."DoneTransfer" = TRUE),0) AS "TransferConfirmed",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_1 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 1 AND G."DoneTransfer" = TRUE),0)  AS "TransferToGuest",
									 SUM(R."TotalMoneyInDay")  AS "TotalMoneyInDay"
								FROM "Transaction" T 
								LEFT JOIN "ReportMoney" R ON R."ShiftDistributeId" = v_shift_dis_1
									AND R."ActionDate" = p_lottery_date::DATE
									AND R."ShiftId" = 1
								WHERE T."Date" = p_lottery_date::DATE 
									AND T."SalePointId" = p_sale_point_id
									AND T."ShiftDistributeId" = v_shift_dis_1
								GROUP BY T."SalePointId",T."TransactionTypeId",T."Date",R."TotalMoneyInDay"
								ORDER BY T."TransactionTypeId"
								)
								UNION 
								(SELECT 
									2::INT AS "ShiftId",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 2 ),0) AS "Vietllot",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 3 ),0) AS "Loto",
									COALESCE( SUM(T."TotalPrice") FILTER (WHERE  T."TransactionTypeId" = 1 ),0) AS "Cost",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_2 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 2 AND G."DoneTransfer" = TRUE),0) AS "TransferConfirmed",
									COALESCE((SELECT SUM( G."TotalPrice") FROM "GuestAction" G WHERE G."ShiftDistributeId" = v_shift_dis_2 AND G."SalePointId" = p_sale_point_id AND G."CreatedDate"::DATE = p_lottery_date::DATE AND G."IsDeleted" = FALSE AND G."GuestActionTypeId" = 1 AND G."DoneTransfer" = TRUE),0)  AS "TransferToGuest",
									SUM(R."TotalMoneyInDay")  AS "TotalMoneyInDay"
								FROM "Transaction" T 
								LEFT JOIN "ReportMoney" R ON R."ShiftDistributeId" = v_shift_dis_2 
									AND R."ActionDate" = p_lottery_date::DATE
									AND R."ShiftId" = 2
								WHERE T."Date" = p_lottery_date::DATE AND T."SalePointId" = p_sale_point_id 
									AND T."ShiftDistributeId" = v_shift_dis_2
								GROUP BY T."SalePointId",T."TransactionTypeId",T."Date",R."TotalMoneyInDay"
								ORDER BY T."TransactionTypeId"
								)
						)
							SELECT 
								M."ShiftId",
								SUM(M."Vietllot") AS "Vietllot",
								SUM(M."Loto") AS "Loto",
								SUM(M."Cost") AS "Cost",
								M."TransferConfirmed" AS "TransferConfirmed",
								M."TransferToGuest" AS "TransferToGuest",
								M."TotalMoneyInDay"
							FROM Moneydata M 
							GROUP BY M."ShiftId", M."TotalMoneyInDay",M."TransferToGuest",M."TransferConfirmed"
			)md
	)::TEXT  AS "MoneyData";
	
END;
$$;


ALTER FUNCTION public.crm_report_manager_overall_v6(p_user_role_id integer, p_lottery_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_remaining_lottery(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_remaining_lottery(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryChannelName" character varying, "LotteryDate" date, "TotalRemaining" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	WITH tmp AS (
        SELECT 
						S."SalePointId",
            S."SalePointName",
            I."LotteryChannelId",
            I."LotteryDate",
            LC."LotteryChannelName",
            SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
            SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
        FROM "Inventory" I
        JOIN "SalePoint" S ON I."SalePointId" = S."SalePointId"
        JOIN "LotteryChannel" LC ON     I."LotteryChannelId" = LC."LotteryChannelId"
        WHERE 
            CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
                THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
                AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
            ELSE
                TO_CHAR(I."LotteryDate", 'YYYY-MM') = '2023-03'
            END
            AND I."SalePointId" <> 0
        GROUP BY 
						S."SalePointId",
            S."SalePointName",
            I."LotteryChannelId",
            I."LotteryDate",
            LC."LotteryChannelName"
    )
        SELECT 
						T."SalePointId",
            T."SalePointName",
            T."LotteryChannelName",
            T."LotteryDate",
            T."TotalRemaining" AS "TotalRemaining"
        FROM tmp T
        WHERE   T."TotalRemaining" > 0
    ORDER BY T."LotteryDate";
END;
$$;


ALTER FUNCTION public.crm_report_remaining_lottery(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 
BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesaleMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesaleMoney"
		FROM "SalePointLog" SPL 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month(p_month) T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."TotalPrice") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."Data"::JSON)->>'SalePointId')::INT AS "SalePointId",
			COALESCE(((T."Data"::JSON)->>'TotalSalary')::NUMERIC, 0) AS "TotalSalary",
			COALESCE(((T."Data"::JSON)->>'TotalSalarySub')::NUMERIC, 0) AS "TotalSalarySub",
			COALESCE(((T."Data"::JSON)->>'TotalPriceForLunch')::NUMERIC, 0) AS "TotalPriceForLunch",
			COALESCE(((T."Data"::JSON)->>'TotalPriceTarget')::NUMERIC, 0) AS "TotalPriceTarget"
		FROM crm_get_salary_divide_for_salepoint(p_month) T
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			COALESCE(SPL."TotalScratchRetail", 0) AS "TotalScratchRetail",
			COALESCE(SPL."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
			COALESCE(SPL."TotalScratchWholesale", 0) AS "TotalScratchWholesale",
			COALESCE(SPL."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE((T."SaleOfVietlott" * 0.7)- ((T."SaleOfVietlott" * 0.7)*0.5) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.1) - fn_total_winning_price(p_month,6)) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
-- 			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
-- 			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			ROUND(T."TotalScratchRetail", 0) AS "TotalScratchRetail",												--Tổng vé cào lẻ
-- 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
			ROUND(T."TotalScratchWholesale", 0) AS "TotalScratchWholesale",									--Tổng vé cào sỉ
-- 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
--			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
--			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice",
-- 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			ROUND(T."ThreeSpecial", 0) AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0) AS "FourSpecial",
			ROUND(T."TwoSpecial", 0) AS "TwoSpecial",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			- T."ThreeSpecialPrice"
			- T."FourSpecialPrice"
			- T."TwoSpecialPrice"
			- T."PriceReceived"
			+ T."ProfitOfLoto"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem", 0) AS "TotalFee",
			ROUND(T."TotalSalary"
			+ T."TotalSalarySub"
			+ T."TotalPriceForLunch"
			+ T."TotalPriceTarget"
			+ T."AwardUser"
			- T."DebtUser"
			+ T."OvertimeUser"
			- T."PunishUser", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			- T."ThreeSpecialPrice"
			- T."FourSpecialPrice"
			- T."TwoSpecialPrice"
			- T."PriceReceived"
			- T."FeeOutSite"
			+ T."SaleOfVietlott"
			- T."PriceVietlott"
			+ T."ProfitOfLoto"
			+ T."PunishUser"
			- T."OvertimeUser"
			- T."AwardUser"
			+ T."DebtUser"
			- T."TotalSalary"
			- T."TotalSalarySub"
			- T."TotalPriceForLunch"
			- T."TotalPriceTarget"
			- T."PriceReceiveItem"
			+ T."PriceTransItem"
			+ T."TotalCommission", 2) AS "TotalSale"			
		FROM tmp13 T
	)
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp14 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v1(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v1(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesaleMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetail",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchRetailOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchRetailOfCaMau",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchWholesaleOfCaMau"
-- 			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesale",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesaleMoney"
		FROM "SalePointLog" SPL 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month(p_month) T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."Data"::JSON)->>'SalePointId')::INT AS "SalePointId",
			COALESCE(((T."Data"::JSON)->>'TotalSalary')::NUMERIC, 0) AS "TotalSalary",
			COALESCE(((T."Data"::JSON)->>'TotalSalarySub')::NUMERIC, 0) AS "TotalSalarySub",
			COALESCE(((T."Data"::JSON)->>'TotalPriceForLunch')::NUMERIC, 0) AS "TotalPriceForLunch",
			COALESCE(((T."Data"::JSON)->>'TotalPriceTarget')::NUMERIC, 0) AS "TotalPriceTarget"
		FROM crm_get_salary_divide_for_salepoint_v1(p_month) T
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v2(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			COALESCE(SPL."TotalScratchRetail", 0) AS "TotalScratchRetail",
			COALESCE(SPL."TotalScratchRetailOfCity", 0) AS "TotalScratchRetailOfCity",
			COALESCE(SPL."TotalScratchRetailOfCaMau", 0) AS "TotalScratchRetailOfCaMau",
			COALESCE(SPL."TotalScratchRetailOfCity" * 9100 + SPL."TotalScratchRetailOfCaMau" * 8700, 0) AS "TotalScratchRetailMoney",
-- 			COALESCE(SPL."TotalScratchWholesale", 0) AS "TotalScratchWholesale",
			COALESCE(SPL."TotalScratchWholesaleOfCity", 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SPL."TotalScratchWholesaleOfCaMau", 0) AS "TotalScratchWholesaleOfCaMau",
			COALESCE(SPL."TotalScratchWholesaleOfCity" * 9100 + SPL."TotalScratchWholesaleOfCaMau" * 8700, 0) AS "TotalScratchWholesaleMoney",
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.01) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
 			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
-- 			ROUND(T."TotalScratchRetail", 0) AS "TotalScratchRetail",												--Tổng vé cào lẻ
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
-- 			ROUND(T."TotalScratchWholesale", 0) AS "TotalScratchWholesale",									--Tổng vé cào sỉ
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary"
			+ T."TotalSalarySub"
			+ T."TotalPriceForLunch"
			+ T."TotalPriceTarget"
			+ T."AwardUser"
			- T."DebtUser"
			+ T."OvertimeUser"
			- T."PunishUser", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			- T."TotalScratchRetailOfCity" * 9100 - T."TotalScratchRetailOfCaMau" * 8700
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- (SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT * 8750
			- (COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)) , 0) AS "TotalSale",
			ROUND((COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)),0)  AS "EmployeeSalary",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott"
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
	)
	
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v1(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v2(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesaleMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetail",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchRetailOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchRetailOfCaMau",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchWholesaleOfCaMau"
-- 			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesale",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesaleMoney"
		FROM "SalePointLog" SPL 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month('2023-03') T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."Data"::JSON)->>'SalePointId')::INT AS "SalePointId",
			COALESCE(((T."Data"::JSON)->>'TotalSalary')::NUMERIC, 0) AS "TotalSalary",
			COALESCE(((T."Data"::JSON)->>'TotalSalarySub')::NUMERIC, 0) AS "TotalSalarySub",
			COALESCE(((T."Data"::JSON)->>'TotalPriceForLunch')::NUMERIC, 0) AS "TotalPriceForLunch",
			COALESCE(((T."Data"::JSON)->>'TotalPriceTarget')::NUMERIC, 0) AS "TotalPriceTarget"
		FROM crm_get_salary_divide_for_salepoint_v1(p_month) T
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v2(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			COALESCE(SPL."TotalScratchRetail", 0) AS "TotalScratchRetail",
			COALESCE(SPL."TotalScratchRetailOfCity", 0) AS "TotalScratchRetailOfCity",
			COALESCE(SPL."TotalScratchRetailOfCaMau", 0) AS "TotalScratchRetailOfCaMau",
			COALESCE(SPL."TotalScratchRetailOfCity" * 9100 + SPL."TotalScratchRetailOfCaMau" * 8700, 0) AS "TotalScratchRetailMoney",
-- 			COALESCE(SPL."TotalScratchWholesale", 0) AS "TotalScratchWholesale",
			COALESCE(SPL."TotalScratchWholesaleOfCity", 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SPL."TotalScratchWholesaleOfCaMau", 0) AS "TotalScratchWholesaleOfCaMau",
			COALESCE(SPL."TotalScratchWholesaleOfCity" * 9100 + SPL."TotalScratchWholesaleOfCaMau" * 8700, 0) AS "TotalScratchWholesaleMoney",
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
 			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
-- 			ROUND(T."TotalScratchRetail", 0) AS "TotalScratchRetail",												--Tổng vé cào lẻ
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
-- 			ROUND(T."TotalScratchWholesale", 0) AS "TotalScratchWholesale",									--Tổng vé cào sỉ
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "WaterFee",
			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary"
			+ T."TotalSalarySub"
			+ T."TotalPriceForLunch"
			+ T."TotalPriceTarget"
			+ T."AwardUser"
			- T."DebtUser"
			+ T."OvertimeUser"
			- T."PunishUser", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."TotalScratchRetailOfCity" * 9100,0) - COALESCE(T."TotalScratchRetailOfCaMau" * 8700,0)
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)) , 0)::NUMERIC AS "TotalSale",
			ROUND((COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)),0)  AS "EmployeeSalary",
			T."TotalScratchRetailOfCity" * 9100 + T."TotalScratchRetailOfCaMau" * 8700 + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott"
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
	)
	
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v3(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v3(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesaleMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetail",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchRetailOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchRetailOfCaMau",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchWholesaleOfCaMau"
-- 			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesale",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesaleMoney"
		FROM "SalePointLog" SPL 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month('2023-03') T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."Data"::JSON)->>'SalePointId')::INT AS "SalePointId",
			COALESCE(((T."Data"::JSON)->>'TotalSalary')::NUMERIC, 0) AS "TotalSalary",
			COALESCE(((T."Data"::JSON)->>'TotalSalarySub')::NUMERIC, 0) AS "TotalSalarySub",
			COALESCE(((T."Data"::JSON)->>'TotalPriceForLunch')::NUMERIC, 0) AS "TotalPriceForLunch",
			COALESCE(((T."Data"::JSON)->>'TotalPriceTarget')::NUMERIC, 0) AS "TotalPriceTarget"
		FROM crm_get_salary_divide_for_salepoint_v1(p_month) T
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v2(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			COALESCE(SPL."TotalScratchRetail", 0) AS "TotalScratchRetail",
			COALESCE(SPL."TotalScratchRetailOfCity", 0) AS "TotalScratchRetailOfCity",
			COALESCE(SPL."TotalScratchRetailOfCaMau", 0) AS "TotalScratchRetailOfCaMau",
			COALESCE(SPL."TotalScratchRetailOfCity" * 9100 + SPL."TotalScratchRetailOfCaMau" * 8700, 0) AS "TotalScratchRetailMoney",
-- 			COALESCE(SPL."TotalScratchWholesale", 0) AS "TotalScratchWholesale",
			COALESCE(SPL."TotalScratchWholesaleOfCity", 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SPL."TotalScratchWholesaleOfCaMau", 0) AS "TotalScratchWholesaleOfCaMau",
			COALESCE(SPL."TotalScratchWholesaleOfCity" * 9100 + SPL."TotalScratchWholesaleOfCaMau" * 8700, 0) AS "TotalScratchWholesaleMoney",
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
 			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
-- 			ROUND(T."TotalScratchRetail", 0) AS "TotalScratchRetail",												--Tổng vé cào lẻ
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
-- 			ROUND(T."TotalScratchWholesale", 0) AS "TotalScratchWholesale",									--Tổng vé cào sỉ
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "InternetFee",
			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary"
			+ T."TotalSalarySub"
			+ T."TotalPriceForLunch"
			+ T."TotalPriceTarget"
			+ T."AwardUser"
			- T."DebtUser"
			+ T."OvertimeUser"
			- T."PunishUser", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."TotalScratchRetailOfCity" * 9100,0) - COALESCE(T."TotalScratchRetailOfCaMau" * 8700,0)
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
-- 			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)) , 0)::NUMERIC AS "TotalSale",
			ROUND((COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)),0)  AS "EmployeeSalary",
			T."TotalScratchRetailOfCity" * 9100 + T."TotalScratchRetailOfCaMau" * 8700 + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott"
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
	)
	
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v3(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v4(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v4(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesaleMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetail",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchRetailOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchRetailOfCaMau",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchWholesaleOfCaMau"
-- 			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesale",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesaleMoney"
		FROM "SalePointLog" SPL 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month('2023-03') T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."Data"::JSON)->>'SalePointId')::INT AS "SalePointId",
			COALESCE(((T."Data"::JSON)->>'TotalSalary')::NUMERIC, 0) AS "TotalSalary",
			COALESCE(((T."Data"::JSON)->>'TotalSalarySub')::NUMERIC, 0) AS "TotalSalarySub",
			COALESCE(((T."Data"::JSON)->>'TotalPriceForLunch')::NUMERIC, 0) AS "TotalPriceForLunch",
			COALESCE(((T."Data"::JSON)->>'TotalPriceTarget')::NUMERIC, 0) AS "TotalPriceTarget"
		FROM crm_get_salary_divide_for_salepoint_v1(p_month) T
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v2(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			COALESCE(SPL."TotalScratchRetail", 0) AS "TotalScratchRetail",
			COALESCE(SPL."TotalScratchRetailOfCity", 0) AS "TotalScratchRetailOfCity",
			COALESCE(SPL."TotalScratchRetailOfCaMau", 0) AS "TotalScratchRetailOfCaMau",
			COALESCE(SPL."TotalScratchRetailOfCity" * 9100 + SPL."TotalScratchRetailOfCaMau" * 8700, 0) AS "TotalScratchRetailMoney",
-- 			COALESCE(SPL."TotalScratchWholesale", 0) AS "TotalScratchWholesale",
			COALESCE(SPL."TotalScratchWholesaleOfCity", 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SPL."TotalScratchWholesaleOfCaMau", 0) AS "TotalScratchWholesaleOfCaMau",
			COALESCE(SPL."TotalScratchWholesaleOfCity" * 9100 + SPL."TotalScratchWholesaleOfCaMau" * 8700, 0) AS "TotalScratchWholesaleMoney",
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
 			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
-- 			ROUND(T."TotalScratchRetail", 0) AS "TotalScratchRetail",												--Tổng vé cào lẻ
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
-- 			ROUND(T."TotalScratchWholesale", 0) AS "TotalScratchWholesale",									--Tổng vé cào sỉ
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "InternetFee",
			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			T."FeeOutSite",
			T."PriceReceiveItem",
			T."PriceTransItem",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId") AS "VietLotFee",
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary"
			+ T."TotalSalarySub"
			+ T."TotalPriceForLunch"
			+ T."TotalPriceTarget"
			+ T."AwardUser"
			- T."DebtUser"
			+ T."OvertimeUser"
			- T."PunishUser", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."TotalScratchRetailOfCity" * 9100,0) - COALESCE(T."TotalScratchRetailOfCaMau" * 8700,0)
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
-- 			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)) , 0)::NUMERIC AS "TotalSale",
			ROUND((COALESCE(T."TotalSalary" , 0) + COALESCE(T."TotalSalarySub",0) + COALESCE(T."TotalPriceForLunch",0) + COALESCE(T."AwardUser",0)- COALESCE(T."PunishUser",0) + COALESCE(T."DebtUser", 0)),0)  AS "EmployeeSalary",
			T."TotalScratchRetailOfCity" * 9100 + T."TotalScratchRetailOfCaMau" * 8700 + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott"
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
			json_build_object(
				'FeeOutSite',
				T1."FeeOutSite",
				'PriceReceiveItem',
				T1."PriceReceiveItem",
				'PriceTransItem',
				T1."PriceTransItem",
				'VietLotFee',
				T1."VietLotFee"
			) AS "Fees",
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
-- 		GROUP BY T1."SalePointId",T1."SalePointName",T1."MainUserId",T1."PercentMainUserId",T1.Total
	)
	-- SELECT * FROM crm_report_sale_of_salepoint_in_month_v4('2023-02');
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v4(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v5(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v5(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailMoney",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailQuantity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailQuantity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesale",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesaleMoney",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesaleMoney",
			
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchRetailCity",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchRetailDN",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchRetailBOC",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchRetailXO",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchRetailXO2K",
			 
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchWholesaleCity",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchWholesaleDN",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchWholesaleBOC",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchWholesaleXO",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchWholesaleXO2K"
			
		FROM "SalePointLog" SPL 
		join "LotteryChannel" lc on spl."LotteryChannelId" = lc."LotteryChannelId" 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 7) AS "PromotionPrice",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 7) AS "Promotion"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month(p_month) T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."SalaryData"::JSON)->>'SalePointId')::INT AS "SalePointId",
			SUM(COALESCE(((T."SalaryData"::JSON)->>'TotalSalary')::NUMERIC, 0)) AS "TotalSalary"
		FROM crm_get_salary_of_user_by_month_v4(p_month,0) T
		GROUP BY ((T."SalaryData"::JSON)->>'SalePointId')::INT
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v3(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."NamRetailQuantity", 0) AS "NamRetailQuantity",
			COALESCE(SPL."TrungRetailQuantity", 0) AS "TrungRetailQuantity",			
			COALESCE(SPL."NamRetailMoney", 0) AS "NamRetailMoney",
			COALESCE(SPL."TrungRetailMoney", 0) AS "TrungRetailMoney",
			COALESCE(SPL."NamRetailMoney", 0) + COALESCE(SPL."TrungRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."NamWholesale", 0) AS "NamWholesale",
			COALESCE(SPL."TrungWholesale", 0) AS "TrungWholesale",
			COALESCE(SPL."NamWholesale", 0) + COALESCE(SPL."TrungWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."NamWholesaleMoney", 0) AS "NamWholesaleMoney",
			COALESCE(SPL."TrungWholesaleMoney", 0) AS "TrungWholesaleMoney",
			COALESCE(SPL."NamWholesaleMoney", 0) + COALESCE(SPL."TrungWholesaleMoney", 0) AS "TotalWholesaleMoney",
			
			COALESCE(SPL."ScratchRetailCity", 0) AS "ScratchRetailCity",
			COALESCE(SPL."ScratchRetailDN", 0) AS "ScratchRetailDN",
			COALESCE(SPL."ScratchRetailBOC", 0) AS "ScratchRetailBOC",
			COALESCE(SPL."ScratchRetailXO", 0) AS "ScratchRetailXO",
			COALESCE(SPL."ScratchRetailXO2K", 0) AS "ScratchRetailXO2K",
			COALESCE(COALESCE(SPL."ScratchRetailCity", 0) + COALESCE(SPL."ScratchRetailDN", 0) + COALESCE(SPL."ScratchRetailBOC", 0) 
				 + COALESCE(SPL."ScratchRetailXO", 0) + COALESCE(SPL."ScratchRetailXO2K", 0)) AS "TotalScratchRetailMoney",

			COALESCE(SPL."ScratchWholesaleCity", 0) AS "ScratchWholesaleCity",
			COALESCE(SPL."ScratchWholesaleDN", 0) AS "ScratchWholesaleDN",
			COALESCE(SPL."ScratchWholesaleBOC", 0) AS "ScratchWholesaleBOC",
			COALESCE(SPL."ScratchWholesaleXO", 0) AS "ScratchWholesaleXO",
			COALESCE(SPL."ScratchWholesaleXO2K", 0) AS "ScratchWholesaleXO2K",
			COALESCE(COALESCE(SPL."ScratchWholesaleCity", 0) + COALESCE(SPL."ScratchWholesaleDN", 0) + COALESCE(SPL."ScratchWholesaleBOC", 0) 
				 + COALESCE(SPL."ScratchWholesaleXO", 0) + COALESCE(SPL."ScratchWholesaleXO2K", 0)) AS "TotalScratchWholesaleMoney",
			
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."PromotionPrice", 0) AS "PromotionPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Promotion", 0) AS "Promotion",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),tmp13_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId", IL."AgencyId",IL."TotalReceived",IL."LotteryDate" FROM tmp T LEFT JOIN "InventoryLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."LotteryDate",'YYYY-MM') = p_month AND IL."LotteryDate" <= NOW()::DATE
		GROUP BY IL."SalePointId", IL."LotteryChannelId", IL."AgencyId", IL."TotalReceived", IL."LotteryDate" ORDER BY IL."LotteryDate" 
		),tmp13_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp13_1 IL
		GROUP BY IL."SalePointId"
		)
		,tmp13_2 AS(
		SELECT  IL."SalePointId",IL."AgencyId",IL."LotteryChannelId",IL."LotteryDate"
		FROM tmp13_1 IL
		),tmp13_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."LotteryDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp13_2 T
			LEFT JOIN "LotteryPriceAgency" L ON L."AgencyId" = T."AgencyId" AND L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp13_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp13_3 T WHERE T."Id" = 1 ),
		tmp14_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId",IL."TotalReceived",IL."ActionDate"::DATE FROM tmp T LEFT JOIN "ScratchcardLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."ActionDate",'YYYY-MM') = '2023-04' AND IL."ActionDate"::DATE <= NOW()::DATE
-- 		GROUP BY IL."ActionDate", IL."SalePointId", IL."LotteryChannelId", IL."TotalReceived" ORDER BY IL."ActionDate" ::DATE
		),tmp14_0 AS(
			SELECT T.* FROM tmp14_1 T  GROUP BY T."ActionDate",T."SalePointId", T."LotteryChannelId", T."TotalReceived" ORDER BY T."ActionDate" 
			)
		,tmp14_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp14_1 IL
		GROUP BY IL."SalePointId"
		),tmp14_2 AS(
		SELECT  IL."SalePointId",IL."LotteryChannelId",IL."ActionDate"::DATE
		FROM tmp14_1 IL
		),tmp14_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."ActionDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp14_2 T
			LEFT JOIN "LotteryPriceAgency" L ON  L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp14_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp14_3 T WHERE T."Id" = 1 ),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
			ROUND(T."NamRetailQuantity", 0) AS "NamRetailQuantity",
			ROUND(T."TrungRetailQuantity", 0) AS "TrungRetailQuantity",
			ROUND(T."NamRetailMoney", 0) AS "NamRetailMoney",
			ROUND(T."TrungRetailMoney", 0) AS "TrungRetailMoney",
			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."NamWholesale", 0) AS "NamWholesale",
			ROUND(T."TrungWholesale", 0) AS "TrungWholesale",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."NamWholesaleMoney", 0) AS "NamWholesaleMoney",
			ROUND(T."TrungWholesaleMoney", 0) AS "TrungWholesaleMoney",
			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			
			--Tổng vé cào lẻ
			ROUND(T."ScratchRetailCity", 0) AS "ScratchRetailCity",
			ROUND(T."ScratchRetailDN", 0) AS "ScratchRetailDN",
			ROUND(T."ScratchRetailBOC", 0) AS "ScratchRetailBOC",
			ROUND(T."ScratchRetailXO", 0) AS "ScratchRetailXO",
			ROUND(T."ScratchRetailXO2K", 0) AS "ScratchRetailXO2K",
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
 			
 			--Tổng vé cào sỉ
 			ROUND(T."ScratchWholesaleCity", 0) AS "ScratchWholesaleCity",
			ROUND(T."ScratchWholesaleDN", 0) AS "ScratchWholesaleDN",
			ROUND(T."ScratchWholesaleBOC", 0) AS "ScratchWholesaleBOC",
			ROUND(T."ScratchWholesaleXO", 0) AS "ScratchWholesaleXO",
			ROUND(T."ScratchWholesaleXO2K", 0) AS "ScratchWholesaleXO2K",
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
 			
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
			ROUND(T."Promotion", 0)*T."PromotionPrice" AS "Promotion",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
-- 			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "InternetFee",
-- 			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			T."FeeOutSite",
			T."PriceReceiveItem",
			T."PriceTransItem",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId") AS "VietLotFee",
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") ,0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."ScratchRetailCity") - COALESCE(T."ScratchRetailDN")
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
-- 			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) ) , 0)::NUMERIC AS "TotalSale",
			ROUND(COALESCE(T."TotalSalary" , 0),0)  AS "EmployeeSalary",
			3000000 AS "ManagerSalary",
			1500000 AS "DistributorSalary",
			T."ScratchRetailCity" + T."ScratchRetailDN" + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott",
			(SELECT SF."ElectronicFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "ElectronicFee",
			(SELECT SF."WaterFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "WaterFee",
			(SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "InternetFee",
			(SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "EstateFee",
			(SELECT (A."Price" * B."TotalReceived") AS "TotalMoneyFromAgency" FROM tmp13_4 A LEFT JOIN tmp13_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId"),
			(SELECT (A."Price" * B."TotalReceived") AS "TotalScratchMoneyFromAgency"  FROM tmp14_4 A LEFT JOIN tmp14_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId") 
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		json_build_object(
				'NamRetailQuantity',
				T1."NamRetailQuantity",
				'TrungRetailQuantity',
				T1."TrungRetailQuantity",
				'NamRetailMoney',
				T1."NamRetailMoney",
				'TrungRetailMoney',
				T1."TrungRetailMoney",
				'TotalRetailMoney',
				T1."TotalRetailMoney"
		) AS "RetailMoney",
		json_build_object(
				'NamWholesale',
				T1."NamWholesale",
				'TrungWholesale',
				T1."TrungWholesale",
				'TotalWholesale',
				T1."TotalWholesale",
				'NamWholesaleMoney',
				T1."NamWholesaleMoney",
				'TrungWholesaleMoney',
				T1."TrungWholesaleMoney",
				'TotalWholesaleMoney',
				T1."TotalWholesaleMoney"
		) AS "WholesaleMoney",
		json_build_object(
				'ScratchRetailCity',
				T1."ScratchRetailCity",
				'ScratchRetailDN',
				T1."ScratchRetailDN",
				'ScratchRetailBOC',
				T1."ScratchRetailBOC",
				'ScratchRetailXO',
				T1."ScratchRetailXO",
				'ScratchRetailXO2K',
				T1."ScratchRetailXO2K",
				'TotalScratchRetailMoney',
				T1."TotalScratchRetailMoney"
		) AS "ScratchRetailMoney",
		json_build_object(
				'ScratchWholesaleCity',
				T1."ScratchWholesaleCity",
				'ScratchWholesaleDN',
				T1."ScratchWholesaleDN",
				'ScratchWholesaleBOC',
				T1."ScratchWholesaleBOC",
				'ScratchWholesaleXO',
				T1."ScratchWholesaleXO",
				'ScratchWholesaleXO2K',
				T1."ScratchWholesaleXO2K",
				'TotalScratchWholesaleMoney',
				T1."TotalScratchWholesaleMoney"
		) AS "ScratchWholesaleMoney",
		
		json_build_object(
				'ElectronicFee',
				COALESCE(T1."ElectronicFee",0),
				'WaterFee',
				COALESCE(T1."WaterFee",0),
				'InternetFee',
				COALESCE(T1."InternetFee",0),
				'EstateFee',
				COALESCE(T1."EstateFee",0),
				'TotalFee',
				COALESCE(T1."ElectronicFee",0) + COALESCE(T1."WaterFee",0) + COALESCE(T1."InternetFee",0) +  COALESCE(T1."EstateFee",0)
		) AS "StaticFee",
		json_build_object(
				'ThreeSpecial',
				T1."ThreeSpecial",
				'FourSpecialPrice',
				T1."FourSpecialPrice",
				'TwoSpecialPrice',
				T1."TwoSpecialPrice",
				'Promotion',
				T1."Promotion",
				'TotalPrice',
				T1."ThreeSpecial" + T1."FourSpecialPrice" + T1."TwoSpecialPrice" +  T1."Promotion"
		) AS "Prize",
		json_build_object(
				'StaffSalary',
				T1."EmployeeSalary",
				'ManagerSalary',
				T1."ManagerSalary",
				'DistributorSalary',
				T1."DistributorSalary",
				'TotalSalary',
				T1."EmployeeSalary" + T1."ManagerSalary" + T1."DistributorSalary"
		) AS "TotalSalary",
		json_build_object(
				'FeeOutSite',
				T1."FeeOutSite",
				'PriceReceiveItem',
				T1."PriceReceiveItem",
				'PriceTransItem',
				T1."PriceTransItem",
				'VietLotFee',
				T1."VietLotFee",
				'TotalFees',
				T1."FeeOutSite" + T1."PriceReceiveItem" + T1."PriceTransItem"+  T1."VietLotFee"
			) AS "Fees",
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
-- 		GROUP BY T1."SalePointId",T1."SalePointName",T1."MainUserId",T1."PercentMainUserId",T1.Total
	)
	-- SELECT * FROM crm_report_sale_of_salepoint_in_month_v4('2023-02');
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v5(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v5(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v5(p_month character varying, "p_salePoint" integer) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
			AND SP."SalePointId" = p_salePoint

	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailMoney",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailQuantity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailQuantity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesale",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesaleMoney",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesaleMoney",
			
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchRetailCity",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchRetailDN",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchRetailBOC",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchRetailXO",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchRetailXO2K",
			 
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchWholesaleCity",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchWholesaleDN",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchWholesaleBOC",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchWholesaleXO",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchWholesaleXO2K"
			
		FROM "SalePointLog" SPL 
		join "LotteryChannel" lc on spl."LotteryChannelId" = lc."LotteryChannelId" 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 7) AS "PromotionPrice",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 7) AS "Promotion"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month(p_month) T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."SalaryData"::JSON)->>'SalePointId')::INT AS "SalePointId",
			SUM(COALESCE(((T."SalaryData"::JSON)->>'TotalSalary')::NUMERIC, 0)) AS "TotalSalary"
		FROM crm_get_salary_of_user_by_month_v4(p_month,0) T
		GROUP BY ((T."SalaryData"::JSON)->>'SalePointId')::INT
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v3(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."NamRetailQuantity", 0) AS "NamRetailQuantity",
			COALESCE(SPL."TrungRetailQuantity", 0) AS "TrungRetailQuantity",			
			COALESCE(SPL."NamRetailMoney", 0) AS "NamRetailMoney",
			COALESCE(SPL."TrungRetailMoney", 0) AS "TrungRetailMoney",
			COALESCE(SPL."NamRetailMoney", 0) + COALESCE(SPL."TrungRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."NamWholesale", 0) AS "NamWholesale",
			COALESCE(SPL."TrungWholesale", 0) AS "TrungWholesale",
			COALESCE(SPL."NamWholesale", 0) + COALESCE(SPL."TrungWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."NamWholesaleMoney", 0) AS "NamWholesaleMoney",
			COALESCE(SPL."TrungWholesaleMoney", 0) AS "TrungWholesaleMoney",
			COALESCE(SPL."NamWholesaleMoney", 0) + COALESCE(SPL."TrungWholesaleMoney", 0) AS "TotalWholesaleMoney",
			
			COALESCE(SPL."ScratchRetailCity", 0) AS "ScratchRetailCity",
			COALESCE(SPL."ScratchRetailDN", 0) AS "ScratchRetailDN",
			COALESCE(SPL."ScratchRetailBOC", 0) AS "ScratchRetailBOC",
			COALESCE(SPL."ScratchRetailXO", 0) AS "ScratchRetailXO",
			COALESCE(SPL."ScratchRetailXO2K", 0) AS "ScratchRetailXO2K",
			COALESCE(COALESCE(SPL."ScratchRetailCity", 0) + COALESCE(SPL."ScratchRetailDN", 0) + COALESCE(SPL."ScratchRetailBOC", 0) 
				 + COALESCE(SPL."ScratchRetailXO", 0) + COALESCE(SPL."ScratchRetailXO2K", 0)) AS "TotalScratchRetailMoney",

			COALESCE(SPL."ScratchWholesaleCity", 0) AS "ScratchWholesaleCity",
			COALESCE(SPL."ScratchWholesaleDN", 0) AS "ScratchWholesaleDN",
			COALESCE(SPL."ScratchWholesaleBOC", 0) AS "ScratchWholesaleBOC",
			COALESCE(SPL."ScratchWholesaleXO", 0) AS "ScratchWholesaleXO",
			COALESCE(SPL."ScratchWholesaleXO2K", 0) AS "ScratchWholesaleXO2K",
			COALESCE(COALESCE(SPL."ScratchWholesaleCity", 0) + COALESCE(SPL."ScratchWholesaleDN", 0) + COALESCE(SPL."ScratchWholesaleBOC", 0) 
				 + COALESCE(SPL."ScratchWholesaleXO", 0) + COALESCE(SPL."ScratchWholesaleXO2K", 0)) AS "TotalScratchWholesaleMoney",
			
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."PromotionPrice", 0) AS "PromotionPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Promotion", 0) AS "Promotion",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),tmp13_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId", IL."AgencyId",IL."TotalReceived",IL."LotteryDate" FROM tmp T LEFT JOIN "InventoryLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."LotteryDate",'YYYY-MM') = p_month AND IL."LotteryDate" <= NOW()::DATE
		GROUP BY IL."SalePointId", IL."LotteryChannelId", IL."AgencyId", IL."TotalReceived", IL."LotteryDate" ORDER BY IL."LotteryDate" 
		),tmp13_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp13_1 IL
		GROUP BY IL."SalePointId"
		)
		,tmp13_2 AS(
		SELECT  IL."SalePointId",IL."AgencyId",IL."LotteryChannelId",IL."LotteryDate"
		FROM tmp13_1 IL
		),tmp13_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."LotteryDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp13_2 T
			LEFT JOIN "LotteryPriceAgency" L ON L."AgencyId" = T."AgencyId" AND L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp13_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp13_3 T WHERE T."Id" = 1 ),
		tmp14_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId",IL."TotalReceived",IL."ActionDate"::DATE FROM tmp T LEFT JOIN "ScratchcardLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."ActionDate",'YYYY-MM') = '2023-04' AND IL."ActionDate"::DATE <= NOW()::DATE
-- 		GROUP BY IL."ActionDate", IL."SalePointId", IL."LotteryChannelId", IL."TotalReceived" ORDER BY IL."ActionDate" ::DATE
		),tmp14_0 AS(
			SELECT T.* FROM tmp14_1 T  GROUP BY T."ActionDate",T."SalePointId", T."LotteryChannelId", T."TotalReceived" ORDER BY T."ActionDate" 
			)
		,tmp14_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp14_1 IL
		GROUP BY IL."SalePointId"
		),tmp14_2 AS(
		SELECT  IL."SalePointId",IL."LotteryChannelId",IL."ActionDate"::DATE
		FROM tmp14_1 IL
		),tmp14_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."ActionDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp14_2 T
			LEFT JOIN "LotteryPriceAgency" L ON  L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp14_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp14_3 T WHERE T."Id" = 1 ),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
			ROUND(T."NamRetailQuantity", 0) AS "NamRetailQuantity",
			ROUND(T."TrungRetailQuantity", 0) AS "TrungRetailQuantity",
			ROUND(T."NamRetailMoney", 0) AS "NamRetailMoney",
			ROUND(T."TrungRetailMoney", 0) AS "TrungRetailMoney",
			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."NamWholesale", 0) AS "NamWholesale",
			ROUND(T."TrungWholesale", 0) AS "TrungWholesale",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."NamWholesaleMoney", 0) AS "NamWholesaleMoney",
			ROUND(T."TrungWholesaleMoney", 0) AS "TrungWholesaleMoney",
			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			
			--Tổng vé cào lẻ
			ROUND(T."ScratchRetailCity", 0) AS "ScratchRetailCity",
			ROUND(T."ScratchRetailDN", 0) AS "ScratchRetailDN",
			ROUND(T."ScratchRetailBOC", 0) AS "ScratchRetailBOC",
			ROUND(T."ScratchRetailXO", 0) AS "ScratchRetailXO",
			ROUND(T."ScratchRetailXO2K", 0) AS "ScratchRetailXO2K",
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
 			
 			--Tổng vé cào sỉ
 			ROUND(T."ScratchWholesaleCity", 0) AS "ScratchWholesaleCity",
			ROUND(T."ScratchWholesaleDN", 0) AS "ScratchWholesaleDN",
			ROUND(T."ScratchWholesaleBOC", 0) AS "ScratchWholesaleBOC",
			ROUND(T."ScratchWholesaleXO", 0) AS "ScratchWholesaleXO",
			ROUND(T."ScratchWholesaleXO2K", 0) AS "ScratchWholesaleXO2K",
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
 			
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
			ROUND(T."Promotion", 0)*T."PromotionPrice" AS "Promotion",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
-- 			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "InternetFee",
-- 			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			T."FeeOutSite",
			T."PriceReceiveItem",
			T."PriceTransItem",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId") AS "VietLotFee",
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") ,0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."ScratchRetailCity") - COALESCE(T."ScratchRetailDN")
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
-- 			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) ) , 0)::NUMERIC AS "TotalSale",
			ROUND(COALESCE(T."TotalSalary" , 0),0)  AS "EmployeeSalary",
			3000000 AS "ManagerSalary",
			1500000 AS "DistributorSalary",
			T."ScratchRetailCity" + T."ScratchRetailDN" + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott",
			(SELECT SF."ElectronicFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "ElectronicFee",
			(SELECT SF."WaterFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "WaterFee",
			(SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "InternetFee",
			(SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "EstateFee",
			(SELECT (A."Price" * B."TotalReceived") AS "TotalMoneyFromAgency" FROM tmp13_4 A LEFT JOIN tmp13_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId"),
			(SELECT (A."Price" * B."TotalReceived") AS "TotalScratchMoneyFromAgency"  FROM tmp14_4 A LEFT JOIN tmp14_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId") 
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		json_build_object(
				'NamRetailQuantity',
				T1."NamRetailQuantity",
				'TrungRetailQuantity',
				T1."TrungRetailQuantity",
				'NamRetailMoney',
				T1."NamRetailMoney",
				'TrungRetailMoney',
				T1."TrungRetailMoney",
				'TotalRetailMoney',
				T1."TotalRetailMoney"
		) AS "RetailMoney",
		json_build_object(
				'NamWholesale',
				T1."NamWholesale",
				'TrungWholesale',
				T1."TrungWholesale",
				'TotalWholesale',
				T1."TotalWholesale",
				'NamWholesaleMoney',
				T1."NamWholesaleMoney",
				'TrungWholesaleMoney',
				T1."TrungWholesaleMoney",
				'TotalWholesaleMoney',
				T1."TotalWholesaleMoney"
		) AS "WholesaleMoney",
		json_build_object(
				'ScratchRetailCity',
				T1."ScratchRetailCity",
				'ScratchRetailDN',
				T1."ScratchRetailDN",
				'ScratchRetailBOC',
				T1."ScratchRetailBOC",
				'ScratchRetailXO',
				T1."ScratchRetailXO",
				'ScratchRetailXO2K',
				T1."ScratchRetailXO2K",
				'TotalScratchRetailMoney',
				T1."TotalScratchRetailMoney"
		) AS "ScratchRetailMoney",
		json_build_object(
				'ScratchWholesaleCity',
				T1."ScratchWholesaleCity",
				'ScratchWholesaleDN',
				T1."ScratchWholesaleDN",
				'ScratchWholesaleBOC',
				T1."ScratchWholesaleBOC",
				'ScratchWholesaleXO',
				T1."ScratchWholesaleXO",
				'ScratchWholesaleXO2K',
				T1."ScratchWholesaleXO2K",
				'TotalScratchWholesaleMoney',
				T1."TotalScratchWholesaleMoney"
		) AS "ScratchWholesaleMoney",
		
		json_build_object(
				'ElectronicFee',
				COALESCE(T1."ElectronicFee",0),
				'WaterFee',
				COALESCE(T1."WaterFee",0),
				'InternetFee',
				COALESCE(T1."InternetFee",0),
				'EstateFee',
				COALESCE(T1."EstateFee",0),
				'TotalFee',
				COALESCE(T1."ElectronicFee",0) + COALESCE(T1."WaterFee",0) + COALESCE(T1."InternetFee",0) +  COALESCE(T1."EstateFee",0)
		) AS "StaticFee",
		json_build_object(
				'ThreeSpecial',
				T1."ThreeSpecial",
				'FourSpecialPrice',
				T1."FourSpecialPrice",
				'TwoSpecialPrice',
				T1."TwoSpecialPrice",
				'Promotion',
				T1."Promotion",
				'TotalPrice',
				T1."ThreeSpecial" + T1."FourSpecialPrice" + T1."TwoSpecialPrice" +  T1."Promotion"
		) AS "Prize",
		json_build_object(
				'StaffSalary',
				T1."EmployeeSalary",
				'ManagerSalary',
				T1."ManagerSalary",
				'DistributorSalary',
				T1."DistributorSalary",
				'TotalSalary',
				T1."EmployeeSalary" + T1."ManagerSalary" + T1."DistributorSalary"
		) AS "TotalSalary",
		json_build_object(
				'FeeOutSite',
				T1."FeeOutSite",
				'PriceReceiveItem',
				T1."PriceReceiveItem",
				'PriceTransItem',
				T1."PriceTransItem",
				'VietLotFee',
				T1."VietLotFee",
				'TotalFees',
				T1."FeeOutSite" + T1."PriceReceiveItem" + T1."PriceTransItem"+  T1."VietLotFee"
			) AS "Fees",
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
-- 		GROUP BY T1."SalePointId",T1."SalePointName",T1."MainUserId",T1."PercentMainUserId",T1.Total
	)
	-- SELECT * FROM crm_report_sale_of_salepoint_in_month_v4('2023-02');
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v5(p_month character varying, "p_salePoint" integer) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v5_bk(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v5_bk(p_month character varying) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id), 0) AS "TotalWholesaleMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetail",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchRetailOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchRetailOfCaMau",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id), 0) AS "TotalScratchRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "TotalScratchWholesaleOfCaMau"
-- 			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesale",
-- 			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id), 0) AS "TotalScratchWholesaleMoney"
		FROM "SalePointLog" SPL 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 7) AS "PromotionPrice",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 7) AS "Promotion"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month(p_month) T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."SalaryData"::JSON)->>'SalePointId')::INT AS "SalePointId",
			SUM(COALESCE(((T."SalaryData"::JSON)->>'TotalSalary')::NUMERIC, 0)) AS "TotalSalary"
		FROM crm_get_salary_of_user_by_month_v4(p_month,0) T
		GROUP BY ((T."SalaryData"::JSON)->>'SalePointId')::INT
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v3(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."TotalRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."TotalWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			COALESCE(SPL."TotalScratchRetail", 0) AS "TotalScratchRetail",
			COALESCE(SPL."TotalScratchRetailOfCity", 0) AS "TotalScratchRetailOfCity",
			COALESCE(SPL."TotalScratchRetailOfCaMau", 0) AS "TotalScratchRetailOfCaMau",
			COALESCE(SPL."TotalScratchRetailOfCity" * 9100 + SPL."TotalScratchRetailOfCaMau" * 8700, 0) AS "TotalScratchRetailMoney",
-- 			COALESCE(SPL."TotalScratchWholesale", 0) AS "TotalScratchWholesale",
			COALESCE(SPL."TotalScratchWholesaleOfCity", 0) AS "TotalScratchWholesaleOfCity",
			COALESCE(SPL."TotalScratchWholesaleOfCaMau", 0) AS "TotalScratchWholesaleOfCaMau",
			COALESCE(SPL."TotalScratchWholesaleOfCity" * 9100 + SPL."TotalScratchWholesaleOfCaMau" * 8700, 0) AS "TotalScratchWholesaleMoney",
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."PromotionPrice", 0) AS "PromotionPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Promotion", 0) AS "Promotion",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),tmp13_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId", IL."AgencyId",IL."TotalReceived",IL."LotteryDate" FROM tmp T LEFT JOIN "InventoryLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."LotteryDate",'YYYY-MM') = p_month AND IL."LotteryDate" <= NOW()::DATE
		GROUP BY IL."SalePointId", IL."LotteryChannelId", IL."AgencyId", IL."TotalReceived", IL."LotteryDate" ORDER BY IL."LotteryDate" 
		),tmp13_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp13_1 IL
		GROUP BY IL."SalePointId"
		)
		,tmp13_2 AS(
		SELECT  IL."SalePointId",IL."AgencyId",IL."LotteryChannelId",IL."LotteryDate"
		FROM tmp13_1 IL
		),tmp13_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."LotteryDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp13_2 T
			LEFT JOIN "LotteryPriceAgency" L ON L."AgencyId" = T."AgencyId" AND L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp13_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp13_3 T WHERE T."Id" = 1 ),
		tmp14_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId",IL."TotalReceived",IL."ActionDate"::DATE FROM tmp T LEFT JOIN "ScratchcardLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."ActionDate",'YYYY-MM') = '2023-04' AND IL."ActionDate"::DATE <= NOW()::DATE
-- 		GROUP BY IL."ActionDate", IL."SalePointId", IL."LotteryChannelId", IL."TotalReceived" ORDER BY IL."ActionDate" ::DATE
		),tmp14_0 AS(
			SELECT T.* FROM tmp14_1 T  GROUP BY T."ActionDate",T."SalePointId", T."LotteryChannelId", T."TotalReceived" ORDER BY T."ActionDate" 
			)
		,tmp14_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp14_1 IL
		GROUP BY IL."SalePointId"
		),tmp14_2 AS(
		SELECT  IL."SalePointId",IL."LotteryChannelId",IL."ActionDate"::DATE
		FROM tmp14_1 IL
		),tmp14_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."ActionDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp14_2 T
			LEFT JOIN "LotteryPriceAgency" L ON  L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp14_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp14_3 T WHERE T."Id" = 1 ),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
 			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
-- 			ROUND(T."TotalScratchRetail", 0) AS "TotalScratchRetail",												--Tổng vé cào lẻ
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
-- 			ROUND(T."TotalScratchWholesale", 0) AS "TotalScratchWholesale",									--Tổng vé cào sỉ
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
			ROUND(T."Promotion", 0)*T."PromotionPrice" AS "Promotion",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
-- 			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "InternetFee",
-- 			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			T."FeeOutSite",
			T."PriceReceiveItem",
			T."PriceTransItem",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId") AS "VietLotFee",
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") ,0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."TotalScratchRetailOfCity" * 9100,0) - COALESCE(T."TotalScratchRetailOfCaMau" * 8700,0)
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
-- 			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) ) , 0)::NUMERIC AS "TotalSale",
			ROUND(COALESCE(T."TotalSalary" , 0),0)  AS "EmployeeSalary",
			3000000 AS "ManagerSalary",
			1500000 AS "DistributorSalary",
			T."TotalScratchRetailOfCity" * 9100 + T."TotalScratchRetailOfCaMau" * 8700 + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott",
			(SELECT SF."ElectronicFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "ElectronicFee",
			(SELECT SF."WaterFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "WaterFee",
			(SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "InternetFee",
			(SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "EstateFee",
			(SELECT (A."Price" * B."TotalReceived") AS "TotalMoneyFromAgency" FROM tmp13_4 A LEFT JOIN tmp13_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId"),
			(SELECT (A."Price" * B."TotalReceived") AS "TotalScratchMoneyFromAgency"  FROM tmp14_4 A LEFT JOIN tmp14_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId") 
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		json_build_object(
				'ElectronicFee',
				COALESCE(T1."ElectronicFee",0),
				'WaterFee',
				COALESCE(T1."WaterFee",0),
				'InternetFee',
				COALESCE(T1."InternetFee",0),
				'EstateFee',
				COALESCE(T1."EstateFee",0),
				'TotalFee',
				COALESCE(T1."ElectronicFee",0) + COALESCE(T1."WaterFee",0) + COALESCE(T1."InternetFee",0) +  COALESCE(T1."EstateFee",0)
		) AS "StaticFee",
		json_build_object(
				'ThreeSpecial',
				T1."ThreeSpecial",
				'FourSpecialPrice',
				T1."FourSpecialPrice",
				'TwoSpecialPrice',
				T1."TwoSpecialPrice",
				'Promotion',
				T1."Promotion",
				'TotalPrice',
				T1."ThreeSpecial" + T1."FourSpecialPrice" + T1."TwoSpecialPrice" +  T1."Promotion"
		) AS "Prize",
		json_build_object(
				'StaffSalary',
				T1."EmployeeSalary",
				'ManagerSalary',
				T1."ManagerSalary",
				'DistributorSalary',
				T1."DistributorSalary",
				'TotalSalary',
				T1."EmployeeSalary" + T1."ManagerSalary" + T1."DistributorSalary"
		) AS "TotalSalary",
		json_build_object(
				'FeeOutSite',
				T1."FeeOutSite",
				'PriceReceiveItem',
				T1."PriceReceiveItem",
				'PriceTransItem',
				T1."PriceTransItem",
				'VietLotFee',
				T1."VietLotFee",
				'TotalFees',
				T1."FeeOutSite" + T1."PriceReceiveItem" + T1."PriceTransItem"+  T1."VietLotFee"
			) AS "Fees",
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
-- 		GROUP BY T1."SalePointId",T1."SalePointName",T1."MainUserId",T1."PercentMainUserId",T1.Total
	)
	-- SELECT * FROM crm_report_sale_of_salepoint_in_month_v4('2023-02');
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v5_bk(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_sale_of_salepoint_in_month_v6(character varying, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_of_salepoint_in_month_v6(p_month character varying, p_salepoint bigint) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_lottery INT := 1;
	v_lottery_dup INT := 2;
	v_scratch INT := 3;
	v_lottery_price_id INT := 1;
	v_lottery_scratch_price_id INT := 1;
	v_percent_loto NUMERIC; 

BEGIN
	v_percent_loto := (
		SELECT 
			C."Price"
		FROM "Constant" C 
		WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND C."ConstId" = 13
			AND C."CreatedDate" >= ALL(
				SELECT 
					CC."CreatedDate"
				FROM "Constant" CC
				WHERE CC."ConstId" = C."ConstId"
					AND CC."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			)
	)::NUMERIC;
	
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName",
			COALESCE(SPL."MainUserId", '{}'::INT[]) AS "MainUserId",
			COALESCE(SPL."PercentMainUserId", '{}'::NUMERIC[]) AS "PercentMainUserId"
		FROM "SalePoint" SP
			LEFT JOIN (SELECT * FROM crm_get_list_percent_salepoint_in_month(p_month)) SPL ON SP."SalePointId" = SPL."SalePointId"
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
			AND SP."SalePointId" = p_salepoint
	),
	--Lấy danh sách bán hàng
	tmp0 AS (
		SELECT 
			SPL."SalePointId",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailMoney",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailMoney",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailQuantity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailQuantity",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesale",
			COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesale",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesaleMoney",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesaleMoney",
			
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchRetailCity",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchRetailDN",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchRetailBOC",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchRetailXO",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchRetailXO2K",
			 
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchWholesaleCity",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchWholesaleDN",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchWholesaleBOC",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchWholesaleXO",
			COALESCE(SUM(SPL."TotalValue") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchWholesaleXO2K"
			
		FROM "SalePointLog" SPL 
		join "LotteryChannel" lc on spl."LotteryChannelId" = lc."LotteryChannelId" 
		WHERE SPL."IsDeleted" IS FALSE
			AND TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			SPL."SalePointId"	
	),
	--Lấy danh sách trả thưởng
	tmp1 AS (
		SELECT
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)	AS "SalePointId",
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLotteryPrice",									--Trúng vé thường
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecialPrice",										--Ba số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecialPrice",											--Bốn số đặc biệt
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecialPrice",											--Hoàn vé
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 5) AS "VietlottPrice",												--Trả thưởng vietlott
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 6) AS "LotoPrice",														--Trả thưởng loto \\\\\
			SUM(W."WinningPrice") FILTER (WHERE W."WinningTypeId" = 7) AS "PromotionPrice",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 1) AS "WinningLottery",									--Trúng vé thường
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2) AS "ThreeSpecial",										--Ba số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3) AS "FourSpecial",											--Bốn số đặc biệt
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4) AS "TwoSpecial",											--Hoàn vé
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 5) AS "Vietlott",												--Trả thưởng vietlott
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 6) AS "Loto",
			SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 7) AS "Promotion"		
		FROM "Winning" W
			JOIN "WinningType" WT ON W."WinningTypeId" = WT."WinningTypeId"
		WHERE TO_CHAR(W."ActionDate", 'YYYY-MM') = p_month
		GROUP BY 
			(CASE WHEN W."FromSalePointId" = 0 THEN W."SalePointId" ELSE W."FromSalePointId" END)
	),
	--Lấy danh sách ôm ế và vé nhận vào ban đầu
	tmp2 AS (
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			SUM(I."TotalRemaining" + I."TotalDupRemaining") AS "TotalRemaining",
			SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
		FROM "Inventory" I
		WHERE 
			CASE WHEN TO_CHAR(NOW(),'YYYY-MM') = p_month
				THEN TO_CHAR(I."LotteryDate", 'YYYY-MM-DD') < TO_CHAR(NOW(),'YYYY-MM-DD')
				AND TO_CHAR(I."LotteryDate", 'YYYY-MM') = TO_CHAR(NOW(),'YYYY-MM')
			ELSE
				TO_CHAR(I."LotteryDate", 'YYYY-MM') = p_month
			END
			AND I."SalePointId" <> 0
		GROUP BY 
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate"
	),
	--Lấy danh sách nhận vé cào ban đầu
	tmp3 AS (
		SELECT 
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD') AS "LotteryDate",
			SUM(SL."TotalReceived") AS "TotalReceived"
		FROM "ScratchcardLog" SL
		WHERE TO_CHAR(SL."ActionDate", 'YYYY-MM') = p_month
		GROUP BY
			SL."SalePointId",
			SL."LotteryChannelId",
			TO_CHAR(SL."ActionDate", 'YYYY-MM-DD')
	),
	--Lấy danh sách vé chuyển nhận
	tmp4 AS (
		SELECT
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END) AS "SalePointId", 
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END) AS "LotteryDate",
			T."LotteryChannelId",
			T."IsScratchcard",
			SUM(CASE WHEN T."TransitionTypeId" = 1 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryTrans",
			SUM(CASE WHEN T."TransitionTypeId" = 2 THEN T."TotalTrans" + T."TotalTransDup" ELSE 0 END) AS "LotteryReceive"
		FROM "Transition" T 
		WHERE T."IsDeleted" IS FALSE
			AND T."TransitionTypeId" IN (1, 2)
			AND TO_CHAR(T."TransitionDate", 'YYYY-MM') = p_month
			AND T."ConfirmStatusId" = 2
		GROUP BY
			(CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END),
			T."LotteryChannelId",
			(CASE WHEN T."LotteryDate" IS NOT NULL THEN T."LotteryDate" ELSE T."TransitionDate"::DATE END),
			T."IsScratchcard"
		ORDER BY (CASE WHEN T."FromSalePointId" = 0 THEN T."ToSalePointId" ELSE T."FromSalePointId" END), T."LotteryChannelId"
	),
	--Lấy giá vé trung bình theo ngày
	tmp5 AS (
		SELECT 
			T."LotteryChannelId",
			T."Date",
			T."Price"
		FROM crm_get_average_lottery_price_in_date_of_month(p_month) T
	),
	--Lấy giá tiền nhập vé
	tmp6 AS (
		SELECT
			I."SalePointId",
			I."LotteryChannelId",
			I."LotteryDate",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS "PriceReceived"
		FROM tmp2 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
				AND I."LotteryDate" = P."Date"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND I."LotteryDate" = T."LotteryDate"
		UNION ALL
		SELECT 
			I."SalePointId",
			I."LotteryChannelId",
			NULL AS "Date",
			COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0) AS "TotalReceived",
			((COALESCE(I."TotalReceived", 0) - COALESCE(T."LotteryTrans", 0) + COALESCE(T."LotteryReceive", 0)) * P."Price") AS  "PriceReceived"
		FROM tmp3 I
			LEFT JOIN tmp5 P ON I."LotteryChannelId" = P."LotteryChannelId"
			LEFT JOIN tmp4 T ON I."SalePointId" = T."SalePointId" 
				AND I."LotteryChannelId"  = T."LotteryChannelId"
				AND T."IsScratchcard" IS TRUE
	),
	--Tính tổng tiền nhận vé theo tháng của điểm bán
	tmp7 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalReceived") AS "TotalReceived",
			SUM(T."PriceReceived") AS "PriceReceived"
		FROM tmp6 T
		GROUP BY 
			T."SalePointId"			
	),
	--Lấy tổng ôm ế
	tmp8 AS (
		SELECT 
			T."SalePointId",
			SUM(T."TotalRemaining") AS "TotalRemaining"
		FROM tmp2 T
		GROUP BY 
			T."SalePointId"
	),
	--Lấy các chi phí ngoài và doanh thu vietlott, lotto
	tmp9 AS (
		SELECT
			T."SalePointId",
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1), 0) AS "FeeOutSite",					--Chi phí ngoài
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) AS "SaleOfVietlott",			--Doanh thu Vietlott
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLoto",					--Doanh thu loto
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 4), 0) AS "PunishUser",					--Phạt nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 6), 0) AS "OvertimeUser",				--Tăng ca nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 7), 0) AS "AwardUser",						--Thưởng nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 8), 0) AS "DebtUser", 						--nợ nhân viên
			COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 9), 0) AS "PriceVietlott" 				--chi phí vietlott
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		GROUP BY 
			T."SalePointId"
	),
	--Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
	tmp10 AS (
		SELECT 	
			((T."SalaryData"::JSON)->>'SalePointId')::INT AS "SalePointId",
			SUM(COALESCE(((T."SalaryData"::JSON)->>'TotalSalary')::NUMERIC, 0)) AS "TotalSalary"
		FROM crm_get_salary_of_user_by_month_v4(p_month,0) T
		GROUP BY ((T."SalaryData"::JSON)->>'SalePointId')::INT
	),
	--Lấy tổng tiền nhập/xuất kho
	tmp11 AS (
		SELECT
			IFL."SalePointId",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 1) AS "PriceReceiveItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 1) AS "PriceTransItem",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 1 AND I."TypeOfItemId" = 2) AS "PriceReceiveInstrument",
			SUM(IFL."BalancePrice") FILTER (WHERE IFL."ItemTypeId" = 2 AND I."TypeOfItemId" = 2) AS "PriceTransInstrument"
		FROM "ItemFullLog" IFL
			JOIN "Item" I ON IFL."ItemId" = I."ItemId"
		WHERE TO_CHAR(IFL."CreateDate", 'YYYY-MM') = p_month
			AND IFL."ItemTypeId" IN (1, 2)
		GROUP BY
			IFL."SalePointId"
	),
	tmp12 AS (
		SELECT 
			C."SalePointId",
			SUM(C."TotalCommision") AS "TotalCommission"
		FROM crm_salepoint_get_commision_of_all_user_in_month_v3(p_month) C
		WHERE C."UserId" = 0
		GROUP BY
			C."SalePointId"
	),
	tmp13 AS (
		SELECT 
			SP.*,
			COALESCE(SPL."TotalRetail", 0) AS "TotalRetail",
			COALESCE(SPL."NamRetailQuantity", 0) AS "NamRetailQuantity",
			COALESCE(SPL."TrungRetailQuantity", 0) AS "TrungRetailQuantity",			
			COALESCE(SPL."NamRetailMoney", 0) AS "NamRetailMoney",
			COALESCE(SPL."TrungRetailMoney", 0) AS "TrungRetailMoney",
			COALESCE(SPL."NamRetailMoney", 0) + COALESCE(SPL."TrungRetailMoney", 0) AS "TotalRetailMoney",
			COALESCE(SPL."NamWholesale", 0) AS "NamWholesale",
			COALESCE(SPL."TrungWholesale", 0) AS "TrungWholesale",
			COALESCE(SPL."NamWholesale", 0) + COALESCE(SPL."TrungWholesale", 0) AS "TotalWholesale",
			COALESCE(SPL."NamWholesaleMoney", 0) AS "NamWholesaleMoney",
			COALESCE(SPL."TrungWholesaleMoney", 0) AS "TrungWholesaleMoney",
			COALESCE(SPL."NamWholesaleMoney", 0) + COALESCE(SPL."TrungWholesaleMoney", 0) AS "TotalWholesaleMoney",
			
			COALESCE(SPL."ScratchRetailCity", 0) AS "ScratchRetailCity",
			COALESCE(SPL."ScratchRetailDN", 0) AS "ScratchRetailDN",
			COALESCE(SPL."ScratchRetailBOC", 0) AS "ScratchRetailBOC",
			COALESCE(SPL."ScratchRetailXO", 0) AS "ScratchRetailXO",
			COALESCE(SPL."ScratchRetailXO2K", 0) AS "ScratchRetailXO2K",
			COALESCE(COALESCE(SPL."ScratchRetailCity", 0) + COALESCE(SPL."ScratchRetailDN", 0) + COALESCE(SPL."ScratchRetailBOC", 0) 
				 + COALESCE(SPL."ScratchRetailXO", 0) + COALESCE(SPL."ScratchRetailXO2K", 0)) AS "TotalScratchRetailMoney",

			COALESCE(SPL."ScratchWholesaleCity", 0) AS "ScratchWholesaleCity",
			COALESCE(SPL."ScratchWholesaleDN", 0) AS "ScratchWholesaleDN",
			COALESCE(SPL."ScratchWholesaleBOC", 0) AS "ScratchWholesaleBOC",
			COALESCE(SPL."ScratchWholesaleXO", 0) AS "ScratchWholesaleXO",
			COALESCE(SPL."ScratchWholesaleXO2K", 0) AS "ScratchWholesaleXO2K",
			COALESCE(COALESCE(SPL."ScratchWholesaleCity", 0) + COALESCE(SPL."ScratchWholesaleDN", 0) + COALESCE(SPL."ScratchWholesaleBOC", 0) 
				 + COALESCE(SPL."ScratchWholesaleXO", 0) + COALESCE(SPL."ScratchWholesaleXO2K", 0)) AS "TotalScratchWholesaleMoney",
			
			COALESCE(W."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			COALESCE(W."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice",
			COALESCE(W."FourSpecialPrice", 0) AS "FourSpecialPrice",
			COALESCE(W."TwoSpecialPrice", 0) AS "TwoSpecialPrice",
			COALESCE(W."VietlottPrice", 0) AS "VietlottPrice",
			COALESCE(W."LotoPrice", 0) AS "LotoPrice",
			COALESCE(W."PromotionPrice", 0) AS "PromotionPrice",
			COALESCE(W."WinningLottery", 0) AS "WinningLottery",
			COALESCE(W."ThreeSpecial", 0) AS "ThreeSpecial",
			COALESCE(W."FourSpecial", 0) AS "FourSpecial",
			COALESCE(W."TwoSpecial", 0) AS "TwoSpecial",
			COALESCE(W."Promotion", 0) AS "Promotion",
			COALESCE(W."Vietlott", 0) AS "Vietlott",
			COALESCE(W."Loto", 0) AS "Loto",
			COALESCE(K."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế
			COALESCE(I."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			COALESCE(I."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
			COALESCE(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
			COALESCE(((T."SaleOfVietlott"*0.07)*0.95) , 0) AS "SaleOfVietlott",																--Doanh thu Vietlott
			COALESCE(T."PriceVietlott", 0) AS "PriceVietlott",																  --Chi phí Vietlott
			COALESCE((T."SaleOfLoto" - (T."SaleOfLoto" *0.02) - fn_total_winning_price(p_month,6,SP."SalePointId")) , 0) AS "SaleOfLoto",																				--Doanh thu loto
			(COALESCE(T."SaleOfLoto", 0) * v_percent_loto) AS "ProfitOfLoto",										--Lợi nhuận loto
			COALESCE(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
			COALESCE(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
			COALESCE(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
			COALESCE(T."DebtUser", 0) AS "DebtUser", 																						--nợ nhân viên
			COALESCE(S."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			COALESCE(S."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			COALESCE(S."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			COALESCE(S."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
			COALESCE(IFL."PriceReceiveItem", 0) AS "PriceReceiveItem",													--Tổng tiền nhận hàng hoá
			COALESCE(IFL."PriceTransItem", 0) AS "PriceTransItem",															--Tổng tiền trả hàng hoá
			COALESCE(IFL."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",							--Tổng tiền nhận máy móc
			COALESCE(IFL."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
			COALESCE(C."TotalCommission", 0) AS "TotalCommission"																--Hoa hồng đổi số trúng	
		FROM tmp SP
			LEFT JOIN tmp0 SPL ON SP."SalePointId" = SPL."SalePointId"
			LEFT JOIN tmp1 W ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN tmp7 I ON SP."SalePointId" = I."SalePointId"
			LEFT JOIN tmp8 K ON SP."SalePointId" = K."SalePointId"
			LEFT JOIN tmp9 T ON SP."SalePointId" = T."SalePointId"
			LEFT JOIN tmp10 S ON SP."SalePointId" = S."SalePointId"
			LEFT JOIN tmp11 IFL ON SP."SalePointId" = IFL."SalePointId"
			LEFT JOIN tmp12 C ON SP."SalePointId" = C."SalePointId"
	),tmp13_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId", IL."AgencyId",IL."TotalReceived",IL."LotteryDate" FROM tmp T LEFT JOIN "InventoryLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."LotteryDate",'YYYY-MM') = p_month AND IL."LotteryDate" <= NOW()::DATE
		GROUP BY IL."SalePointId", IL."LotteryChannelId", IL."AgencyId", IL."TotalReceived", IL."LotteryDate" ORDER BY IL."LotteryDate" 
		),tmp13_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp13_1 IL
		GROUP BY IL."SalePointId"
		)
		,tmp13_2 AS(
		SELECT  IL."SalePointId",IL."AgencyId",IL."LotteryChannelId",IL."LotteryDate"
		FROM tmp13_1 IL
		),tmp13_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."LotteryDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp13_2 T
			LEFT JOIN "LotteryPriceAgency" L ON L."AgencyId" = T."AgencyId" AND L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp13_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp13_3 T WHERE T."Id" = 1 ),
		tmp14_1 AS(
		SELECT IL."SalePointId", IL."LotteryChannelId",IL."TotalReceived",IL."ActionDate"::DATE FROM tmp T LEFT JOIN "ScratchcardLog" IL ON IL."SalePointId" = T."SalePointId" 
		WHERE TO_CHAR(IL."ActionDate",'YYYY-MM') = '2023-04' AND IL."ActionDate"::DATE <= NOW()::DATE
-- 		GROUP BY IL."ActionDate", IL."SalePointId", IL."LotteryChannelId", IL."TotalReceived" ORDER BY IL."ActionDate" ::DATE
		),tmp14_0 AS(
			SELECT T.* FROM tmp14_1 T  GROUP BY T."ActionDate",T."SalePointId", T."LotteryChannelId", T."TotalReceived" ORDER BY T."ActionDate" 
			)
		,tmp14_5 AS(
		SELECT SUM(IL."TotalReceived") AS "TotalReceived", IL."SalePointId"
		FROM tmp14_1 IL
		GROUP BY IL."SalePointId"
		),tmp14_2 AS(
		SELECT  IL."SalePointId",IL."LotteryChannelId",IL."ActionDate"::DATE
		FROM tmp14_1 IL
		),tmp14_3 AS(
		SELECT ROW_NUMBER () OVER (PARTITION BY T."SalePointId" ORDER BY T."ActionDate" DESC) AS "Id",L."Price"  , T."SalePointId"
			FROM tmp14_2 T
			LEFT JOIN "LotteryPriceAgency" L ON  L."LotteryChannelId" = T."LotteryChannelId"
-- 		GROUP BY L."Price", T."SalePointId"
		),tmp14_4 AS ( SELECT T."Price",T."SalePointId" FROM tmp14_3 T WHERE T."Id" = 1 ),
	tmp14 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName",
			TRANSLATE(T."MainUserId"::TEXT,'{}', '[]') AS "MainUserId",
			TRANSLATE(T."PercentMainUserId"::TEXT,'{}', '[]') AS "PercentMainUserId",
			ROUND(T."TotalRetail", 0) AS "TotalRetail",																			--Tổng vé thường lẻ
			ROUND(T."NamRetailQuantity", 0) AS "NamRetailQuantity",
			ROUND(T."TrungRetailQuantity", 0) AS "TrungRetailQuantity",
			ROUND(T."NamRetailMoney", 0) AS "NamRetailMoney",
			ROUND(T."TrungRetailMoney", 0) AS "TrungRetailMoney",
			ROUND(T."TotalRetailMoney", 0) AS "TotalRetailMoney",
			ROUND(T."NamWholesale", 0) AS "NamWholesale",
			ROUND(T."TrungWholesale", 0) AS "TrungWholesale",
			ROUND(T."TotalWholesale", 0) AS "TotalWholesale",																--Tổng vé thường sỉ
 			ROUND(T."NamWholesaleMoney", 0) AS "NamWholesaleMoney",
			ROUND(T."TrungWholesaleMoney", 0) AS "TrungWholesaleMoney",
			ROUND(T."TotalWholesaleMoney", 0) AS "TotalWholesaleMoney",
			
			--Tổng vé cào lẻ
			ROUND(T."ScratchRetailCity", 0) AS "ScratchRetailCity",
			ROUND(T."ScratchRetailDN", 0) AS "ScratchRetailDN",
			ROUND(T."ScratchRetailBOC", 0) AS "ScratchRetailBOC",
			ROUND(T."ScratchRetailXO", 0) AS "ScratchRetailXO",
			ROUND(T."ScratchRetailXO2K", 0) AS "ScratchRetailXO2K",
 			ROUND(T."TotalScratchRetailMoney", 0) AS "TotalScratchRetailMoney",
 			
 			--Tổng vé cào sỉ
 			ROUND(T."ScratchWholesaleCity", 0) AS "ScratchWholesaleCity",
			ROUND(T."ScratchWholesaleDN", 0) AS "ScratchWholesaleDN",
			ROUND(T."ScratchWholesaleBOC", 0) AS "ScratchWholesaleBOC",
			ROUND(T."ScratchWholesaleXO", 0) AS "ScratchWholesaleXO",
			ROUND(T."ScratchWholesaleXO2K", 0) AS "ScratchWholesaleXO2K",
 			ROUND(T."TotalScratchWholesaleMoney", 0) AS "TotalScratchWholesaleMoney",
 			
-- 			ROUND(T."WinningLotteryPrice", 0) AS "WinningLotteryPrice",
			ROUND(T."ThreeSpecialPrice", 0) AS "ThreeSpecialPrice", -- Tổng tiền trúng 3 số 
			ROUND(T."FourSpecialPrice", 0) AS "FourSpecialPrice", -- Tổng tiền trúng 4 số 
 			ROUND(T."TwoSpecialPrice", 0) AS "TwoSpecialPrice",	-- Tổng tiền trúng 2 số 
			ROUND(T."ThreeSpecial", 0)*300000 AS "ThreeSpecial",
			ROUND(T."FourSpecial", 0)*750000 AS "FourSpecial",
			ROUND(T."TwoSpecial", 0)*10000 AS "TwoSpecial",
			ROUND(T."Promotion", 0)*T."PromotionPrice" AS "Promotion",
--  		ROUND(T."VietlottPrice", 0) AS "VietlottPrice",																	
-- 			ROUND(T."LotoPrice", 0) AS "LotoPrice",
 			ROUND(T."TotalRemaining", 0) AS "TotalRemaining",																--Tổng ôm ế 
 			ROUND(T."TotalReceived", 0) AS "TotalReceived",																	--Tổng vé nhận
			ROUND(T."PriceReceived", 0) AS "PriceReceived",																	--Tổng chi phí nhận vé														
-- 			ROUND(T."FeeOutSite", 0) AS "FeeOutSite",																				--Chi phí ngoài
 			ROUND(T."SaleOfVietlott", 0) AS "SaleOfVietlott",																--Doanh thu Vietlott			
 			ROUND(T."PriceVietlott", 0) AS "PriceVietlott",																	--Tiền nạp Vietlott
 			ROUND(T."SaleOfLoto", 0) AS "SaleOfLoto",																				--Doanh thu loto
 			ROUND(T."ProfitOfLoto", 0) AS "ProfitOfLoto",																		--lợi nhuận loto
-- 			ROUND(T."PunishUser", 0) AS "PunishUser",																				--Phạt nhân viên
-- 			ROUND(T."OvertimeUser", 0) AS "OvertimeUser",																		--Tăng ca nhân viên
-- 			ROUND(T."AwardUser", 0) AS "AwardUser",																					--Thưởng nhân viên
-- 			ROUND(T."DebtUser", 0) AS "DebtUser", 																					--nợ nhân viên
-- 			ROUND(T."TotalSalary", 0) AS "TotalSalary",																			--Tổng tiền trả lương thường
-- 			ROUND(T."TotalSalarySub", 0) AS "TotalSalarySub",																--Tổng tiền trả lương tăng ca
-- 			ROUND(T."TotalPriceForLunch", 0) AS "TotalPriceForLunch",												--Tổng tiền cơm trưa
-- 			ROUND(T."TotalPriceTarget", 0) AS "TotalPriceTarget",														--Tổng tiền thưởng target
-- 			ROUND(T."PriceReceiveItem", 0) AS "PriceReceiveItem",														--Tổng tiền nhận hàng hoá
-- 			ROUND(T."PriceTransItem", 0) AS "PriceTransItem",																--Tổng tiền trả hàng hoá
-- 			ROUND(T."PriceReceiveInstrument", 0) AS "PriceReceiveInstrument",								--Tổng tiền nhận máy móc
-- 			ROUND(T."PriceTransInstrument", 0) AS "PriceTransInstrument", 									--Tổng tiền trả máy móc
 			ROUND(T."TotalCommission", 0) AS "TotalCommission",															--Hoa hồng đổi số trúng	
-- 			ROUND((SELECT S."InternetFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "InternetFee",
-- 			ROUND((SELECT S."RentHomeFee" FROM "SalePoint" S WHERE S."SalePointId" = T."SalePointId"),0) AS "RentHomeFee",
			ROUND(
				T."TotalRetailMoney"
			+ T."TotalWholesaleMoney"
			+ T."TotalScratchRetailMoney"
			+ T."TotalScratchWholesaleMoney"
			+ T."ProfitOfLoto"
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
			--- T."ThreeSpecialPrice"
			--- T."FourSpecialPrice"
			--- T."TwoSpecialPrice"
			--- T."PriceReceived"
			, 0) AS "Profit",
			ROUND(T."SaleOfVietlott" - T."PriceVietlott", 0) AS "ProfitOfVietlott",					--Lợi nhuận vietlott
			T."FeeOutSite",
			T."PriceReceiveItem",
			T."PriceTransItem",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId") AS "VietLotFee",
			ROUND(T."FeeOutSite" + T."PriceReceiveItem" - T."PriceTransItem" + fn_get_total_price_transaction_type(p_month,9, T."SalePointId") , 0) AS "TotalFee",
			ROUND(T."TotalSalary", 0) AS "TotalAllSalary",																				--Tổng tiền lương																																	
			ROUND(
			COALESCE(T."TotalRetailMoney",0)
			+ COALESCE(T."TotalWholesaleMoney",0)
			- COALESCE((SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId"),0)
			- COALESCE((SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") ,0)
			+ COALESCE(T."TotalScratchRetailMoney",0)
			- COALESCE(T."ScratchRetailCity") - COALESCE(T."ScratchRetailDN")
			+ COALESCE(T."ProfitOfLoto",0)
			+ COALESCE(T."TotalCommission",0)
			+ COALESCE(T."SaleOfVietlott",0)
-- 			- fn_get_total_price_transaction_type(p_month,9, T."SalePointId") -- tien nap Vietlott
			- COALESCE( T."ThreeSpecialPrice",0)
			- COALESCE( T."FourSpecialPrice" ,0)
			- COALESCE(T."TwoSpecialPrice",0)
			- COALESCE(T."TotalRemaining",0)*8750
			- COALESCE(T."FeeOutSite")
			- COALESCE((SELECT SUM(I."TotalPrice") FROM "ItemFull" I WHERE TO_CHAR(I."CreateDate", 'YYYY-MM') = p_month),0)
			- COALESCE((SELECT SUM(F."TotalReceived") FROM crm_get_inventory_inday_of_all_salepoint_v2(p_month,T."SalePointId") F) :: INT8 * 8750 ,0)
			- (COALESCE(T."TotalSalary" , 0) ) , 0)::NUMERIC AS "TotalSale",
			ROUND(COALESCE(T."TotalSalary" , 0),0)  AS "EmployeeSalary",
			3000000 AS "ManagerSalary",
			1500000 AS "DistributorSalary",
			T."ScratchRetailCity" + T."ScratchRetailDN" + T."TotalScratchRetailMoney" AS "TongTienVeCao",
			 T."TotalRetailMoney" + T."TotalWholesaleMoney" AS "TongTienVeThuong",
			fn_get_total_price_transaction_type(p_month,9, T."SalePointId")  AS "ToUpVietlott",
			(SELECT SF."ElectronicFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "ElectronicFee",
			(SELECT SF."WaterFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "WaterFee",
			(SELECT SF."InternetFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "InternetFee",
			(SELECT SF."EstateFee" FROM "StaticFee" SF WHERE SF."SalePointId" = T."SalePointId") AS "EstateFee",
			(SELECT (A."Price" * B."TotalReceived") AS "TotalMoneyFromAgency" FROM tmp13_4 A LEFT JOIN tmp13_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId"),
			(SELECT (A."Price" * B."TotalReceived") AS "TotalScratchMoneyFromAgency"  FROM tmp14_4 A LEFT JOIN tmp14_5 B ON B."SalePointId" = A."SalePointId"  WHERE T."SalePointId" = A."SalePointId") 
-- 			(T."Profit" / F."TotalCommision" ) AS "SuperAdmin"
		FROM tmp13 T
-- 		LEFT JOIN crm_salepoint_get_commision_of_all_user_in_month(p_month) F ON F."SalePointId" = T."SalePointId"
	),
	tmp15 AS
	(
		SELECT
		T1.*,
		json_build_object(
				'NamRetailQuantity',
				T1."NamRetailQuantity",
				'TrungRetailQuantity',
				T1."TrungRetailQuantity",
				'NamRetailMoney',
				T1."NamRetailMoney",
				'TrungRetailMoney',
				T1."TrungRetailMoney",
				'TotalRetailMoney',
				T1."TotalRetailMoney"
		) AS "RetailMoney",
		json_build_object(
				'NamWholesale',
				T1."NamWholesale",
				'TrungWholesale',
				T1."TrungWholesale",
				'TotalWholesale',
				T1."TotalWholesale",
				'NamWholesaleMoney',
				T1."NamWholesaleMoney",
				'TrungWholesaleMoney',
				T1."TrungWholesaleMoney",
				'TotalWholesaleMoney',
				T1."TotalWholesaleMoney"
		) AS "WholesaleMoney",
		json_build_object(
				'ScratchRetailCity',
				T1."ScratchRetailCity",
				'ScratchRetailDN',
				T1."ScratchRetailDN",
				'ScratchRetailBOC',
				T1."ScratchRetailBOC",
				'ScratchRetailXO',
				T1."ScratchRetailXO",
				'ScratchRetailXO2K',
				T1."ScratchRetailXO2K",
				'TotalScratchRetailMoney',
				T1."TotalScratchRetailMoney"
		) AS "ScratchRetailMoney",
		json_build_object(
				'ScratchWholesaleCity',
				T1."ScratchWholesaleCity",
				'ScratchWholesaleDN',
				T1."ScratchWholesaleDN",
				'ScratchWholesaleBOC',
				T1."ScratchWholesaleBOC",
				'ScratchWholesaleXO',
				T1."ScratchWholesaleXO",
				'ScratchWholesaleXO2K',
				T1."ScratchWholesaleXO2K",
				'TotalScratchWholesaleMoney',
				T1."TotalScratchWholesaleMoney"
		) AS "ScratchWholesaleMoney",
		
		json_build_object(
				'ElectronicFee',
				COALESCE(T1."ElectronicFee",0),
				'WaterFee',
				COALESCE(T1."WaterFee",0),
				'InternetFee',
				COALESCE(T1."InternetFee",0),
				'EstateFee',
				COALESCE(T1."EstateFee",0),
				'TotalFee',
				COALESCE(T1."ElectronicFee",0) + COALESCE(T1."WaterFee",0) + COALESCE(T1."InternetFee",0) +  COALESCE(T1."EstateFee",0)
		) AS "StaticFee",
		json_build_object(
				'ThreeSpecial',
				T1."ThreeSpecial",
				'FourSpecialPrice',
				T1."FourSpecialPrice",
				'TwoSpecialPrice',
				T1."TwoSpecialPrice",
				'Promotion',
				T1."Promotion",
				'TotalPrice',
				T1."ThreeSpecial" + T1."FourSpecialPrice" + T1."TwoSpecialPrice" +  T1."Promotion"
		) AS "Prize",
		json_build_object(
				'StaffSalary',
				T1."EmployeeSalary",
				'ManagerSalary',
				T1."ManagerSalary",
				'DistributorSalary',
				T1."DistributorSalary",
				'TotalSalary',
				T1."EmployeeSalary" + T1."ManagerSalary" + T1."DistributorSalary"
		) AS "TotalSalary",
		json_build_object(
				'FeeOutSite',
				T1."FeeOutSite",
				'PriceReceiveItem',
				T1."PriceReceiveItem",
				'PriceTransItem',
				T1."PriceTransItem",
				'VietLotFee',
				T1."VietLotFee",
				'TotalFees',
				T1."FeeOutSite" + T1."PriceReceiveItem" + T1."PriceTransItem"+  T1."VietLotFee"
			) AS "Fees",
		(SELECT 
					array_to_json(array_agg(jsonb_build_object('FullName',F."FullName", 'Percent', F."Percent", 'TotalCommisionUser', F."TotalCommisionUser")))::TEXT
				FROM fn_total_commision_user(T1."SalePointId", p_month, T1."Profit") F
			) AS "ListTotalComitsionUser"
		FROM tmp14 T1
-- 		GROUP BY T1."SalePointId",T1."SalePointName",T1."MainUserId",T1."PercentMainUserId",T1.Total
	)
	-- SELECT * FROM crm_report_sale_of_salepoint_in_month_v4('2023-02');
	SELECT
		TO_JSONB(T.*)::TEXT AS "DataSale",
		(SELECT * FROM crm_get_sale_divide_for_user(T."MainUserId", T."PercentMainUserId", T."TotalSale"))::TEXT AS "DataSalePercent"
	FROM tmp15 T
	ORDER BY T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_sale_of_salepoint_in_month_v6(p_month character varying, p_salepoint bigint) OWNER TO postgres;

--
-- Name: crm_report_sale_total_in_month(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_sale_total_in_month(p_month character varying, p_sale_point_id integer) RETURNS TABLE("DataSale" text, "DataSalePercent" text)
    LANGUAGE plpgsql
    AS $$
/*
    Name: crm_report_sale_total_in_month
    Description: Function get total profit in month
    Params:
        [p_month: character varying] in month (YYYY-MM)
        [p_sale_point_id: integer] sale point
    Author: TuanBui
    History:
        [2024-06-10 08:00:00]: Created function
        [2024-06-10 10:18:00]: Add new param p_sale_point_id
        [2024-06-14 08:09:00]: Fix bug get total commission
        [2024-06-21 08:09:00]: Fix bug get boc5k, commission tmp_compensation, revenue loto
        [2024-06-27 08:09:00]: Get total salary
*/
DECLARE
    v_lottery INT := 1;
    v_lottery_dup INT := 2;
    v_scratch INT := 3;
    v_lottery_price_id INT := 1;
    v_lottery_scratch_price_id INT := 1;
    v_lottery_scratch_wholesale_price_id INT := 7;

    v_start_date DATE;
    v_end_date DATE;
    v_const_parent_id INT := 14;

    v_retail_price NUMERIC := 0;
    v_wholesale_price NUMERIC := 0;
    v_scratch_retail_price NUMERIC := 0;
    v_scratch_wholesale_price NUMERIC := 0;
    v_scratch_retail_DN_price NUMERIC := 0;
    v_scratch_wholesale_DN_price NUMERIC := 0;
    v_BOC5k_retail_price NUMERIC := 0;
    v_BOC10k_retail_price NUMERIC := 0;
    v_XO5k_retail_price NUMERIC := 0;
    v_XO2k_retail_price NUMERIC := 0;
    v_remaining_price NUMERIC := 0;
    v_return_price NUMERIC := 0;
    v_last3_price NUMERIC := 0;
    v_last4_price NUMERIC := 0;
    v_commission5_5 NUMERIC := 0;
    v_commission1_5 NUMERIC := 0;
    v_compensation_commission NUMERIC := 0;
    v_per_tax NUMERIC := 0;
    v_insurance_vietlott NUMERIC := 0;
    v_salary_manager_point NUMERIC := 0;
    v_salary_employee NUMERIC := 0;
    v_salary_shared_ticket NUMERIC := 0;
    v_tool_money NUMERIC := 0;

BEGIN
    v_start_date = (p_month || '-01')::DATE;
    v_end_date = (date_trunc('month', v_start_date) + INTERVAL '1 month - 1 day')::DATE;

    -- 1. Get all configs of report profit
    DROP TABLE IF EXISTS tmp_report_profit_configs;
    DROP TABLE IF EXISTS tmpTable;
    CREATE TEMP TABLE tmp_report_profit_configs ON COMMIT DROP AS
        (SELECT *
         FROM (SELECT "ConstantId", "Price"
               FROM "Constant" as CON
               WHERE CON."ConstId" = v_const_parent_id) as CONF);

    v_retail_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 16);
    v_wholesale_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 17);
    v_scratch_retail_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 18);
    v_scratch_wholesale_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 19);
    v_scratch_retail_DN_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 20);
    v_scratch_wholesale_DN_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 21);
    v_BOC5k_retail_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 22);
    v_BOC10k_retail_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 23);
    v_XO5k_retail_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 24);
    v_XO2k_retail_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 25);
    v_remaining_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 26); -- giá ôm ế
    v_return_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 27); -- giá hoàn vé
    v_last3_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 28);
    v_last4_price := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 29);
    v_commission5_5 := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 30);
    v_commission1_5 := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 31);
    v_compensation_commission := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 32);
    v_per_tax := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 33);
    v_insurance_vietlott := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 34);
    v_salary_manager_point := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 35);
    v_salary_employee := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 36);
    v_salary_shared_ticket := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 37);
    v_tool_money := (SELECT COALESCE("Price", 0) FROM tmp_report_profit_configs WHERE "ConstantId" = 38);

    RETURN QUERY
        --Lấy danh sách bán hàng
        WITH tmp1
                 AS (
                SELECT
                    -- tong le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) AS "TotalRetail",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" = v_lottery_price_id), 0) * v_retail_price) AS "TotalRetailMoney",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) AS "NamRetailQuantity",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 2), 0) * v_retail_price) AS "NamRetailQuantityMoney",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) AS "TrungRetailQuantity",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (1, 2) AND SPL."LotteryPriceId" = 1 and lc."RegionId" = 3), 0) * v_retail_price) AS "TrungRetailQuantityMoney",

                    -- tong si
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "TotalWholeSale",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) * v_wholesale_price) AS "TotalWholeSaleMoney",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) AS "NamWholesale",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 2), 0) * v_wholesale_price) AS "NamWholesaleMoney",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) AS "TrungWholesale",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_lottery, v_lottery_dup) AND SPL."LotteryPriceId" <> v_lottery_price_id and lc."RegionId" = 3), 0) * v_wholesale_price) AS "TrungWholesaleMoney",

                    -- tong cao TP le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchRetailCity",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1000) , 0) * v_scratch_retail_price) AS "ScratchRetailCityMoney",
                    -- tong cao TP si (9k3)
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_wholesale_price_id AND SPL."LotteryChannelId" = 1000) , 0) AS "ScratchWholeSaleCity",
                    (COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_wholesale_price_id AND SPL."LotteryChannelId" = 1000) , 0) * v_scratch_wholesale_price) AS "ScratchWholeSaleCityMoney",

                    -- tong cao DN le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchRetailDN",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0)  * v_scratch_retail_DN_price AS "ScratchRetailDNMoney",
                    -- tong cao DN si
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) AS "ScratchWholesaleDN",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" <> v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1001) , 0) * v_scratch_wholesale_DN_price AS "ScratchWholesaleDNMoney",

                    -- tong boc 5k le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."GuestId" IS NULL AND SPL."LotteryChannelId" = 1002) , 0) AS "ScratchRetailBOC5k",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."GuestId" IS NULL AND SPL."LotteryChannelId" = 1002) , 0) * v_BOC5k_retail_price AS "ScratchRetailBOC5kMoney",
                    -- tong boc 10k le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."GuestId" IS NULL AND SPL."LotteryChannelId" = 1005) , 0) AS "ScratchRetailBOC10k",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."GuestId" IS NULL AND SPL."LotteryChannelId" = 1005) , 0) * v_BOC10k_retail_price AS "ScratchRetailBOC10kMoney",

                    -- tong XO 5k le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) AS "ScratchRetailXO",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1003) , 0) * v_XO5k_retail_price AS "ScratchRetailXOMoney",
                    -- tong XO 2k le
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) AS "ScratchRetailXO2K",
                    COALESCE(SUM(SPL."Quantity") FILTER (WHERE SPL."LotteryTypeId" IN (v_scratch) AND SPL."LotteryPriceId" = v_lottery_scratch_price_id AND SPL."LotteryChannelId" = 1004) , 0) * v_XO2k_retail_price AS "ScratchRetailXO2KMoney"
                FROM "SalePointLog" SPL
                         join "LotteryChannel" lc on spl."LotteryChannelId" = lc."LotteryChannelId"
                WHERE SPL."IsDeleted" IS FALSE
                  AND (SPL."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
                  AND SPL."ActionDate" BETWEEN v_start_date AND v_end_date
            ),
             -- tổng ôm ế
             tmp2 AS (
                 SELECT
                     COALESCE(SUM(I."TotalRemaining" + I."TotalDupRemaining"), 0) AS "TotalRemaining",
                     COALESCE(SUM(I."TotalRemaining" + I."TotalDupRemaining"), 0) * v_remaining_price AS "TotalRemainingMoney",
                     SUM(I."TotalReceived" + I."TotalDupReceived") AS "TotalReceived"
                 FROM "Inventory" I
                 WHERE I."LotteryDate" BETWEEN v_start_date AND v_end_date AND (I."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
             ),
             -- tổng hoàn vé + trúng 3,4 số cuối
             tmp3 AS(
                 SELECT
                     -- Ba số đặc biệt
                     COALESCE(SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2), 0)  AS "ThreeSpecial",
                     COALESCE(SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 2), 0)  * v_last3_price AS "ThreeSpecialMoney",
                     -- Bốn số đặc biệt
                     COALESCE(SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3), 0)  AS "FourSpecial",
                     COALESCE(SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 3), 0)  * v_last4_price AS "FourSpecialMoney",
                     -- Hoàn vé
                     COALESCE(SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4), 0)  AS "TwoSpecial",
                     COALESCE(SUM(W."Quantity") FILTER (WHERE W."WinningTypeId" = 4), 0)  * v_return_price AS "TwoSpecialMoney"

                 FROM "Winning" W
                 WHERE (W."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND W."ActionDate" BETWEEN v_start_date AND v_end_date
             ),
             tmp4 AS(
                 SELECT
                     --Chi phí ngoài
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1 AND T."TypeNameId" = 3), 0) AS "FeeOutSiteMoney",
                     -- tien dien
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1 AND T."TypeNameId" = 1), 0) AS "FeeElectricMoney",
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1 AND T."TypeNameId" = 2), 0) AS "FeeWaterMoney",
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1 AND T."TypeNameId" = 12), 0) AS "FeeRentHomeMoney",
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1 AND T."TypeNameId" = 13), 0) AS "FeeInternetMoney",
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 1 AND T."TypeNameId" = 15), 0) AS "FeeSystemMoney",
                     -- doanh thu vietlott x 5.5%
                     COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) * v_commission5_5  AS "Commission55Money",
                     (((COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 2), 0) * v_commission5_5) * v_commission1_5) / v_commission5_5) as "Commission15Money"
                 -- COALESCE(SUM(T."Price") FILTER (WHERE T."TransactionTypeId" = 3), 0) AS "SaleOfLotoMoney"
                 FROM "Transaction" T
                 WHERE T."IsDeleted" IS FALSE
                   AND (T."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
                   AND T."Date" BETWEEN v_start_date AND v_end_date
             ),
             tmp_compensation AS(
                 SELECT sum(coalesce(r.total, 0)) * v_compensation_commission as "CompenstationCommissionMoney"
                 FROM (SELECT (SELECT sum((j ->> 'ReturnWining') :: numeric) -- + (j ->> 'WinningPriceSum') :: numeric
                               FROM json_array_elements(t."Data" :: json) as j) as total
                       FROM crm_salepoint_get_sale_loto_in_date_v3(p_month, 2, p_sale_point_id) as t)
                          as r
             ),
             tmp_loto_revenue AS(
                 SELECT sum(coalesce(r.total, 0)) as "SaleOfLotoMoney"
                 FROM (SELECT (SELECT sum((j ->> 'TotalPrice') :: numeric - (j ->> 'WinningPriceSum') :: numeric) -- (j ->> 'WinningPriceSum') :: numeric
                               FROM json_array_elements(t."Data" :: json) as j) as total
                       FROM crm_salepoint_get_sale_loto_in_date_v3(p_month, 3, p_sale_point_id) as t)
                          as r
             ),
             -- Thuế thu nhập cá nhân
             tmp5 AS(
                 SELECT
                     '' as PersonalTax,
                     ((TC."CompenstationCommissionMoney" + T4."Commission55Money" + T4."Commission15Money") * v_per_tax) as "PersonalTaxMoney"
                 FROM tmp3 T3, tmp4 T4, tmp_compensation as TC
             ),
             tmp6 AS (
                 SELECT SUM(C."TotalCommision")  AS "TotalCommissionMoney"
                 FROM crm_salepoint_get_commision_of_all_user_in_month(p_month) C
                 where (C."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND C."UserId" = 0
             ),
             --Lấy lương chi cho nhân viên chưa tính các loại thưởng phạt chỉ có target
             tmp7 AS (
                 /*SELECT
                     SUM(COALESCE(((T."SalaryData"::JSON)->>'TotalSalary')::NUMERIC, 0)) AS "TotalSalaryMoney",
                     v_salary_manager_point as "SalaryManagerPointMoney",
                     v_salary_employee as "SalaryEmployeeMoney",
                     v_salary_shared_ticket as "SalarySharedTicketMoney",
                     v_tool_money as "ToolMoney",
                     2500000 as "SystemFundMoney"
                 FROM crm_get_salary_of_user_by_month_v10(p_month,0) T
                 WHERE (((T."SalaryData"::JSON)->>'SalePointId')::INT = p_sale_point_id OR p_sale_point_id = 0)*/
                 SELECT 0 AS "TotalSalaryMoney",
                     v_salary_manager_point as "SalaryManagerPointMoney",
                     v_salary_employee as "SalaryEmployeeMoney",
                     v_salary_shared_ticket as "SalarySharedTicketMoney",
                     v_tool_money as "ToolMoney",
                     2500000 as "SystemFundMoney"
             ),
             tmp_result AS(
                 SELECT T1.*,
                        json_build_object(
                                'TotalRetail',
                                T1."TotalRetail",
                                'TotalRetailMoney',
                                T1."TotalRetailMoney",
                                'NamRetailQuantity',
                                T1."NamRetailQuantity",
                                'NamRetailQuantityMoney',
                                T1."NamRetailQuantityMoney",
                                'TrungRetailQuantity',
                                T1."TrungRetailQuantity",
                                'TrungRetailQuantityMoney',
                                T1."TrungRetailQuantityMoney"
                        ) as "Retail",
                        T2.*,
                        T3.*,
                        T4.*,
                        T5.*,
                        T6.*,
                        T7.*,
                        TC.*,
                        TL.*,
                        (
                            T1."TotalRetailMoney" +
                            T1."TotalWholeSaleMoney" +
                            T1."ScratchRetailCityMoney" +
                            T1."ScratchWholeSaleCityMoney" +
                            T1."ScratchRetailDNMoney" +
                            T1."ScratchWholesaleDNMoney" +
                            T1."ScratchRetailBOC5kMoney" +
                            T1."ScratchRetailBOC10kMoney" +
                            T1."ScratchRetailXOMoney" +
                            T1."ScratchRetailXO2KMoney" -
                            T2."TotalRemainingMoney" -
                            T3."TwoSpecialMoney" -
                            T3."ThreeSpecialMoney" -
                            T3."FourSpecial" -
                            T4."FeeOutSiteMoney"
                            ) as "TraditionalProfitsMoney",
                        v_insurance_vietlott as "InsuranceVietlottMoney",
                        (
                            (TC."CompenstationCommissionMoney" +
                             T4."Commission15Money" +
                             T4."Commission55Money") -
                            (T5."PersonalTaxMoney" +
                             v_insurance_vietlott)
                            ) as "TotalVietlottProfitMoney",
                        (
                            (T6."TotalCommissionMoney" + TL."SaleOfLotoMoney") -
                            (T4."FeeRentHomeMoney" +
                             T4."FeeElectricMoney" +
                             T4."FeeInternetMoney" +
                             T4."FeeSystemMoney" +
                             T4."FeeWaterMoney" +
                             T7."TotalSalaryMoney" +
                             T7."SalaryEmployeeMoney" +
                             T7."SalaryManagerPointMoney" +
                             T7."SalarySharedTicketMoney" +
                             T7."SystemFundMoney" +
                             T7."ToolMoney")
                            ) as "LastProfitMoney"
                 FROM tmp1 AS T1, tmp2 as T2, tmp3 AS T3, tmp4 AS T4, tmp5 AS T5, tmp6 AS T6, tmp7 AS T7, tmp_compensation as TC, tmp_loto_revenue as TL
             )
        SELECT
            TO_JSONB(T.*)::TEXT AS "DataSale",
            '[]' AS "DataSalePercent"
        FROM tmp_result AS T;
END;
$$;


ALTER FUNCTION public.crm_report_sale_total_in_month(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_report_salepoint_get_fee_outsite_in_month_in_total(character varying, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_salepoint_get_fee_outsite_in_month_in_total(p_month character varying, p_salepoint_id bigint) RETURNS TABLE("Month" character varying, "UserId" integer, "FullName" character varying, "SalePointId" integer, "SalePointName" character varying, "Data" text, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
BEGIN
	RETURN QUERY
	WITH tmp0 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName"
		FROM crm_get_list_salepoint_of_leader(0) T
	),
	tmp AS (
		SELECT
			(p_month||'-'||"I")::DATE AS "Date"
		FROM generate_series(1, v_total_date) AS "I"
	),
	tmp1 AS (
		SELECT
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SD."SalePointId",
			SP."SalePointName",
			json_build_object('Note',TT."Note",'TotalPrice',TT."Price",'ActionDate',TT."ActionDate") AS "Data",
			SUM(TT."TotalPrice")::NUMERIC AS "TotalPrice"
		FROM tmp T
			JOIN "ShiftDistribute" SD ON SD."DistributeDate" = T."Date"::DATE
			JOIN "User" U ON SD."UserId" = U."UserId"
			JOIN tmp0 SP ON SD."SalePointId" = SP."SalePointId"
			LEFT JOIN "Transaction" TT ON TT."Date" = T."Date" 
					AND TT."TransactionTypeId" = 1
					AND TT."IsDeleted" IS FALSE
					AND TT."UserId" = SD."UserId"
					AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
		GROUP BY 
			TT."TransactionTypeId",
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SD."SalePointId",
			SP."SalePointName",
			TT."Price",
			TT."Note",
			TT."ActionDate"
		ORDER BY 
			T."Date",
			SD."ShiftId"
	)
	SELECT 
		p_month,
		T."UserId",
		T."FullName",
		T."SalePointId",
		T."SalePointName",
		json_agg(T."Data")::TEXT,
		SUM(T."TotalPrice")
	FROM tmp1 T
	WHERE T."SalePointId" = p_salepoint_id
	GROUP BY T."UserId",T."FullName",T."SalePointId",T."SalePointName"
	ORDER BY 
		T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_report_salepoint_get_fee_outsite_in_month_in_total(p_month character varying, p_salepoint_id bigint) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_received_of_sub_agency_monthly(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_received_of_sub_agency_monthly(p_month character varying) RETURNS TABLE("SubAgencyId" integer, "AgencyName" character varying, "DateSell" text, "Sum" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	Return Query 
	SELECT 
		IL."SupAgencyId" as "SubAgencyId",
		SA."AgencyName",
		TO_CHAR(IL."Date", 'YYYY-MM-DD') as "DateSell",
		SUM(IL."TotalReceived")::bigint AS "SumTotalReceived"
	FROM "InventoryForSupAgency" IL
	LEFT JOIN "SubAgency" SA ON SA."AgencyId" = IL."SupAgencyId"
	WHERE TO_CHAR(IL."Date", 'YYYY-MM') = p_month
	Group by
	IL."SupAgencyId",
	TO_CHAR(IL."Date", 'YYYY-MM-DD'),
	SA."AgencyName";
END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_received_of_sub_agency_monthly(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_received_scard_of_sub_agency_monthly(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_received_scard_of_sub_agency_monthly(p_month character varying) RETURNS TABLE("SubAgencyId" integer, "AgencyName" character varying, "DateSell" text, "Sum" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	Return Query 
	SELECT 
		S."SalePointId" as "SubAgencyId",
		SA."AgencyName",
		TO_CHAR(S."ActionDate", 'YYYY-MM-DD') as "DateSell",
		SUM(S."TotalReceived") AS "SumTotalReceived"
	FROM "ScratchcardLogForSubAgency" S
	LEFT JOIN "SubAgency" SA ON SA."AgencyId" = S."SalePointId"
	WHERE TO_CHAR(S."ActionDate", 'YYYY-MM') = p_month
	Group by
	S."SalePointId",
	TO_CHAR(S."ActionDate", 'YYYY-MM-DD'),
	SA."AgencyName";
END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_received_scard_of_sub_agency_monthly(p_month character varying) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_sell_of_month_grouped(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_sell_of_month_grouped(p_month character varying, p_lottery_type integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "LotteryTypeId" integer, "RegionId" integer, "RegionName" character varying, "Sum" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	Return Query 
	SELECT 
			SPL."ActionBy" as "UserId",
			U."FullName",
			SPL."LotteryTypeId",
			LC."RegionId",
			R."RegionName",
			SUM(SPL."Quantity") AS "Sum"
		FROM "SalePointLog" SPL
			JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
			JOIN "Region" R ON R."RegionId" = LC."RegionId"
			JOIN "User" U ON U."UserId" = SPL."ActionBy"
		Where  TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
			AND SPL."IsDeleted" IS FALSE
			AND (COALESCE(p_lottery_type, 0) = 0 
				OR (SPL."LotteryTypeId" = p_lottery_type))
		GROUP BY 
		SPL."ActionBy",
		U."FullName",
		SPL."LotteryTypeId",
		LC."RegionId",
		R."RegionName";
	
END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_sell_of_month_grouped(p_month character varying, p_lottery_type integer) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_sell_of_month_grouped_by_salepoint(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_sell_of_month_grouped_by_salepoint(p_month character varying, p_sale_point character varying, p_lottery_type integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "RegionId" integer, "RegionName" character varying, "Sum" bigint)
    LANGUAGE plpgsql
    AS $$
/*
    History:
        [2024-06-21 21:00][TuanBui]: Get new data from ReportLottery
        [2024-06-23 21:00][TuanBui]: Get new more scratch data
*/
BEGIN
    IF p_lottery_type = 3
    THEN
        Return Query
            SELECT
                SPL."SalePointId",
                SP."SalePointName",
                SPL."LotteryTypeId",
                LC."RegionId",
                R."RegionName",
                SUM(SPL."Quantity") AS "Sum"
            FROM "SalePointLog" SPL
                     JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                     JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                     JOIN "Region" R ON R."RegionId" = LC."RegionId"
            Where  TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
              AND SPL."IsDeleted" IS FALSE
              AND SPL."LotteryTypeId" = p_lottery_type
              AND (COALESCE(p_sale_point, '0')= '0'
                OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))
            GROUP BY
                SPL."SalePointId",
                SP."SalePointName",
                SPL."LotteryTypeId",
                LC."RegionId",
                R."RegionName";
    end if;

    IF p_lottery_type = 1
    THEN
        RETURN QUERY
            SELECT
                SPL."SalePointId",
                SP."SalePointName",
                1 as "LotteryTypeId",
                LC."RegionId",
                R."RegionName",
                SUM(SPL."SoldRetail" + SPL."SoldRetailDup") :: BIGINT AS "Sum"
            FROM "ReportLottery" SPL
                     JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                     JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                     JOIN "Region" R ON R."RegionId" = LC."RegionId"
            Where  TO_CHAR(SPL."Date", 'YYYY-MM') = p_month
              AND (COALESCE(p_sale_point, '0')= '0'
                OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))
            GROUP BY
                SPL."SalePointId",
                SP."SalePointName",
                SPL."LotteryTypeId",
                LC."RegionId",
                R."RegionName";
    end if;

    IF COALESCE(p_lottery_type, 0) = 0
    THEN
        RETURN QUERY
        SELECT
            data."SalePointId",
            data."SalePointName",
            data."LotteryTypeId",
            data."RegionId",
            data."RegionName",
            SUM(data."Sum") :: BIGINT
        FROM (
                 SELECT
                     SPL."SalePointId",
                     SP."SalePointName",
                     SPL."LotteryTypeId",
                     LC."RegionId",
                     R."RegionName",
                     SUM(SPL."Quantity") AS "Sum"
                 FROM "SalePointLog" SPL
                          JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                          JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                          JOIN "Region" R ON R."RegionId" = LC."RegionId"
                 Where  TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
                   AND SPL."IsDeleted" IS FALSE
                   AND SPL."LotteryTypeId" = 3
                   AND (COALESCE(p_sale_point, '0')= '0'
                     OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))
                 GROUP BY
                     SPL."SalePointId",
                     SP."SalePointName",
                     SPL."LotteryTypeId",
                     LC."RegionId",
                     R."RegionName"
                 UNION ALL
                 SELECT
                     SPL."SalePointId",
                     SP."SalePointName",
                     1 as "LotteryTypeId",
                     LC."RegionId",
                     R."RegionName",
                     SUM(SPL."SoldRetail" + SPL."SoldRetailDup") :: BIGINT AS "Sum"
                 FROM "ReportLottery" SPL
                          JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                          JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                          JOIN "Region" R ON R."RegionId" = LC."RegionId"
                 Where  TO_CHAR(SPL."Date", 'YYYY-MM') = p_month
                   AND (COALESCE(p_sale_point, '0')= '0'
                     OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))
                 GROUP BY
                     SPL."SalePointId",
                     SP."SalePointName",
                     SPL."LotteryTypeId",
                     LC."RegionId",
                     R."RegionName"
             ) as data
        GROUP BY
            data."SalePointId",
            data."SalePointName",
            data."LotteryTypeId",
            data."RegionId",
            data."RegionName";
    end if;


    -- [TuanBui]: Comment old function
    /*Return Query
        SELECT
            SPL."SalePointId",
            SP."SalePointName",
            SPL."LotteryTypeId",
            LC."RegionId",
            R."RegionName",
            SUM(SPL."Quantity") AS "Sum"
        FROM "SalePointLog" SPL
                 JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                 JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                 JOIN "Region" R ON R."RegionId" = LC."RegionId"
        Where  TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
          AND SPL."IsDeleted" IS FALSE
          AND (COALESCE(p_lottery_type, 0) = 0
            OR (SPL."LotteryTypeId" = p_lottery_type))
          AND (COALESCE(p_sale_point, '0')= '0'
            OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))

        GROUP BY
            SPL."SalePointId",
            SP."SalePointName",
            SPL."LotteryTypeId",
            LC."RegionId",
            R."RegionName";*/


END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_sell_of_month_grouped_by_salepoint(p_month character varying, p_sale_point character varying, p_lottery_type integer) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_sell_of_month_grouped_by_spoint_date(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_sell_of_month_grouped_by_spoint_date(p_month character varying, p_sale_point character varying, p_lottery_type integer) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DateSell" text, "Sum" bigint)
    LANGUAGE plpgsql
    AS $$
/*
    History:
        [2024-06-21 21:00][TuanBui]: Get new data from ReportLottery
        [2024-06-23 07:00][TuanBui]: Get total scratch tickets
*/
BEGIN

    IF p_lottery_type = 3
    THEN
        Return Query
            SELECT
                SPL."SalePointId",
                SP."SalePointName",
                TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD') AS "DateSell",
                SUM(SPL."Quantity") AS "Sum"
            FROM "SalePointLog" SPL
                     JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                     JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                     JOIN "Region" R ON R."RegionId" = LC."RegionId"
            Where  TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
              AND SPL."IsDeleted" IS FALSE
              AND SPL."LotteryTypeId" = p_lottery_type
              AND (COALESCE(p_sale_point, '0')= '0'
                OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))

            GROUP BY
                SPL."SalePointId",
                SP."SalePointName",
                TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD');
    end if;

    IF p_lottery_type = 1
    THEN
        RETURN QUERY
        SELECT
            SPL."SalePointId",
            SP."SalePointName",
            TO_CHAR(SPL."Date", 'YYYY-MM-DD') AS "DateSell",
            SUM(SPL."SoldRetail" + SPL."SoldRetailDup") :: BIGINT AS "Sum"
        FROM "ReportLottery" SPL
                 JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                 JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                 JOIN "Region" R ON R."RegionId" = LC."RegionId"
        Where  TO_CHAR(SPL."Date", 'YYYY-MM') = p_month
          --AND SPL."LotteryTypeId" = p_lottery_type
          AND (COALESCE(p_sale_point, '0')= '0'
            OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))
        GROUP BY
            SPL."SalePointId",
            SP."SalePointName",
            TO_CHAR(SPL."Date", 'YYYY-MM-DD');
    end if;

    IF COALESCE(p_lottery_type, 0) = 0
    THEN
        RETURN QUERY
        SELECT data."SalePointId",
               data."SalePointName",
               data."DateSell",
               SUM(data."Sum") :: BIGINT
        FROM (SELECT SPL."SalePointId",
                     SP."SalePointName",
                     TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD') AS "DateSell",
                     SUM(SPL."Quantity")                     AS "Sum"
              FROM "SalePointLog" SPL
                       JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                       JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                       JOIN "Region" R ON R."RegionId" = LC."RegionId"
              Where TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
                AND SPL."IsDeleted" IS FALSE
                AND SPL."LotteryTypeId" = 3
                AND (COALESCE(p_sale_point, '0') = '0'
                  OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point, ','))::integer)))

              GROUP BY SPL."SalePointId",
                       SP."SalePointName",
                       TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD')
              UNION ALL
              SELECT SPL."SalePointId",
                     SP."SalePointName",
                     TO_CHAR(SPL."Date", 'YYYY-MM-DD')                     AS "DateSell",
                     SUM(SPL."SoldRetail" + SPL."SoldRetailDup")  AS "Sum"
              FROM "ReportLottery" SPL
                       JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                       JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                       JOIN "Region" R ON R."RegionId" = LC."RegionId"
              Where TO_CHAR(SPL."Date", 'YYYY-MM') = p_month
                -- AND SPL."LotteryTypeId" = 1
                AND (COALESCE(p_sale_point, '0') = '0'
                  OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point, ','))::integer)))
              GROUP BY SPL."SalePointId",
                       SP."SalePointName",
                       TO_CHAR(SPL."Date", 'YYYY-MM-DD')) AS data
        GROUP BY data."SalePointId",
                 data."SalePointName",
                 data."DateSell";
    end if;

    -- [TuanBui]: Comment old function
    /*Return Query
        SELECT
            SPL."SalePointId",
            SP."SalePointName",
            TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD') AS "DateSell",
            SUM(SPL."Quantity") AS "Sum"
        FROM "SalePointLog" SPL
                 JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
                 JOIN "SalePoint" SP ON SPL."SalePointId" = SP."SalePointId"
                 JOIN "Region" R ON R."RegionId" = LC."RegionId"
        Where  TO_CHAR(SPL."ActionDate", 'YYYY-MM') = p_month
          AND SPL."IsDeleted" IS FALSE
          AND (COALESCE(p_lottery_type, 0) = 0
            OR (SPL."LotteryTypeId" = p_lottery_type))
          AND (COALESCE(p_sale_point, '0')= '0'
            OR (SPL."SalePointId" in (select unnest(string_to_array(p_sale_point,','))::integer)))

        GROUP BY
            SPL."SalePointId",
            SP."SalePointName",
            TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD');*/

END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_sell_of_month_grouped_by_spoint_date(p_month character varying, p_sale_point character varying, p_lottery_type integer) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_sell_of_user_to_current_date(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_sell_of_user_to_current_date(p_month character varying, p_userid integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "DateSell" text, "TotalLottery" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	WITH tmp1 AS (
		SELECT 
			SPL."ActionBy",
			SPL."SalePointId",
			SPL."LotteryTypeId",
			LT."LotteryTypeName",
			TO_CHAR(SPL."LotteryDate", 'YYYY-MM-DD') AS "DateSell",
			SUM(SPL."Quantity") AS "TotalLottery"
		FROM "SalePointLog" SPL, "LotteryType" LT
		WHERE (SPL."ActionDate" <= CURRENT_DATE)
			AND (TO_CHAR(SPL."ActionDate", 'YYYY-MM') =  p_month) 
			AND SPL."LotteryTypeId" = LT."LotteryTypeId"
			AND SPL."IsDeleted" IS FALSE
		GROUP BY 
			SPL."ActionBy",
			SPL."SalePointId",
			SPL."LotteryTypeId",
			LT."LotteryTypeName",
			TO_CHAR(SPL."LotteryDate", 'YYYY-MM-DD')
	),
	tmp2 AS (
		SELECT 
			TT."ActionBy", 
			SP."SalePointId",
			SP."SalePointName", 
			TT."LotteryTypeId",
			TT."LotteryTypeName",
			TT."DateSell",
			TT."TotalLottery"
		FROM "SalePoint" SP 
			JOIN tmp1 TT ON SP."SalePointId" = TT."SalePointId"
	)
	SELECT 
		U."UserId",
		U."FullName",
		A."SalePointId",
		A."SalePointName", 
		A."LotteryTypeId", 
		A."LotteryTypeName", 
		A."DateSell",
		A."TotalLottery"
	FROM "User" U JOIN tmp2 A ON U."UserId" = A."ActionBy"
	WHERE COALESCE(p_userId, 0) = 0 OR U."UserId" = p_userId
	ORDER BY U."UserId", A."DateSell";
	
END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_sell_of_user_to_current_date(p_month character varying, p_userid integer) OWNER TO postgres;

--
-- Name: crm_report_total_lottery_sell_of_user_to_current_date_v2(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_total_lottery_sell_of_user_to_current_date_v2(p_month character varying, p_userid integer, p_lottery_type integer) RETURNS TABLE("UserId" integer, "FullName" character varying, "SalePointId" integer, "SalePointName" character varying, "LotteryTypeId" integer, "LotteryTypeName" character varying, "DateSell" text, "TotalLottery" bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	WITH tmp1 AS (
		SELECT 
			SPL."ActionBy",
			SPL."SalePointId",
			SPL."LotteryTypeId",
			LT."LotteryTypeName",
			TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD') AS "DateSell",
			SUM(SPL."Quantity") AS "TotalLottery"
		FROM "SalePointLog" SPL, "LotteryType" LT
		WHERE (SPL."ActionDate" <= NOW())
			AND (TO_CHAR(SPL."ActionDate", 'YYYY-MM') =  p_month) 
			AND SPL."LotteryTypeId" = LT."LotteryTypeId"
			AND SPL."IsDeleted" IS FALSE
			AND (COALESCE(p_lottery_type, 0) = 0 
				OR (p_lottery_type = 3 AND SPL."LotteryTypeId" = p_lottery_type) 
				OR (p_lottery_type <> 3 AND SPL."LotteryTypeId" IN(1,2)))
		GROUP BY 
			SPL."ActionBy",
			SPL."SalePointId",
			SPL."LotteryTypeId",
			LT."LotteryTypeName",
			TO_CHAR(SPL."ActionDate", 'YYYY-MM-DD')
	),
	tmp2 AS (
		SELECT 
			TT."ActionBy", 
			SP."SalePointId",
			SP."SalePointName", 
			TT."LotteryTypeId",
			TT."LotteryTypeName",
			TT."DateSell",
			TT."TotalLottery"
		FROM "SalePoint" SP 
			JOIN tmp1 TT ON SP."SalePointId" = TT."SalePointId"
	)
	SELECT 
		U."UserId",
		U."FullName",
		A."SalePointId",
		A."SalePointName", 
		A."LotteryTypeId", 
		A."LotteryTypeName", 
		A."DateSell",
		A."TotalLottery"
	FROM "User" U JOIN tmp2 A ON U."UserId" = A."ActionBy"
	WHERE COALESCE(p_userId, 0) = 0 OR U."UserId" = p_userId
	ORDER BY U."UserId", A."DateSell";
	
END;
$$;


ALTER FUNCTION public.crm_report_total_lottery_sell_of_user_to_current_date_v2(p_month character varying, p_userid integer, p_lottery_type integer) OWNER TO postgres;

--
-- Name: crm_report_trigger_update_salepoint(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_trigger_update_salepoint() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF NEW."IsDeleted" IS TRUE AND OLD."IsDeleted" IS FALSE  THEN
--Inventory
			UPDATE "Inventory" 
			SET 
				"TotalRemaining" = "TotalRemaining" + (CASE WHEN NEW."LotteryTypeId" =1 THEN NEW."Quantity" ELSE 0 END),
				"TotalDupRemaining" = "TotalDupRemaining" + (CASE WHEN NEW."LotteryTypeId" =2 THEN NEW."Quantity" ELSE 0 END)
			WHERE
				"SalePointId" = NEW."SalePointId" 
				AND "LotteryDate" = NEW."LotteryDate"
				AND "LotteryChannelId"= NEW."LotteryChannelId";
--Scratchcard
			UPDATE "Scratchcard" 
			SET 
				"TotalRemaining" = "TotalRemaining" + (CASE WHEN NEW."LotteryTypeId" =3 THEN NEW."Quantity" ELSE 0 END)
			WHERE
				"SalePointId" = NEW."SalePointId" 
				AND "LotteryChannelId"= NEW."LotteryChannelId";
		
	ELSEIF NEW."IsDeleted" IS FALSE  AND OLD."IsDeleted" IS TRUE THEN
--Inventory
		UPDATE "Inventory" 
			SET 
				"TotalRemaining" = "TotalRemaining" - (CASE WHEN NEW."LotteryTypeId" =1 THEN NEW."Quantity" ELSE 0 END),
				"TotalDupRemaining" = "TotalDupRemaining" - (CASE WHEN NEW."LotteryTypeId" =2 THEN NEW."Quantity" ELSE 0 END)
			WHERE
				"SalePointId" = NEW."SalePointId" 
				AND "LotteryDate" = NEW."LotteryDate"
				AND "LotteryChannelId"= NEW."LotteryChannelId";
--"Scratchcard"
		UPDATE "Scratchcard" 
			SET 
				"TotalRemaining" = "TotalRemaining" - (CASE WHEN NEW."LotteryTypeId" =3 THEN NEW."Quantity" ELSE 0 END)
			WHERE
				"SalePointId" = NEW."SalePointId"
				AND "LotteryChannelId"= NEW."LotteryChannelId";
	END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.crm_report_trigger_update_salepoint() OWNER TO postgres;

--
-- Name: crm_report_update_is_sum_kpi(integer, integer, character varying, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_update_is_sum_kpi(p_user_id integer, p_week_id integer, p_month character varying, p_is_deleted boolean) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
		IF NOT EXISTS (SELECT 1 FROM "ExemptKpi" E 
										WHERE E."UserId" = p_user_id 
											AND E."WeekId" = p_week_id 
											AND E."Month" = p_month)
		THEN
			INSERT INTO "ExemptKpi" ("UserId", "WeekId", "Month", "IsSumKpi")
			VALUES (p_user_id, p_week_id, p_month, p_is_deleted);
		ELSE
			UPDATE "ExemptKpi"
			SET
				"IsSumKpi" = p_is_deleted
			WHERE "UserId" = p_user_id 
											AND "WeekId" = p_week_id 
											AND "Month" = p_month;
		END IF;
    
    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_report_update_is_sum_kpi(p_user_id integer, p_week_id integer, p_month character varying, p_is_deleted boolean) OWNER TO postgres;

--
-- Name: crm_report_update_kpi(integer, character varying, text, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_update_kpi(p_action_by integer, p_action_by_name character varying, p_note text, p_kpi_log_id bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
	UPDATE "KPILog"
		SET
		"ModifyBy" = p_action_by,
		"ModifyByName" = p_action_by_name,
		"Note" = p_note
	WHERE "KPILogId" = p_kpi_log_id;


    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_report_update_kpi(p_action_by integer, p_action_by_name character varying, p_note text, p_kpi_log_id bigint) OWNER TO postgres;

--
-- Name: crm_report_update_kpi_manager(integer, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_update_kpi_manager(p_action_by integer, p_action_by_name character varying, p_date character varying, p_manager_id integer, p_kpi integer, p_type integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
	IF NOT EXISTS(SELECT 1 FROM "ReportKpiManager" RKM WHERE "ManagerId" = p_manager_id AND "Date" = p_date AND "Type" = p_type)
	THEN
		INSERT INTO  "ReportKpiManager" ("ModifyBy", "ModifyByName", "Date", "Kpi","ManagerId","Type")
		VALUES (p_action_by,p_action_by_name,p_date,p_kpi,p_manager_id,p_type);
	ELSE
	
	UPDATE "ReportKpiManager"
		SET
		"ModifyBy" = p_action_by,
		"ModifyByName" = p_action_by_name,
		"Kpi" = p_kpi
	WHERE "ManagerId" = p_manager_id AND "Date" = p_date AND "Type" = p_type;
	END IF;

    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_report_update_kpi_manager(p_action_by integer, p_action_by_name character varying, p_date character varying, p_manager_id integer, p_kpi integer, p_type integer) OWNER TO postgres;

--
-- Name: crm_report_update_report_lottery(integer, integer, integer, integer, integer, integer, integer, integer, integer, bigint, bigint, bigint, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_update_report_lottery(p_shift_id integer, p_sale_point_id integer, p_lotterychannel_id integer, p_lottery_type_id integer, p_report_type integer, p_received integer, p_transfer integer, p_sold_retail integer, p_sold_wholesale integer, p_sold_retail_money bigint, p_sold_wholesale_money bigint, p_split_tickets bigint, p_lottery_date character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
v_stock INT8;
v_remaining INT8;
v_ordinal_num INT;
v_remaining_split_tickets INT8;
v_shift_distribute_id INT;
BEGIN
			-- lấy remaining khi chia vé
		v_remaining_split_tickets:= p_split_tickets -  (SELECT "Stock" FROM "ReportLottery"
																																		WHERE "ShiftId" = p_shift_id 
																																		AND "Date" = NOW()::DATE
																																		AND "LotteryChannelId" = p_lotteryChannel_id
																																		AND "SalePointId" = p_sale_point_id); 
			-- lấy shift distribute để chạy hàm crm_get_previous_remaining_v2
		v_shift_distribute_id := (CASE WHEN p_shift_id = 1 
																		THEN
																			(SELECT "ShiftDistributeId" 
																				FROM "ShiftDistribute" 
																				WHERE "DistributeDate" = (NOW() - INTERVAL '1 day')::DATE
																					AND "SalePointId" = p_sale_point_id
																					AND "ShiftId" = 2)
																		ELSE
																			(SELECT "ShiftDistributeId" 
																				FROM "ShiftDistribute"
																				WHERE "DistributeDate" = NOW()::DATE 
																					AND "SalePointId" = p_sale_point_id
																					AND "ShiftId" = 1)
																END
															);
			-- stock = remainning ca trước 
		v_stock := (SELECT * FROM crm_get_previous_remaining_v2(v_shift_distribute_id, p_lotteryChannel_id, 					p_lottery_type_id, p_lottery_date::DATE,(NOW() - INTERVAL '1 day')::DATE));							
		-- v_remaining :=?								
		-- neu chua ton tai thi tao moi
		IF NOT EXISTS (SELECT * FROM "ReportLottery" WHERE "ShiftId" = p_shift_id 
																									AND "Date" = NOW()::DATE
																									AND "LotteryChannelId" = p_lotteryChannel_id
																									AND "SalePointId" = p_sale_point_id)
			THEN
				FOR i IN 1..(5 - p_shift_id) LOOP
					INSERT INTO "ReportLottery" 
					(
							"ShiftId", 
							"Date", 
							"LotteryChannelId", 
							"SalePointId", 
							"Stock", 
							"SoldRetail", 
							"Remaining", 
							"LotteryTypeId", 
							"Transfer", 
							"Received", 
							"LotteryDate",
							"OrdinalNum", 
							"SoldRetailMoney",
							"SoldWholeSale",
							"SoldWholeSaleMoney"
					)
					VALUES(
						ABS((i+(5 - p_shift_id) % 2) % 2 - 2),
						CASE WHEN i < 3 THEN NOW()::DATE ELSE (NOW() + INTERVAL '1 day')::DATE END,
						p_lotteryChannel_id,
						p_sale_point_id,
						v_stock, 
						(CASE WHEN i = 1 THEN p_sold_retail ELSE 0 END), 
						v_stock, 
						p_lottery_type_id, 
						(CASE WHEN i = 1 THEN p_transfer ELSE 0 END), 
						(CASE WHEN i = 1 THEN p_received ELSE 0 END) , 
						p_lottery_date::DATE,
						i,
						(CASE WHEN i = 1 THEN p_sold_retail_money ELSE 0 END),
						(CASE WHEN i = 1 THEN p_sold_wholesale ELSE 0 END),
						(CASE WHEN i = 1 THEN p_sold_wholesale_money ELSE 0 END)
					);
				END LOOP;
		ELSE
			-- sử lý trường hợp bán vé
			IF p_report_type = 1
			THEN
				UPDATE "ReportLottery" 
				SET 
					"SoldRetail" = "SoldRetail" + p_sold_retail,
					"SoldRetailMoney" = "SoldRetailMoney" + p_sold_retail_money,
					"SoldWholeSale" = "SoldWholeSale" + p_sold_wholesale,
					"SoldWholeSaleMoney" = "SoldWholeSaleMoney" + p_sold_wholesale_money,
					"Remaining" = "Remaining" - (p_sold_retail + p_sold_wholesale)
				WHERE "ShiftId" = p_shift_id 
					AND "Date" = NOW()::DATE
					AND "LotteryChannelId" = p_lotteryChannel_id
					AND "SalePointId" = p_sale_point_id;
				
				--  sử lý trường hợp chuyển vé
			ELSEIF p_report_type = 2 
				THEN
					UPDATE "ReportLottery" 
					SET 
						"Transfer" = "Transfer" + p_transfer,
						"Remaining" = "Remaining" - p_transfer
					WHERE "ShiftId" = p_shift_id 
						AND "Date" = NOW()::DATE
						AND "LotteryChannelId" = p_lotteryChannel_id
						AND "SalePointId" = p_sale_point_id;
				
				-- trường hợp nhận vé 
			ELSEIF p_report_type = 3 
				THEN
					UPDATE "ReportLottery" 
					SET 
						"Received" = "Received"  + p_received,
						"Remaining" = "Remaining" + p_received
					WHERE "ShiftId" = p_shift_id 
						AND "Date" = NOW()::DATE
						AND "LotteryChannelId" = p_lotteryChannel_id
						AND "SalePointId" = p_sale_point_id;
				 -- trương hợp còn lại tự nhớ. haha
			ELSE
					UPDATE "ReportLottery" 
					SET 
						"Stock" = p_split_tickets,
						"Remaining" = v_remaining_split_tickets + "Remaining"
					WHERE "ShiftId" = p_shift_id 
						AND "Date" = NOW()::DATE
						AND "LotteryChannelId" = p_lotteryChannel_id
						AND "SalePointId" = p_sale_point_id;
			END IF;
			-- cập nhật lại stock của các ca sau.
			UPDATE "ReportLottery"
			SET 
				"Stock" = (SELECT "Remaining" FROM "ReportLottery" WHERE "ShiftId" = p_shift_id 
																														AND "Date" = NOW()::DATE
																														AND "LotteryChannelId" = p_lotteryChannel_id
																														AND "SalePointId" = p_sale_point_id),
				"Remaining" = (SELECT "Remaining" FROM "ReportLottery" WHERE "ShiftId" = p_shift_id 
																																AND "Date" = NOW()::DATE
																																AND "LotteryChannelId" = p_lotteryChannel_id
																																AND "SalePointId" = p_sale_point_id)
			WHERE "Date" = now()::DATE 
				AND "OrdinalNum" > (SELECT "OrdinalNum" FROM "ReportLottery" 
																								WHERE "ShiftId" = p_shift_id 
																									AND "Date" = NOW()::DATE
																									AND "LotteryChannelId" = p_lotteryChannel_id
																									AND "SalePointId" = p_sale_point_id)
				AND "SalePointId" = p_sale_point_id
				AND "LotteryChannelId" = p_lotteryChannel_id;
		END IF;
			
    v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_report_update_report_lottery(p_shift_id integer, p_sale_point_id integer, p_lotterychannel_id integer, p_lottery_type_id integer, p_report_type integer, p_received integer, p_transfer integer, p_sold_retail integer, p_sold_wholesale integer, p_sold_retail_money bigint, p_sold_wholesale_money bigint, p_split_tickets bigint, p_lottery_date character varying) OWNER TO postgres;

--
-- Name: crm_report_update_return_money(integer, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_update_return_money(p_return_money_id integer, p_return_money bigint) RETURNS TABLE("Id" integer, "Message" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess VARCHAR;
BEGIN

	UPDATE "ReportMoney"
	SET
		"TotalMoneyInDay" = p_return_money
	WHERE "ReturnMoneyId" = p_return_money_id
	RETURNING "ReturnMoneyId" INTO v_id;
		
	v_mess := 'Update successful';
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_report_update_return_money(p_return_money_id integer, p_return_money bigint) OWNER TO postgres;

--
-- Name: crm_report_update_salepoint_by_distributeid(integer, character varying, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_update_salepoint_by_distributeid(p_action_by integer, p_action_by_name character varying, p_distributeid integer, p_sale_point_id integer, p_update_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_total_price NUMERIC :=0.0;
	v_date DATE;
	v_action_by INT;
	v_action_by_name VARCHAR;
BEGIN
	FOR ele IN SELECT * FROM json_array_elements(p_update_data::JSON) LOOP
	
	SELECT
			U."UserId",
			U."FullName"
	INTO
		v_action_by,
		v_action_by_name
	FROM "ShiftDistribute" SD
		JOIN "User"U ON U."UserId" = SD."UserId" 
	 WHERE SD."ShiftDistributeId"=COALESCE((ele ->> 'ShiftDistributeId')::INT,0);

	IF(COALESCE((ele ->> 'SalePointLogId')::INT, 0) > 0) THEN
	--Mark DELETE
		UPDATE "SalePointLog"
		SET	"IsDeleted" = COALESCE((ele ->> 'IsDeleted')::BOOLEAN,"IsDeleted")
		WHERE "SalePointLogId" =(ele ->> 'SalePointLogId')::INT; 
			v_id := 1;
			v_mess := 'Cập nhật thành công';
	ELSE
	--Start INSERT
		SELECT 
			(CASE WHEN ((ele ->> 'LotteryPriceId')::INT) = 6 THEN
				10000 * ((ele ->> 'Quantity')::INT) / 11 * 10
				ELSE LP."Price" * (ele ->> 'Quantity')::INT END) INTO v_total_price
		FROM "LotteryPrice" LP
		WHERE "LotteryPriceId" = 	(ele ->> 'LotteryPriceId')::INT;
				
		SELECT "DistributeDate" INTO v_date
		FROM "ShiftDistribute" WHERE "ShiftDistributeId" = (ele ->> 'ShiftDistributeId')::INT
		LIMIT 1;
		
		INSERT INTO "SalePointLog" (
			"SalePointId",
			"LotteryDate",
			"LotteryChannelId",
			"Quantity",
			"ActionBy",
			"ActionByName",
			"ModifyBy",
			"ModifyByName",
			"ActionDate",
			"LotteryTypeId",
			"TotalValue",
			"ShiftDistributeId",
			"LotteryPriceId"
		)VALUES(
			p_sale_point_id,
			(ele ->> 'LotteryDate')::DATE,
			(ele ->> 'LotteryChannelId')::INT,
			(ele ->> 'Quantity')::INT,
			v_action_by,
			v_action_by_name,
			p_action_by,
			p_action_by_name,
			((v_date)::VARCHAR ||' '||  CURRENT_TIME ::VARCHAR) :: TIMESTAMP,
			(ele ->> 'LotteryTypeId')::INT,
			v_total_price,
			(ele ->> 'ShiftDistributeId')::INT,
			(ele ->> 'LotteryPriceId')::INT
		);
		
		--Success INSERT
		IF(COALESCE((ele ->> 'LotteryTypeId')::INT, 0) <> 3) THEN

			UPDATE "Inventory" 
			SET 
				"TotalRemaining" = "TotalRemaining" - (CASE WHEN (ele ->> 'LotteryTypeId')::INT = 1 THEN (ele ->> 'Quantity')::INT ELSE 0 END),
				"TotalDupRemaining" = "TotalDupRemaining" - (CASE WHEN (ele ->> 'LotteryTypeId')::INT = 2 THEN (ele ->> 'Quantity')::INT ELSE 0 END)
			WHERE
				"SalePointId" = p_sale_point_id 
				AND "LotteryDate" :: DATE = (ele ->> 'LotteryDate')::DATE 
				AND "LotteryChannelId"= (ele ->> 'LotteryChannelId')::INT;
				
		ELSE
			UPDATE "Scratchcard" 
			SET 
				"TotalRemaining" = "TotalRemaining" - (ele ->> 'Quantity')::INT
			WHERE
				"SalePointId" = p_sale_point_id 
				AND "LotteryChannelId"= (ele ->> 'LotteryChannelId')::INT;
		END IF;
		--
			v_id := 1;
			v_mess := 'Thêm mới thành công';
	END IF;
END LOOP;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_report_update_salepoint_by_distributeid(p_action_by integer, p_action_by_name character varying, p_distributeid integer, p_sale_point_id integer, p_update_data text) OWNER TO postgres;

--
-- Name: crm_report_winning_type_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_report_winning_type_ddl() RETURNS TABLE("WinningTypeId" integer, "WinningTypeName" character varying, "WinningPrize" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT
		T."WinningTypeId",
		T."WinningTypeName",
		T."WinningPrize"
	FROM (
		SELECT 
			W."WinningTypeId" + 10000 AS "WinningTypeId",
			W."WinningTypeName",
			W."WinningPrize"
		FROM "WinningType" W
		WHERE W."WinningTypeId" IN (2,3,4)
		UNION
		SELECT
			TA."TypeAwardId",
			TA."TypeAwardName",
			TA."Price"
		FROM "TypeAward" TA
	) T
	ORDER BY T."WinningTypeId";
END;
$$;


ALTER FUNCTION public.crm_report_winning_type_ddl() OWNER TO postgres;

--
-- Name: crm_sale_point_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_ddl() RETURNS TABLE("Id" integer, "Name" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT
		S."SalePointId",
		S."SalePointName"
	FROM "SalePoint" S 
	WHERE S."IsActive" IS TRUE
	ORDER BY S."SalePointId";
	
END;
$$;


ALTER FUNCTION public.crm_sale_point_ddl() OWNER TO postgres;

--
-- Name: crm_sale_point_get_list_fee_outsite(timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_get_list_fee_outsite(p_date timestamp without time zone DEFAULT now(), p_salepoint_id integer DEFAULT 0, p_shift_dis_id integer DEFAULT 0) RETURNS TABLE("TransactionId" integer, "Note" character varying, "Quantity" integer, "Price" numeric, "TotalPrice" numeric, "UserId" integer, "ShiftDistributeId" integer, "ShiftId" integer, "SalePointId" integer, "ActionDate" timestamp without time zone, "TypeNameId" integer, "Name" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF p_shift_dis_id > 0 THEN
		RETURN QUERY
		SELECT 
			T."TransactionId",
			T."Note",
			T."Quantity",
			T."Price",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			SD."ShiftId",
			T."SalePointId",
			T."ActionDate",
			TN."TypeNameId",
			TN."Name"
		FROM "Transaction" T
			JOIN "ShiftDistribute" SD ON T."ShiftDistributeId" = SD."ShiftDistributeId"
			JOIN "TypeName" TN ON T."TypeNameId" = TN."TypeNameId"
		WHERE T."TransactionTypeId" = 1
			AND (COALESCE(p_shift_dis_id, 0) = 0 OR T."ShiftDistributeId" = p_shift_dis_id)
			AND T."IsDeleted" IS FALSE
		ORDER BY 
			T."SalePointId", 
			T."ActionDate" DESC;
	ELSE
		RETURN QUERY
		SELECT
			T."TransactionId", 
			T."Note",
			T."Quantity",
			T."Price",
			T."TotalPrice",
			T."UserId",
			T."ShiftDistributeId",
			SD."ShiftId",
			T."SalePointId",
			T."ActionDate",
			TN."TypeNameId",
			TN."Name"
		FROM "Transaction" T
			JOIN "ShiftDistribute" SD ON T."ShiftDistributeId" = SD."ShiftDistributeId"
			JOIN "TypeName" TN ON T."TypeNameId" = TN."TypeNameId"
		WHERE T."TransactionTypeId" = 1
			AND (COALESCE(p_salepoint_id, 0) = 0 OR T."SalePointId" = p_salepoint_id)
			AND (T."Date"::DATE = p_date::DATE)
			AND T."IsDeleted" IS FALSE
		ORDER BY 
			T."SalePointId", 
			T."ActionDate";
	END IF;
END;
$$;


ALTER FUNCTION public.crm_sale_point_get_list_fee_outsite(p_date timestamp without time zone, p_salepoint_id integer, p_shift_dis_id integer) OWNER TO postgres;

--
-- Name: crm_sale_point_insert_or_update_fee_outsite(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_insert_or_update_fee_outsite(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_time TIMESTAMP := NOW();
	v_id INT;
	v_mess TEXT;
	ele JSON;
BEGIN

	-- Thêm
	IF p_action_type = 1 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			INSERT INTO "Transaction"(
				"TransactionTypeId",
				"Note",
				"Quantity",
				"Price",
				"TotalPrice",
				"SalePointId",
				"ShiftDistributeId",
				"IsDeleted",
				"UserId",
				"TypeNameId",
				"ActionBy",
				"ActionByName",
				"ActionDate",
				"Date"
			)
			VALUES(
				1,
				(ele->>'Note')::VARCHAR,
				(ele->>'Quantity')::INT,
				(ele->>'Price')::NUMERIC,
				((ele->>'Price')::NUMERIC * (ele->>'Quantity')::INT) :: NUMERIC,
				(ele->>'SalePointId')::INT,
				(ele->>'ShiftDistributeId')::INT,
				FALSE,
				COALESCE((ele->>'UserId')::INT, p_action_by),
				(ele->>'TypeNameId')::INT,
				p_action_by,
				p_action_by_name,
				v_time,
				v_time::DATE
			);
		END LOOP;
		v_id := 1;
		v_mess := 'Thêm thành công';
	--Sửa
	ELSEIF p_action_type = 2 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Transaction" SET 
				"Note" = COALESCE((ele->>'Note')::VARCHAR, "Note"),
				"Quantity" = COALESCE((ele->>'Quantity')::INT, "Quantity"),
				"Price" =  COALESCE((ele->>'Price')::NUMERIC, "Price"),
				"TotalPrice" = COALESCE((COALESCE((ele->>'Price')::NUMERIC, "Price") * COALESCE((ele->>'Quantity')::INT, "Quantity")) :: NUMERIC, "TotalPrice"),
				"SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
				"ShiftDistributeId" = COALESCE((ele->>'ShiftDistributeId')::INT, "ShiftDistributeId"),
				"UserId" = COALESCE((ele->>'UserId')::INT, "UserId"),
				"TypeNameId" = COALESCE((ele->>'TypeNameId')::INT, "TypeNameId"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate"= v_time
			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
		END LOOP;
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	--Xóa
	ELSEIF p_action_type = 3 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Transaction" SET 
				"IsDeleted" = TRUE,
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate"= v_time
			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
		END LOOP;
		v_id := 1;
		v_mess := 'Xóa thành công';
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;
	RETURN QUERY
	SELECT v_id, v_mess;
END;

END;
$$;


ALTER FUNCTION public.crm_sale_point_insert_or_update_fee_outsite(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_sale_point_manage(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_manage(p_date timestamp without time zone) RETURNS TABLE("RowNumber" bigint, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "UserId" integer, "FullName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0),
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END)
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE;
	
END;
$$;


ALTER FUNCTION public.crm_sale_point_manage(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_sale_point_manage_v2(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_manage_v2(p_date timestamp without time zone) RETURNS TABLE("RowNumber" bigint, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "UserId" integer, "FullName" character varying, "ShiftDistributeId" integer, "ManagerId" integer, "ManagerName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_leader INT;
	v_off_user INT; 
BEGIN
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	
	
	
		IF (NOT EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		, temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = 0
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId";

ELSE

RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		,tmp1_0 AS(
			SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date
		) ,temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = (SELECT LA."TriggerSalePoint" FROM "LeaderAttendent" LA WHERE LA."UserId" = (SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date and LOL."UserId">0))
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId" 
	WHERE T2."UserId" NOT IN (SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date);

END IF; 
END;
$$;


ALTER FUNCTION public.crm_sale_point_manage_v2(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_sale_point_manage_v2_new(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_manage_v2_new(p_date timestamp without time zone) RETURNS TABLE("RowNumber" bigint, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "UserId" integer, "FullName" character varying, "ShiftDistributeId" integer, "ManagerId" integer, "ManagerName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_leader INT;
	v_off_user INT; 
BEGIN
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		, temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = 0
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId";
END;
$$;


ALTER FUNCTION public.crm_sale_point_manage_v2_new(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_sale_point_manage_v3(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_manage_v3(p_date timestamp without time zone) RETURNS TABLE("RowNumber" bigint, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "UserId" integer, "FullName" character varying, "ShiftDistributeId" integer, "ManagerId" integer, "ManagerName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_leader INT;
	v_off_user INT; 
BEGIN
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	
	
	
		IF (NOT EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		, temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = 0
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T 
	LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId"
	WHERE T."UserId" NOT IN (SELECT "UserId" FROM tmp1_0);

ELSE

RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		,tmp1_0 AS(
			SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date
		) ,temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = (SELECT LA."TriggerSalePoint" FROM "LeaderAttendent" LA WHERE LA."UserId" = (SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date))
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T 
	LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId"
	WHERE T."UserId" NOT IN (SELECT "UserId" FROM tmp1_0);

END IF; 
END;
$$;


ALTER FUNCTION public.crm_sale_point_manage_v3(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_sale_point_manage_v4(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_manage_v4(p_date timestamp without time zone) RETURNS TABLE("RowNumber" bigint, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "UserId" integer, "FullName" character varying, "ShiftDistributeId" integer, "ManagerId" integer, "ManagerName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_leader INT;
	v_off_user INT; 
BEGIN
	with tmp AS(
	SELECT COUNT(U."UserId") AS "Leaders" FROM "User" U LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId" WHERE U."IsActive" = TRUE AND UR."UserTitleId" = 4 
	) SELECT T."Leaders" * (T."Leaders" + 1) INTO v_total_leader FROM tmp T;
	
	
	
		IF (NOT EXISTS (SELECT 1  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date::DATE) ) THEN
		
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		, temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = 0
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T 
	LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId"
	WHERE T."UserId" NOT IN (SELECT "UserId" FROM tmp1_0);

ELSE

RETURN QUERY 
	WITH tmp AS(
	SELECT 
		ROW_NUMBER() OVER(ORDER BY SP."SalePointId") AS "RowNumber",
		SP."SalePointId",
		SP."SalePointName",
		S."ShiftId",
		COALESCE(SD."UserId", 0) AS "UserId",
		(CASE WHEN U."FullName" IS NOT NULL THEN U."FullName" ELSE '-' END),
		SD."ShiftDistributeId"
	FROM "SalePoint" SP
		JOIN "Shift" S ON TRUE
		LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."ShiftId" = S."ShiftId" AND SD."IsActive" IS TRUE AND SD."DistributeDate" = p_date::DATE
		LEFT JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SP."IsActive" IS TRUE AND SP."IsDeleted" IS FALSE)
		,tmp1_0 AS(
			SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date
		) ,temp1 AS
				( 
					SELECT * FROM "GroupSalePoint" GSP  ORDER BY GSP."GroupSalePointId" DESC LIMIT v_total_leader
				),tmp2 AS(
					SELECT GSP."UserId", U."FullName" ,T."ShiftDistributeId" FROM "temp1" GSP
						LEFT JOIN tmp T ON T."UserId" = (
					SELECT SD."UserId"
						FROM "ShiftDistribute" SD 
					WHERE SD."DistributeDate"::DATE =p_date::DATE AND SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
						GROUP BY SD."UserId",SD."ShiftDistributeId"
			)
						LEFT JOIN "UserRole" UR ON UR."UserId" = GSP."UserId"
						LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = T."SalePointId"
						LEFT JOIN "User" U ON U."UserId" = GSP."UserId"
					WHERE T."SalePointId" = ANY(GSP."SalePointIds") AND U."IsActive" = TRUE
					AND UR."UserTitleId" = 4  AND SD."DistributeDate"::DATE =  p_date::DATE
					AND GSP."Option" = (SELECT LA."TriggerSalePoint" FROM "LeaderAttendent" LA WHERE LA."UserId" = (SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date))
					GROUP BY GSP."UserId",
					U."FullName",
					GSP."GroupSalePointId",
					GSP."Option",
					T."ShiftDistributeId"
				ORDER BY GSP."Option" ASC ,GSP."GroupSalePointId" 
				),tmp3 AS(
				SELECT T."UserId",T."FullName",T."ShiftDistributeId" FROM tmp2 T GROUP BY T."UserId",T."ShiftDistributeId",T."FullName"
				)
	SELECT 
		T.*,
		T2."UserId",
		T2."FullName"
	FROM tmp T 
	LEFT JOIN tmp3 T2 ON T2."ShiftDistributeId" = T."ShiftDistributeId"
	WHERE T2."UserId" NOT IN (SELECT  LOL."UserId"  FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date);

END IF; 
END;
$$;


ALTER FUNCTION public.crm_sale_point_manage_v4(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_sale_point_update_info(integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_update_info(p_action_by integer, p_action_by_name character varying, p_data text, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	ele JSON := p_data::JSON;
	v_max INT := (SELECT MAX("SalePointId") 
		FROM "SalePoint");
BEGIN
	
	
	IF p_sale_point_id = 0 THEN
		INSERT INTO "SalePoint" (
			"SalePointName",
			"FullAddress",
			"ActionBy",
			"ActionByName",
			"ActionDate",
			"Note"
		)
		VALUES (
			COALESCE((ele->> 'SalePointName'),'TP'|| (v_max+1)),
			(ele->> 'FullAddress'),
			p_action_by,
			p_action_by_name,
			NOW(),
			(ele->> 'Note')
		);
	ELSE
		UPDATE "SalePoint"
		SET
			"IsActive" = COALESCE((ele->> 'IsActive'):: BOOLEAN, "IsActive"),
			"FullAddress" = COALESCE((ele->> 'FullAddress'):: VARCHAR,"FullAddress"),
			"SalePointName" = COALESCE((ele->> 'SalePointName'):: VARCHAR,"SalePointName"),
			"Note" = COALESCE((ele->> 'Note'):: VARCHAR,"Note"),
			"ModifyBy"= p_action_by,	
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW()
		WHERE "SalePointId"= p_sale_point_id;
	END IF;
	
	v_id := 1;
	v_mess := 'Cập nhật điểm bán thành công';
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_sale_point_update_info(p_action_by integer, p_action_by_name character varying, p_data text, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_sale_point_update_info_v2(integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_update_info_v2(p_action_by integer, p_action_by_name character varying, p_data text, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	ele JSON := p_data::JSON;
	v_max INT := (SELECT MAX("SalePointId") 
		FROM "SalePoint");
BEGIN
	
	
	IF p_sale_point_id = 0 THEN
		INSERT INTO "SalePoint" (
			"SalePointName",
			"FullAddress",
			"ActionBy",
			"ActionByName",
			"ActionDate",
			"Note"
		)
		VALUES (
			COALESCE((ele->> 'SalePointName'),'TP'|| (v_max+1)),
			(ele->> 'FullAddress'),
			p_action_by,
			p_action_by_name,
			NOW(),
			(ele->> 'Note')
		);
	ELSE
		UPDATE "SalePoint"
		SET
			"IsActive" = COALESCE((ele->> 'IsActive'):: BOOLEAN, "IsActive"),
			"FullAddress" = COALESCE((ele->> 'FullAddress'):: VARCHAR,"FullAddress"),
			"SalePointName" = COALESCE((ele->> 'SalePointName'):: VARCHAR,"SalePointName"),
			"Note" = COALESCE((ele->> 'Note'):: VARCHAR,"Note"),
			"ModifyBy"= p_action_by,	
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW()
		WHERE "SalePointId"= p_sale_point_id;
	END IF;
	
	v_id := 1;
	v_mess := 'Cập nhật điểm bán thành công';
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_sale_point_update_info_v2(p_action_by integer, p_action_by_name character varying, p_data text, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_sale_point_update_loto_vietlott(integer, integer, character varying, integer, integer, integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_update_loto_vietlott(p_transaction_id integer, p_action_by integer, p_action_by_name character varying, p_quantity integer, p_price integer, p_total_price integer, p_date date) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
		UPDATE "Transaction" 
		SET 
			"Quantity" = p_quantity,
			"Price" = p_price,
			"TotalPrice" = p_total_price,
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW(),
			"Date" = p_date
		WHERE "TransactionId" = p_transaction_id;
		v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_sale_point_update_loto_vietlott(p_transaction_id integer, p_action_by integer, p_action_by_name character varying, p_quantity integer, p_price integer, p_total_price integer, p_date date) OWNER TO postgres;

--
-- Name: crm_sale_point_update_transaction(integer, integer, character varying, integer, integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_update_transaction(p_transaction_id integer, p_action_by integer, p_action_by_name character varying, p_quantity integer, p_price integer, p_total_price integer, p_date timestamp without time zone) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
		UPDATE "Transaction" 
		SET 
			"Quantity" = p_quantity,
			"Price" = p_price,
			"TotalPrice" = p_total_price,
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW(),
			"Date" = p_date::DATE
		WHERE "TransactionId" = p_transaction_id;
		v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_sale_point_update_transaction(p_transaction_id integer, p_action_by integer, p_action_by_name character varying, p_quantity integer, p_price integer, p_total_price integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_sale_point_update_transation(integer, integer, character varying, integer, integer, integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sale_point_update_transation(p_transaction_id integer, p_action_by integer, p_action_by_name character varying, p_quantity integer, p_price integer, p_total_price integer, p_date date) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
		UPDATE "Transaction" 
		SET 
			"Quantity" = p_quantity,
			"Price" = p_price,
			"TotalPrice" = p_total_price,
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW(),
			"Date" = p_date
		WHERE "TransactionId" = p_transaction_id;
		v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_sale_point_update_transation(p_transaction_id integer, p_action_by integer, p_action_by_name character varying, p_quantity integer, p_price integer, p_total_price integer, p_date date) OWNER TO postgres;

--
-- Name: crm_salepoint_confirm_list_payment(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_confirm_list_payment(p_action_by integer, p_action_by_name character varying, p_confirm_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data ::JSON;
	ele JSON;
	v_check INT;
	v_confirm_status INT;
BEGIN
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		SELECT 
			"ConfirmLogId",
			"ConfirmStatusId"
		INTO
			v_check,
			v_confirm_status
		FROM "ConfirmLog"
		WHERE "ConfirmLogId" = (ele ->>'ConfirmLogId')::INT;
		
		IF COALESCE(v_check,0) =0 THEN
			RAISE 'Không tồn tại ConfirmLogId';
		ELSEIF COALESCE(v_confirm_status,1) <> 1 THEN
			RAISE 'Yêu cầu đã được thao tác';
		ELSE
			SELECT
				f."Id",
				f."Message"
			INTO
				v_id,
				v_mess
			FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 0,'',v_check,p_confirm_type,9999) f;
		
		END IF;
   
  END LOOP;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_confirm_list_payment(p_action_by integer, p_action_by_name character varying, p_confirm_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_confirm_list_payment_v2(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_confirm_list_payment_v2(p_action_by integer, p_action_by_name character varying, p_confirm_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_data JSON := p_data ::JSON;
	ele JSON;
	v_check INT;
	v_confirm_status INT;
	v_order_id INT;
BEGIN
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		SELECT 
			"ConfirmLogId",
			"ConfirmStatusId",
			"HistoryOfOrderId"
		INTO
			v_check,
			v_confirm_status,
			v_order_id
		FROM "ConfirmLog"
		WHERE "ConfirmLogId" = (ele ->>'ConfirmLogId')::INT;
		
		IF COALESCE(v_check,0) = 0 THEN
			RAISE 'Không tồn tại ConfirmLogId';
		ELSEIF COALESCE(v_confirm_status,1) <> 1 THEN
			RAISE 'Yêu cầu đã được thao tác';
		ELSE
			SELECT
				f."Id",
				f."Message"
			INTO
				v_id,
				v_mess
			FROM crm_salepoint_update_cornfirm_item_v2(p_action_by, p_action_by_name, 0,'',v_check,p_confirm_type,9999, NULL, NULL, NULL, v_order_id) f;
		
		END IF;
   
  END LOOP;

	RETURN QUERY
	SELECT v_id, v_mess, v_order_id;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess, v_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_confirm_list_payment_v2(p_action_by integer, p_action_by_name character varying, p_confirm_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_create_list_confirm_payment(integer, character varying, integer, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_create_list_confirm_payment(p_action_by integer, p_action_by_name character varying, p_guest_id integer DEFAULT NULL::integer, p_lottery_data text DEFAULT NULL::text, p_lottery_data_info text DEFAULT NULL::text, p_payment_data text DEFAULT NULL::text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := -1;
	v_mess TEXT := 'Dữ liệu chưa';
	v_now TIMESTAMP :=NOW();
	ele JSON;
BEGIN
  IF p_lottery_data IS NOT NULL THEN
		--LOTTERY
		SELECT f."Id", f."Message"
		INTO v_id, v_mess
		FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name,3, p_lottery_data, NULL, 1, 3 ,p_lottery_data_info,p_guest_id,v_now) f ;
		
		IF v_id <= 0 THEN
			RAISE '%', v_mess;
		END IF;
	END IF; 
	
	IF p_payment_data IS NOT NULL THEN
		--PAYMENT
		SELECT f."Id", f."Message"
		INTO v_id, v_mess
		FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name,2, p_payment_data, NULL, 1, 2 ,NULL,p_guest_id,v_now) f ;
		IF v_id <= 0 THEN
			RAISE '%', v_mess;
		END IF;
		
	END IF; 
	

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_create_list_confirm_payment(p_action_by integer, p_action_by_name character varying, p_guest_id integer, p_lottery_data text, p_lottery_data_info text, p_payment_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_create_list_confirm_payment_v2(integer, character varying, integer, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_create_list_confirm_payment_v2(p_action_by integer, p_action_by_name character varying, p_guest_id integer DEFAULT NULL::integer, p_lottery_data text DEFAULT NULL::text, p_lottery_data_info text DEFAULT NULL::text, p_payment_data text DEFAULT NULL::text, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := -1;
	v_mess TEXT := 'Dữ liệu chưa';
	v_now TIMESTAMP :=NOW();
	ele JSON;
	v_sale_point_id INT;
	v_shift_dis INT;
BEGIN
	v_sale_point_id := (p_lottery_data_info::JSON->>'SalePointId')::INT;
	v_shift_dis := (p_lottery_data_info::JSON->>'ShiftDistributeId')::INT;
		--Tạo hoá đơn khi chưa có
	IF p_order_id IS NULL THEN
		raise notice 'TH 1';
		INSERT INTO "HistoryOfOrder" (
			"SalePointId",
			"CreatedBy",
			"CreatedByName",
			"CreatedDate",
			"IsDeleted",
			"ShiftDistributeId"
		)
		VALUES (
			v_sale_point_id,
			p_action_by,
			p_action_by_name,
			v_now,
			FALSE,
			v_shift_dis
		) RETURNING "HistoryOfOrderId" INTO p_order_id;
		
	END IF;

  IF p_lottery_data IS NOT NULL THEN
		raise notice 'TH 2';
		--LOTTERY
		SELECT f."Id", f."Message"
		INTO v_id, v_mess
		FROM crm_salepoint_update_cornfirm_item_v2(p_action_by, p_action_by_name, 3, p_lottery_data, NULL, 1, 3 , p_lottery_data_info, p_guest_id, v_now, p_order_id) f ;
		
		IF v_id <= 0 THEN
			RAISE '%', v_mess;
		END IF;
	END IF; 
	
	IF p_payment_data IS NOT NULL THEN
		raise notice 'TH 3';
		--PAYMENT
		SELECT f."Id", f."Message"
		INTO v_id, v_mess
		FROM crm_salepoint_update_cornfirm_item_v2(p_action_by, p_action_by_name, 2, p_payment_data, NULL, 1, 2 , p_lottery_data_info, p_guest_id, v_now, p_order_id) f ;
		IF v_id <= 0 THEN
			RAISE '%', v_mess;
		END IF;
		
	END IF; 
	

	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_create_list_confirm_payment_v2(p_action_by integer, p_action_by_name character varying, p_guest_id integer, p_lottery_data text, p_lottery_data_info text, p_payment_data text, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_create_or_update_guest(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_create_or_update_guest(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$DECLARE
	v_id INT;
	v_mess TEXT;
	v_phone TEXT;
	v_lotteryID TEXT;
	v_ScratchId TEXT;
	ele JSON;
BEGIN
	
	-- THÊM
	IF p_action_type = 1 THEN 
		ele := p_data::JSON;
		-- Kiểm tra SĐT
		v_phone := fn_phoneconvert_11_to_10(ele ->> 'Phone');
		IF LENGTH(v_phone) <> 10 THEN
			RAISE 'Số điện thoại không đúng cú pháp';
		END IF;
		-- Kiểm tra xem đã có số điện thoại và loại khách này chưa
		IF NOT EXISTS(SELECT 1 FROM "Guest" G WHERE fn_phoneconvert_11_to_10(G."Phone") = v_phone AND G."SalePointId" = (ele ->> 'SalePointId')::INT) THEN
			IF (
				SELECT COUNT(*) < 2  
				FROM "LotteryPrice" L 
				WHERE (L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) 
					OR (L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT)
			) AND (ele->>'WholesalePriceId')::INT <> (ele->>'ScratchPriceId')::INT THEN
				IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'WholesalePriceId')::VARCHAR),
						(ele->>'WholesalePriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'WholesalePriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_lotteryID;
				END IF;
				IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'ScratchPriceId')::VARCHAR),
						(ele->>'ScratchPriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'ScratchPriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_ScratchId;
				END IF;
				INSERT INTO "Guest"(
					"FullName",
					"Phone",
					"SalePointId",
					"WholesalePriceId",
					"ScratchPriceId",
					"CreatedBy",
					 "CreatedByName"
				)
				VALUES (
					(ele->>'FullName')::VARCHAR,
					v_phone,
					(ele->>'SalePointId')::INT,
					v_lotteryID::INT,
					v_ScratchId::INT,
					p_action_by,
					p_action_by_name
				) RETURNING "GuestId" INTO v_id;
			ELSE
				INSERT INTO "Guest"(
					"FullName",
					"Phone",
					"SalePointId",
					"WholesalePriceId",
					"ScratchPriceId",
					"CreatedBy",
					"CreatedByName"
				)
				VALUES (
					(ele->>'FullName')::VARCHAR,
					v_phone,
					(ele->>'SalePointId')::INT,
					(SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'WholesalePriceId')::INT)::INT,
					(SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'ScratchPriceId')::INT)::INT,
					p_action_by,
					p_action_by_name
				) RETURNING "GuestId" INTO v_id;
			END IF;
		ELSE
			RAISE EXCEPTION 'Đã tồn tại khách với số điện thoại này trong hệ thống';
		END IF;

		v_mess := 'Thêm thành công';

	-- Sửa
	ELSIF p_action_type = 2 THEN
		ele := p_data::JSON;
		v_phone := fn_phoneconvert_11_to_10(ele ->> 'Phone');
		IF LENGTH(v_phone) <> 10 THEN
			RAISE 'Số điện thoại không đúng cú pháp';
		END IF;
		IF (
    SELECT COUNT(*) < 2  
    FROM "LotteryPrice" L 
    WHERE (L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) 
        OR (L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT)
) AND (ele->>'WholesalePriceId')::INT <> (ele->>'ScratchPriceId')::INT  THEN
		
			IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'WholesalePriceId')::VARCHAR),
						(ele->>'WholesalePriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'WholesalePriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_lotteryID;
				END IF;
				IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'ScratchPriceId')::VARCHAR),
						(ele->>'ScratchPriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'ScratchPriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_ScratchId;
				END IF;

		UPDATE "Guest"
		SET
			"FullName" = COALESCE((ele ->> 'FullName')::VARCHAR, "FullName"),
			"Phone" = COALESCE(fn_phoneconvert_11_to_10((ele ->> 'Phone')::VARCHAR), "Phone"),
			"WholesalePriceId" = COALESCE(v_lotteryID::INT, "WholesalePriceId"),
			"ScratchPriceId" = COALESCE(v_ScratchId::INT, "ScratchPriceId"),
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW(),
			"SalePointId" = (ele->>'SalePointId')::INT
		WHERE 
			"GuestId" = (ele ->> 'GuestId')::INT;
		v_id := 1;
		v_mess := 'Cập nhật thành công';
ELSE
	UPDATE "Guest"
			SET
				"FullName" = COALESCE((ele ->> 'FullName')::VARCHAR, "FullName"),
				"Phone" = COALESCE(fn_phoneconvert_11_to_10((ele ->> 'Phone')::VARCHAR), "Phone"),
				"WholesalePriceId" = COALESCE((SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'WholesalePriceId')::INT)::INT, "WholesalePriceId"),
				"ScratchPriceId" = COALESCE((SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'ScratchPriceId')::INT)::INT, "ScratchPriceId"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = NOW(),
				"SalePointId" = (ele->>'SalePointId')::INT
			WHERE 
				"GuestId" = (ele ->> 'GuestId')::INT;
			v_id := 1;
			v_mess := 'Cập nhật thành công';
	END IF;
	-- Xóa
	ELSIF p_action_type = 3 THEN
		ele := p_data::JSON;
		UPDATE "Guest"
		SET
			"IsActive" = FALSE,
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW()
		WHERE 
			"GuestId" = (ele ->> 'GuestId')::INT;
		v_id := 1;
		v_mess := 'Xóa thành công';
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_create_or_update_guest(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_create_or_update_guest_v2(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_create_or_update_guest_v2(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_phone TEXT;
	ele JSON;
BEGIN
	
	-- THÊM
	IF p_action_type = 1 THEN 
		ele := p_data::JSON;
		-- Kiểm tra SĐT
		v_phone := fn_phoneconvert_11_to_10(ele ->> 'Phone');
		IF LENGTH(v_phone) <> 10 THEN
			RAISE 'Số điện thoại không đúng cú pháp';
		END IF;
		-- Kiểm tra xem đã có số điện thoại và loại khách này chưa
		IF NOT EXISTS(SELECT 1 FROM "Guest" G WHERE fn_phoneconvert_11_to_10(G."Phone") = v_phone AND G."SalePointId" = (ele ->> 'SalePointId')::INT) THEN 
			INSERT INTO "Guest"(
				"FullName",
				"Phone",
				"SalePointId",
				"WholesalePrice",
				"ScratchPrice",
				"CreatedBy",
				"CreatedByName"
			)
			VALUES(
				(ele->>'FullName')::VARCHAR,
				v_phone,
				(ele->>'SalePointId')::INT,
				(ele->>'WholesalePrice')::INT,
				(ele->>'ScratchPrice'     )::INT,
				p_action_by,
				p_action_by_name
			) RETURNING "GuestId" INTO v_id;
								
		ELSE
			RAISE 'Đã tồn tại khách với số điện thoại này trong hệ thống';
		END IF;
		
		v_mess := 'Thêm thành công';
	-- Sửa
	ELSEIF p_action_type = 2 THEN
		ele := p_data::JSON;
		v_phone := fn_phoneconvert_11_to_10(ele ->> 'Phone');
		IF LENGTH(v_phone) <> 10 THEN
			RAISE 'Số điện thoại không đúng cú pháp';
		END IF;
		
		UPDATE "Guest"
		SET
			"FullName" = COALESCE((ele ->> 'FullName')::VARCHAR, "FullName"),
			"Phone" = COALESCE(fn_phoneconvert_11_to_10((ele ->> 'Phone')::VARCHAR) , "Phone"),
			"WholesalePrice" = COALESCE((ele ->> 'WholesalePrice')::INT, "WholesalePrice"),
			"ScratchPrice" = COALESCE((ele ->> 'ScratchPrice')::INT, "ScratchPriceId"),
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW()
		WHERE 
			"GuestId" = (ele ->> 'GuestId')::INT;
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	-- Xóa
	ELSEIF p_action_type = 3 THEN
		ele := p_data::JSON;
		UPDATE "Guest"
		SET
			"IsActive" = FALSE,
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW()
		WHERE 
			"GuestId" = (ele ->> 'GuestId')::INT;
		v_id := 1;
		v_mess := 'Xóa thành công';
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;

	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_create_or_update_guest_v2(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_delete_staff_in_commission_winning(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_delete_staff_in_commission_winning(p_commissionid bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
BEGIN
    UPDATE 
			"Commission"
		SET
			"IsDeleted" = TRUE
		WHERE "IsDeleted" = FALSE AND "CommissionId" = p_commissionId;
		v_id:=1;
		v_mess:='Xóa thành công';
    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_delete_staff_in_commission_winning(p_commissionid bigint) OWNER TO postgres;

--
-- Name: crm_salepoint_get_commision_of_all_user_in_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_commision_of_all_user_in_month(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalePointId" integer, "TotalCommision" numeric, "Date" date)
    LANGUAGE plpgsql
    AS $$
DECLARE
    F RECORD;
    i INT;
    n INT;
    v_array INT[];
    v_commision NUMERIC;
BEGIN
    DROP TABLE IF EXISTS tmpTable;
    CREATE TEMP TABLE tmpTable (
                                   "Id" SERIAL,
                                   "SalePointId" INT,
                                   "UserId" INT,
                                   "Date" DATE,
                                   "TotalCommision" NUMERIC
    )
        ON COMMIT DROP;

    FOR F IN (
        SELECT *
        FROM "Commission" C
        WHERE TO_CHAR(C."Date", 'YYYY-MM') = p_month
          AND C."IsDeleted" IS FALSE
    ) LOOP
            INSERT INTO tmpTable(
                "SalePointId",
                "UserId",
                "Date",
                "TotalCommision"
            )
            VALUES(
                      F."SalePointId",
                      F."UserId",
                      F."Date",
                      ROUND(F."TotalValue" / 3, 0)
                  );

            INSERT INTO tmpTable(
                "SalePointId",
                "UserId",
                "Date",
                "TotalCommision"
            )
            VALUES(
                      F."SalePointId",
                      0,
                      F."Date",
                      ROUND(F."TotalValue" / 3, 0)
                  );


            v_array := translate(F."ListStaff"::TEXT, '[]','{}')::INT[];
            n := array_length(v_array, 1);
            v_commision := ROUND(F."TotalValue" / 3 / n, 0);

            FOR i IN 1..n LOOP

                    INSERT INTO tmpTable(
                        "SalePointId",
                        "UserId",
                        "Date",
                        "TotalCommision"
                    )
                    VALUES(
                              F."SalePointId",
                              v_array[i],
                              F."Date",
                              v_commision
                          );
                END LOOP;

        END LOOP;

    RETURN QUERY
        WITH tmp0 AS (
            SELECT
                T."SalePointId",
                T."MainUserId",
                T."PercentMainUserId"
            FROM crm_get_list_percent_salepoint_in_month(p_month) T
        ),
             tmp AS (
                 SELECT
                     U."UserId",
                     U."FullName",
                     UT."UserTitleId",
                     UT."UserTitleName"
                 FROM "User" U
                          JOIN "UserRole" UR ON U."UserId" = UR."UserId"
                          JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
                 WHERE U."IsDeleted" IS FALSE
                   AND U."IsActive" IS TRUE
                   AND U."EndDate" IS NULL
                   AND UT."UserTitleId" <> 1
                 ORDER BY U."UserId"
             ),
             tmp2 AS (
-- 		SELECT
-- 			C."SalePointId",
-- 			C."UserId",
-- 			C."Date",
-- 			SUM(C."TotalValue") AS "TotalCommision"
-- 		FROM "Commission" C
-- 		WHERE TO_CHAR(C."Date", 'YYYY-MM') = p_month
-- 			AND C."IsDeleted" IS FALSE
-- 		GROUP BY
-- 			C."SalePointId",
-- 			C."UserId",
-- 			C."Date"
-- 		ORDER BY C."UserId", C."Date"
                 SELECT * FROM tmpTable
             ),
             tmp3 AS (
                 SELECT
                     U."UserId",
                     U."FullName",
                     U."UserTitleId",
                     U."UserTitleName",
                     C."SalePointId",
                     C."TotalCommision",
                     C."Date"
                 FROM tmp U
                          JOIN tmp2 C ON U."UserId" = C."UserId"
             ),
             tmp4 AS (
                 SELECT
                     T."SalePointId",
                     T."UserId",
                     T."Date",
                     T."TotalCommision",
                     SPL."MainUserId",
                     SPL."PercentMainUserId"
                 FROM tmp2 T
                          LEFT JOIN tmp0 SPL ON T."SalePointId" = SPL."SalePointId"
                 WHERE T."UserId" = 0
             ),
             tmp5 AS (
                 SELECT
                     U."UserId",
                     U."FullName",
                     U."UserTitleId",
                     U."UserTitleName",
                     S."SalePointId",
                     ROUND(S."TotalCommision" *
                           S."PercentMainUserId"[array_position(translate(S."MainUserId"::TEXT,'[]','{}')::TEXT[], U."UserId"::TEXT)], 0) AS "TotalCommision",
                     S."Date"
                 FROM tmp U
                          JOIN tmp4 S ON array_position(translate(S."MainUserId"::TEXT,'[]','{}')::TEXT[], U."UserId"::TEXT) IS NOT NULL
                 ORDER BY
                     U."UserId",
                     S."Date",
                     S."SalePointId"
             ),
             tmp6 AS (
                 SELECT
                     T."SalePointId",
                     T."Date",
                     SUM(T."TotalCommision") AS "TotalCommision"
                 FROM tmp5 T
                 GROUP BY
                     T."SalePointId",
                     T."Date"
             ),
             tmp4_1 AS (
                 SELECT
                     T."SalePointId",
                     T."Date",
                     T."UserId",
                     SUM(T."TotalCommision") AS "TotalCommision"
                 FROM tmp4 T
                 GROUP BY
                     T."SalePointId",
                     T."Date",
                     T."UserId"
             ),
             tmp7 AS (
                 SELECT
                     T."UserId",
                     'System',
                     0,
                     'SystemTitle',
                     T."SalePointId",
                     (COALESCE(T."TotalCommision", 0)) AS "TotalCommision",
                     T."Date"
                 FROM tmp4_1 T
                          LEFT JOIN tmp6 C ON T."SalePointId" = C."SalePointId" AND T."Date" = C."Date"
             ),
             tmp8 AS (
                 SELECT * FROM tmp3
                 UNION ALL
                 SELECT * FROM tmp5
                 UNION ALL
                 SELECT * FROM tmp7
             )
        SELECT *
        FROM tmp8 T
        ORDER BY
            T."UserId",
            T."SalePointId",
            T."Date";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_commision_of_all_user_in_month(p_month character varying) OWNER TO postgres;

--
-- Name: crm_salepoint_get_commision_of_all_user_in_month_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_commision_of_all_user_in_month_v2(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalePointId" integer, "TotalCommision" numeric, "Date" date)
    LANGUAGE plpgsql
    AS $$
DECLARE
	F RECORD;
	i INT;
	n INT;
	v_array INT[];
	v_commision NUMERIC;
BEGIN
	CREATE TEMP TABLE tmpTable1 (
		"Id" SERIAL,
		"SalePointId" INT,
		"UserId" INT,
		"Date" DATE,
		"TotalCommision" NUMERIC
	)
	ON COMMIT DROP;
	
	FOR F IN (
		SELECT *
		FROM "Commission" C 
		WHERE TO_CHAR(C."Date", 'YYYY-MM') = p_month 
			AND C."IsDeleted" IS FALSE
	) LOOP
		INSERT INTO tmpTable1(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
		)
		VALUES(
				F."SalePointId",
				F."UserId",
				F."Date",
				ROUND(F."TotalValue" / 3, 0)
		);
		
		INSERT INTO tmpTable1(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
		)
		VALUES(
				F."SalePointId",
				0,
				F."Date",
				ROUND(F."TotalValue" / 3, 0)
		);
			
			
		v_array := translate(F."ListStaff"::TEXT, '[]','{}')::INT[];
		n := array_length(v_array, 1);
		v_commision := ROUND(F."TotalValue" / 3 / n, 0);
		
		FOR i IN 1..n LOOP
			
			INSERT INTO tmpTable1(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
			)
			VALUES(
				F."SalePointId",
				v_array[i],
				F."Date",
				v_commision
			);
			END LOOP;
				
	END LOOP;
		
	RETURN QUERY
	WITH tmp0 AS (
		SELECT 	
			T."SalePointId",
			T."MainUserId",
			T."PercentMainUserId"
		FROM crm_get_list_percent_salepoint_in_month(p_month) T
	),
	tmp AS (
		SELECT 
			U."UserId",
			U."FullName",
			UT."UserTitleId",
			UT."UserTitleName"
		FROM "User" U
			JOIN "UserRole" UR ON U."UserId" = UR."UserId"
			JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
		WHERE U."IsDeleted" IS FALSE
			AND U."IsActive" IS TRUE
			AND U."EndDate" IS NULL
			AND UT."UserTitleId" <> 1
		ORDER BY U."UserId"
	),
	tmp2 AS (
-- 		SELECT 
-- 			C."SalePointId",
-- 			C."UserId",
-- 			C."Date",
-- 			SUM(C."TotalValue") AS "TotalCommision"			
-- 		FROM "Commission" C
-- 		WHERE TO_CHAR(C."Date", 'YYYY-MM') = p_month
-- 			AND C."IsDeleted" IS FALSE
-- 		GROUP BY 
-- 			C."SalePointId",
-- 			C."UserId",
-- 			C."Date"
-- 		ORDER BY C."UserId", C."Date"
		SELECT * FROM tmpTable1
	),
	tmp3 AS (
		SELECT
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."UserTitleName",
			C."SalePointId",
			C."TotalCommision",
			C."Date"
		FROM tmp U
			JOIN tmp2 C ON U."UserId" = C."UserId"
	),
	tmp4 AS (
		SELECT
			T."SalePointId",
			T."UserId",
			T."Date",
			T."TotalCommision",
			SPL."MainUserId",
			SPL."PercentMainUserId"
		FROM tmp2 T
			LEFT JOIN tmp0 SPL ON T."SalePointId" = SPL."SalePointId"
		WHERE T."UserId" = 0
	),
	tmp5 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."UserTitleName",
			S."SalePointId",
			ROUND(S."TotalCommision" * 
				S."PercentMainUserId"[array_position(translate(S."MainUserId"::TEXT,'[]','{}')::TEXT[], U."UserId"::TEXT)], 0) AS "TotalCommision",
			S."Date"
		FROM tmp U 
			JOIN tmp4 S ON array_position(translate(S."MainUserId"::TEXT,'[]','{}')::TEXT[], U."UserId"::TEXT) IS NOT NULL
		ORDER BY 
			U."UserId",
			S."Date",
			S."SalePointId"
	),
	tmp6 AS (
		SELECT 
			T."SalePointId",
			T."Date",
			SUM(T."TotalCommision") AS "TotalCommision"
		FROM tmp5 T
		GROUP BY
			T."SalePointId",
			T."Date"
	),
	tmp4_1 AS (
	SELECT
		T."SalePointId",
		T."Date",
		T."UserId",
		SUM(T."TotalCommision") AS "TotalCommision"
	FROM tmp4 T
	GROUP BY
		T."SalePointId",
		T."Date",
		T."UserId"
	),
	tmp7 AS (
		SELECT
			T."UserId",
			'System',
			0,
			'SystemTitle',
			T."SalePointId",
			COALESCE(T."TotalCommision", 0) AS "TotalCommision",
			T."Date"
		FROM tmp4_1 T 
			LEFT JOIN tmp6 C ON T."SalePointId" = C."SalePointId" AND T."Date" = C."Date"
	),
	tmp8 AS (
		SELECT * FROM tmp3
		UNION ALL
		SELECT * FROM tmp5
		UNION ALL
		SELECT * FROM tmp7
	)
	SELECT *
	FROM tmp8 T
	ORDER BY 
		T."UserId",
		T."SalePointId",
		T."Date";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_commision_of_all_user_in_month_v2(p_month character varying) OWNER TO postgres;

--
-- Name: crm_salepoint_get_commision_of_all_user_in_month_v3(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_commision_of_all_user_in_month_v3(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SalePointId" integer, "TotalCommision" numeric, "Date" date)
    LANGUAGE plpgsql
    AS $$
DECLARE
	F RECORD;
	i INT;
	n INT;
	v_array INT[];
	v_commision NUMERIC;
BEGIN
	CREATE TEMP TABLE tmpTable1 (
		"Id" SERIAL,
		"SalePointId" INT,
		"UserId" INT,
		"Date" DATE,
		"TotalCommision" NUMERIC
	)
	ON COMMIT DROP;
	
	FOR F IN (
		SELECT *
		FROM "Commission" C 
		WHERE TO_CHAR(C."Date", 'YYYY-MM') = p_month 
			AND C."IsDeleted" IS FALSE
	) LOOP
		INSERT INTO tmpTable1(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
		)
		VALUES(
				F."SalePointId",
				F."UserId",
				F."Date",
				ROUND(F."TotalValue" / 3, 0)
		);
		
		INSERT INTO tmpTable1(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
		)
		VALUES(
				F."SalePointId",
				0,
				F."Date",
				ROUND(F."TotalValue" / 3, 0)
		);
			
			
		v_array := translate(F."ListStaff"::TEXT, '[]','{}')::INT[];
		n := array_length(v_array, 1);
		v_commision := ROUND(F."TotalValue" / 3 / n, 0);
		
		FOR i IN 1..n LOOP
			
			INSERT INTO tmpTable1(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
			)
			VALUES(
				F."SalePointId",
				v_array[i],
				F."Date",
				v_commision
			);
			END LOOP;
				
	END LOOP;
		
	RETURN QUERY
	WITH tmp0 AS (
		SELECT 	
			T."SalePointId",
			T."MainUserId",
			T."PercentMainUserId"
		FROM crm_get_list_percent_salepoint_in_month(p_month) T
	),
	tmp AS (
		SELECT 
			U."UserId",
			U."FullName",
			UT."UserTitleId",
			UT."UserTitleName"
		FROM "User" U
			JOIN "UserRole" UR ON U."UserId" = UR."UserId"
			JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
		WHERE U."IsDeleted" IS FALSE
			AND U."IsActive" IS TRUE
			AND U."EndDate" IS NULL
			AND UT."UserTitleId" <> 1
		ORDER BY U."UserId"
	),
	tmp2 AS (
-- 		SELECT 
-- 			C."SalePointId",
-- 			C."UserId",
-- 			C."Date",
-- 			SUM(C."TotalValue") AS "TotalCommision"			
-- 		FROM "Commission" C
-- 		WHERE TO_CHAR(C."Date", 'YYYY-MM') = p_month
-- 			AND C."IsDeleted" IS FALSE
-- 		GROUP BY 
-- 			C."SalePointId",
-- 			C."UserId",
-- 			C."Date"
-- 		ORDER BY C."UserId", C."Date"
		SELECT * FROM tmpTable1
	),
	tmp3 AS (
		SELECT
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."UserTitleName",
			C."SalePointId",
			C."TotalCommision",
			C."Date"
		FROM tmp U
			JOIN tmp2 C ON U."UserId" = C."UserId"
	),
	tmp4 AS (
		SELECT
			T."SalePointId",
			T."UserId",
			T."Date",
			T."TotalCommision",
			SPL."MainUserId",
			SPL."PercentMainUserId"
		FROM tmp2 T
			LEFT JOIN tmp0 SPL ON T."SalePointId" = SPL."SalePointId"
		WHERE T."UserId" = 0
	),
	tmp5 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."UserTitleName",
			S."SalePointId",
			ROUND(S."TotalCommision" * 
				S."PercentMainUserId"[array_position(translate(S."MainUserId"::TEXT,'[]','{}')::TEXT[], U."UserId"::TEXT)], 0) AS "TotalCommision",
			S."Date"
		FROM tmp U 
			JOIN tmp4 S ON array_position(translate(S."MainUserId"::TEXT,'[]','{}')::TEXT[], U."UserId"::TEXT) IS NOT NULL
		ORDER BY 
			U."UserId",
			S."Date",
			S."SalePointId"
	),
	tmp6 AS (
		SELECT 
			T."SalePointId",
			T."Date",
			SUM(T."TotalCommision") AS "TotalCommision"
		FROM tmp5 T
		GROUP BY
			T."SalePointId",
			T."Date"
	),
	tmp4_1 AS (
	SELECT
		T."SalePointId",
		T."Date",
		T."UserId",
		SUM(T."TotalCommision") AS "TotalCommision"
	FROM tmp4 T
	GROUP BY
		T."SalePointId",
		T."Date",
		T."UserId"
	),
	tmp7 AS (
		SELECT
			T."UserId",
			'System',
			0,
			'SystemTitle',
			T."SalePointId",
			COALESCE(T."TotalCommision", 0) AS "TotalCommision",
			T."Date"
		FROM tmp4_1 T 
			LEFT JOIN tmp6 C ON T."SalePointId" = C."SalePointId" AND T."Date" = C."Date"
	),
	tmp8 AS (
		SELECT * FROM tmp3
		UNION ALL
		SELECT * FROM tmp5
		UNION ALL
		SELECT * FROM tmp7
	)
	SELECT *
	FROM tmp8 T
	ORDER BY 
		T."UserId",
		T."SalePointId",
		T."Date";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_commision_of_all_user_in_month_v3(p_month character varying) OWNER TO postgres;

--
-- Name: crm_salepoint_get_fee_outsite_in_month(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_fee_outsite_in_month(p_month character varying, p_user_id integer DEFAULT 0) RETURNS TABLE("Date" date, "UserId" integer, "FullName" character varying, "ShiftId" integer, "ShiftDistributeId" integer, "SalePointId" integer, "SalePointName" character varying, "Data" text, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
BEGIN
	RETURN QUERY
	WITH tmp0 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName"
		FROM crm_get_list_salepoint_of_leader(0) T
	),
	tmp AS (
		SELECT
			(p_month||'-'||"I")::DATE AS "Date"
		FROM generate_series(1, v_total_date) AS "I"
	),
	tmp1 AS (
		SELECT
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SD."SalePointId",
			SP."SalePointName",
			json_agg(json_build_object('Note',TT."Note",'TotalPrice',TT."TotalPrice"))::TEXT AS "Data",
			SUM(TT."TotalPrice")::NUMERIC AS "TotalPrice"
		FROM tmp T
			JOIN "ShiftDistribute" SD ON SD."DistributeDate" = T."Date"::DATE
			JOIN "User" U ON SD."UserId" = U."UserId"
			JOIN tmp0 SP ON SD."SalePointId" = SP."SalePointId"
			LEFT JOIN "Transaction" TT ON TT."Date" = T."Date" 
					AND TT."TransactionTypeId" = 1
					AND TT."IsDeleted" IS FALSE
					AND TT."UserId" = SD."UserId"
					AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
		GROUP BY 
			TT."TransactionTypeId",
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SD."SalePointId",
			SP."SalePointName"
		ORDER BY 
			T."Date",
			SD."ShiftId"
	)
	SELECT 
		T."Date",
		T."UserId",
		T."FullName",
		T."ShiftId",
		T."ShiftDistributeId",
		T."SalePointId",
		T."SalePointName",
		T."Data",
		T."TotalPrice"
	FROM tmp1 T
	ORDER BY 
		T."SalePointId",
		T."Date",
		T."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_fee_outsite_in_month(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_history_lottery_of_guest(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_history_lottery_of_guest(p_guest_id integer, p_date timestamp without time zone) RETURNS TABLE("LotteryChannelId" integer, "LotteryChannelName" character varying, "IsScratchcard" boolean, "TotalReceived" bigint, "TotalValueReceived" numeric, "TotalReturn" bigint, "TotalValueReturn" numeric, "TotalCanReturn" bigint, "TotalValueCanReturn" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT 
			SPL."LotteryChannelId",
			SPL."LotteryTypeId",
			SPL."LotteryDate",
			SPL."Quantity",
			SPL."TotalValue",
			(CASE WHEN SPL."Quantity" >= 0 THEN 1 ELSE -1 END) AS "Type"
		FROM "SalePointLog" SPL
		WHERE SPL."GuestId" = p_guest_id
		AND (SPL."LotteryDate" = p_date::DATE OR SPL."LotteryTypeId" = 3)
	),
	tmp2 AS (
		SELECT 
			SPL."LotteryChannelId",
			SPL."LotteryDate",
			SUM(SPL."Quantity") AS "Quantity",
			SUM(SPL."TotalValue") AS "TotalValue"
		FROM tmp SPL
		WHERE SPL."Type" = 1
		GROUP BY 
			SPL."LotteryChannelId",
			SPL."LotteryDate"
	),
	tmp3 AS (
		SELECT 
			SPL."LotteryChannelId",
			SPL."LotteryDate",
			SUM(-SPL."Quantity") AS "Quantity",
			SUM(-SPL."TotalValue") AS "TotalValue"
		FROM tmp SPL
		WHERE SPL."Type" = -1
		GROUP BY 
			SPL."LotteryChannelId",
			SPL."LotteryDate"
	)
	SELECT 
		T."LotteryChannelId",
		LC."LotteryChannelName",
		LC."IsScratchcard",
		T."Quantity" AS "TotalReceived",
		T."TotalValue" AS "TotalValueReceived",
		S."Quantity" AS "TotalReturn",
		S."TotalValue" AS "TotalValueReturn",
		(COALESCE(T."Quantity", 0) - COALESCE(S."Quantity", 0)) AS "TotalCanReturn",
		(COALESCE(T."TotalValue", 0) - COALESCE(S."TotalValue", 0)) AS "TotalValueCanReturn"
	FROM tmp2 T
		FULL JOIN tmp3 S ON T."LotteryChannelId" = S."LotteryChannelId"
		JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
	ORDER BY T."LotteryChannelId";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_history_lottery_of_guest(p_guest_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_confirm_payment(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_confirm_payment(p_sale_point_id integer DEFAULT NULL::integer, p_guest_id integer DEFAULT NULL::integer, p_page_size integer DEFAULT 100, p_page_number integer DEFAULT 1) RETURNS TABLE("ActionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "GuestId" integer, "GuestName" character varying, "CanBuyWholeSale" boolean, "DataConfirm" text, "SalePointId" integer, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN
	RETURN QUERY 
	SELECT 
		CL."ActionDate",
		CL."ActionBy",
		CL."ActionByName",
		CL."GuestId",
		G."FullName" AS "GuestName",
		(CASE WHEN G."WholesalePriceId" IS NOT NULL AND G."ScratchPriceId" IS NOT NULL THEN TRUE ELSE FALSE END) AS "CanBuyWholeSale",
		(SELECT json_agg(t) FROM (
				SELECT 
					CL1."ConfirmLogId",
					CL1."ConfirmFor",
					CT."ConfirmForTypeName",
					CS."ConfirmStatusId",
					CS."ConfirmStatusName",
					CL1."Data",
					CL1."DataActionInfo"
				FROM "ConfirmLog" CL1
				JOIN "ConfirmForType" CT ON CT."ConfirmForTypeId" = CL1."ConfirmFor"
				JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = CL1."ConfirmStatusId"
				WHERE (CL1."ConfirmFor" = 2 OR CL1."ConfirmFor" = 3)
					AND CL1."ActionDate" = CL."ActionDate"
		) t ) ::TEXT AS "DataConfirm",
		SP."SalePointId",
		SP."SalePointName"
	FROM "ConfirmLog" CL 
		JOIN "Guest" G ON (G."GuestId"= CL."GuestId" AND (COALESCE(p_sale_point_id,0) = 0 OR G."SalePointId" = p_sale_point_id) AND (COALESCE(p_guest_id, 0)=0 OR G."GuestId" = p_guest_id))
		JOIN "SalePoint" SP ON SP."SalePointId"= G."SalePointId"
	WHERE CL."ConfirmFor" = 2 OR CL."ConfirmFor" = 3		
	GROUP BY 
		CL."ActionDate", 
		CL."ActionBy", 
		CL."ActionByName", 
		CL."GuestId",
		G."FullName", 
		SP."SalePointId",
		SP."SalePointName", 
		G."WholesalePriceId", 
		G."ScratchPriceId"
	ORDER BY  CL."ActionDate" DESC
	OFFSET v_offset_row LIMIT p_page_size;	
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_confirm_payment(p_sale_point_id integer, p_guest_id integer, p_page_size integer, p_page_number integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_fee_of_commission(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_fee_of_commission(p_month character varying) RETURNS TABLE("SalePointId" integer, "Date" date, "TotalValue" bigint, "Fee" numeric, "ActionBy" integer, "ActionByName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
		C."SalePointId",
		C."Date",
		C."TotalValue",
		C."Fee",
		C."UserId",
		U."FullName"
	FROM "Commission" C
		JOIN "User" U ON C."UserId" = U."UserId"
	WHERE C."IsDeleted" IS FALSE AND
		TO_CHAR(C."Date", 'YYYY-MM') = p_month
		AND COALESCE(C."Fee", 0) > 0
		
		
	ORDER BY 
		C."SalePointId",
		C."Date",
		C."CreatedDate";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_fee_of_commission(p_month character varying) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_fee_outsite(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_fee_outsite(p_month character varying, p_user_id integer DEFAULT 0) RETURNS TABLE("TransactionId" integer, "Date" date, "UserId" integer, "SalePointId" integer, "SalePointName" character varying, "FullName" character varying, "Note" character varying, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp0 AS (
		SELECT 
			T."SalePointId",
			T."SalePointName"
		FROM crm_get_list_salepoint_of_leader(p_user_id) T
	)
	SELECT 
		T."TransactionId",
		T."Date",
		T."UserId",
		T."SalePointId",
		SP."SalePointName",
		U."FullName",
		T."Note",
		T."TotalPrice"
	FROM tmp0 SP
		JOIN "Transaction" T ON T."SalePointId" = SP."SalePointId"
		JOIN "User" U ON T."UserId" = U."UserId"
	WHERE T."TransactionTypeId" = 1
		AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		AND T."IsDeleted" IS FALSE;	
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_fee_outsite(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_guest_for_confirm(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_guest_for_confirm(p_sale_point_id integer DEFAULT NULL::integer) RETURNS TABLE("ActionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying, "DataConfirm" text, "SalePointId" integer, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$ 
BEGIN
	
	RETURN QUERY 
	SELECT 
		CL."ActionDate",
		CL."ActionBy",
		CL."ActionByName",
		CL."ConfirmStatusId",
		CS."ConfirmStatusName",
		CL."Data" AS "DataConfirm",
		SP."SalePointId",
		SP."SalePointName"
	FROM "ConfirmLog" CL 
		JOIN "ConfirmStatus" CS ON CL."ConfirmStatusId" = CS."ConfirmStatusId"
		JOIN "SalePoint" SP ON SP."SalePointId" = (CL."DataActionInfo"::JSON ->> 'SalePointId')::INT
	WHERE CL."ConfirmFor" = 4
		AND (SP."SalePointId" = p_sale_point_id OR COALESCE(p_sale_point_id, 0) = 0)
	ORDER BY CL."ActionDate" DESC;

	
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_guest_for_confirm(p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_history_of_guest(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_history_of_guest(p_guest_id integer, p_page_size integer DEFAULT 100, p_page_number integer DEFAULT 1) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "HistoryOfOrderId" integer, "SalePointId" integer, "Data" text, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN
	RETURN QUERY
	SELECT 
		ROW_NUMBER() OVER (ORDER BY H."CreatedDate" DESC) "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		H."HistoryOfOrderId",
		H."SalePointId",
		json_build_object(
			'SalePointLogData',
			(
				SELECT 
					array_to_json(array_agg(R))
				FROM (
					SELECT 
						SPL."SalePointLogId",
						SPL."LotteryChannelId",
						LC."LotteryChannelName",
						SPL."LotteryDate",
						SPL."Quantity",
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."TotalValue",
						SPL."FourLastNumber"
					FROM "SalePointLog" SPL 
						JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
						JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"
					WHERE SPL."SalePointLogId" = ANY(H."SalePointLogIds")
						AND SPL."IsDeleted" IS FALSE
					ORDER BY 
						SPL."SalePointLogId"
				) R
			),
			'GuestData',
			(
				SELECT
					json_build_object(
						'GuestId',
						G."GuestId",
						'FullName',
						G."FullName"
					)
				FROM "Guest" G
				WHERE G."GuestId" = H."GuestId"
			),
			'GuestActionData',
			(
				SELECT
					array_to_json(array_agg(R))
				FROM (
					SELECT
						GA."GuestActionId",
						GA."GuestActionTypeId",
						GAT."TypeName",
						GA."FormPaymentId",
						F."PaymentName",
						GA."TotalPrice"
					FROM "GuestAction" GA 
						JOIN "GuestActionType" GAT ON GA."GuestActionTypeId" = GAT."GuestActionTypeId" 
						JOIN "FormPayment" F ON GA."FormPaymentId" = F."FormPaymentId"
					WHERE GA."IsDeleted" IS FALSE
						AND GA."GuestActionId" = ANY(H."GuestActionIds")
				)R
			),
			'LastData',
			H."Data"
		)::TEXT,
		H."CreatedDate"
	FROM "HistoryOfOrder" H
	WHERE H."IsDeleted" IS FALSE
		AND H."GuestId" = p_guest_id
	ORDER BY H."CreatedDate" DESC
	OFFSET v_offset_row LIMIT p_page_size;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_history_of_guest(p_guest_id integer, p_page_size integer, p_page_number integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_history_order(timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_history_order(p_date timestamp without time zone, p_sale_point_id integer DEFAULT 0, p_shift_distribute_id integer DEFAULT 0) RETURNS TABLE("HistoryOfOrderId" integer, "SalePointId" integer, "PrintTimes" integer, "ListPrint" text, "Data" text, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN

	RETURN QUERY
	SELECT 
		H."HistoryOfOrderId",
		H."SalePointId",
		H."PrintTimes",
		TRANSLATE(H."ListPrint"::TEXT, '{}', '[]') AS "ListPrint",
		json_build_object(
			'SalePointLogData',
			(
				SELECT 
					array_to_json(array_agg(R))
				FROM (
					SELECT 
						SPL."SalePointLogId",
						SPL."LotteryChannelId",
						LC."LotteryChannelName",
						SPL."LotteryDate",
						SPL."Quantity",
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."TotalValue",
						SPL."FourLastNumber"
					FROM "SalePointLog" SPL 
						JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
						JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"
					WHERE SPL."SalePointLogId" = ANY(H."SalePointLogIds")
						AND SPL."IsDeleted" IS FALSE
					ORDER BY 
						SPL."SalePointLogId"
				) R
			),
			'GuestData',
			(
				SELECT
					json_build_object(
						'GuestId',
						G."GuestId",
						'FullName',
						G."FullName"
					)
				FROM "Guest" G
				WHERE G."GuestId" = H."GuestId"
			),
			'GuestActionData',
			(
				SELECT
					array_to_json(array_agg(R))
				FROM (
					SELECT
						GA."GuestActionId",
						GA."GuestActionTypeId",
						GAT."TypeName",
						GA."FormPaymentId",
						F."PaymentName",
						GA."TotalPrice"
					FROM "GuestAction" GA 
						JOIN "GuestActionType" GAT ON GA."GuestActionTypeId" = GAT."GuestActionTypeId" 
						JOIN "FormPayment" F ON GA."FormPaymentId" = F."FormPaymentId"
					WHERE GA."IsDeleted" IS FALSE
						AND GA."GuestActionId" = ANY(H."GuestActionIds")
				)R
			),
			'LastData',
			H."Data"
		)::TEXT,
		H."CreatedDate"
	FROM "HistoryOfOrder" H
	WHERE H."IsDeleted" IS FALSE
		AND H."ShiftDistributeId" = p_shift_distribute_id 
-- 			OR(
-- 				H."CreatedDate"::DATE = p_date::DATE
-- 				AND (H."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
-- 			)
	ORDER BY H."CreatedDate" DESC;

END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_history_order(p_date timestamp without time zone, p_sale_point_id integer, p_shift_distribute_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_history_order_v1(integer, integer, timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_history_order_v1(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer DEFAULT 0, p_shift_distribute_id integer DEFAULT 0) RETURNS TABLE("HistoryOfOrderId" integer, "TotalCount" bigint, "SalePointId" integer, "PrintTimes" integer, "ListPrint" text, "Data" text, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN

	RETURN QUERY
	SELECT 
		H."HistoryOfOrderId",
		COUNT(1) OVER() AS "TotalCount",
		H."SalePointId",
		H."PrintTimes",
		TRANSLATE(H."ListPrint"::TEXT, '{}', '[]') AS "ListPrint",
		json_build_object(
			'SalePointLogData',
			(
				SELECT 
					array_to_json(array_agg(R))
				FROM (
					SELECT 
						SPL."SalePointLogId",
						SPL."LotteryChannelId",
						LC."LotteryChannelName",
						SPL."LotteryDate",
						SPL."Quantity",
						SPL."LotteryTypeId",
						LT."LotteryTypeName",
						SPL."TotalValue",
						SPL."FourLastNumber",
						SPL."PromotionCode"
					FROM "SalePointLog" SPL 
						JOIN "LotteryChannel" LC ON SPL."LotteryChannelId" = LC."LotteryChannelId"
						JOIN "LotteryType" LT ON SPL."LotteryTypeId" = LT."LotteryTypeId"
					WHERE SPL."SalePointLogId" = ANY(H."SalePointLogIds")
						AND SPL."IsDeleted" IS FALSE
					ORDER BY 
						SPL."SalePointLogId"
				) R
			),
			'GuestData',
			(
				SELECT
					json_build_object(
						'GuestId',
						G."GuestId",
						'FullName',
						G."FullName"
					)
				FROM "Guest" G
				WHERE G."GuestId" = H."GuestId"
			),
			'GuestActionData',
			(
				SELECT
					array_to_json(array_agg(R))
				FROM (
					SELECT
						GA."GuestActionId",
						GA."GuestActionTypeId",
						GAT."TypeName",
						GA."FormPaymentId",
						F."PaymentName",
						GA."TotalPrice"
					FROM "GuestAction" GA 
						JOIN "GuestActionType" GAT ON GA."GuestActionTypeId" = GAT."GuestActionTypeId" 
						JOIN "FormPayment" F ON GA."FormPaymentId" = F."FormPaymentId"
					WHERE GA."IsDeleted" IS FALSE
						AND GA."GuestActionId" = ANY(H."GuestActionIds")
				)R
			),
			'LastData',
			H."Data"
		)::TEXT,
		H."CreatedDate"
	FROM "HistoryOfOrder" H
	WHERE H."IsDeleted" IS FALSE
		AND H."ShiftDistributeId" = p_shift_distribute_id 
-- 			OR(
-- 				H."CreatedDate"::DATE = p_date::DATE
-- 				AND (H."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
-- 			)
	ORDER BY H."CreatedDate" DESC
	OFFSET v_offset_row LIMIT p_page_size;

END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_history_order_v1(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_shift_distribute_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_leader_attendent(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_leader_attendent(p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("GroupSalePointData" text, "LeaderAttendentData" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT 
			LA."CreatedDate",
			(SELECT json_agg(value order by (value->>'UserId')::INT)
			FROM json_array_elements(json_agg(json_build_object('UserId', LA."UserId", 'FullName', U."FullName", 'TriggerSalePoint', LA."TriggerSalePoint")::JSON)))::TEXT AS "ListLeader"
		FROM "LeaderAttendent" LA 
			JOIN "User" U ON LA."UserId" = U."UserId"
		WHERE U."IsActive" IS TRUE
		GROUP BY 
			LA."CreatedDate"
		HAVING LA."CreatedDate" >= ALL(
			SELECT 
				LAA."CreatedDate"
			FROM "LeaderAttendent" LAA
			GROUP BY LAA."CreatedDate"
		)
	),
	tmp1 AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY GS."Option" ORDER BY GS."CreatedDate" DESC) AS "Id",
			GS.*
		FROM "GroupSalePoint" GS
		WHERE GS."Option" <= json_array_length((SELECT T."ListLeader" FROM tmp T LIMIT 1)::JSON)
			AND GS."CreatedDate"::DATE <= NOW()::DATE
	),
	tmp2 AS (
		SELECT 
			T."GroupSalePointId",
			T."UserId",
			U."FullName",
-- 			(
-- 					SELECT 
-- 						array_to_json(array_agg(
-- 								(
-- 									'{"SalePointId": ' 
-- 									|| "SPId"
-- 									||',"SalePointName": "'
-- 									||(SELECT SP."SalePointName" FROM "SalePoint" SP WHERE SP."SalePointId" = "SPId")::TEXT
-- 									||'"}'
-- 								)::JSONB
-- 							)
-- 						)::TEXT
-- 					FROM UNNEST(T."SalePointIds") AS "SPId"
-- 			)::TEXT AS "SalePointIds",
			TRANSLATE(T."SalePointIds"::TEXT, '{}', '[]') AS "SalePointIds",
			T."Option"
		FROM tmp1 T
			JOIN "User" U ON T."UserId" = U."UserId"
		WHERE T."Id" = ANY(SELECT generate_series(0, json_array_length((SELECT T."ListLeader" FROM tmp T LIMIT 1)::JSON))) 
		ORDER BY 
			T."Option",
			T."UserId"
	),
	tmp3 AS (
		SELECT 
			array_to_json(array_agg(T.*))::TEXT AS "GroupSalePointData"
		FROM tmp2 T
	),
	tmp4 AS (
		SELECT 
			T."ListLeader"::TEXT AS "LeaderAttendentData"
		FROM tmp T
	)
	SELECT 
		tmp3."GroupSalePointData",
		tmp4."LeaderAttendentData"
	FROM tmp3 JOIN tmp4 ON TRUE;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_leader_attendent(p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_lottery_award_expected(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_lottery_award_expected(p_date timestamp without time zone DEFAULT now(), p_salepoint_id integer DEFAULT 0) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DataGroupType" text, "PriceLottery" numeric, "PriceLotteryDB" numeric, "DataWinning" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_date DATE := p_date::DATE;
	v_day_id INT := (CASE WHEN EXTRACT(DOW FROM p_date) =0 THEN 7 ELSE EXTRACT(DOW FROM p_date) END);
	v_two INT := 4;
	v_three INT := 2;
	v_four INT := 3;
BEGIN
	RETURN QUERY
	--Lấy danh sách xổ số
	WITH tmp AS (
		SELECT
			RL."LotteryChannelId",
			RL."LotteryDate",
			RL."TypeAwardId",
			TA."TypeAwardName",
			RL."ListNumber",
			TA."Price"
		FROM "ResultLottery" RL
			JOIN "TypeAward" TA ON TA."TypeAwardId" = RL."TypeAwardId"
		WHERE RL."IsDeleted" IS FALSE
			AND RL."LotteryDate" = v_date
	),
	--Lấy danh sách bán hàng theo ngày 
	tmp1 AS (
		SELECT 
			SPl."SalePointLogId",
			SPL."SalePointId",
			SPL."Quantity",
			SPL."LotteryPriceId",
			SPL."LotteryChannelId",
			SPL."FourLastNumber"
		FROM "SalePointLog" SPL
			LEFT JOIN "Guest" G ON SPL."GuestId" = G."GuestId"
		WHERE SPL."IsDeleted" IS FALSE
			AND SPL."LotteryTypeId" <> 3
			AND (G."GuestId" IS NULL OR (G."GuestId" IS NOT NULL AND G."ScratchPriceId" IS NULL AND G."WholesalePriceId" IS NULL))
			AND SPL."FourLastNumber" IS NOT NULL
			AND SPL."LotteryDate" = p_date::DATE
	),
	--Lấy danh sách masterdata thưởng 
	tmp2 AS (
		SELECT
			WT."WinningTypeId",
			WT."WinningTypeName",
			WT."WinningPrize",
			LC."LotteryChannelId",
			T."ListNumber"
		FROM "WinningType" WT
			JOIN "LotteryChannel" LC ON LC."RegionId" = 2 or(LC."RegionId" = 3) AND LC."IsActive" IS TRUE AND LC."IsDeleted" IS FALSE AND array_position(LC."DayIds", v_day_id) > 0
			JOIN tmp T ON T."LotteryChannelId" = LC."LotteryChannelId" aND T."TypeAwardId" = 9
		WHERE WT."WinningPrize" IS NOT NULL
			AND WT."WinningTypeId" IN (2,3,4)
	),
	--Quy đổi thưởng
	tmp3 AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY T."SalePointLogId" ORDER BY COALESCE(RS."Price", RSS."WinningPrize", 0) DESC) AS "Id",
			T."SalePointId",
			T."LotteryChannelId",
			T."Quantity",
			T."LotteryPriceId",
			LC."LotteryChannelName",
			T."FourLastNumber",
			RS."TypeAwardId",
			RS."TypeAwardName",
			RS."ListNumber",
			RS."Price",
			RSS."ListNumber" AS "ListNumberDB",
			RSS."WinningTypeId",
			RSS."WinningTypeName",
			RSS."WinningPrize"
		FROM tmp1 T
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			LEFT JOIN tmp RS ON RS."LotteryChannelId" = T."LotteryChannelId" AND T."FourLastNumber" LIKE ANY(SELECT '%'||LS FROM UNNEST(RS."ListNumber") LS)
			LEFT JOIN tmp2 RSS ON RSS."LotteryChannelId" = T."LotteryChannelId" AND  
				T."FourLastNumber" LIKE ANY(
					SELECT '%'||RIGHT(LSS, CASE WHEN RSS."WinningTypeId" = v_two THEN 2 
																			WHEN RSS."WinningTypeId" = v_three THEN 3
																			WHEN RSS."WinningTypeId" = v_four THEN 4 
																			ELSE 0 END) 
					FROM UNNEST(RSS."ListNumber") LSS
				)
		WHERE COALESCE(RS."TypeAwardId", RSS."WinningTypeId", -1) <> -1
	),
	-- lấy danh sách điểm bán
	tmp4 AS (
		SELECT
			SP."SalePointId",
			SP."SalePointName"
		FROM "SalePoint" SP 
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
			AND (SP."SalePointId" = p_salepoint_id OR p_salepoint_id = 0)
	),
	tmp5 AS (
		SELECT 
			SP."SalePointId",
			T."LotteryChannelId",
			COALESCE(T."TypeAwardId", T."WinningTypeId" + 10000) AS "WinningTypeId",
			COALESCE(T."TypeAwardName", T."WinningTypeName") AS "WinningTypeName",
			COALESCE(SUM(COALESCE(T."Price", T."WinningPrize", 0) * T."Quantity"), 0)  AS "PriceLottery"
		FROM tmp4 SP
			LEFT JOIN tmp3 T ON T."SalePointId" = SP."SalePointId" AND T."Id" = 1
		GROUP BY
			SP."SalePointId",
			COALESCE(T."TypeAwardId", T."WinningTypeId" + 10000),
			COALESCE(T."TypeAwardName", T."WinningTypeName"),
			T."LotteryChannelId"
	),
	tmp6 AS (
		SELECT
			T."SalePointId",
			(CASE WHEN COUNT(T."WinningTypeId") > 0 THEN array_to_json(array_agg(TO_JSONB(T.*))) ELSE '[]' END) AS "DataGroupType"
		FROM tmp5 T
		GROUP BY
			T."SalePointId"
	)
	SELECT 
		SP."SalePointId",
		SP."SalePointName",
		S."DataGroupType"::TEXT,
		COALESCE(SUM(COALESCE(T."Price", 0) * T."Quantity") FILTER (WHERE T."TypeAwardId" IS NOT NULL), 0) AS "PriceLottery",
		COALESCE(SUM(COALESCE(T."WinningPrize", 0) * T."Quantity") FILTER (WHERE T."TypeAwardId" IS NULL AND T."WinningTypeId" IS NOT NULL), 0)  AS "PriceLotteryDB",
		(CASE WHEN (COUNT(T."TypeAwardId") + COUNT(T."WinningTypeId")) > 0 
				THEN array_to_json(array_agg(json_build_object(
					'Quantity',
					T."Quantity",
					'Number',
					T."FourLastNumber",
					'LotteryChannelId',
					T."LotteryChannelId",					
					'LotteryChannelName',
					T."LotteryChannelName",
					'WinningTypeId',
					COALESCE(T."TypeAwardId", T."WinningTypeId" + 10000),
					'TypeAwardName',
					COALESCE(T."TypeAwardName", T."WinningTypeName"),
					'WinningPrice',
					COALESCE(T."Price", T."WinningPrize"),
					'Number', 	COALESCE(T."FourLastNumber", '')		
				)))
				ELSE '[]' END)::TEXT
		 AS "DataWinning"
	FROM tmp4 SP
		LEFT JOIN tmp3 T ON T."SalePointId" = SP."SalePointId" AND T."Id" = 1
		LEFT JOIN tmp6 S ON S."SalePointId" = SP."SalePointId"
	GROUP BY
		SP."SalePointId",
		SP."SalePointName",
		S."DataGroupType"::TEXT
	ORDER BY
		SP."SalePointId";
END
$$;


ALTER FUNCTION public.crm_salepoint_get_list_lottery_award_expected(p_date timestamp without time zone, p_salepoint_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_lottery_award_expected_v1(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_lottery_award_expected_v1(p_date timestamp without time zone DEFAULT now(), p_salepoint_id integer DEFAULT 0) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DataGroupType" text, "PriceLottery" numeric, "PriceLotteryDB" numeric, "DataWinning" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_date DATE := p_date::DATE;
	v_day_id INT := (CASE WHEN EXTRACT(DOW FROM p_date) =0 THEN 7 ELSE EXTRACT(DOW FROM p_date) END);
	v_two INT := 4;
	v_three INT := 2;
	v_four INT := 3;
BEGIN
	RETURN QUERY
	--Lấy danh sách xổ số
	WITH tmp AS (
		SELECT
			RL."LotteryChannelId",
			RL."LotteryDate",
			RL."TypeAwardId",
			TA."TypeAwardName",
			RL."ListNumber",
			TA."Price"
		FROM "ResultLottery" RL
			JOIN "TypeAward" TA ON TA."TypeAwardId" = RL."TypeAwardId"
		WHERE RL."IsDeleted" IS FALSE
			AND RL."LotteryDate" = v_date
	),
	--Lấy danh sách bán hàng theo ngày 
	tmp1 AS (
		SELECT 
			SPl."SalePointLogId",
			SPL."SalePointId",
			SPL."Quantity",
			SPL."LotteryPriceId",
			SPL."LotteryChannelId",
			SPL."FourLastNumber"
		FROM "SalePointLog" SPL
			LEFT JOIN "Guest" G ON SPL."GuestId" = G."GuestId"
		WHERE SPL."IsDeleted" IS FALSE
			AND SPL."LotteryTypeId" <> 3
			AND (G."GuestId" IS NULL OR (G."GuestId" IS NOT NULL AND G."ScratchPriceId" IS NULL AND G."WholesalePriceId" IS NULL))
			AND SPL."FourLastNumber" IS NOT NULL
			AND SPL."LotteryDate" = p_date::DATE
	),
	--Lấy danh sách masterdata thưởng 
	tmp2 AS (
		SELECT
			WT."WinningTypeId",
			WT."WinningTypeName",
			WT."WinningPrize",
			LC."LotteryChannelId",
			T."ListNumber"
		FROM "WinningType" WT
			JOIN "LotteryChannel" LC ON LC."RegionId" = 2 AND LC."IsActive" IS TRUE AND LC."IsDeleted" IS FALSE AND array_position(LC."DayIds", v_day_id) > 0
			JOIN tmp T ON T."LotteryChannelId" = LC."LotteryChannelId" aND T."TypeAwardId" = 9
		WHERE WT."WinningPrize" IS NOT NULL
			AND WT."WinningTypeId" IN (2,3,4)
	),
	--Quy đổi thưởng
	tmp3 AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY T."SalePointLogId" ORDER BY COALESCE(RS."Price", RSS."WinningPrize", 0) DESC) AS "Id",
			T."SalePointId",
			T."LotteryChannelId",
			T."Quantity",
			T."LotteryPriceId",
			LC."LotteryChannelName",
			T."FourLastNumber",
			RS."TypeAwardId",
			RS."TypeAwardName",
			RS."ListNumber",
			RS."Price",
			RSS."ListNumber" AS "ListNumberDB",
			RSS."WinningTypeId",
			RSS."WinningTypeName",
			RSS."WinningPrize"
		FROM tmp1 T
			JOIN "LotteryChannel" LC ON T."LotteryChannelId" = LC."LotteryChannelId"
			LEFT JOIN tmp RS ON RS."LotteryChannelId" = T."LotteryChannelId" AND T."FourLastNumber" LIKE ANY(SELECT '%'||LS FROM UNNEST(RS."ListNumber") LS)
			LEFT JOIN tmp2 RSS ON RSS."LotteryChannelId" = T."LotteryChannelId" AND  
				T."FourLastNumber" LIKE ANY(
					SELECT '%'||RIGHT(LSS, CASE WHEN RSS."WinningTypeId" = v_two THEN 2 
																			WHEN RSS."WinningTypeId" = v_three THEN 3
																			WHEN RSS."WinningTypeId" = v_four THEN 4 
																			ELSE 0 END) 
					FROM UNNEST(RSS."ListNumber") LSS
				)
		WHERE COALESCE(RS."TypeAwardId", RSS."WinningTypeId", -1) <> -1
	),
	-- lấy danh sách điểm bán
	tmp4 AS (
		SELECT
			SP."SalePointId",
			SP."SalePointName"
		FROM "SalePoint" SP 
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
			AND (SP."SalePointId" = p_salepoint_id OR p_salepoint_id = 0)
	),
	tmp5 AS (
		SELECT 
			SP."SalePointId",
			T."LotteryChannelId",
			COALESCE(T."TypeAwardId", T."WinningTypeId" + 10000) AS "WinningTypeId",
			COALESCE(T."TypeAwardName", T."WinningTypeName") AS "WinningTypeName",
			COALESCE(SUM(COALESCE(T."Price", T."WinningPrize", 0) * T."Quantity"), 0)  AS "PriceLottery"
		FROM tmp4 SP
			LEFT JOIN tmp3 T ON T."SalePointId" = SP."SalePointId" AND T."Id" = 1
		GROUP BY
			SP."SalePointId",
			COALESCE(T."TypeAwardId", T."WinningTypeId" + 10000),
			COALESCE(T."TypeAwardName", T."WinningTypeName"),
			T."LotteryChannelId"
	),
	tmp6 AS (
		SELECT
			T."SalePointId",
			(CASE WHEN COUNT(T."WinningTypeId") > 0 THEN array_to_json(array_agg(TO_JSONB(T.*))) ELSE '[]' END) AS "DataGroupType"
		FROM tmp5 T
		GROUP BY
			T."SalePointId"
	)
	SELECT 
		SP."SalePointId",
		SP."SalePointName",
		S."DataGroupType"::TEXT,
		COALESCE(SUM(COALESCE(T."Price", 0) * T."Quantity") FILTER (WHERE T."TypeAwardId" IS NOT NULL), 0) AS "PriceLottery",
		COALESCE(SUM(COALESCE(T."WinningPrize", 0) * T."Quantity") FILTER (WHERE T."TypeAwardId" IS NULL AND T."WinningTypeId" IS NOT NULL), 0)  AS "PriceLotteryDB",
		(CASE WHEN (COUNT(T."TypeAwardId") + COUNT(T."WinningTypeId")) > 0 
				THEN array_to_json(array_agg(json_build_object(
					'Quantity',
					T."Quantity",
					'Number',
					T."FourLastNumber",
					'LotteryChannelId',
					T."LotteryChannelId",					
					'LotteryChannelName',
					T."LotteryChannelName",
					'WinningTypeId',
					COALESCE(T."TypeAwardId", T."WinningTypeId" + 10000),
					'TypeAwardName',
					COALESCE(T."TypeAwardName", T."WinningTypeName"),
					'WinningPrice',
					COALESCE(T."Price", T."WinningPrize"),
					'Number', 	COALESCE(T."FourLastNumber", '')		
				)))
				ELSE '[]' END)::TEXT
		 AS "DataWinning"
	FROM tmp4 SP
		LEFT JOIN tmp3 T ON T."SalePointId" = SP."SalePointId" AND T."Id" = 1
		LEFT JOIN tmp6 S ON S."SalePointId" = SP."SalePointId"
	GROUP BY
		SP."SalePointId",
		SP."SalePointName",
		S."DataGroupType"::TEXT
	ORDER BY
		SP."SalePointId";
END
$$;


ALTER FUNCTION public.crm_salepoint_get_list_lottery_award_expected_v1(p_date timestamp without time zone, p_salepoint_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_sale_of_vietlott_in_date(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_sale_of_vietlott_in_date(p_date timestamp without time zone DEFAULT now(), p_sale_point_id integer DEFAULT 0) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "SalePointData" text, "SumData" numeric, "RealData" numeric, "IsEqual" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT	
			SP."SalePointId",
			SP."SalePointName"
		FROM "SalePoint" SP 
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
			AND (p_sale_point_id = 0 OR SP."SalePointId" = p_sale_point_id)
	),
	tmp1 AS (
		SELECT 
			T."SalePointId",
			T."ShiftDistributeId",
			SD."ShiftId",
			T."UserId",
			T."TotalPrice"
		FROM "Transaction" T
			JOIN "ShiftDistribute" SD ON SD."ShiftDistributeId" = T."ShiftDistributeId"
		WHERE T."TransactionTypeId" = 2
			AND T."Date" = p_date::DATE
			AND T."IsDeleted" IS FALSE
	),
	tmp2 AS (
		SELECT 
			T."SalePointId",
			T."ShiftDistributeId",
			T."UserId",
			T."TotalPrice"
		FROM "Transaction" T
		WHERE T."TransactionTypeId" = 10
			AND T."Date" = p_date::DATE
			AND T."IsDeleted" IS FALSE
	),
	tmp3 AS (
		SELECT
			SP.*,
			(
				SELECT array_to_json(array_agg(R))
				FROM (
					SELECT 
						SD."SalePointId",
						SD."ShiftDistributeId",
						SD."ShiftId",
						SD."UserId",
						U."FullName",
						T."TotalPrice"
					FROM "ShiftDistribute" SD
						JOIN "User" U ON SD."UserId" = U."UserId"
						LEFT JOIN tmp1 T ON SD."UserId" = T."UserId" AND SD."ShiftDistributeId" = T."ShiftDistributeId"
					WHERE SD."SalePointId" = SP."SalePointId"
						AND SD."DistributeDate" = p_date::DATE
				) R
			)::TEXT AS "SalePointData",
			(
				SELECT 
					SUM(T."TotalPrice")
				FROM tmp1 T
				WHERE T."SalePointId" = SP."SalePointId"
			)::NUMERIC AS "SumData",
			(
				SELECT T."TotalPrice" FROM tmp2 T WHERE T."SalePointId" = SP."SalePointId"
			)::NUMERIC AS "RealData",
			(
				SELECT SUM(T."TotalPrice") FROM tmp1 T WHERE T."SalePointId" = SP."SalePointId"
			)::NUMERIC AS "TotalSalePoint"
		FROM tmp SP
	)
	SELECT
		T."SalePointId",
		T."SalePointName",
		T."SalePointData",
		T."SumData",
		T."RealData",
		(CASE WHEN COALESCE(T."RealData", 0) = COALESCE(T."TotalSalePoint", 0) THEN TRUE ELSE FALSE END) AS "IsEqual"
	FROM tmp3 T;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_sale_of_vietlott_in_date(p_date timestamp without time zone, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_transaction(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_transaction(p_month character varying, p_user_id integer DEFAULT 0, p_type integer DEFAULT 0) RETURNS TABLE("TransactionId" integer, "TransactionTypeId" integer, "TransactionTypeName" character varying, "Note" character varying, "IsSum" boolean, "Quantity" integer, "Price" numeric, "TotalPrice" numeric, "SalePointId" integer, "SalePointName" character varying, "ShiftDistributeId" integer, "TypeName" character varying, "UserId" integer, "Date" date, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
		T."TransactionId",
		T."TransactionTypeId",
		TT."TransactionTypeName",
		T."Note",
		TT."IsSum",
		T."Quantity",
		T."Price",
		T."TotalPrice",
		T."SalePointId",
		SP."SalePointName",
		T."ShiftDistributeId",
		TN."Name" AS "TypeName",
		T."UserId",
		T."Date",
		T."ActionBy",
		T."ActionByName",
		T."ActionDate"
	FROM "Transaction" T
		JOIN "TransactionType" TT ON T."TransactionTypeId" = TT."TransactionTypeId"
		LEFT JOIN "SalePoint" SP ON SP."SalePointId" = T."SalePointId"
		LEFT JOIN "TypeName" TN ON T."TypeNameId" = TN."TypeNameId"
	WHERE T."IsDeleted" IS FALSE
		AND (CASE WHEN p_type = 1 THEN T."TransactionTypeId" IN (4,5,6,7,14) ELSE TRUE END)
		AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		AND (COALESCE(p_user_id, 0) = 0 OR T."ActionBy" = p_user_id)
	ORDER BY T."TransactionTypeId", T."Date" DESC;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_transaction(p_month character varying, p_user_id integer, p_type integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_list_union_in_year(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_list_union_in_year(p_year integer) RETURNS TABLE("PriceUnionFirst" numeric, "TotalUnionSend" numeric, "TotalUse" numeric, "TotalRemain" numeric, "UserData" text, "DataUse" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	--Lấy danh sách user
	WITH tmp0 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_year||'-01-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
		WHERE U."UserTitleId" IN (6, 4, 5)
	),
	--Lấy danh sách tháng trong năm
	tmp AS (
		SELECT
			TO_CHAR((p_year||'-'||T."Data"||'-01')::DATE, 'YYYY-MM') AS "Month"
		FROM (
			SELECT
				*
			FROM generate_series(1, 12) "Data"
		) T
	),
	--Lấy danh sách tiền nộp trước năm 
	tmp1 AS (
		SELECT
			SUM(((SC."Data"::JSON)->>'PriceUnion')::NUMERIC) AS "PriceUnion"
		FROM "SalaryConfirm" SC
		WHERE SC."IsDeleted" IS FALSE
			AND SUBSTRING(SC."Month", 1, 4)::INT < p_year
	),
	--Lấy danh sách trích quỹ trước năm
	tmp2 AS (
		SELECT
			SUM(T."TotalPrice") AS "TotalPrice"
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND T."TransactionTypeId" = 12
			AND TO_CHAR(T."Date", 'YYYY')::INT < p_year
	),
	--Lấy danh sách nộp trong năm theo user
	tmp3 AS (
		SELECT
			SC."UserId",
			SC."Month",
			SUM(((SC."Data"::JSON)->>'PriceUnion')::NUMERIC) AS "PriceUnion"
		FROM "SalaryConfirm" SC
		WHERE SC."IsDeleted" IS FALSE
			AND SUBSTRING(SC."Month", 1, 4)::INT = p_year
		GROUP BY 
			SC."UserId",
			SC."Month"
	),
	--Lấy danh sách nộp trong năm theo 12 tháng
	tmp4 AS (
		SELECT
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			U."SalePointName",
			SUM(COALESCE(P."PriceUnion", 0)) AS "TotalUnionSend",
			array_to_json(array_agg(json_build_object(
				'Month',
				M."Month",
				'PriceUnion',
				COALESCE(P."PriceUnion", 0)
			))) AS "DataSend"
		FROM tmp0 U
			JOIN tmp M ON TRUE
			LEFT JOIN tmp3 P ON U."UserId" = P."UserId" AND M."Month" = P."Month"
		GROUP BY
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			U."SalePointName"
		ORDER BY
			U."UserTitleId" IN (4, 6),
			U."SalePointId",
			U."UserId"
	),
	--Lấy danh sách trích quỹ trong năm
	tmp5 AS (
		SELECT
			SUM(T."TotalPrice") AS "TotalUse",
			array_to_json(array_agg(json_build_object(
				'TransactionId',
				T."TransactionId",
				'Date',
				T."Date",
				'Price',
				T."Price",
				'Note',
				T."Note"
			))) AS "DataUse"
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND T."TransactionTypeId" = 12
			AND TO_CHAR(T."Date", 'YYYY')::INT = p_year
	),
	--Tổng hợp tiền nộp user trong năm
	tmp6 AS (
		SELECT
			SUM(U."TotalUnionSend") AS "TotalUnionSend",
			array_to_json(array_agg(TO_JSONB(U.*))) "UserData"
		FROM tmp4 U
	),
	tmp7 AS (
		SELECT 
			COALESCE(P."PriceUnion", 0) - COALESCE(T."TotalPrice", 0) AS "PriceUnionFirst",
			COALESCE(U."TotalUnionSend", 0) AS "TotalUnionSend",
			COALESCE(A."TotalUse", 0) AS "TotalUse",	
			COALESCE(P."PriceUnion", 0) - COALESCE(T."TotalPrice", 0) + COALESCE(U."TotalUnionSend", 0) - COALESCE(A."TotalUse", 0) AS "TotalRemain",
			U."UserData",
			A."DataUse"
		FROM tmp1 P
			FULL JOIN tmp2 T ON TRUE
			FULL JOIN tmp6 U ON TRUE
			FULL JOIN tmp5 A ON TRUE
	)
	SELECT
		T."PriceUnionFirst",
		T."TotalUnionSend",
		T."TotalUse",
		T."TotalRemain",
		T."UserData"::TEXT,
		T."DataUse"::TEXT		
	FROM tmp7 T;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_list_union_in_year(p_year integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_percent(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_percent(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "MainUserData" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT
			SP."SalePointId",
			SP."SalePointName"
		FROM "SalePoint" SP 
		WHERE SP."IsDeleted" IS FALSE
			AND SP."IsActive" IS TRUE
	),
	tmp1 AS (
		SELECT 	
			T."SalePointId",
			T."MainUserId",
			T."PercentMainUserId"
		FROM crm_get_list_percent_salepoint_in_month(p_month) T
	)
	SELECT
		SP."SalePointId",
		SP."SalePointName",
		--TRANSLATE(COALESCE(S."MainUserId", '{}'::INT[])::TEXT, '{}', '[]') AS "MainUserId",
		COALESCE((
			SELECT 
				array_to_json(array_agg(json_build_object(
					'UserId',
					I,
					'FullName',
					(SELECT U."FullName" FROM "User" U WHERE U."UserId" = I)::VARCHAR,
					'Percent',
					(S."PercentMainUserId"[array_position(S."MainUserId"::TEXT[], I::TEXT)])::NUMERIC		
				)))
			FROM UNNEST(S."MainUserId") I
		)::TEXT, '[]') AS "MainUserId"
		--TRANSLATE(COALESCE(S."PercentMainUserId", '{}'::NUMERIC[])::TEXT, '{}', '[]') AS "PercentMainUserId"
	FROM tmp SP
		LEFT JOIN tmp1 S ON SP."SalePointId" = S."SalePointId" 
	ORDER BY SP."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_percent(p_month character varying) OWNER TO postgres;

--
-- Name: crm_salepoint_get_percent_by_manager(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_percent_by_manager(p_userid integer) RETURNS TABLE("SalePointId" integer)
    LANGUAGE plpgsql
    AS $$
	BEGIN
  	RETURN QUERY
		SELECT SPPL."SalePointId"
		FROM "SalePointPercentLog" SPPL
		WHERE SPPL."MainUserId" <> '{}'
			AND p_userid = ANY (SPPL."MainUserId"::INT[])
		;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_percent_by_manager(p_userid integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_loto_in_date(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_loto_in_date(p_month character varying, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "SalePointId" integer, "AllTotalPrice" numeric, "Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT
			(p_month||'-'||"I")::DATE AS "Date"
		FROM generate_series(1, v_total_date) AS "I"
	),
	tmp1 AS (
		SELECT
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SP."SalePointId",
			(
				SELECT 
					TT."TotalPrice"
				FROM "Transaction" TT
				WHERE TT."Date" = T."Date"
					AND TT."TransactionTypeId" = 3
					AND TT."IsDeleted" IS FALSE
					AND TT."UserId" = SD."UserId"
					AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
				LIMIT 1
			)::NUMERIC AS "TotalPrice"
		FROM tmp T
			JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
			LEFT JOIN "User" U ON SD."UserId" = U."UserId"
		WHERE (SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
		ORDER BY 
			T."Date",
			SD."ShiftId"
	),
	tmp2 AS (
		SELECT
			T."Date",
			T."SalePointId",
			SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
			array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data"
		FROM tmp1 T
		GROUP BY
			T."Date",
			T."SalePointId"
	)
	SELECT 
		T."Date",
		T."SalePointId",
		T."AllTotalPrice",
		T."Data"
	FROM tmp2 T
	ORDER BY 
		T."SalePointId",
		T."Date";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_loto_in_date(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_loto_in_date_1(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_loto_in_date_1(p_month character varying, p_transaction_type integer, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "SalePointId" integer, "AllTotalPrice" numeric, "Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT
			(p_month||'-'||"I")::DATE AS "Date"
		FROM generate_series(1, v_total_date) AS "I"
	),
	tmp1 AS (
		SELECT
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SP."SalePointId",
			(
				SELECT 
					TT."TotalPrice"
				FROM "Transaction" TT
				WHERE TT."Date" = T."Date"
					AND TT."TransactionTypeId" = p_transaction_type
					AND TT."IsDeleted" IS FALSE
					AND TT."UserId" = SD."UserId"
					AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
				LIMIT 1
			)::NUMERIC AS "TotalPrice"
		FROM tmp T
			JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
			LEFT JOIN "User" U ON SD."UserId" = U."UserId"
		WHERE (SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
		ORDER BY 
			T."Date",
			SD."ShiftId"
	),
	tmp2 AS (
		SELECT
			T."Date",
			T."SalePointId",
			SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
			array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data"
		FROM tmp1 T
		GROUP BY
			T."Date",
			T."SalePointId"
	)
	SELECT 
		T."Date",
		T."SalePointId",
		T."AllTotalPrice",
		T."Data"
	FROM tmp2 T
	ORDER BY 
		T."SalePointId",
		T."Date";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_loto_in_date_1(p_month character varying, p_transaction_type integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_loto_in_date_v1(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_loto_in_date_v1(p_month character varying, p_transaction_type integer, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "SalePointId" integer, "AllTotalPrice" numeric, "Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT
			(p_month||'-'||"I")::DATE AS "Date"
		FROM generate_series(1, v_total_date) AS "I"
	),
	
	tm AS(
		select W."ActionBy",W."SalePointId",W."ActionDate"::Date, sum (W."WinningPrice") AS "WinningPrice",W."ShiftDistributeId" from tmp T
			left Join "Winning" W on  W."ActionDate"::Date=T."Date"::Date
			where W."ActionDate"::Date =T."Date"::Date and (
				(3 = 3 AND "WinningTypeId" = 6) OR
				(3 = 2 AND "WinningTypeId" = 5))
			group by w."ActionBy",
		W."SalePointId",
		W."ActionDate"::Date,
		W."ShiftDistributeId"
	),
	
	tmp1 AS (
		SELECT  
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SP."SalePointId",
			SUM(TT."TotalPrice") AS "TotalPrice", 
-- 			COALESCE(SUM(W."WinningPrice"), 0) AS "WinningPriceSum",
			COALESCE(SUM(TT."Expense"), 0) AS "Expense",
-- 			(SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0)) AS "Total",
		
		
		CASE 
			WHEN COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN (SUM(TT."TotalPrice") - COALESCE(SUM(TT."WinningPriceSum"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
		ELSE
			(SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
		END AS "Total",
		
-- 		CASE
--         WHEN COALESCE(SUM(W."WinningPrice"), 0) = 0 THEN  (SUM(TT."TotalPrice") - COALESCE(SUM(TT."WinningPriceSum"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
-- 		 WHEN COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN (SUM(TT."TotalPrice") -(COALESCE(SUM(W."WinningPrice"), 0) + ( COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."WinningPriceSum"),0))) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))	
--         ELSE 
		
		
-- 		(SUM(TT."TotalPrice") -(COALESCE(SUM(W."WinningPrice"), 0) + ( COALESCE(SUM(TT."WinningPriceSum"), 0) - COALESCE(SUM(W."WinningPrice"),0))) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))																										
--     END AS "Total",
		
		
			COALESCE(SUM(TT."OpeningBalance"), 0) AS "OpeningBalance",
		COALESCE(SUM(TT."six45"), 0) AS "six45",
		COALESCE(SUM(TT."six55"), 0) AS "six55",
		COALESCE(SUM(TT."keno"), 0) AS "keno",
		COALESCE(SUM(TT."Ticket3d"), 0) AS "Ticket3d",
		COALESCE(SUM(TT."Ticket3dPro"), 0) AS "Ticket3dPro",
		COALESCE(SUM(TT."CancleTicket"), 0) AS "CancleTicket",
		COALESCE(SUM(TT."ReturnWining"), 0) AS "ReturnWining",
		COALESCE(SUM(TT."ManagerReturn"), 0) AS "ManagerReturn",
		COALESCE(SUM(TT."EndingBalance"), 0) AS "EndingBalance",
		COALESCE(SUM(TT."Refunds"), 0) AS "Refunds",
		(COALESCE(SUM(TT."six45"), 0)+COALESCE(SUM(TT."six55"), 0)+COALESCE(SUM(TT."keno"), 0)+COALESCE(SUM(TT."Ticket3d"), 0)+COALESCE(SUM(TT."Ticket3dPro"), 0)-COALESCE(SUM(TT."CancleTicket"), 0) ) AS "doanhThu",
-- 		    CASE
--         WHEN COALESCE(SUM(W."WinningPrice"), 0) = 0 THEN COALESCE(SUM(TT."WinningPriceSum"), 0)
--         WHEN COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN
--             COALESCE(SUM(W."WinningPrice"), 0) + (COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."WinningPriceSum"), 0))
--         ELSE
--             COALESCE(SUM(W."WinningPrice"), 0) + (COALESCE(SUM(TT."WinningPriceSum"), 0) - COALESCE(SUM(W."WinningPrice"), 0))
--     END AS "WinningPriceSum",
		
		CASE 
			WHEN COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN COALESCE(SUM(TT."WinningPriceSum"), 0)
		ELSE
			COALESCE(SUM(W."WinningPrice"), 0)
		END AS "WinningPriceSum",
		
		(((COALESCE(SUM(TT."six45"), 0)+COALESCE(SUM(TT."six55"), 0)+COALESCE(SUM(TT."keno"), 0)+COALESCE(SUM(TT."Ticket3d"), 0)+COALESCE(SUM(TT."Ticket3dPro"), 0) )-COALESCE(SUM(TT."ReturnWining"), 0)-COALESCE(SUM(TT."CancleTicket"), 0))+COALESCE(SUM(TT."ManagerReturn"), 0)) AS "thucThu"	  																				
	
		
-- 			TT."OpeningBalance",
-- 			TT."six45",
-- 			TT."six55",
-- 			TT."keno",
-- 			TT."Ticket3d",
-- 			TT."Ticket3dPro",
-- 			TT."CancleTicket",
-- 			TT."ReturnWining",
-- 			TT."ManagerReturn"
		
		FROM tmp T
			JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
			LEFT JOIN "User" U ON SD."UserId" = U."UserId"
			LEFT JOIN "Transaction" TT ON T."Date" = TT."Date" AND TT."ShiftDistributeId" = SD."ShiftDistributeId" and tt."IsDeleted" = false
			LEFT JOIN "tm" W on W."ActionBy" =U."UserId" and W."ActionDate"::Date=T."Date"::DATE and W."SalePointId"=SP."SalePointId" and W."ShiftDistributeId"=SD."ShiftDistributeId"
		
	
		WHERE (SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND TT."TransactionTypeId" = p_transaction_type   
		GROUP BY
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SP."SalePointId"
-- 		TT."OpeningBalance",
-- 			TT."six45",
-- 			TT."six55",
-- 			TT."keno",
-- 			TT."Ticket3d",
-- 		TT."Ticket3dPro",
-- 		TT."CancleTicket",
-- 		TT."ReturnWining",
-- 		TT."ManagerReturn"
		ORDER BY
			SD."ShiftId",
			T."Date"
		
	),
	tmp2 AS (
		SELECT
			T."Date",
			T."SalePointId",
			SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
			array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data"
		FROM tmp1 T
		GROUP BY
			T."Date",
			T."SalePointId"
	)
	SELECT 
		T."Date",
		T."SalePointId",
		T."AllTotalPrice",
		T."Data"
	FROM tmp2 T
	ORDER BY 
		T."SalePointId",
		T."Date";
END;




-- Bản cũ

-- DECLARE 
-- 	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
-- BEGIN
-- 	RETURN QUERY
-- 	WITH tmp AS (
-- 		SELECT
-- 			(p_month||'-'||"I")::DATE AS "Date"
-- 		FROM generate_series(1, v_total_date) AS "I"
-- 	),
	
-- 	tm AS(
-- 		select W."ActionBy",W."SalePointId",W."ActionDate"::Date, sum (W."WinningPrice") AS "WinningPrice",W."ShiftDistributeId" from tmp T
-- 			left Join "Winning" W on  W."ActionDate"::Date=T."Date"::Date
-- 			where W."ActionDate"::Date =T."Date"::Date and (
-- 				(3 = 3 AND "WinningTypeId" = 6) OR
-- 				(3 = 2 AND "WinningTypeId" = 5))
-- 			group by w."ActionBy",
-- 		W."SalePointId",
-- 		W."ActionDate"::Date,
-- 		W."ShiftDistributeId"
-- 	),
	
-- 	tmp1 AS (
-- 		SELECT  
-- 			T."Date",
-- 			SD."UserId",
-- 			U."FullName",
-- 			SD."ShiftId",
-- 			SD."ShiftDistributeId",
-- 			SP."SalePointId",
-- 			SUM(TT."TotalPrice") AS "TotalPrice", 
-- 			COALESCE(SUM(W."WinningPrice"), 0) AS "WinningPriceSum",
-- 			COALESCE(SUM(TT."Expense"), 0) AS "Expense",
-- 			(SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)) AS "Total"
		
-- 		FROM tmp T
-- 			JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
-- 			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
-- 			LEFT JOIN "User" U ON SD."UserId" = U."UserId"
-- 			LEFT JOIN "Transaction" TT ON T."Date" = TT."Date" AND TT."ShiftDistributeId" = SD."ShiftDistributeId" and tt."IsDeleted" = false
-- 			LEFT JOIN "tm" W on W."ActionBy" =U."UserId" and W."ActionDate"::Date=T."Date"::DATE and W."SalePointId"=SP."SalePointId" and W."ShiftDistributeId"=SD."ShiftDistributeId"
	
-- 		WHERE (SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND TT."TransactionTypeId" = p_transaction_type   
-- 		GROUP BY
-- 			T."Date",
-- 			SD."UserId",
-- 			U."FullName",
-- 			SD."ShiftId",
-- 			SD."ShiftDistributeId",
-- 			SP."SalePointId"
-- 		ORDER BY
-- 			SD."ShiftId",
-- 			T."Date"
		
-- 	),
-- 	tmp2 AS (
-- 		SELECT
-- 			T."Date",
-- 			T."SalePointId",
-- 			SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
-- 			array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data"
-- 		FROM tmp1 T
-- 		GROUP BY
-- 			T."Date",
-- 			T."SalePointId"
-- 	)
-- 	SELECT 
-- 		T."Date",
-- 		T."SalePointId",
-- 		T."AllTotalPrice",
-- 		T."Data"
-- 	FROM tmp2 T
-- 	ORDER BY 
-- 		T."SalePointId",
-- 		T."Date";
-- END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_loto_in_date_v1(p_month character varying, p_transaction_type integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_loto_in_date_v1_bk(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_loto_in_date_v1_bk(p_month character varying, p_transaction_type integer, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "SalePointId" integer, "AllTotalPrice" numeric, "Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT
			(p_month||'-'||"I")::DATE AS "Date"
		FROM generate_series(1, v_total_date) AS "I"
	),
	tmp1 AS (
		SELECT
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SP."SalePointId",
			SUM(TT."TotalPrice") AS "TotalPrice"
		FROM tmp T
			JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
			LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
			LEFT JOIN "User" U ON SD."UserId" = U."UserId"
			LEFT JOIN "Transaction" TT ON T."Date" = TT."Date" AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
		WHERE (SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND TT."TransactionTypeId" = p_transaction_type
		GROUP BY
			T."Date",
			SD."UserId",
			U."FullName",
			SD."ShiftId",
			SD."ShiftDistributeId",
			SP."SalePointId"
		ORDER BY
			SD."ShiftId",
			T."Date"
		
	),
	tmp2 AS (
		SELECT
			T."Date",
			T."SalePointId",
			SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
			array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data"
		FROM tmp1 T
		GROUP BY
			T."Date",
			T."SalePointId"
	)
	SELECT 
		T."Date",
		T."SalePointId",
		T."AllTotalPrice",
		T."Data"
	FROM tmp2 T
	ORDER BY 
		T."SalePointId",
		T."Date";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_loto_in_date_v1_bk(p_month character varying, p_transaction_type integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_loto_in_date_v3(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_loto_in_date_v3(p_month character varying, p_transaction_type integer, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "SalePointId" integer, "AllTotalPrice" numeric, "Data" text, "SoldLoto" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
/*
    History:
        - TuanBui [2024-06-14 15:00]: Get TotalRevenue after update
*/
BEGIN

    IF p_transaction_type <> 68 THEN
        RETURN QUERY
            WITH tmp AS (
                SELECT
                    (p_month||'-'||"I")::DATE AS "Date"
                FROM generate_series(1, v_total_date) AS "I"
            ),

                 tm AS(
                     select W."ActionBy",W."SalePointId",W."ActionDate"::Date, sum (W."WinningPrice") AS "WinningPrice",W."ShiftDistributeId" from tmp T
                                                                                                                                                       left Join "Winning" W on  W."ActionDate"::Date=T."Date"::Date
                     where W."ActionDate"::Date =T."Date"::Date and (
                         (3 = 3 AND "WinningTypeId" = 6) OR
                         (3 = 2 AND "WinningTypeId" = 5))
                     group by w."ActionBy",
                              W."SalePointId",
                              W."ActionDate"::Date,
                              W."ShiftDistributeId"
                 ),

                 tmp1 AS (
                     SELECT
                         T."Date",
                         SD."UserId",
                         U."FullName",
                         SD."ShiftId",
                         SD."ShiftDistributeId",
                         SP."SalePointId",
                         SUM(TT."TotalPrice") AS "TotalPrice",
-- 			COALESCE(SUM(W."WinningPrice"), 0) AS "WinningPriceSum",
                         COALESCE(SUM(TT."Expense"), 0) AS "Expense",
-- 			(SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0)) AS "Total",


                         CASE
                             WHEN COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN (SUM(TT."TotalPrice") - COALESCE(SUM(TT."WinningPriceSum"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
                             ELSE
                                 (SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
                             END AS "Total",




                         COALESCE(SUM(TT."OpeningBalance"), 0) AS "OpeningBalance",
                         COALESCE(SUM(TT."six45"), 0) AS "six45",
                         COALESCE(SUM(TT."six55"), 0) AS "six55",
                         COALESCE(SUM(TT."keno"), 0) AS "keno",
                         COALESCE(SUM(TT."Ticket3d"), 0) AS "Ticket3d",
                         COALESCE(SUM(TT."Ticket3dPro"), 0) AS "Ticket3dPro",
                         COALESCE(SUM(TT."CancleTicket"), 0) AS "CancleTicket",
                         COALESCE(SUM(TT."ReturnWining"), 0) AS "ReturnWining",
                         COALESCE(SUM(TT."ManagerReturn"), 0) AS "ManagerReturn",
                         COALESCE(SUM(TT."EndingBalance"), 0) AS "EndingBalance",
                         COALESCE(SUM(TT."Refunds"), 0) AS "Refunds",
                         CASE WHEN COALESCE(SUM(TT."TotalRevenue"), 0) > 0 THEN COALESCE(SUM(TT."TotalRevenue"), 0)
                             ELSE
                         COALESCE(SUM(TT."six45"), 0)+COALESCE(SUM(TT."six55"), 0)+COALESCE(SUM(TT."keno"), 0)+COALESCE(SUM(TT."Ticket3d"), 0)+COALESCE(SUM(TT."Ticket3dPro"), 0)-COALESCE(SUM(TT."CancleTicket"), 0)
                             END AS "doanhThu",


                         CASE
                             WHEN COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN COALESCE(SUM(TT."WinningPriceSum"), 0)
                             ELSE
                                 COALESCE(SUM(W."WinningPrice"), 0)
                             END AS "WinningPriceSum",

                         (((COALESCE(SUM(TT."six45"), 0)+COALESCE(SUM(TT."six55"), 0)+COALESCE(SUM(TT."keno"), 0)+COALESCE(SUM(TT."Ticket3d"), 0)+COALESCE(SUM(TT."Ticket3dPro"), 0) )-COALESCE(SUM(TT."ReturnWining"), 0)-COALESCE(SUM(TT."CancleTicket"), 0))+COALESCE(SUM(TT."ManagerReturn"), 0)) AS "thucThu"


                     FROM tmp T
                              JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
                              LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
                              LEFT JOIN "User" U ON SD."UserId" = U."UserId"
                              LEFT JOIN "Transaction" TT ON T."Date" = TT."Date" AND TT."ShiftDistributeId" = SD."ShiftDistributeId" and tt."IsDeleted" = false
                              LEFT JOIN "tm" W on W."ActionBy" =U."UserId" and W."ActionDate"::Date=T."Date"::DATE and W."SalePointId"=SP."SalePointId" and W."ShiftDistributeId"=SD."ShiftDistributeId"


                     WHERE   (
                                 (p_transaction_type = 68 AND TT."TransactionTypeId" = 2 AND SP."SalePointId" = 1) OR
                                 (p_transaction_type <> 68 AND TT."TransactionTypeId" = p_transaction_type AND (SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0))
                                 )
-- 		(SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND TT."TransactionTypeId" = p_transaction_type
                     GROUP BY
                         T."Date",
                         SD."UserId",
                         U."FullName",
                         SD."ShiftId",
                         SD."ShiftDistributeId",
                         SP."SalePointId"

                     ORDER BY
                         SD."ShiftId",
                         T."Date"

                 ),

-- 	tmp3 AS(

-- 					SELECT

-- 						LT."LotoType",
-- 						LT."Type",
-- 						LC."LotteryChannelName",
-- 					LT."Seri",
-- 					LT."IntoMoney",
-- 					LT."ShiftId",
-- 					TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time,
-- 					LT."SalePointId",
-- 					LT."TransactionCode"

-- 					FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- -- 					LEFT JOIN "tm" W on W."ActionDate"::Date=LT."Time"::Date
-- 					WHERE (LT."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) and TO_CHAR(LT."Time", 'YYYY-MM')=p_month
-- 					order by LT."Time" DESC

-- 	),

                 tmp2 AS (
                     SELECT

                         T."Date",
                         T."SalePointId",
                         SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
                         array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data",

                         NULL AS "SoldLoto"
                     FROM tmp1 T
                     GROUP BY
                         T."Date",
                         T."SalePointId"
                 )
            SELECT
                T."Date",
                T."SalePointId",
                T."AllTotalPrice",
                T."Data",
                T."SoldLoto"
            FROM tmp2 T
            ORDER BY
                T."SalePointId",
                T."Date";
    ELSE
        RETURN QUERY
            WITH tmp AS (
                SELECT
                    (p_month||'-'||"I")::DATE AS "Date"
                FROM generate_series(1, v_total_date) AS "I"
            ),

                 tm AS(
                     select W."ActionBy",W."SalePointId",W."ActionDate"::Date, sum (W."WinningPrice") AS "WinningPrice",W."ShiftDistributeId" from tmp T
                                                                                                                                                       left Join "Winning" W on  W."ActionDate"::Date=T."Date"::Date
                     where W."ActionDate"::Date =T."Date"::Date and (
                         (3 = 3 AND "WinningTypeId" = 6) OR
                         (3 = 2 AND "WinningTypeId" = 5))
                     group by w."ActionBy",
                              W."SalePointId",
                              W."ActionDate"::Date,
                              W."ShiftDistributeId"
                 ),

                 tmp1 AS (
                     SELECT
                         T."Date",
                         SD."UserId",
                         U."FullName",
                         SD."ShiftId",
                         SD."ShiftDistributeId",
                         SP."SalePointId",
                         SUM(TT."TotalPrice") AS "TotalPrice",
-- 			COALESCE(SUM(W."WinningPrice"), 0) AS "WinningPriceSum",
                         COALESCE(SUM(TT."Expense"), 0) AS "Expense",
-- 			(SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0)) AS "Total",


                         CASE
                             WHEN COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN (SUM(TT."TotalPrice") - COALESCE(SUM(TT."WinningPriceSum"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
                             ELSE
                                 (SUM(TT."TotalPrice") - COALESCE(SUM(W."WinningPrice"), 0) - COALESCE(SUM(TT."Expense"), 0)+COALESCE(SUM(TT."Refunds"), 0))
                             END AS "Total",




                         COALESCE(SUM(TT."OpeningBalance"), 0) AS "OpeningBalance",
                         COALESCE(SUM(TT."six45"), 0) AS "six45",
                         COALESCE(SUM(TT."six55"), 0) AS "six55",
                         COALESCE(SUM(TT."keno"), 0) AS "keno",
                         COALESCE(SUM(TT."Ticket3d"), 0) AS "Ticket3d",
                         COALESCE(SUM(TT."Ticket3dPro"), 0) AS "Ticket3dPro",
                         COALESCE(SUM(TT."CancleTicket"), 0) AS "CancleTicket",
                         COALESCE(SUM(TT."ReturnWining"), 0) AS "ReturnWining",
                         COALESCE(SUM(TT."ManagerReturn"), 0) AS "ManagerReturn",
                         COALESCE(SUM(TT."EndingBalance"), 0) AS "EndingBalance",
                         COALESCE(SUM(TT."Refunds"), 0) AS "Refunds",
                         CASE WHEN COALESCE(SUM(TT."TotalRevenue"), 0) > 0 THEN COALESCE(SUM(TT."TotalRevenue"), 0)
                             ELSE
                         COALESCE(SUM(TT."six45"), 0)+COALESCE(SUM(TT."six55"), 0)+COALESCE(SUM(TT."keno"), 0)+COALESCE(SUM(TT."Ticket3d"), 0)+COALESCE(SUM(TT."Ticket3dPro"), 0)-COALESCE(SUM(TT."CancleTicket"), 0)
                             END AS "doanhThu",


                         CASE
                             WHEN COALESCE(SUM(TT."WinningPriceSum"), 0) > 0 THEN COALESCE(SUM(TT."WinningPriceSum"), 0)
                             ELSE
                                 COALESCE(SUM(W."WinningPrice"), 0)
                             END AS "WinningPriceSum",

                         (((COALESCE(SUM(TT."six45"), 0)+COALESCE(SUM(TT."six55"), 0)+COALESCE(SUM(TT."keno"), 0)+COALESCE(SUM(TT."Ticket3d"), 0)+COALESCE(SUM(TT."Ticket3dPro"), 0) )-COALESCE(SUM(TT."ReturnWining"), 0)-COALESCE(SUM(TT."CancleTicket"), 0))+COALESCE(SUM(TT."ManagerReturn"), 0)) AS "thucThu"




                     FROM tmp T
                              JOIN "SalePoint" SP ON SP."IsDeleted" IS FALSE AND SP."IsActive" IS TRUE
                              LEFT JOIN "ShiftDistribute" SD ON SD."SalePointId" = SP."SalePointId" AND SD."DistributeDate" = T."Date"::DATE
                              LEFT JOIN "User" U ON SD."UserId" = U."UserId"
                              LEFT JOIN "Transaction" TT ON T."Date" = TT."Date" AND TT."ShiftDistributeId" = SD."ShiftDistributeId" and tt."IsDeleted" = false
                              LEFT JOIN "tm" W on W."ActionBy" =U."UserId" and W."ActionDate"::Date=T."Date"::DATE and W."SalePointId"=SP."SalePointId" and W."ShiftDistributeId"=SD."ShiftDistributeId"


                     WHERE
                         p_transaction_type = 68 AND TT."TransactionTypeId" = 2 AND SP."SalePointId" = 1 OR   p_transaction_type = 68 AND TT."TransactionTypeId" = 3 AND SP."SalePointId" = 1


-- 		(SP."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND TT."TransactionTypeId" = p_transaction_type
                     GROUP BY
                         T."Date",
                         SD."UserId",
                         U."FullName",
                         SD."ShiftId",
                         SD."ShiftDistributeId",
                         SP."SalePointId"

                     ORDER BY
                         SD."ShiftId",
                         T."Date"
                     Limit 1

                 ),

                 tmp3 AS(

                     SELECT

                         LT."LotoType",
                         LT."Type",
                         LC."LotteryChannelName",
                         LT."Seri",
                         LT."IntoMoney",
                         LT."ShiftId",
                         TO_CHAR(LT."Time", 'DD/MM/YYYY HH24:MI:SS') AS Time,
                         LT."SalePointId",
                         LT."TransactionCode"

                     FROM "LotoNew" LT inner join "LotteryChannel" LC on LT."LotteryChannelId"=LC."LotteryChannelId"
-- 					LEFT JOIN "tm" W on W."ActionDate"::Date=LT."Time"::Date
                     WHERE (LT."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) and TO_CHAR(LT."Time", 'YYYY-MM')=p_month and LT."IsDelete"=true
                     order by LT."Time" DESC

                 ),

                 tmp2 AS (
                     SELECT

                         T."Date",
                         T."SalePointId",
                         SUM(COALESCE(T."TotalPrice", 0)) AS "AllTotalPrice",
                         array_to_json(ARRAY_AGG(TO_JSONB(T.*)))::TEXT AS "Data",

                         (
                             SELECT array_to_json(ARRAY_AGG(r))
                             FROM (
                                      SELECT
                                          *
                                      FROM
                                          tmp3
                                  ) r
                         )::TEXT AS "SoldLoto"
                     FROM tmp1 T
                     GROUP BY
                         T."Date",
                         T."SalePointId"
                 )
            SELECT
                T."Date",
                T."SalePointId",
                T."AllTotalPrice",
                T."Data",
                T."SoldLoto"
            FROM tmp2 T
            ORDER BY
                T."SalePointId",
                T."Date";
    END IF;


END;

$$;


ALTER FUNCTION public.crm_salepoint_get_sale_loto_in_date_v3(p_month character varying, p_transaction_type integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_vietlott_in_date(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_vietlott_in_date(p_month character varying, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "UserId" integer, "FullName" character varying, "ShiftId" integer, "ShiftDistributeId" integer, "SalePointId" integer, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month || '-01')::DATE) + INTERVAL '1 month - 1 day')))::INT;
BEGIN
    RETURN QUERY
    WITH tmp AS (
        SELECT
            (p_month || '-' || "I")::DATE AS "Date"
        FROM generate_series(1, v_total_date) AS "I"
    ),
    tmp1 AS (
        SELECT
            T."Date",
            SD."UserId",
            U."FullName",
            SD."ShiftId",
            SD."ShiftDistributeId",
            SD."SalePointId",
            COALESCE((
                SELECT TT."TotalPrice"
                FROM "Transaction" TT
                WHERE TT."Date" = T."Date"
                    AND TT."TransactionTypeId" = 2
                    AND TT."IsDeleted" IS FALSE
                    AND TT."UserId" = SD."UserId"
                    AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
                LIMIT 1
            ), 0)::NUMERIC AS "TotalPrice"
        FROM tmp T
        JOIN "ShiftDistribute" SD ON (SD."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND SD."DistributeDate" = T."Date"::DATE
        JOIN "User" U ON SD."UserId" = U."UserId"
        WHERE T."Date" <= CURRENT_DATE  -- Filter for current date and earlier
        ORDER BY 
            T."Date",
            SD."ShiftId"
    ),
    tmp2 AS (
        SELECT
            T."Date",
            T."UserId",
            U."FullName",
            NULL::INT AS "ShiftId",
            NULL::INT AS "ShiftDistributeId",
            T."SalePointId",
            T."TotalPrice"
        FROM "Transaction" T
        JOIN "User" U ON T."UserId" = U."UserId"
        WHERE T."TransactionTypeId" = 10
            AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
            AND T."IsDeleted" IS FALSE
            AND (T."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
            AND T."Date" <= CURRENT_DATE  -- Filter for current date and earlier
    ),
    tmp3 AS (
        SELECT * FROM tmp1
        UNION ALL
        SELECT * FROM tmp2
    )
    SELECT 
        T.*
    FROM tmp3 T
    ORDER BY 
        T."SalePointId",
        T."Date",
        T."ShiftId";
END;



-- DECLARE 
-- 	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
-- BEGIN
-- 	RETURN QUERY
-- 	WITH tmp AS (
-- 		SELECT
-- 			(p_month||'-'||"I")::DATE AS "Date"
-- 		FROM generate_series(1, v_total_date) AS "I"
-- 	),
-- 	tmp1 AS (
-- 		SELECT
-- 			T."Date",
-- 			SD."UserId",
-- 			U."FullName",
-- 			SD."ShiftId",
-- 			SD."ShiftDistributeId",
-- 			SD."SalePointId",
-- 			(
-- 				SELECT 
-- 					TT."TotalPrice"
-- 				FROM "Transaction" TT
-- 				WHERE TT."Date" = T."Date"
-- 					AND TT."TransactionTypeId" = 2
-- 					AND TT."IsDeleted" IS FALSE
-- 					AND TT."UserId" = SD."UserId"
-- 					AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
-- 				LIMIT 1
-- 			)::NUMERIC AS "TotalPrice"
-- 		FROM tmp T
-- 			JOIN "ShiftDistribute" SD ON (SD."SalePointId" = p_sale_point_id OR p_sale_point_id =0) AND SD."DistributeDate" = T."Date"::DATE
-- 			JOIN "User" U ON SD."UserId" = U."UserId"
-- 		ORDER BY 
-- 			T."Date",
-- 			SD."ShiftId"
-- 	),
-- 	tmp2 AS (
-- 		SELECT
-- 			T."Date",
-- 			T."UserId",
-- 			U."FullName",
-- 			NULL::INT AS "ShiftId",
-- 			NULL::INT AS "ShiftDistributeId",
-- 			T."SalePointId",
-- 			T."TotalPrice"
-- 		FROM "Transaction" T
-- 			JOIN "User" U ON T."UserId" = U."UserId"
-- 		WHERE T."TransactionTypeId" = 10
-- 			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
-- 			AND T."IsDeleted" IS FALSE
-- 			AND (T."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
			
-- 	),
-- 	tmp3 AS (
-- 		SELECT 
-- 			* 
-- 		FROM tmp1
-- 		UNION ALL
-- 		SELECT 
-- 			* 
-- 		FROM tmp2	
-- 	)
-- 	SELECT 
-- 		T.*
-- 	FROM tmp3 T
-- 	ORDER BY 
-- 		T."SalePointId",
-- 		T."Date",
-- 		T."ShiftId";
-- END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_vietlott_in_date(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_vietlott_in_date_optimized(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_vietlott_in_date_optimized(p_month character varying, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "UserId" integer, "FullName" character varying, "ShiftId" integer, "ShiftDistributeId" integer, "SalePointId" integer, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    WITH tmp AS (
    
        SELECT
            (p_month || '-' || "I")::DATE AS "Date"
        FROM generate_series(1, v_total_date) AS "I"
    ),
    tmp1 AS (
        SELECT
            T."Date",
            SD."UserId",
            U."FullName",
            SD."ShiftId",
            SD."ShiftDistributeId",
            SD."SalePointId",
            COALESCE(TT."TotalPrice", 0)::NUMERIC AS "TotalPrice"
        FROM tmp T
        JOIN "ShiftDistribute" SD ON (SD."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND SD."DistributeDate" = T."Date"
        JOIN "User" U ON SD."UserId" = U."UserId"
        LEFT JOIN "Transaction" TT ON TT."Date" = T."Date"
            AND TT."TransactionTypeId" = 2
            AND TT."IsDeleted" IS FALSE
            AND TT."UserId" = SD."UserId"
            AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
        WHERE T."Date" <= CURRENT_DATE
        ORDER BY T."Date", SD."ShiftId"
    ),
    tmp2 AS (
        SELECT
            T."Date",
            T."UserId",
            U."FullName",
            NULL::INT AS "ShiftId",
            NULL::INT AS "ShiftDistributeId",
            T."SalePointId",
            T."TotalPrice"
        FROM "Transaction" T
        JOIN "User" U ON T."UserId" = U."UserId"
        WHERE T."TransactionTypeId" = 10
            AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
            AND T."IsDeleted" IS FALSE
            AND (T."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
            AND T."Date" <= CURRENT_DATE
    ),
    tmp3 AS (
        SELECT * FROM tmp1
        UNION ALL
        SELECT * FROM tmp2
    )
    SELECT 
        T.*
    FROM tmp3 T
    ORDER BY 
        T."SalePointId",
        T."Date",
        T."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_vietlott_in_date_optimized(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_vietlott_in_date_test(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_vietlott_in_date_test(p_month character varying, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "UserId" integer, "FullName" character varying, "ShiftId" integer, "ShiftDistributeId" integer, "SalePointId" integer, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE 
    v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month || '-01')::DATE) + INTERVAL '1 month - 1 day')))::INT;
BEGIN
    RETURN QUERY
    WITH tmp AS (
        SELECT
            (p_month || '-' || "I")::DATE AS "Date"
        FROM generate_series(1, v_total_date) AS "I"
    ),
    tmp1 AS (
        SELECT
            T."Date",
            SD."UserId",
            U."FullName",
            SD."ShiftId",
            SD."ShiftDistributeId",
            SD."SalePointId",
            COALESCE((
                SELECT TT."TotalPrice"
                FROM "Transaction" TT
                WHERE TT."Date" = T."Date"
                    AND TT."TransactionTypeId" = 2
                    AND TT."IsDeleted" IS FALSE
                    AND TT."UserId" = SD."UserId"
                    AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
                LIMIT 1
            ), 0)::NUMERIC AS "TotalPrice"
        FROM tmp T
        JOIN "ShiftDistribute" SD ON (SD."SalePointId" = p_sale_point_id OR p_sale_point_id = 0) AND SD."DistributeDate" = T."Date"::DATE
        JOIN "User" U ON SD."UserId" = U."UserId"
        WHERE T."Date" <= CURRENT_DATE  -- Filter for current date and earlier
        ORDER BY 
            T."Date",
            SD."ShiftId"
    ),
    tmp2 AS (
        SELECT
            T."Date",
            T."UserId",
            U."FullName",
            NULL::INT AS "ShiftId",
            NULL::INT AS "ShiftDistributeId",
            T."SalePointId",
            T."TotalPrice"
        FROM "Transaction" T
        JOIN "User" U ON T."UserId" = U."UserId"
        WHERE T."TransactionTypeId" = 10
            AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
            AND T."IsDeleted" IS FALSE
            AND (T."SalePointId" = p_sale_point_id OR p_sale_point_id = 0)
            AND T."Date" <= CURRENT_DATE  -- Filter for current date and earlier
    ),
    tmp3 AS (
        SELECT * FROM tmp1
        UNION ALL
        SELECT * FROM tmp2
    )
    SELECT 
        T.*
    FROM tmp3 T
    ORDER BY 
        T."SalePointId",
        T."Date",
        T."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_vietlott_in_date_test(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_sale_vietlott_in_date_test1(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_sale_vietlott_in_date_test1(p_month character varying, p_sale_point_id integer DEFAULT 0) RETURNS TABLE("Date" date, "UserId" integer, "FullName" character varying, "ShiftId" integer, "ShiftDistributeId" integer, "SalePointId" integer, "TotalPrice" numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        tmp."Date"::date,
        U."UserId",
        U."FullName",
        SD."ShiftId",
        SD."ShiftDistributeId",
        SD."SalePointId",
        COALESCE(TT."TotalPrice", 0)::NUMERIC AS "TotalPrice"
    FROM generate_series(
        (p_month || '-01')::DATE,
        (date_trunc('month', (p_month || '-01')::DATE) + INTERVAL '1 month - 1 day')::DATE,
        '1 day'::interval
    ) AS tmp("Date")
    LEFT JOIN "ShiftDistribute" SD 
        ON SD."SalePointId" = COALESCE(NULLIF(p_sale_point_id, 0), SD."SalePointId")
        AND SD."DistributeDate" = tmp."Date"
    LEFT JOIN "User" U 
        ON SD."UserId" = U."UserId"
    LEFT JOIN LATERAL (
        SELECT 
            TT."TotalPrice"
        FROM "Transaction" TT
        WHERE TT."Date" = tmp."Date"
            AND TT."TransactionTypeId" = 2
            AND TT."IsDeleted" IS FALSE
            AND TT."UserId" = SD."UserId"
            AND TT."ShiftDistributeId" = SD."ShiftDistributeId"
        LIMIT 1
    ) TT ON true
    WHERE tmp."Date" <= CURRENT_DATE
    ORDER BY 
        SD."SalePointId",
        tmp."Date",
        SD."ShiftId"
    LIMIT 1000; -- Adjust the limit based on your needs

END;
$$;


ALTER FUNCTION public.crm_salepoint_get_sale_vietlott_in_date_test1(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_get_total_commision(text, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_total_commision(p_date text, p_salepoint_id bigint DEFAULT 0) RETURNS TABLE("CommissionId" integer, "User" text, "SalePointId" integer, "SalePointName" text, "Date" date, "TotalCommision" bigint, "Fee" numeric, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	--Lấy ra danh sách nhân viên được chia hoa hồng
	WITH tmp AS(
	SELECT 
		U."UserId",
		U."FullName"
	FROM "User" U 
		LEFT JOIN "UserRole" UR ON UR."UserId" = U."UserId"
	WHERE UR."UserTitleId" = 5  
	),tmp2 AS(
		SELECT 
			C."CommissionId",
			array_to_json(array_agg(json_build_object(
				'UserId',
				T."UserId",
				'UserName',
				T."FullName"
			)))::TEXT AS "Users"
		FROM tmp T 
		LEFT JOIN "Commission" C ON T."UserId" = ANY(C."ListStaff")
		LEFT JOIN "SalePoint" S ON S."SalePointId" = C."SalePointId"
		WHERE  (C."SalePointId" = p_salepoint_id OR p_salepoint_id = 0) AND date_part('month',C."Date") = date_part('month',CONCAT(p_date,'-01')::DATE)  
		GROUP BY C."CommissionId"
	)
	SELECT 
		C."CommissionId",
		T2."Users",
		C."SalePointId",
		S."SalePointName"::TEXT,
		C."Date",
		C."TotalValue",
		C."Fee",
		C."CreatedDate"
	FROM tmp T 
	LEFT JOIN "Commission" C ON T."UserId" = ANY(C."ListStaff")
	LEFT JOIN "SalePoint" S ON S."SalePointId" = C."SalePointId"
	LEFT JOIN tmp2 T2 ON T2."CommissionId" = C."CommissionId"
	WHERE  (C."SalePointId" = p_salepoint_id OR p_salepoint_id = 0) AND date_part('month',C."Date") = date_part('month',CONCAT(p_date,'-01')::DATE) AND C."IsDeleted" = FALSE
	GROUP BY
		C."CommissionId",
		C."SalePointId",
		S."SalePointName",
		C."Date",
		T2."Users"
	ORDER BY C."Date" DESC, C."CommissionId" DESC;
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_total_commision(p_date text, p_salepoint_id bigint) OWNER TO postgres;

--
-- Name: crm_salepoint_get_user_by_date_and_salepoint(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_get_user_by_date_and_salepoint(p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("ShiftDistributeId" integer, "UserId" integer, "FullName" character varying, "ShiftId" integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
		SD."ShiftDistributeId",
		SD."UserId",
		U."FullName",
		SD."ShiftId"
	FROM "ShiftDistribute" SD
		JOIN "User" U ON SD."UserId" = U."UserId"
	WHERE SD."SalePointId" = p_sale_point_id 
		AND SD."DistributeDate" = p_date :: DATE
		AND SD."IsActive" IS TRUE
	ORDER BY SD."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_salepoint_get_user_by_date_and_salepoint(p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_salepoint_insert_update_transaction(integer, character varying, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_insert_update_transaction(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_transaction_type_id integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
/*
    History:
        - TuanBui [2024-06-14 15:00]: Add new column TotalRevenue
        - TuanBui [2024-06-26 15:00]: Add new column Deposit
        - TuanBui [2024-06-28 19:00]: Update OpeningBalance
*/
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
    v_f_six45 VARCHAR := 'six45';
    v_f_six55 VARCHAR := 'six55';
    v_f_keno VARCHAR := 'keno';
    v_f_ticket3d VARCHAR := 'Ticket3d';
    v_f_ticket3dPro VARCHAR := 'Ticket3dPro';
    v_f_cancleTicket VARCHAR := 'CancleTicket';
    v_f_ReturnWining VARCHAR := 'ReturnWining';
BEGIN
    --INSERT
    IF p_action_type = 1 THEN
        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
                UPDATE "Transaction" SET
                                         "IsDeleted" = TRUE,
                                         "ModifyBy" = p_action_by,
                                         "ModifyByName" = p_action_by_name,
                                         "ModifyDate"= v_time
                WHERE "ShiftDistributeId" = (ele->>'ShiftDistributeId') :: INT
                  and "SalePointId" = (ele->>'SalePointId') :: INT
                  and "TransactionTypeId" = p_transaction_type_id;
            END LOOP;

        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
                INSERT INTO "Transaction"(
                    "TransactionTypeId",
                    "Note",
                    "Quantity",
                    "Price",
                    "TotalPrice",
                    "SalePointId",
                    "ShiftDistributeId",
                    "IsDeleted",
                    "UserId",
                    "TypeNameId",
                    "Date",
                    "ActionBy",
                    "ActionByName",
                    "ActionDate",
                    "Expense",
                    "OpeningBalance",
                    "six45",
                    six55,
                    "keno",
                    "Ticket3d",
                    "Ticket3dPro",
                    "CancleTicket",
                    "ReturnWining",
                    "ManagerReturn",
                    "EndingBalance",
                    "Refunds",
                    "WinningPriceSum",
                    "TotalRevenue",
                    "Deposit"
                )
                VALUES(
                          p_transaction_type_id,
                          (ele->>'Note')::VARCHAR,
                          COALESCE((ele->>'Quantity')::INT, 1),
                          (ele->>'Price')::NUMERIC,
                          (COALESCE((ele->>'Price')::NUMERIC,0) * COALESCE((ele->>'Quantity')::INT,1)) :: NUMERIC,
                          COALESCE((ele->>'SalePointId')::INT, (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = (ele->>'UserId')::INT)::INT),
                          (ele->>'ShiftDistributeId')::INT,
                          FALSE,
                          COALESCE((ele->>'UserId')::INT, p_action_by),
                          (ele->>'TypeNameId')::INT,
                          COALESCE((ele->>'Date')::DATE, v_time::DATE),
                          p_action_by,
                          p_action_by_name,
                          v_time,
                          (ele->>'Expense')::NUMERIC,
                          (ele->>'OpeningBalance')::NUMERIC,
-- 				(ele->>'six45')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'six45')::NUMERIC, p_transaction_type_id, v_f_six45),
-- 				(ele->>'six55')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'six55')::NUMERIC, p_transaction_type_id, v_f_six55),
-- 				(ele->>'keno')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'keno')::NUMERIC, p_transaction_type_id, v_f_keno),
-- 				(ele->>'Ticket3d')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'Ticket3d')::NUMERIC, p_transaction_type_id, v_f_ticket3d),
-- 				(ele->>'Tiket3dPro')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'Tiket3dPro')::NUMERIC, p_transaction_type_id, v_f_ticket3dPro),
-- 				(ele->>'CancleTicket')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'CancleTicket')::NUMERIC, p_transaction_type_id, v_f_cancleTicket),
-- 				(ele->>'ReturnWining')::NUMERIC,
                          fn_get_price_by_shift(v_time::DATE,(ele->>'SalePointId')::INT,(ele->>'ShiftDistributeId')::INT,(ele->>'ReturnWining')::NUMERIC, p_transaction_type_id, v_f_ReturnWining),
                          (ele->>'ManagerReturn')::NUMERIC,
                          (ele->>'EndingBalance')::NUMERIC,
                          (ele->>'Refunds')::NUMERIC,
                          (ele->>'WinningPriceSum')::NUMERIC,
                          (ele->>'doanhThu')::NUMERIC,
                          (ele->>'Deposit')::NUMERIC
                      ) RETURNING "TransactionId" INTO v_id;
            END LOOP;

        v_mess := 'Thêm thành công';

        --UPDATE
    ELSEIF p_action_type = 2 THEN
        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
                UPDATE "Transaction" SET
                                         "Note" = COALESCE((ele->>'Note')::VARCHAR, "Note"),
                                         "Quantity" = COALESCE((ele->>'Quantity')::INT, "Quantity"),
                                         "Price" =  COALESCE((ele->>'Price')::NUMERIC, "Price"),
                                         "TotalPrice" = COALESCE((COALESCE((ele->>'Price')::NUMERIC, "Price") * COALESCE((ele->>'Quantity')::INT, "Quantity")) :: NUMERIC, "TotalPrice"),
                                         "SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
                                         "ShiftDistributeId" = COALESCE((ele->>'ShiftDistributeId')::INT, "ShiftDistributeId"),
                                         "UserId" = COALESCE((ele->>'UserId')::INT, "UserId"),
                                         "TypeNameId" = COALESCE((ele->>'TypeNameId')::INT, "TypeNameId"),
                                         "Date" = COALESCE((ele->>'Date')::DATE, "Date"),
                                         "ModifyBy" = p_action_by,
                                         "ModifyByName" = p_action_by_name,
                                         "ModifyDate"= v_time,
                                         "Refunds"= COALESCE((ele->>'Refunds')::NUMERIC, "Refunds"),
                                         "WinningPriceSum"= COALESCE((ele->>'WinningPriceSum')::NUMERIC, "WinningPriceSum"),
                                         "TotalRevenue"= COALESCE((ele->>'doanhThu')::NUMERIC, "TotalRevenue"),
                                         "OpeningBalance"= COALESCE((ele->>'OpeningBalance')::NUMERIC, "OpeningBalance")

                WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
            END LOOP;

        v_id := 1;
        v_mess := 'Cập nhật thành công';

        --DELETE
    ELSEIF p_action_type = 3 THEN

        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
                UPDATE "Transaction" SET
                                         "IsDeleted" = TRUE,
                                         "ModifyBy" = p_action_by,
                                         "ModifyByName" = p_action_by_name,
                                         "ModifyDate"= v_time
                WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
            END LOOP;

        v_id := 1;
        v_mess := 'Xóa thành công';

    END IF;

    RETURN QUERY
        SELECT v_id, v_mess;

EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
            SELECT v_id, v_mess;
    END;

END;






    -- Bản cũ

-- DECLARE
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	ele JSON;
-- 	v_time TIMESTAMP := NOW();
-- BEGIN
-- 	--INSERT
-- 	IF p_action_type = 1 THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
-- 			UPDATE "Transaction" SET
-- 				"IsDeleted" = TRUE,
-- 				"ModifyBy" = p_action_by,
-- 				"ModifyByName" = p_action_by_name,
-- 				"ModifyDate"= v_time
-- 			WHERE "ShiftDistributeId" = (ele->>'ShiftDistributeId') :: INT
-- 					and "SalePointId" = (ele->>'SalePointId') :: INT
-- 					and "TransactionTypeId" = p_transaction_type_id;
-- 		END LOOP;

-- 		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
-- 			INSERT INTO "Transaction"(
-- 				"TransactionTypeId",
-- 				"Note",
-- 				"Quantity",
-- 				"Price",
-- 				"TotalPrice",
-- 				"SalePointId",
-- 				"ShiftDistributeId",
-- 				"IsDeleted",
-- 				"UserId",
-- 				"TypeNameId",
-- 				"Date",
-- 				"ActionBy",
-- 				"ActionByName",
-- 				"ActionDate",
-- 				"Expense"
-- 			)
-- 			VALUES(
-- 				p_transaction_type_id,
-- 				(ele->>'Note')::VARCHAR,
-- 				COALESCE((ele->>'Quantity')::INT, 1),
-- 				(ele->>'Price')::NUMERIC,
-- 				(COALESCE((ele->>'Price')::NUMERIC,0) * COALESCE((ele->>'Quantity')::INT,1)) :: NUMERIC,
-- 				COALESCE((ele->>'SalePointId')::INT, (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = (ele->>'UserId')::INT)::INT),
-- 				(ele->>'ShiftDistributeId')::INT,
-- 				FALSE,
-- 				COALESCE((ele->>'UserId')::INT, p_action_by),
-- 				(ele->>'TypeNameId')::INT,
-- 				COALESCE((ele->>'Date')::DATE, v_time::DATE),
-- 				p_action_by,
-- 				p_action_by_name,
-- 				v_time,
-- 				(ele->>'Expense')::NUMERIC
-- 			) RETURNING "TransactionId" INTO v_id;
-- 		END LOOP;

-- 		v_mess := 'Thêm thành công';

-- 	--UPDATE
-- 	ELSEIF p_action_type = 2 THEN
-- 		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
-- 			UPDATE "Transaction" SET
-- 				"Note" = COALESCE((ele->>'Note')::VARCHAR, "Note"),
-- 				"Quantity" = COALESCE((ele->>'Quantity')::INT, "Quantity"),
-- 				"Price" =  COALESCE((ele->>'Price')::NUMERIC, "Price"),
-- 				"TotalPrice" = COALESCE((COALESCE((ele->>'Price')::NUMERIC, "Price") * COALESCE((ele->>'Quantity')::INT, "Quantity")) :: NUMERIC, "TotalPrice"),
-- 				"SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
-- 				"ShiftDistributeId" = COALESCE((ele->>'ShiftDistributeId')::INT, "ShiftDistributeId"),
-- 				"UserId" = COALESCE((ele->>'UserId')::INT, "UserId"),
-- 				"TypeNameId" = COALESCE((ele->>'TypeNameId')::INT, "TypeNameId"),
-- 				"Date" = COALESCE((ele->>'Date')::DATE, "Date"),
-- 				"ModifyBy" = p_action_by,
-- 				"ModifyByName" = p_action_by_name,
-- 				"ModifyDate"= v_time

-- 			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
-- 		END LOOP;

-- 		v_id := 1;
-- 		v_mess := 'Cập nhật thành công';

-- 	--DELETE
-- 	ELSEIF p_action_type = 3 THEN

-- 		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
-- 			UPDATE "Transaction" SET
-- 				"IsDeleted" = TRUE,
-- 				"ModifyBy" = p_action_by,
-- 				"ModifyByName" = p_action_by_name,
-- 				"ModifyDate"= v_time
-- 			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
-- 		END LOOP;

-- 		v_id := 1;
-- 		v_mess := 'Xóa thành công';

-- 	END IF;

-- 	RETURN QUERY
-- 	SELECT v_id, v_mess;

-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
-- 		RETURN QUERY
-- 		SELECT v_id, v_mess;
-- 	END;

-- END;
$$;


ALTER FUNCTION public.crm_salepoint_insert_update_transaction(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_transaction_type_id integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_insert_update_transaction_bk(integer, character varying, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_insert_update_transaction_bk(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_transaction_type_id integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			INSERT INTO "Transaction"(
				"TransactionTypeId",
				"Note",
				"Quantity",
				"Price",
				"TotalPrice",
				"SalePointId",
				"ShiftDistributeId",
				"IsDeleted",
				"UserId",
				"TypeNameId",
				"Date",
				"ActionBy",
				"ActionByName",
				"ActionDate"
			)
			VALUES(
				p_transaction_type_id,
				(ele->>'Note')::VARCHAR,
				COALESCE((ele->>'Quantity')::INT, 1),
				(ele->>'Price')::NUMERIC,
				(COALESCE((ele->>'Price')::NUMERIC,0) * COALESCE((ele->>'Quantity')::INT,1)) :: NUMERIC,
				COALESCE((ele->>'SalePointId')::INT, (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = (ele->>'UserId')::INT)::INT),
				(ele->>'ShiftDistributeId')::INT,
				FALSE,
				COALESCE((ele->>'UserId')::INT, p_action_by),
				(ele->>'TypeNameId')::INT,
				COALESCE((ele->>'Date')::DATE, v_time::DATE),
				p_action_by,
				p_action_by_name,
				v_time
			) RETURNING "TransactionId" INTO v_id;
		END LOOP;
		
		v_mess := 'Thêm thành công';
		
	--UPDATE
	ELSEIF p_action_type = 2 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Transaction" SET 
				"Note" = COALESCE((ele->>'Note')::VARCHAR, "Note"),
				"Quantity" = COALESCE((ele->>'Quantity')::INT, "Quantity"),
				"Price" =  COALESCE((ele->>'Price')::NUMERIC, "Price"),
				"TotalPrice" = COALESCE((COALESCE((ele->>'Price')::NUMERIC, "Price") * COALESCE((ele->>'Quantity')::INT, "Quantity")) :: NUMERIC, "TotalPrice"),
				"SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
				"ShiftDistributeId" = COALESCE((ele->>'ShiftDistributeId')::INT, "ShiftDistributeId"),
				"UserId" = COALESCE((ele->>'UserId')::INT, "UserId"),
				"TypeNameId" = COALESCE((ele->>'TypeNameId')::INT, "TypeNameId"),
				"Date" = COALESCE((ele->>'Date')::DATE, "Date"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate"= v_time
			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Transaction" SET 
				"IsDeleted" = TRUE,
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate"= v_time
			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xóa thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_insert_update_transaction_bk(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_transaction_type_id integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_commission(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_commission(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();

BEGIN
	-- INSERT
	IF p_action_type = 1 THEN
		ele := p_data::JSON;
		if(select sum("Tax")+ Sum("Commission") from "ManagerBorrow" where "UserId"=p_action_by)::NUMERIC < (ele->>'Commission')::NUMERIC then
		v_id := -1;
		v_mess := 'HHĐST bạn đã nhập lớn hơn số tiền trong yêu cầu nợ riêng';
		
		else 
		
		INSERT INTO "Commission"(
			"SalePointId",
			"UserId",
			"ListStaff",
			"TotalValue",
			"Date",
			"CreatedBy",
			"CreatedByName",
			"CreatedDate",
			"IsDeleted",
			"Fee"
		)
		VALUES(
			(ele->>'SalePointId')::INT,
			p_action_by,
			translate((ele->>'ListStaff')::TEXT, '[]','{}')::INT[],
			(ele->>'Commission')::NUMERIC,
			(ele->>'Date')::DATE,
			p_action_by,
			p_action_by_name,
			v_time,
			FALSE,
			COALESCE((ele->>'Fee')::NUMERIC, 0)
		);
	
		v_id := 1;
		v_mess := 'Thêm thành công';
		ENd if;
	-- UPDATE
	ELSEIF p_action_type = 2 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Commission" 
			SET 
				"SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
				"UserId" = COALESCE(p_action_by, "UserId"),
				"ListStaff" = COALESCE(translate((ele->>'ListStaff')::TEXT, '[]','{}')::INT[], "ListStaff"),
				"TotalValue" = COALESCE((ele->>'TotalValue')::NUMERIC, "TotalValue"),
				"Date" = COALESCE((ele->>'Date')::DATE, "Date"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = v_time
			WHERE "CommissionId" = (ele ->> 'CommissionId') :: INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	-- DELETE
	ELSE 
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Commission" 
			SET 
				"IsDeleted" = TRUE,
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = v_time
			WHERE "CommissionId" = (ele ->> 'CommissionId') :: INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xoá thành công';
		
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_commission(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_cornfirm_item(integer, character varying, integer, text, integer, integer, integer, text, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_cornfirm_item(p_action_by integer, p_action_by_name character varying, p_type_action_id integer, p_data text, p_confirm_log_id integer DEFAULT 0, p_confirm_type integer DEFAULT 1, p_confirm_for integer DEFAULT 1, p_data_info text DEFAULT NULL::text, p_guest_id integer DEFAULT NULL::integer, p_time timestamp without time zone DEFAULT NULL::timestamp without time zone) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_cur_remain INT := 0; 
	v_check INT := 0;
	v_item_price INT;
	v_data TEXT;
	v_data_info TEXT;
	v_json_info JSON;
	v_change INT:= 0;
	v_confirm_for INT;
	v_type_action_id INT;
	v_guest_id INT;
	ele JSON;
BEGIN
	--TH1. Xử lý trạng thái dùng
	IF p_type_action_id = 3 AND p_confirm_for <> 3 THEN
		--1. ITEM
		IF COALESCE(p_confirm_for,1) = 1 THEN
			SELECT f."Id", f."Id",f."Message" 
			INTO v_check,v_id, v_mess 
				FROM crm_salepoint_update_item(p_action_by, p_action_by_name,p_type_action_id, p_data) f;
		--2. GUEST
		ELSEIF p_confirm_for = 2 THEN
			SELECT f."Id", f."Id",f."Message" 
			INTO v_check,v_id, v_mess 
				FROM crm_salepoint_update_guest_action(p_action_by, p_action_by_name, p_data) f;
		ELSE 
			v_id := -1;
			v_mess := 'NO.1: Trạng thái mới';
		END IF;
	
	--TH2. NOT EXISTS confirmLogId -> CREATE CONFIRM 
	ELSEIF COALESCE(p_confirm_log_id, 0) = 0 THEN
		--0. FULL
		INSERT INTO "ConfirmLog" (
			"Data",
			"TypeActionId",
			"ActionBy",
			"ActionByName",
			"ConfirmStatusId",
			"ConfirmFor",
			"DataActionInfo",
			"ActionDate",
			"GuestId"
		) VALUES (
			p_data,
			p_type_action_id,
			p_action_by,
			p_action_by_name,
			COALESCE(p_confirm_type, 1),
			COALESCE(p_confirm_for, 1),
			COALESCE(p_data_info, NULL),
			COALESCE(p_time, NOW()),
			COALESCE(p_guest_id, NULL)
		) 
		RETURNING "ConfirmLogId" INTO v_id;
		
		v_mess := 'Tạo mới thành công';
		
	--TH3. confirm susscess
	ELSEIF p_confirm_type = 2 THEN
		--0. GET Data
		SELECT 
			IL."Data", 
			IL."DataActionInfo",
			IL."ConfirmStatusId",
			IL."ConfirmFor",
			IL."TypeActionId",
			IL."GuestId"
		INTO 
			v_data,
			v_data_info, 
			v_change,
			v_confirm_for,
			v_type_action_id,
			v_guest_id
		FROM "ConfirmLog" IL 
		WHERE IL."ConfirmLogId" = COALESCE(p_confirm_log_id,0);
				
		--EXEC
		IF v_change = 1 THEN
			IF COALESCE(v_confirm_for, 1) = 1 THEN
			
			--1. ITEM
				SELECT f."Id",f."Message" ,f."Id"
				INTO v_check, v_mess ,v_id
				FROM crm_salepoint_update_item(p_action_by, p_action_by_name,v_type_action_id, v_data) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				
			ELSEIF v_confirm_for = 2 THEN
			
			--2. GUEST 
				SELECT f."Id",f."Message" ,f."Id"
				INTO v_check, v_mess ,v_id
				FROM crm_salepoint_update_guest_action(p_action_by, p_action_by_name, v_data) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				
			ELSEIF v_confirm_for = 3 THEN
			
			--3. LOTTERY 
				v_json_info := v_data_info :: JSON;
				IF COALESCE((v_json_info ->> 'ShiftDistributeId'):: INT,0) = 0
					OR COALESCE((v_json_info ->> 'UserRoleId'):: INT,0) = 0
				THEN 
				
					RAISE 'Không đủ thông tin để cập nhật';
					
				ELSE
				
					SELECT f."Id", f."Message",	f."Id"
					INTO v_check, v_mess,	v_id
					FROM crm_activity_sell_lottery_v2((v_json_info ->> 'ShiftDistributeId'):: INT, (v_json_info ->> 'UserRoleId'):: INT, p_action_by, p_action_by_name, v_data,COALESCE((v_json_info ->> 'GuestId'):: INT)) f;
					
					IF v_id <= 0 THEN
						RAISE '%', v_mess;
					END IF;
					
				END IF;
			
			--4. TẠO KHÁCH NỢ
			ELSEIF v_confirm_for = 4 THEN
			
				-- Tạo khách
				SELECT f."Id", f."Message"
				INTO v_id, v_mess
				FROM crm_salepoint_create_or_update_guest(p_action_by, p_action_by_name, 1, v_data_info::TEXT) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				

				-- Cập nhật lại data confirm
				v_data_info := (v_data_info::JSONB || ('{"GuestId": '||v_id||'}')::JSONB)::TEXT;
				
				-- Thêm dòng mới vào để confirm 
				SELECT f."Id", f."Message"
				INTO v_id, v_mess
				FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 1,	v_data::TEXT, NULL, NULL, 3, v_data_info::TEXT) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				

				-- Confirm dòng mới 
				SELECT f."Id", f."Message",	f."Id"
				INTO v_check, v_mess,	v_id
				FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 1, NULL, v_id, 2, 3) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
			
			ELSE
				v_id := -1;
				v_mess := 'NO.2: Trạng thái mới';
			END IF;
			
		ELSE
		
			v_id := -1;
			v_mess := 'Yêu cầu đã được xác nhận trước đó!';
			v_check := 0;
			
		END IF;
		
		--CHECK EXEC
		IF v_check > 0 THEN
		
				--0. FULL
				UPDATE "ConfirmLog"
				SET "ConfirmStatusId" = COALESCE(p_confirm_type, "ConfirmStatusId"),
						"ConfirmByName" = p_action_by_name,
						"ConfirmBy" = p_action_by,
						"ConfirmDate" = NOW()
				WHERE "ConfirmLogId" = COALESCE(p_confirm_log_id, 0);
				
		END IF;
		
	ELSEIF p_confirm_type = 3 THEN
	
	--TH4. cancel request
		--0. FULL
		SELECT IL."ConfirmStatusId" INTO v_change
		FROM "ConfirmLog" IL 
		WHERE IL."ConfirmLogId" = p_confirm_log_id;
			
		IF v_change = 1 THEN

			UPDATE "ConfirmLog"
			SET "ConfirmStatusId"= p_confirm_type,
					"ConfirmByName"= p_action_by_name,
					"ConfirmBy" = p_action_by,
					"ConfirmDate" = NOW()
			WHERE "ConfirmLogId" = COALESCE(p_confirm_log_id, 0);		
			
			v_id := 1;
			v_mess := 'Cập nhật thành công';
			
		ELSE
		
			v_id := -1;
			v_mess := 'Yêu cầu đã được xác nhận trước đó!';
			
		END IF;
	ELSE
			v_id := -1;
			v_mess := 'Dữ liệu chưa đúng định dạng';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_cornfirm_item(p_action_by integer, p_action_by_name character varying, p_type_action_id integer, p_data text, p_confirm_log_id integer, p_confirm_type integer, p_confirm_for integer, p_data_info text, p_guest_id integer, p_time timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_salepoint_update_cornfirm_item_v2(integer, character varying, integer, text, integer, integer, integer, text, integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_cornfirm_item_v2(p_action_by integer, p_action_by_name character varying, p_type_action_id integer, p_data text, p_confirm_log_id integer DEFAULT 0, p_confirm_type integer DEFAULT 1, p_confirm_for integer DEFAULT 1, p_data_info text DEFAULT NULL::text, p_guest_id integer DEFAULT NULL::integer, p_time timestamp without time zone DEFAULT NULL::timestamp without time zone, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_cur_remain INT := 0; 
	v_check INT := 0;
	v_item_price INT;
	v_data TEXT;
	v_data_info TEXT;
	v_json_info JSON;
	v_change INT:= 0;
	v_confirm_for INT;
	v_type_action_id INT;
	v_guest_id INT;
	ele JSON;
	v_array INT[];
BEGIN

	--TH1. Xử lý trạng thái dùng
	IF p_type_action_id = 3 AND p_confirm_for <> 3 THEN

		--1. ITEM
		IF COALESCE(p_confirm_for,1) = 1 THEN

			SELECT f."Id", f."Id",f."Message" 
			INTO v_check,v_id, v_mess 
				FROM crm_salepoint_update_item(p_action_by, p_action_by_name,p_type_action_id, p_data) f;
		--2. GUEST
		ELSEIF p_confirm_for = 2 THEN

			SELECT f."Id", f."Id",f."Message" 
			INTO v_check,v_id, v_mess 
				FROM crm_salepoint_update_guest_action_v2(p_action_by, p_action_by_name, p_data) f;
		ELSE 
			v_id := -1;
			v_mess := 'NO.1: Trạng thái mới';
		END IF;
	
	--TH2. NOT EXISTS confirmLogId -> CREATE CONFIRM 
	ELSEIF COALESCE(p_confirm_log_id, 0) = 0 THEN
		
		--Tạo giỏ hàng nếu là tương tác từ khách hàng
		IF p_confirm_for = 2 OR p_confirm_for = 3 THEN 
			IF p_order_id IS NULL THEN
				INSERT INTO "HistoryOfOrder" (
					"SalePointId",
					"CreatedBy",
					"CreatedByName",
					"CreatedDate",
					"IsDeleted",
					"ShiftDistributeId"
				)
				VALUES (
					((p_data_info::JSON)->>'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE,
					((p_data_info::JSON)->>'ShiftDistributeId')::INT
				) RETURNING "HistoryOfOrderId" INTO p_order_id;
			END IF;

			--Lấy danh sách id bán hàng
			SELECT "ConfirmLogIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
			IF v_array IS NULL THEN 
				v_array := '{}'::INT[];
			END IF;
		
		END IF;
	
		--0. FULL
		INSERT INTO "ConfirmLog" (
			"Data",
			"TypeActionId",
			"ActionBy",
			"ActionByName",
			"ConfirmStatusId",
			"ConfirmFor",
			"DataActionInfo",
			"ActionDate",
			"GuestId",
			"HistoryOfOrderId"
		) VALUES (
			p_data,
			p_type_action_id,
			p_action_by,
			p_action_by_name,
			COALESCE(p_confirm_type, 1),
			COALESCE(p_confirm_for, 1),
			COALESCE(p_data_info, NULL),
			COALESCE(p_time, NOW()),
			COALESCE(p_guest_id, NULL),
			p_order_id
		) 
		RETURNING "ConfirmLogId" INTO v_id;
		
		v_array := array_append(v_array, v_id);
		
		UPDATE "HistoryOfOrder" 
		SET 
			"ConfirmLogIds" = v_array
		WHERE "HistoryOfOrderId" = p_order_id;
		
		v_mess := 'Tạo mới thành công';
		
	--TH3. confirm susscess
	ELSEIF p_confirm_type = 2 THEN
		--0. GET Data
		SELECT 
			IL."Data", 
			IL."DataActionInfo",
			IL."ConfirmStatusId",
			IL."ConfirmFor",
			IL."TypeActionId",
			IL."GuestId",
			IL."HistoryOfOrderId"
		INTO 
			v_data,
			v_data_info, 
			v_change,
			v_confirm_for,
			v_type_action_id,
			v_guest_id,
			p_order_id
		FROM "ConfirmLog" IL 
		WHERE IL."ConfirmLogId" = COALESCE(p_confirm_log_id,0);
				
		--EXEC
		IF v_change = 1 THEN
			IF COALESCE(v_confirm_for, 1) = 1 THEN
			
			--1. ITEM
				SELECT f."Id",f."Message" ,f."Id"
				INTO v_check, v_mess ,v_id
				FROM crm_salepoint_update_item(p_action_by, p_action_by_name,v_type_action_id, v_data) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				
			ELSEIF v_confirm_for = 2 THEN
			
			--2. GUEST 
				SELECT f."Id",f."Message" ,f."Id"
				INTO v_check, v_mess ,v_id
				FROM crm_salepoint_update_guest_action_v2(p_action_by, p_action_by_name, v_data, NULL, p_order_id,p_month) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				
			ELSEIF v_confirm_for = 3 THEN
			
			--3. LOTTERY 
				v_json_info := v_data_info :: JSON;
				IF COALESCE((v_json_info ->> 'ShiftDistributeId'):: INT,0) = 0
					OR COALESCE((v_json_info ->> 'UserRoleId'):: INT,0) = 0
				THEN 
				
					RAISE 'Không đủ thông tin để cập nhật';
					
				ELSE
				
					SELECT f."Id", f."Message",	f."Id"
					INTO v_check, v_mess,	v_id
					FROM crm_activity_sell_lottery_v4((v_json_info ->> 'ShiftDistributeId'):: INT, (v_json_info ->> 'UserRoleId'):: INT, p_action_by, p_action_by_name, v_data,COALESCE((v_json_info ->> 'GuestId'):: INT), p_order_id) f;
					
					IF v_id <= 0 THEN
						RAISE '%', v_mess;
					END IF;
					
				END IF;
			
			--4. TẠO KHÁCH NỢ
			ELSEIF v_confirm_for = 4 THEN
			
				-- Tạo khách
				SELECT f."Id", f."Message"
				INTO v_id, v_mess
				FROM crm_salepoint_create_or_update_guest(p_action_by, p_action_by_name, 1, v_data_info::TEXT) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				

				-- Cập nhật lại data confirm
				v_data_info := (v_data_info::JSONB || ('{"GuestId": '||v_id||'}')::JSONB)::TEXT;
				
				-- Thêm dòng mới vào để confirm 
				SELECT f."Id", f."Message"
				INTO v_id, v_mess
				FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 1,	v_data::TEXT, NULL, NULL, 3, v_data_info::TEXT) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				

				-- Confirm dòng mới 
				SELECT f."Id", f."Message",	f."Id"
				INTO v_check, v_mess,	v_id
				FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 1, NULL, v_id, 2, 3) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
			
			ELSE
				v_id := -1;
				v_mess := 'NO.2: Trạng thái mới';
			END IF;
			
		ELSE
		
			v_id := -1;
			v_mess := 'Yêu cầu đã được xác nhận trước đó!';
			v_check := 0;
			
		END IF;
		
		--CHECK EXEC
		IF v_check > 0 THEN
		
				--0. FULL
				UPDATE "ConfirmLog"
				SET "ConfirmStatusId" = COALESCE(p_confirm_type, "ConfirmStatusId"),
						"ConfirmByName" = p_action_by_name,
						"ConfirmBy" = p_action_by,
						"ConfirmDate" = NOW()
				WHERE "ConfirmLogId" = COALESCE(p_confirm_log_id, 0);
				
		END IF;
		
	ELSEIF p_confirm_type = 3 THEN 
	
	--TH4. cancel request
		--0. FULL
		SELECT IL."ConfirmStatusId" INTO v_change
		FROM "ConfirmLog" IL 
		WHERE IL."ConfirmLogId" = p_confirm_log_id;
			
		IF v_change = 1 THEN

			UPDATE "ConfirmLog"
			SET "ConfirmStatusId"= p_confirm_type,
					"ConfirmByName"= p_action_by_name,
					"ConfirmBy" = p_action_by,
					"ConfirmDate" = NOW()
			WHERE "ConfirmLogId" = COALESCE(p_confirm_log_id, 0);		
			
			v_id := 1;
			v_mess := 'Cập nhật thành công';
			
		ELSE
		
			v_id := -1;
			v_mess := 'Yêu cầu đã được xác nhận trước đó!';
			
		END IF;
	ELSE
			v_id := -1;
			v_mess := 'Dữ liệu chưa đúng định dạng';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_cornfirm_item_v2(p_action_by integer, p_action_by_name character varying, p_type_action_id integer, p_data text, p_confirm_log_id integer, p_confirm_type integer, p_confirm_for integer, p_data_info text, p_guest_id integer, p_time timestamp without time zone, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_update_cornfirm_item_v3(integer, character varying, integer, text, integer, integer, integer, text, integer, timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_cornfirm_item_v3(p_action_by integer, p_action_by_name character varying, p_type_action_id integer, p_data text, p_confirm_log_id integer DEFAULT 0, p_confirm_type integer DEFAULT 1, p_confirm_for integer DEFAULT 1, p_data_info text DEFAULT NULL::text, p_guest_id integer DEFAULT NULL::integer, p_time timestamp without time zone DEFAULT NULL::timestamp without time zone, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_cur_remain INT := 0; 
	v_check INT := 0;
	v_item_price INT;
	v_data TEXT;
	v_data_info TEXT;
	v_json_info JSON;
	v_change INT:= 0;
	v_confirm_for INT;
	v_type_action_id INT;
	v_guest_id INT;
	ele JSON;
	v_array INT[];
BEGIN

	--TH1. Xử lý trạng thái dùng
	IF p_type_action_id = 3 AND p_confirm_for <> 3 THEN
		--1. ITEM
		IF COALESCE(p_confirm_for,1) = 1 THEN
			SELECT f."Id", f."Id",f."Message" 
			INTO v_check,v_id, v_mess 
				FROM crm_salepoint_update_item_v2(p_action_by, p_action_by_name,p_type_action_id, p_data) f;
		--2. GUEST
		ELSEIF p_confirm_for = 2 THEN
			SELECT f."Id", f."Id",f."Message" 
			INTO v_check,v_id, v_mess 
				FROM crm_salepoint_update_guest_action_v2(p_action_by, p_action_by_name, p_data) f;
		ELSE 
			v_id := -1;
			v_mess := 'NO.1: Trạng thái mới';
		END IF;
	
	--TH2. NOT EXISTS confirmLogId -> CREATE CONFIRM 
	ELSEIF COALESCE(p_confirm_log_id, 0) = 0 THEN
		
		--Tạo giỏ hàng nếu là tương tác từ khách hàng
		IF p_confirm_for = 2 OR p_confirm_for = 3 THEN 
			IF p_order_id IS NULL THEN
				INSERT INTO "HistoryOfOrder" (
					"SalePointId",
					"CreatedBy",
					"CreatedByName",
					"CreatedDate",
					"IsDeleted",
					"ShiftDistributeId"
				)
				VALUES (
					((p_data_info::JSON)->>'SalePointId')::INT,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE,
					((p_data_info::JSON)->>'ShiftDistributeId')::INT
				) RETURNING "HistoryOfOrderId" INTO p_order_id;
			END IF;

			--Lấy danh sách id bán hàng
			SELECT "ConfirmLogIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
			IF v_array IS NULL THEN 
				v_array := '{}'::INT[];
			END IF;
		
		END IF;
	
		--0. FULL
		INSERT INTO "ConfirmLog" (
			"Data",
			"TypeActionId",
			"ActionBy",
			"ActionByName",
			"ConfirmStatusId",
			"ConfirmFor",
			"DataActionInfo",
			"ActionDate",
			"GuestId",
			"HistoryOfOrderId"
		) VALUES (
			p_data,
			p_type_action_id,
			p_action_by,
			p_action_by_name,
			COALESCE(p_confirm_type, 1),
			COALESCE(p_confirm_for, 1),
			COALESCE(p_data_info, NULL),
			COALESCE(p_time, NOW()),
			COALESCE(p_guest_id, NULL),
			p_order_id
		) 
		RETURNING "ConfirmLogId" INTO v_id;
		
		v_array := array_append(v_array, v_id);
		
		UPDATE "HistoryOfOrder" 
		SET 
			"ConfirmLogIds" = v_array
		WHERE "HistoryOfOrderId" = p_order_id;
		
		v_mess := 'Tạo mới thành công';
		
	--TH3. confirm susscess
	ELSEIF p_confirm_type = 2 THEN
		--0. GET Data
		SELECT 
			IL."Data", 
			IL."DataActionInfo",
			IL."ConfirmStatusId",
			IL."ConfirmFor",
			IL."TypeActionId",
			IL."GuestId",
			IL."HistoryOfOrderId"
		INTO 
			v_data,
			v_data_info, 
			v_change,
			v_confirm_for,
			v_type_action_id,
			v_guest_id,
			p_order_id
		FROM "ConfirmLog" IL 
		WHERE IL."ConfirmLogId" = COALESCE(p_confirm_log_id,0);
				
		--EXEC
		IF v_change = 1 THEN
			IF COALESCE(v_confirm_for, 1) = 1 THEN
		
			--1. ITEM
				SELECT f."Id",f."Message" ,f."Id"
				INTO v_check, v_mess ,v_id
				FROM crm_salepoint_update_item_v2(p_action_by, p_action_by_name,v_type_action_id, v_data) f;
					RAISE NOTICE 'vailoz,%',1;
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				
			ELSEIF v_confirm_for = 2 THEN
			
			--2. GUEST 
				SELECT f."Id",f."Message" ,f."Id"
				INTO v_check, v_mess ,v_id
				FROM crm_salepoint_update_guest_action_v2(p_action_by, p_action_by_name, v_data, NULL, p_order_id) f;
			
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				
			ELSEIF v_confirm_for = 3 THEN
			
			--3. LOTTERY 
				v_json_info := v_data_info :: JSON;
				IF COALESCE((v_json_info ->> 'ShiftDistributeId'):: INT,0) = 0
					OR COALESCE((v_json_info ->> 'UserRoleId'):: INT,0) = 0
				THEN 
				
					RAISE 'Không đủ thông tin để cập nhật';
					
				ELSE
				
					SELECT f."Id", f."Message",	f."Id"
					INTO v_check, v_mess,	v_id
					FROM crm_activity_sell_lottery_v3((v_json_info ->> 'ShiftDistributeId'):: INT, (v_json_info ->> 'UserRoleId'):: INT, p_action_by, p_action_by_name, v_data,COALESCE((v_json_info ->> 'GuestId'):: INT), p_order_id) f;
					
					IF v_id <= 0 THEN
						RAISE '%', v_mess;
					END IF;
					
				END IF;
			
			--4. TẠO KHÁCH NỢ
			ELSEIF v_confirm_for = 4 THEN
			
				-- Tạo khách
				SELECT f."Id", f."Message"
				INTO v_id, v_mess
				FROM crm_salepoint_create_or_update_guest(p_action_by, p_action_by_name, 1, v_data_info::TEXT) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				

				-- Cập nhật lại data confirm
				v_data_info := (v_data_info::JSONB || ('{"GuestId": '||v_id||'}')::JSONB)::TEXT;
				
				-- Thêm dòng mới vào để confirm 
				SELECT f."Id", f."Message"
				INTO v_id, v_mess
				FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 1,	v_data::TEXT, NULL, NULL, 3, v_data_info::TEXT) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
				

				-- Confirm dòng mới 
				SELECT f."Id", f."Message",	f."Id"
				INTO v_check, v_mess,	v_id
				FROM crm_salepoint_update_cornfirm_item(p_action_by, p_action_by_name, 1, NULL, v_id, 2, 3) f;
				
				IF v_id <= 0 THEN
					RAISE '%', v_mess;
				END IF;
			
			ELSE
				v_id := -1;
				v_mess := 'NO.2: Trạng thái mới';
			END IF;
			
		ELSE
		
			v_id := -1;
			v_mess := 'Yêu cầu đã được xác nhận trước đó!';
			v_check := 0;
			
		END IF;
		
		--CHECK EXEC
		IF v_check > 0 THEN
		
				--0. FULL
				UPDATE "ConfirmLog"
				SET "ConfirmStatusId" = COALESCE(p_confirm_type, "ConfirmStatusId"),
						"ConfirmByName" = p_action_by_name,
						"ConfirmBy" = p_action_by,
						"ConfirmDate" = NOW()
				WHERE "ConfirmLogId" = COALESCE(p_confirm_log_id, 0);
				
		END IF;
		
	ELSEIF p_confirm_type = 3 THEN
	
	--TH4. cancel request
		--0. FULL
		SELECT IL."ConfirmStatusId" INTO v_change
		FROM "ConfirmLog" IL 
		WHERE IL."ConfirmLogId" = p_confirm_log_id;
			
		IF v_change = 1 THEN

			UPDATE "ConfirmLog"
			SET "ConfirmStatusId"= p_confirm_type,
					"ConfirmByName"= p_action_by_name,
					"ConfirmBy" = p_action_by,
					"ConfirmDate" = NOW()
			WHERE "ConfirmLogId" = COALESCE(p_confirm_log_id, 0);		
			
			v_id := 1;
			v_mess := 'Cập nhật thành công';
			
		ELSE
		
			v_id := -1;
			v_mess := 'Yêu cầu đã được xác nhận trước đó!';
			
		END IF;
	ELSE
			v_id := -1;
			v_mess := 'Dữ liệu chưa đúng định dạng';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_cornfirm_item_v3(p_action_by integer, p_action_by_name character varying, p_type_action_id integer, p_data text, p_confirm_log_id integer, p_confirm_type integer, p_confirm_for integer, p_data_info text, p_guest_id integer, p_time timestamp without time zone, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_update_guest_action(integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_guest_action(p_action_by integer, p_action_by_name character varying, p_data text, p_guest_action_type_id integer DEFAULT 2) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$DECLARE
	v_id INT;
	v_mess TEXT;
	v_phone TEXT;
	v_lotteryID TEXT;
	v_ScratchId TEXT;
	ele JSON;
BEGIN
	
	-- THÊM
	IF p_action_type = 1 THEN 
		ele := p_data::JSON;
		-- Kiểm tra SĐT
		v_phone := fn_phoneconvert_11_to_10(ele ->> 'Phone');
		IF LENGTH(v_phone) <> 10 THEN
			RAISE 'Số điện thoại không đúng cú pháp';
		END IF;
		-- Kiểm tra xem đã có số điện thoại và loại khách này chưa
		IF NOT EXISTS(SELECT 1 FROM "Guest" G WHERE fn_phoneconvert_11_to_10(G."Phone") = v_phone AND G."SalePointId" = (ele ->> 'SalePointId')::INT) THEN
			IF (
				SELECT COUNT(*) < 2  
				FROM "LotteryPrice" L 
				WHERE (L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) 
					OR (L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT)
			) AND (ele->>'WholesalePriceId')::INT <> (ele->>'ScratchPriceId')::INT THEN
				IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'WholesalePriceId')::VARCHAR),
						(ele->>'WholesalePriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'WholesalePriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_lotteryID;
				END IF;
				IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'ScratchPriceId')::VARCHAR),
						(ele->>'ScratchPriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'ScratchPriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_ScratchId;
				END IF;
				INSERT INTO "Guest"(
					"FullName",
					"Phone",
					"SalePointId",
					"WholesalePriceId",
					"ScratchPriceId",
					"CreatedBy",
					 "CreatedByName"
				)
				VALUES (
					(ele->>'FullName')::VARCHAR,
					v_phone,
					(ele->>'SalePointId')::INT,
					v_lotteryID::INT,
					v_ScratchId::INT,
					p_action_by,
					p_action_by_name
				) RETURNING "GuestId" INTO v_id;
			ELSE
				INSERT INTO "Guest"(
					"FullName",
					"Phone",
					"SalePointId",
					"WholesalePriceId",
					"ScratchPriceId",
					"CreatedBy",
					"CreatedByName"
				)
				VALUES (
					(ele->>'FullName')::VARCHAR,
					v_phone,
					(ele->>'SalePointId')::INT,
					(SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'WholesalePriceId')::INT)::INT,
					(SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'ScratchPriceId')::INT)::INT,
					p_action_by,
					p_action_by_name
				) RETURNING "GuestId" INTO v_id;
			END IF;
		ELSE
			RAISE EXCEPTION 'Đã tồn tại khách với số điện thoại này trong hệ thống';
		END IF;

		v_mess := 'Thêm thành công';

	-- Sửa
	ELSIF p_action_type = 2 THEN
		ele := p_data::JSON;
		v_phone := fn_phoneconvert_11_to_10(ele ->> 'Phone');
		IF LENGTH(v_phone) <> 10 THEN
			RAISE 'Số điện thoại không đúng cú pháp';
		END IF;
		IF (
    SELECT COUNT(*) < 2  
    FROM "LotteryPrice" L 
    WHERE (L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) 
        OR (L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT)
) AND (ele->>'WholesalePriceId')::INT <> (ele->>'ScratchPriceId')::INT  THEN
		
			IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'WholesalePriceId')::INT OR L."Price"=(ele->>'WholesalePriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'WholesalePriceId')::VARCHAR),
						(ele->>'WholesalePriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'WholesalePriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_lotteryID;
				END IF;
				IF NOT EXISTS (SELECT 1 FROM "LotteryPrice" L WHERE L."LotteryPriceId"=(ele->>'ScratchPriceId')::INT OR L."Price"=(ele->>'ScratchPriceId')::INT) THEN
					INSERT INTO public."LotteryPrice" ("LotteryPriceName", "Price", "Value", "Step", "LotteryTypeIds")
					VALUES (
						concat('Giá vé ', (ele->>'ScratchPriceId')::VARCHAR),
						(ele->>'ScratchPriceId')::numeric,
						CAST(REPLACE(to_char((ele->>'ScratchPriceId')::INT, '999,999,999'), ',', '.') AS real),
						1, '{1,2,3}'
					)
					RETURNING "LotteryPriceId" INTO v_ScratchId;
				END IF;

		UPDATE "Guest"
		SET
			"FullName" = COALESCE((ele ->> 'FullName')::VARCHAR, "FullName"),
			"Phone" = COALESCE(fn_phoneconvert_11_to_10((ele ->> 'Phone')::VARCHAR), "Phone"),
			"WholesalePriceId" = COALESCE(v_lotteryID::INT, "WholesalePriceId"),
			"ScratchPriceId" = COALESCE(v_ScratchId::INT, "ScratchPriceId"),
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW(),
			"SalePointId" = (ele->>'SalePointId')::INT
		WHERE 
			"GuestId" = (ele ->> 'GuestId')::INT;
		v_id := 1;
		v_mess := 'Cập nhật thành công';
ELSE
	UPDATE "Guest"
			SET
				"FullName" = COALESCE((ele ->> 'FullName')::VARCHAR, "FullName"),
				"Phone" = COALESCE(fn_phoneconvert_11_to_10((ele ->> 'Phone')::VARCHAR), "Phone"),
				"WholesalePriceId" = COALESCE((SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'WholesalePriceId')::INT)::INT, "WholesalePriceId"),
				"ScratchPriceId" = COALESCE((SELECT "LotteryPriceId" FROM "LotteryPrice" WHERE "Price"=(ele->>'ScratchPriceId')::INT)::INT, "ScratchPriceId"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = NOW(),
				"SalePointId" = (ele->>'SalePointId')::INT
			WHERE 
				"GuestId" = (ele ->> 'GuestId')::INT;
			v_id := 1;
			v_mess := 'Cập nhật thành công';
	END IF;
	-- Xóa
	ELSIF p_action_type = 3 THEN
		ele := p_data::JSON;
		UPDATE "Guest"
		SET
			"IsActive" = FALSE,
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW()
		WHERE 
			"GuestId" = (ele ->> 'GuestId')::INT;
		v_id := 1;
		v_mess := 'Xóa thành công';
	END IF;

	RETURN QUERY
	SELECT v_id, v_mess;

EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;

		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_guest_action(p_action_by integer, p_action_by_name character varying, p_data text, p_guest_action_type_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_update_guest_action_v2(integer, character varying, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_guest_action_v2(p_action_by integer, p_action_by_name character varying, p_data text, p_guest_action_type_id integer DEFAULT 2, p_order_id integer DEFAULT NULL::integer) RETURNS TABLE("Id" integer, "Message" text, "OrderId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	ele JSON;
	v_tget_price NUMERIC := 0;
	v_price NUMERIC;
	v_count INT := 0;
	v_array INT[];
	v_tmp INT;
BEGIN

	
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			IF 	COALESCE((ele ->> 'GuestActionId')::INT, 0) = 0 AND 
					--COALESCE((ele ->> 'GuestId')::INT, 0) <> 0 AND 
					COALESCE((ele ->> 'FormPaymentId')::INT, 0) <> 0
			THEN
				
				IF v_count = 0 THEN 
					--Tạo hoá đơn khi chưa có
					IF p_order_id IS NULL THEN
						
						INSERT INTO "HistoryOfOrder" (
							"SalePointId",
							"CreatedBy",
							"CreatedByName",
							"CreatedDate",
							"IsDeleted",
							"ShiftDistributeId"
						)
						VALUES (
							(ele ->> 'SalePointId')::INT,
							p_action_by,
							p_action_by_name,
							v_time,
							FALSE,
							(ele ->> 'ShiftDistributeId')::INT
						) RETURNING "HistoryOfOrderId" INTO p_order_id;
						
					END IF;
	
					--Lấy danh sách id bán hàng
					SELECT "GuestActionIds" INTO v_array FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = p_order_id;
					IF v_array IS NULL THEN 
						v_array := '{}'::INT[];
					END IF;
				END IF;
				
				p_guest_action_type_id := COALESCE((ele->>'GuestActionTypeId')::INT, p_guest_action_type_id);
				
				IF COALESCE((ele ->> 'FormPaymentId')::INT, 0) = 2 
					AND COALESCE((ele ->> 'Note')::VARCHAR, '') = ''
					AND p_guest_action_type_id = 2 THEN
					RAISE 'Thanh toán chuyển khoản phải có mã giao dịch';
				END IF;
				
				INSERT INTO "GuestAction" (
					"GuestId",
					"SalePointId",
					"GuestActionTypeId",
					"TotalPrice",
					"FormPaymentId",
					"CreatedBy",
					"CreatedByName",
					"CreatedDate",
					"Note",
					"GuestInfo",
					"ModifyBy",
					"ModifyByName",
					"ModifyDate",
					"DoneTransfer",
					"ShiftDistributeId",
					"HistoryOfOrderId"
				)
				VALUES (
					COALESCE((ele ->> 'GuestId')::INT, 0),
					COALESCE((ele ->> 'SalePointId')::INT, 0),
					COALESCE((ele ->> 'GuestActionTypeId')::INT, p_guest_action_type_id),
					COALESCE((ele ->> 'TotalPrice')::NUMERIC, 0),
					COALESCE((ele ->> 'FormPaymentId')::INT, 1),
					COALESCE((ele ->> 'ActionBy')::INT, p_action_by),
					COALESCE((ele ->> 'ActionByName')::VARCHAR, p_action_by_name),
					COALESCE((ele ->> 'ActionDate')::TIMESTAMP, NOW()),
					COALESCE((ele ->> 'Note')::VARCHAR, NULL),
					COALESCE((ele ->> 'GuestInfo')::VARCHAR, NULL),
					p_action_by,
					p_action_by_name,
					NOW(),
					(CASE WHEN COALESCE((ele ->> 'FormPaymentId')::INT, 1) = 1 THEN TRUE ELSE FALSE	END),
					COALESCE((ele ->> 'ShiftDistributeId')::INT, 0),
					p_order_id
				) RETURNING "GuestActionId" INTO v_tmp;
							
				v_array := array_append(v_array, v_tmp);
				
				UPDATE "HistoryOfOrder" 
				SET 
					"GuestActionIds" = v_array
				WHERE "HistoryOfOrderId" = p_order_id;
						
				v_id := 1;
				v_mess := 'Tạo mới thành công';
			ELSEIF COALESCE((ele ->> 'GuestActionId')::INT, 0) = 0 THEN 
				v_id := -1;
				v_mess := 'Không đủ thông tin cập nhật';
			ELSE
				UPDATE "GuestAction" 
				SET 
					"ModifyBy" = p_action_by,
					"ModifyByName" = p_action_by_name,
					"ModifyDate" = NOW(),
					"IsDeleted" = COALESCE((ele ->> 'IsDeleted')::BOOLEAN, "IsDeleted"),
					"FormPaymentId"= COALESCE((ele ->> 'FormPaymentId')::INT, "FormPaymentId"),
					"TotalPrice" = COALESCE((ele ->> 'TotalPrice')::NUMERIC, "TotalPrice"),
					"DoneTransfer" = COALESCE((ele ->> 'DoneTransfer')::BOOLEAN, "DoneTransfer")
				WHERE "GuestActionId" = (ele ->> 'GuestActionId')::INT;
				v_id := 1;
				v_mess := 'Cập nhật thành công';
				--Xu ly delete
			END IF;
			
			v_count := v_count + 1;
	END LOOP;
	
	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;

	RETURN QUERY
	SELECT v_id, v_mess, p_order_id;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_guest_action_v2(p_action_by integer, p_action_by_name character varying, p_data text, p_guest_action_type_id integer, p_order_id integer) OWNER TO postgres;

--
-- Name: crm_salepoint_update_history_order(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_history_order(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON := p_data::JSON;
	v_time TIMESTAMP := NOW();
	v_tmp INT;
	v_arr TEXT;
BEGIN
	--INSERT
	IF (ele->>'ActionType')::INT = 1 THEN 
		INSERT INTO "HistoryOfOrder"(
			"SalePointId",
			"PrintTimes",
			"ListPrint",
			"Data",
			"CreatedBy",
			"CreatedByName",
			"CreatedDate",
			"IsDeleted",
			"ShiftDistributeId",
			"GuestId"
		)
		VALUES(
			(ele->>'SalePointId')::INT,
			(CASE WHEN (ele->>'IsPrint')::BOOL IS TRUE THEN 1 ELSE 0 END),
			(CASE WHEN (ele->>'IsPrint')::BOOL IS TRUE THEN '{'||p_action_by||'}' ELSE '{}' END)::INT[],
			(ele->>'Data')::TEXT,
			p_action_by,
			p_action_by_name,
			v_time,
			FALSE,
			(ele->>'ShiftDistributeId')::INT,
			(ele->>'GuestId')::INT
		) RETURNING "HistoryOfOrderId" INTO v_id;
		
		v_mess := 'Thêm thành công';
	-- PRINT
	ELSEIF (ele->>'ActionType')::INT = 2 THEN
		
		UPDATE "HistoryOfOrder"
		SET 
			"PrintTimes" = "PrintTimes" + 1,
			"ListPrint" = array_append("ListPrint", p_action_by)
		WHERE "HistoryOfOrderId" = (ele->>'HistoryOfOrderId')::INT;
	
		v_id := 1;
		v_mess := 'In thành công';
	-- DELETE
	ELSEIF (ele->>'ActionType')::INT = 3 THEN
	
		UPDATE "HistoryOfOrder"
		SET 
			"IsDeleted" = TRUE
		WHERE "HistoryOfOrderId" = (ele->>'HistoryOfOrderId')::INT;
		
		--Xoá lịch sử bán hàng
		FOR v_tmp IN (SELECT UNNEST("SalePointLogIds") FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = (ele->>'HistoryOfOrderId')::INT) LOOP
			UPDATE "SalePointLog"
			SET "IsDeleted" = TRUE
			WHERE "SalePointLogId" = v_tmp;			
		END LOOP;
		--XOá lịch sử trả tiền
		FOR v_tmp IN (SELECT UNNEST("GuestActionIds") FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = (ele->>'HistoryOfOrderId')::INT) LOOP
			UPDATE "GuestAction"
			SET "IsDeleted" = TRUE
			WHERE "GuestActionId" = v_tmp;		
		END LOOP;
		--Xoá lịch sử confirm
		FOR v_tmp IN (SELECT UNNEST("ConfirmLogIds") FROM "HistoryOfOrder" WHERE "HistoryOfOrderId" = (ele->>'HistoryOfOrderId')::INT) LOOP
			UPDATE "ConfirmLog"
			SET "IsDeleted" = TRUE
			WHERE "ConfirmLogId" = v_tmp;			
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xoá thành công';
		
	ELSEIF (ele->>'ActionType')::INT = 68 THEN 
		--Delete from "LotoNew" where "TransactionCode"= (ele->>'HistoryOfOrderId')::INT;
		Update "LotoNew" set "IsDelete"=false, "ActionByFix"=p_action_by  where "TransactionCode"= (ele->>'HistoryOfOrderId')::INT;
		v_id := 1;
		v_mess := 'Xoá thành công';
	--Tự conftrm bill
	ELSEIF (ele->>'ActionType')::INT = 4 THEN
		SELECT 
			array_to_json(array_agg(jsonb_build_object('ConfirmLogId', A."ConfirmLogId")))::TEXT 
		INTO
			v_arr
		FROM (
			SELECT
				UNNEST(HOD."ConfirmLogIds") AS "ConfirmLogId"
			FROM "HistoryOfOrder" HOD
			WHERE HOD."HistoryOfOrderId" = (ele->>'HistoryOfOrderId')::INT
		) A;
		SELECT 
			T."Id",
			T."Message"
		INTO
			v_id,
			v_mess
		FROM crm_salepoint_confirm_list_payment_v2(0, 'System_CRM', 2, v_arr ) T;
		

		
	ELSE
		v_id := -1;
		v_mess := 'Không có gì để thực hiện';
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_history_order(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_item(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_item(p_action_by integer, p_action_by_name character varying, p_type_action integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_cur_remain INT := 0; 
	v_cur_price NUMERIC := 0;
	v_check INT := 0;
	v_item_price INT;
	ele JSON;
	v_avg_price NUMERIC;
BEGIN
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP

			-- Lấy giá một món hàng
			SELECT 
				"Price" INTO v_item_price
			FROM "Item"
			WHERE "ItemId" = (ele ->> 'ItemId') :: INT;	
			
			-- Kiểm tra món hàng đã tồn tại hay chưa
-- 			IF v_item_price IS NULL THEN
-- 					RAISE 'Món hàng chưa được thêm vào kho';
-- 			END IF;
			v_item_price:= (ele ->> 'Price') :: INT;
				
			
			-- Tính giá trung bình của món hàng khi "Cho việc xuất và sử dụng" - ĐÚNG VỚI KHO
			SELECT 
				COALESCE("TotalPrice",0)/ (CASE WHEN "TotalRemaining" =0 THEN 1 ELSE "TotalRemaining" END)
				INTO v_avg_price
			FROM "ItemFull"
			WHERE "ItemId" = (ele ->> 'ItemId') :: INT AND "SalePointId" =0;
				
			-- Nếu trong kho không còn thì lấy gía ở DDL
			IF v_avg_price IS NULL OR v_avg_price =0 THEN
				SELECT 
						"Price" INTO v_avg_price
				FROM "Item"
				WHERE "ItemId" = (ele ->> 'ItemId') :: INT;	
			END IF;
						
			-- Lấy tồn kho hiện tại
			SELECT 
				COALESCE(IFL."TotalRemaining", 0) AS "TotalRemaining",COALESCE(I."TotalPrice", 0) AS "TotalPrice" INTO v_cur_remain, v_cur_price
			FROM "ItemFullLog" IFL
				LEFT JOIN "ItemFull" I ON I."SalePointId" = IFL."SalePointId" AND I."ItemId" = IFL."ItemId"
			WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
				AND I."ItemId" = (ele ->> 'ItemId') :: INT
				AND IFL."Month" = ( ele ->> 'Month'||'-01')::DATE
			ORDER BY IFL."CreateDate" DESC
			LIMIT 1;
			-- Thêm dòng vào Log
			INSERT INTO "ItemFullLog"(
				"ItemId",
				"SalePointId",
				"TotalRemaining",
				"Quantity",
				"ItemTypeId",
				"CreateBy",
				"CreateByName",
				"CreateDate",		
				"TotalPrice",
				"BalancePrice",
				"Month"
			)
			VALUES(
				(ele ->> 'ItemId') :: INT,	
				(ele ->> 'SalePointId') :: INT, 
				(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_remain, 0) + (ele ->> 'Quantity') :: INT 
							ELSE COALESCE(v_cur_remain, 0) - (ele ->> 'Quantity') :: INT END),
				(ele ->> 'Quantity') :: INT,
				p_type_action,
				p_action_by,
				p_action_by_name,
				v_time,
				((ele ->> 'Quantity') :: INT) * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END),
				(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: INT * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN  v_item_price ELSE v_avg_price END)
							ELSE COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: INT * v_avg_price END),
				(ele->>'Month'||'-01')::DATE
			) RETURNING "TotalRemaining" INTO v_check;
			UPDATE "ItemFullLog" 
			SET "TotalRemaining" = 	"TotalRemaining" + (ele ->> 'Quantity') :: INT 
				WHERE "Month" >= (ele->>'Month'||'-01')::DATE + interval '1 month'
				AND "SalePointId" = (ele ->> 'SalePointId') :: INT
				AND "ItemId" = (ele ->> 'ItemId') :: INT;
			IF v_check < 0 THEN
				RAISE 'Không đủ hàng hóa trong kho';
			END IF;				
			
			IF NOT EXISTS (
				SELECT 1 FROM "ItemFull" I
				WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT) 
				AND p_type_action = 1
			THEN 
			
				-- Thêm dòng nếu chưa có và là nhập kho
				INSERT INTO "ItemFull"(
					"ItemId",
					"SalePointId",
					"TotalRemaining",
					"CreateBy",
					"CreateByName",
					"CreateDate",
					"TotalPrice"
				)
				VALUES(
					(ele ->> 'ItemId') :: INT,	
					(ele ->> 'SalePointId') :: INT, 
					(ele ->> 'Quantity') :: INT,
					p_action_by,
					p_action_by_name,
					v_time,
					(ele ->> 'Quantity') :: INT * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END)
				
				);
				
			ELSEIF NOT EXISTS (
				SELECT 1 FROM "ItemFull" I
				WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT
			) THEN 				
				-- Báo lỗi vì trừ kho khi chưa có hàng
				RAISE 'Không đủ hàng hóa trong kho';
			ELSE 
				-- Cập nhật kho của điểm bán 
				UPDATE "ItemFull" 
				SET
					"ModifyDate" = v_time,
					"TotalRemaining" = (CASE WHEN p_type_action = 1 THEN "TotalRemaining"  + (ele ->> 'Quantity') :: INT 
																										ELSE "TotalRemaining" - (ele ->> 'Quantity') :: INT END),
					"TotalPrice" =(CASE WHEN p_type_action = 1 THEN "TotalPrice"  + (ele ->> 'Quantity') :: INT * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END)
																										ELSE "TotalPrice" - (ele ->> 'Quantity') :: INT * v_avg_price END)
																								 
				WHERE "SalePointId" = (ele ->> 'SalePointId') :: INT
					AND "ItemId" = (ele ->> 'ItemId') :: INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;				
					
			END IF;
			
			-- Cập nhật kho số 0 nếu là xuất, nhập kho
			IF (ele ->> 'SalePointId') :: INT <> 0 AND p_type_action <> 3 THEN
				
				SELECT 
					COALESCE(I."TotalRemaining", 0),COALESCE(I."TotalPrice", 0)  INTO v_cur_remain, v_cur_price
				FROM "ItemFull" I
				WHERE I."SalePointId" = 0 :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT;
				
				-- Thêm dòng nếu chưa có và là nhập kho
				INSERT INTO "ItemFullLog"(
					"ItemId",
					"SalePointId",
					"TotalRemaining",
					"Quantity",
					"ItemTypeId",
					"CreateBy",
					"CreateByName",
					"CreateDate",		
					"TotalPrice",
					"BalancePrice",
					"Month"
				)
				VALUES(
					(ele ->> 'ItemId') :: INT,	
					0, 
					(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_remain, 0) - (ele ->> 'Quantity') :: INT
								ELSE COALESCE(v_cur_remain, 0) + (ele ->> 'Quantity') :: INT END),
					(ele ->> 'Quantity') :: INT,
					(CASE WHEN p_type_action = 1 THEN 2 ELSE 1 END),
					p_action_by,
					p_action_by_name,
					v_time,
					((ele ->> 'Quantity') :: INT) * v_avg_price,
					(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: INT * v_avg_price
						ELSE COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: INT * v_avg_price END),
					to_date(p_month, 'YYYY-MM')
				) RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;
				
				UPDATE "ItemFull"
				SET
					"ModifyDate" = v_time,
					"TotalRemaining" = (CASE WHEN p_type_action = 1 THEN "TotalRemaining" - (ele ->> 'Quantity') :: INT 
																										ELSE "TotalRemaining" + (ele ->> 'Quantity') :: INT END),
																										
					"TotalPrice"	= (CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: INT * v_avg_price
																										ELSE COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: INT * v_avg_price END)
				WHERE "SalePointId" = 0 
					AND "ItemId" = (ele ->> 'ItemId') :: INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;								
			
			END IF;
			
	END LOOP;
	
	v_id := 1;
	v_mess := 'Cập nhật thành công';
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_item(p_action_by integer, p_action_by_name character varying, p_type_action integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_item_v2(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_item_v2(p_action_by integer, p_action_by_name character varying, p_type_action integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_cur_remain INT := 0; 
	v_cur_price NUMERIC := 0;
	v_check INT := 0;
	v_item_price INT;
	ele JSON;
	v_avg_price NUMERIC;
BEGIN
FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP

			-- Lấy giá một món hàng
			SELECT 
				"Price" INTO v_item_price
			FROM "Item"
			WHERE "ItemId" = (ele ->> 'ItemId') :: INT;	
			
			-- Kiểm tra món hàng đã tồn tại hay chưa
-- 			IF v_item_price IS NULL THEN
-- 					RAISE 'Món hàng chưa được thêm vào kho';
-- 			END IF;
			v_item_price:= (ele ->> 'Price') :: INT;
				
			
			-- Tính giá trung bình của món hàng khi "Cho việc xuất và sử dụng" - ĐÚNG VỚI KHO
			SELECT 
				COALESCE("TotalPrice",0)/ (CASE WHEN "TotalRemaining" =0 THEN 1 ELSE "TotalRemaining" END)
				INTO v_avg_price
			FROM "ItemFull"
			WHERE "ItemId" = (ele ->> 'ItemId') :: INT AND "SalePointId" =0;
				
			-- Nếu trong kho không còn thì lấy gía ở DDL
			IF v_avg_price IS NULL OR v_avg_price =0 THEN
				SELECT 
						"Price" INTO v_avg_price
				FROM "Item"
				WHERE "ItemId" = (ele ->> 'ItemId') :: INT;	
			END IF;
						
			-- Lấy tồn kho hiện tại
			SELECT 
				COALESCE(IFL."TotalRemaining", 0) AS "TotalRemaining",COALESCE(I."TotalPrice", 0) AS "TotalPrice" INTO v_cur_remain, v_cur_price
			FROM "ItemFullLog" IFL
				LEFT JOIN "ItemFull" I ON I."SalePointId" = IFL."SalePointId" AND I."ItemId" = IFL."ItemId"
			WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
				AND I."ItemId" = (ele ->> 'ItemId') :: INT
				AND  ( ele ->> 'Month'||'-01')::DATE >= IFL."Month"
			ORDER BY IFL."CreateDate" DESC
			LIMIT 1;
			-- Thêm dòng vào Log
			INSERT INTO "ItemFullLog"(
				"ItemId",
				"SalePointId",
				"TotalRemaining",
				"Quantity",
				"ItemTypeId",
				"CreateBy",
				"CreateByName",
				"CreateDate",		
				"TotalPrice",
				"BalancePrice",
				"Month"
			)
			VALUES(
				(ele ->> 'ItemId') :: INT,	
				(ele ->> 'SalePointId') :: INT, 
				(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_remain, 0) + (ele ->> 'Quantity') :: numeric 
							ELSE COALESCE(v_cur_remain, 0) - (ele ->> 'Quantity') :: numeric END),
				(ele ->> 'Quantity') :: numeric,
				CASE WHEN p_type_action = 1 THEN 1 WHEN p_type_action = 3 THEN 3 ELSE 2 END,
				p_action_by,
				p_action_by_name,
				v_time,
				((ele ->> 'Quantity') :: numeric) * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END),
				(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: numeric * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN  v_item_price ELSE v_avg_price END)
							ELSE COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: numeric * v_avg_price END),
				(ele->>'Month'||'-01')::DATE
			) RETURNING "TotalRemaining" INTO v_check;
			UPDATE "ItemFullLog" 
			SET "TotalRemaining" = 	"TotalRemaining" + (ele ->> 'Quantity') :: numeric 
				WHERE "Month" >= (ele->>'Month'||'-01')::DATE + interval '1 month'
				AND "SalePointId" = (ele ->> 'SalePointId') :: INT
				AND "ItemId" = (ele ->> 'ItemId') :: INT;
			IF v_check < 0 THEN
				RAISE 'Không đủ hàng hóa trong kho';
			END IF;				
			
			IF NOT EXISTS (
				SELECT 1 FROM "ItemFull" I
				WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT) 
				AND p_type_action = 1
			THEN 
			
				-- Thêm dòng nếu chưa có và là nhập kho
				INSERT INTO "ItemFull"(
					"ItemId",
					"SalePointId",
					"TotalRemaining",
					"CreateBy",
					"CreateByName",
					"CreateDate",
					"TotalPrice"
				)
				VALUES(
					(ele ->> 'ItemId') :: INT,	
					(ele ->> 'SalePointId') :: INT, 
					(ele ->> 'Quantity') :: numeric,
					p_action_by,
					p_action_by_name,
					v_time,
					(ele ->> 'Quantity') :: numeric * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END)
				
				);
				
			ELSEIF NOT EXISTS (
				SELECT 1 FROM "ItemFull" I
				WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT
			) THEN 				
				-- Báo lỗi vì trừ kho khi chưa có hàng
				RAISE 'Không đủ hàng hóa trong kho';
			ELSE 
				-- Cập nhật kho của điểm bán 
				UPDATE "ItemFull" 
				SET
					"ModifyDate" = v_time,
					"TotalRemaining" = (CASE WHEN p_type_action = 1 THEN "TotalRemaining"  + (ele ->> 'Quantity') ::numeric 
																										ELSE "TotalRemaining" - (ele ->> 'Quantity') :: numeric END),
					"TotalPrice" =(CASE WHEN p_type_action = 1 THEN "TotalPrice"  + (ele ->> 'Quantity') :: numeric * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END)
																										ELSE "TotalPrice" - (ele ->> 'Quantity') :: numeric * v_avg_price END)
																								 
				WHERE "SalePointId" = (ele ->> 'SalePointId') :: INT
					AND "ItemId" = (ele ->> 'ItemId') :: INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;				
					
			END IF;
			
			-- Cập nhật kho số 0 nếu là xuất, nhập kho
			IF (ele ->> 'SalePointId') :: INT <> 0 AND p_type_action <> 3 THEN
				
				SELECT 
					COALESCE(I."TotalRemaining", 0),COALESCE(I."TotalPrice", 0)  INTO v_cur_remain, v_cur_price
				FROM "ItemFull" I
				WHERE I."SalePointId" = 0 :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT;
				
				-- Thêm dòng nếu chưa có và là nhập kho
				INSERT INTO "ItemFullLog"(
					"ItemId",
					"SalePointId",
					"TotalRemaining",
					"Quantity",
					"ItemTypeId",
					"CreateBy",
					"CreateByName",
					"CreateDate",		
					"TotalPrice",
					"BalancePrice",
					"Month"
				)
				VALUES(
					(ele ->> 'ItemId') :: INT,	
					0, 
					(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_remain, 0) - (ele ->> 'Quantity') :: numeric
								ELSE COALESCE(v_cur_remain, 0) + (ele ->> 'Quantity') :: numeric END),
					(ele ->> 'Quantity') :: numeric,
					(CASE WHEN p_type_action = 1 THEN 2 WHEN p_type_action = 2 THEN 1 ELSE 4 END),
					p_action_by,
					p_action_by_name,
					v_time,
					((ele ->> 'Quantity') :: numeric) * v_avg_price,
					(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: numeric * v_avg_price
						ELSE COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: numeric * v_avg_price END),
					(ele ->> 'Month'||'-01')::DATE
				) RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;
				
				UPDATE "ItemFull"
				SET
					"ModifyDate" = v_time,
					"TotalRemaining" = (CASE WHEN p_type_action = 1 THEN "TotalRemaining" - (ele ->> 'Quantity') :: numeric 
																										ELSE "TotalRemaining" + (ele ->> 'Quantity') :: numeric END),
																										
					"TotalPrice"	= (CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: numeric * v_avg_price
																										ELSE COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: numeric * v_avg_price END)
				WHERE "SalePointId" = 0 
					AND "ItemId" = (ele ->> 'ItemId') :: INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;								
			
			END IF;
			
	END LOOP;
	
	v_id := 1;
	v_mess := 'Cập nhật thành công';
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_item_v2(p_action_by integer, p_action_by_name character varying, p_type_action integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_item_v3(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_item_v3(p_action_by integer, p_action_by_name character varying, p_type_action integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_time TIMESTAMP := NOW();
	v_cur_remain INT := 0; 
	v_cur_price NUMERIC := 0;
	v_check INT := 0;
	v_item_price INT;
	ele JSON;
	v_avg_price NUMERIC;
BEGIN
FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP

			-- Lấy giá một món hàng
			SELECT 
				"Price" INTO v_item_price
			FROM "Item"
			WHERE "ItemId" = (ele ->> 'ItemId') :: INT;	
			
			-- Kiểm tra món hàng đã tồn tại hay chưa
-- 			IF v_item_price IS NULL THEN
-- 					RAISE 'Món hàng chưa được thêm vào kho';
-- 			END IF;
			v_item_price:= (ele ->> 'Price') :: INT;
				
			
			-- Tính giá trung bình của món hàng khi "Cho việc xuất và sử dụng" - ĐÚNG VỚI KHO
			SELECT 
				COALESCE("TotalPrice",0)/ (CASE WHEN "TotalRemaining" =0 THEN 1 ELSE "TotalRemaining" END)
				INTO v_avg_price
			FROM "ItemFull"
			WHERE "ItemId" = (ele ->> 'ItemId') :: INT AND "SalePointId" =0;
				
			-- Nếu trong kho không còn thì lấy gía ở DDL
			IF v_avg_price IS NULL OR v_avg_price =0 THEN
				SELECT 
						"Price" INTO v_avg_price
				FROM "Item"
				WHERE "ItemId" = (ele ->> 'ItemId') :: INT;	
			END IF;
						
			-- Lấy tồn kho hiện tại
			SELECT 
				COALESCE(IFL."TotalRemaining", 0) AS "TotalRemaining",COALESCE(I."TotalPrice", 0) AS "TotalPrice" INTO v_cur_remain, v_cur_price
			FROM "ItemFullLog" IFL
				LEFT JOIN "ItemFull" I ON I."SalePointId" = IFL."SalePointId" AND I."ItemId" = IFL."ItemId"
			WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
				AND I."ItemId" = (ele ->> 'ItemId') :: INT
				AND  ( ele ->> 'Month'||'-01')::DATE >= IFL."Month"
			ORDER BY IFL."CreateDate" DESC
			LIMIT 1;
			-- Thêm dòng vào Log
			INSERT INTO "ItemFullLog"(
				"ItemId",
				"SalePointId",
				"TotalRemaining",
				"Quantity",
				"ItemTypeId",
				"CreateBy",
				"CreateByName",
				"CreateDate",		
				"TotalPrice",
				"BalancePrice",
				"Month"
			)
			VALUES(
				(ele ->> 'ItemId') :: INT,	
				(ele ->> 'SalePointId') :: INT, 
				(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_remain, 0) + (ele ->> 'Quantity') :: numeric 
							ELSE COALESCE(v_cur_remain, 0) - (ele ->> 'Quantity') :: numeric END),
				(ele ->> 'Quantity') :: numeric,
				CASE WHEN p_type_action = 1 THEN 1 WHEN p_type_action = 3 THEN 3 ELSE 2 END,
				p_action_by,
				p_action_by_name,
				v_time,
				((ele ->> 'Quantity') :: numeric) * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END),
				(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: numeric * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN  v_item_price ELSE v_avg_price END)
							ELSE COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: numeric * v_avg_price END),
				(ele->>'Month'||'-01')::DATE
			) RETURNING "TotalRemaining" INTO v_check;
			UPDATE "ItemFullLog" 
			SET "TotalRemaining" = 	"TotalRemaining" + (ele ->> 'Quantity') :: numeric 
				WHERE "Month" >= (ele->>'Month'||'-01')::DATE + interval '1 month'
				AND "SalePointId" = (ele ->> 'SalePointId') :: INT
				AND "ItemId" = (ele ->> 'ItemId') :: INT;
			IF v_check < 0 THEN
				RAISE 'Không đủ hàng hóa trong kho';
			END IF;				
			
			IF NOT EXISTS (
				SELECT 1 FROM "ItemFull" I
				WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT) 
				AND p_type_action = 1
			THEN 
			
				-- Thêm dòng nếu chưa có và là nhập kho
				INSERT INTO "ItemFull"(
					"ItemId",
					"SalePointId",
					"TotalRemaining",
					"CreateBy",
					"CreateByName",
					"CreateDate",
					"TotalPrice"
				)
				VALUES(
					(ele ->> 'ItemId') :: INT,	
					(ele ->> 'SalePointId') :: INT, 
					(ele ->> 'Quantity') :: numeric,
					p_action_by,
					p_action_by_name,
					v_time,
					(ele ->> 'Quantity') :: numeric * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END)
				
				);
				
			ELSEIF NOT EXISTS (
				SELECT 1 FROM "ItemFull" I
				WHERE I."SalePointId" = (ele ->> 'SalePointId') :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT
			) THEN 				
				-- Báo lỗi vì trừ kho khi chưa có hàng
				RAISE 'Không đủ hàng hóa trong kho';
			ELSE 
				-- Cập nhật kho của điểm bán 
				UPDATE "ItemFull" 
				SET
					"ModifyDate" = v_time,
					"TotalRemaining" = (CASE WHEN p_type_action = 1 THEN "TotalRemaining"  + (ele ->> 'Quantity') ::numeric 
																										ELSE "TotalRemaining" - (ele ->> 'Quantity') :: numeric END),
					"TotalPrice" =(CASE WHEN p_type_action = 1 THEN "TotalPrice"  + (ele ->> 'Quantity') :: numeric * (CASE WHEN (ele ->> 'SalePointId') :: INT = 0 THEN v_item_price ELSE v_avg_price END)
																										ELSE "TotalPrice" - (ele ->> 'Quantity') :: numeric * v_avg_price END)
																								 
				WHERE "SalePointId" = (ele ->> 'SalePointId') :: INT
					AND "ItemId" = (ele ->> 'ItemId') :: INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;				
					
			END IF;
			
			-- Cập nhật kho số 0 nếu là xuất, nhập kho
			IF (ele ->> 'SalePointId') :: INT <> 0 AND p_type_action <> 3 THEN
				
				SELECT 
					COALESCE(I."TotalRemaining", 0),COALESCE(I."TotalPrice", 0)  INTO v_cur_remain, v_cur_price
				FROM "ItemFull" I
				WHERE I."SalePointId" = 0 :: INT
					AND I."ItemId" = (ele ->> 'ItemId') :: INT;
				
				-- Thêm dòng nếu chưa có và là nhập kho
				INSERT INTO "ItemFullLog"(
					"ItemId",
					"SalePointId",
					"TotalRemaining",
					"Quantity",
					"ItemTypeId",
					"CreateBy",
					"CreateByName",
					"CreateDate",		
					"TotalPrice",
					"BalancePrice",
					"Month"
				)
				VALUES(
					(ele ->> 'ItemId') :: INT,	
					0, 
					(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_remain, 0) - (ele ->> 'Quantity') :: numeric
								ELSE COALESCE(v_cur_remain, 0) + (ele ->> 'Quantity') :: numeric END),
					(ele ->> 'Quantity') :: numeric,
					(CASE WHEN p_type_action = 1 THEN 2 WHEN p_type_action = 2 THEN 1 ELSE 4 END),
					p_action_by,
					p_action_by_name,
					v_time,
					((ele ->> 'Quantity') :: numeric) * v_avg_price,
					(CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: numeric * v_avg_price
						ELSE COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: numeric * v_avg_price END),
					(ele ->> 'Month'||'-01')::DATE
				) RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;
				
				UPDATE "ItemFull"
				SET
					"ModifyDate" = v_time,
					"TotalRemaining" = (CASE WHEN p_type_action = 1 THEN "TotalRemaining" - (ele ->> 'Quantity') :: numeric 
																										ELSE "TotalRemaining" + (ele ->> 'Quantity') :: numeric END),
																										
					"TotalPrice"	= (CASE WHEN p_type_action = 1 THEN COALESCE(v_cur_price, 0) - (ele ->> 'Quantity') :: numeric * v_avg_price
																										ELSE COALESCE(v_cur_price, 0) + (ele ->> 'Quantity') :: numeric * v_avg_price END)
				WHERE "SalePointId" = 0 
					AND "ItemId" = (ele ->> 'ItemId') :: INT
				RETURNING "TotalRemaining" INTO v_check;
				
				IF v_check < 0 THEN
					RAISE 'Không đủ hàng hóa trong kho';
				END IF;								
			
			END IF;
			
	END LOOP;
	
	v_id := 1;
	v_mess := 'Cập nhật thành công';
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;


	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_item_v3(p_action_by integer, p_action_by_name character varying, p_type_action integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_leader_attendent(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_leader_attendent(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	elele INT;
	v_time TIMESTAMP := NOW();
	v_id_tmp INT;
	v_array INT[] := '{}'::INT[];
BEGIN

	--Lấy bảng tạm để check dữ liệu cuối cùng
	CREATE TEMP TABLE tmpAttendent ON COMMIT DROP AS (
		SELECT 
			LA."LeaderAttendentId",
			LA."CreatedDate",
			LA."UserId",
			LA."TriggerSalePoint"
		FROM "LeaderAttendent" LA 
		WHERE LA."CreatedDate" >= ALL(
			SELECT 
				LAA."CreatedDate"
			FROM "LeaderAttendent" LAA
			GROUP BY LAA."CreatedDate"
		)
	);
	

		
	--Lặp qua list leader
	FOR ele IN SELECT * FROM json_array_elements(((p_data::JSON)->>'LeaderAttendentData')::JSON) LOOP
		
		--INSERT
		IF NOT EXISTS (
			SELECT 1 
			FROM tmpAttendent T 
			WHERE T."UserId" = (ele->>'UserId')::INT 
				AND T."TriggerSalePoint" = (ele->>'TriggerSalePoint')::INT
		) THEN
		
			INSERT INTO "LeaderAttendent"(
				"UserId",
				"TriggerSalePoint",
				"CreatedBy",
				"CreatedByName",
				"CreatedDate"
			)
			VALUES(
				(ele->>'UserId')::INT,
				(ele->>'TriggerSalePoint')::INT,
				p_action_by,
				p_action_by_name,
				v_time
			);
		
		--UPDATE
		ELSE 
		
			--Lấy id để update
			SELECT T."LeaderAttendentId" INTO v_id_tmp 
			FROM tmpAttendent T 
			WHERE T."UserId" = (ele->>'UserId')::INT 
			AND T."TriggerSalePoint" = (ele->>'TriggerSalePoint')::INT;
			
			--Update lại thời gian
			UPDATE "LeaderAttendent" 
			SET	
				"CreatedBy" = p_action_by,
				"CreatedByName" = p_action_by_name,
				"CreatedDate" = v_time
			WHERE "LeaderAttendentId" = v_id_tmp;
		
		END IF;
		
	END LOOP;
	
	--Lặp qua list lịch làm
	FOR ele IN SELECT * FROM json_array_elements(((p_data::JSON)->>'GroupSalePointData')::JSON) LOOP
		
		v_array := '{}'::INT[];
		
		FOR elele IN SELECT UNNEST(TRANSLATE((ele->>'SalePointIds'), '[]', '{}')::INT[]) LOOP			
			v_array := array_append(v_array, elele);			
		END LOOP;
		
		--INSERT
		IF COALESCE((ele->>'GroupSalePointId')::INT, 0) = 0 THEN
		
			INSERT INTO "GroupSalePoint"(
				"UserId",
				"SalePointIds",
				"Option",
				"CreatedBy",
				"CreatedByName",
				"CreatedDate"				
			)
			VALUES(
				(ele->>'UserId')::INT,
				v_array,
				(ele->>'Option')::INT,
				p_action_by,
				p_action_by_name,
				v_time
			);
		
		--UPDATE
		ELSE 
			
			UPDATE "GroupSalePoint" 
			SET
				"SalePointIds" = v_array,
				"Option" = (ele->>'Option')::INT,
				"CreatedBy" = p_action_by,
				"CreatedByName" = p_action_by_name,
				"CreatedDate"	= v_time	
			WHERE "GroupSalePointId" = (ele->>'GroupSalePointId')::INT;
					
		END IF;
		
	END LOOP;
	
	v_id := 1;
	v_mess := 'Cập nhật thành công';
	

	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_leader_attendent(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_percent(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_percent(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
	v_array INT[];
	v_percent NUMERIC[];
	v_total NUMERIC;
	elele JSON;
BEGIN

	
	--INSERT
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		--Clear data tạm
		v_array := '{}'::INT[];
		v_percent := '{}'::NUMERIC[];
		v_total := 0;
		--Loop lấy các giá trị gửi xuống
		FOR elele IN SELECT * FROM json_array_elements((ele->>'MainUserData')::JSON) LOOP
			v_array := array_append(v_array, (elele->>'UserId')::INT);
			v_percent := array_append(v_percent, (elele->>'Percent')::NUMERIC);
			v_total := v_total +  (elele->>'Percent')::NUMERIC;
		END LOOP;
		
		IF v_total > 1 THEN
			RAISE 'Tỷ lệ phần trăm % đã nhập lớn hơn %', CONCAT(ROUND(100 * v_total, 0), '%'), CONCAT(100, '%');
		END IF;
		
		INSERT INTO "SalePointPercentLog"(
			"SalePointId",
			"MainUserId",
			"PercentMainUserId",
			"ActionBy",
			"ActionByName",
			"ActionDate"
		)
		VALUES(
			(ele->>'SalePointId')::INT,
			v_array,
			v_percent,
			p_action_by,
			p_action_by_name,
			v_time
		);
		
	END LOOP;
	
	v_id := 1;
	v_mess := 'Cập nhật thành công';
		
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_percent(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_salepoint_update_total_commision_and_fee(timestamp without time zone, integer, bigint, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_total_commision_and_fee(p_date timestamp without time zone, p_commissionid integer, p_commision bigint, p_fee bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
		UPDATE 
			"Commission"
		SET 
		"TotalValue" = p_commision - p_fee,
		"Fee" = p_fee
		WHERE "Date" = p_date::DATE AND "CommissionId" = p_commissionId
		AND "IsDeleted" = FALSE;
		v_id:=1;
		v_mess:='Cập nhật thành công';
		
    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_total_commision_and_fee(p_date timestamp without time zone, p_commissionid integer, p_commision bigint, p_fee bigint) OWNER TO postgres;

--
-- Name: crm_salepoint_update_transaction(integer, character varying, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salepoint_update_transaction(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_transaction_type_id integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			INSERT INTO "Transaction"(
				"TransactionTypeId",
				"Note",
				"Quantity",
				"Price",
				"TotalPrice",
				"SalePointId",
				"ShiftDistributeId",
				"IsDeleted",
				"UserId",
				"TypeNameId",
				"ActionBy",
				"ActionByName",
				"ActionDate"
			)
			VALUES(
				p_transaction_type_id,
				(ele->>'Note')::VARCHAR,
				COALESCE((ele->>'Quantity')::INT, 1),
				(ele->>'Price')::NUMERIC,
				(COALESCE((ele->>'Price')::NUMERIC,0) * COALESCE((ele->>'Quantity')::INT,1)) :: NUMERIC,
				(ele->>'SalePointId')::INT,
				(ele->>'ShiftDistributeId')::INT,
				FALSE,
				COALESCE((ele->>'UserId')::INT, p_action_by),
				(ele->>'TypeNameId')::INT,
				p_action_by,
				p_action_by_name,
				v_time
			);
		END LOOP;
		
		v_id := 1;
		v_mess := 'Thêm thành công';
		
	--UPDATE
	ELSEIF p_action_type = 2 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Transaction" SET 
				"Note" = COALESCE((ele->>'Note')::VARCHAR, "Note"),
				"Quantity" = COALESCE((ele->>'Quantity')::INT, "Quantity"),
				"Price" =  COALESCE((ele->>'Price')::NUMERIC, "Price"),
				"TotalPrice" = COALESCE((COALESCE((ele->>'Price')::NUMERIC, "Price") * COALESCE((ele->>'Quantity')::INT, "Quantity")) :: NUMERIC, "TotalPrice"),
				"SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
				"ShiftDistributeId" = COALESCE((ele->>'ShiftDistributeId')::INT, "ShiftDistributeId"),
				"UserId" = COALESCE((ele->>'UserId')::INT, "UserId"),
				"TypeNameId" = COALESCE((ele->>'TypeNameId')::INT, "TypeNameId"),
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate"= v_time
			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "Transaction" SET 
				"IsDeleted" = TRUE,
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate"= v_time
			WHERE "TransactionId" = (ele->>'TransactionId') :: INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xóa thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_salepoint_update_transaction(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_transaction_type_id integer, p_data text) OWNER TO postgres;

--
-- Name: crm_salpoint_get_list_pay_vietlott(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_salpoint_get_list_pay_vietlott(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "TotalPrice" numeric, "ListHistory" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	--Lấy danh sách điểm bán
	WITH tmp AS (
		SELECT 
			SP."SalePointId",
			SP."SalePointName"
		FROM "SalePoint" SP 
		WHERE SP."IsActive" IS TRUE
			AND SP."IsDeleted" IS FALSE
	),
	tmp1 AS (
		SELECT
			T."TransactionId",
			T."Note",
			T."TotalPrice",
			T."SalePointId",
			T."ActionBy",
			T."ActionByName",
			T."Date"
		FROM "Transaction" T
		WHERE T."TransactionTypeId" = 9
			AND T."IsDeleted" IS FALSE
			AND TO_CHAR(T."Date", 'YYYY-MM') = p_month
		ORDER BY 
			T."Date" DESC
	)
	SELECT
		SP."SalePointId",
		SP."SalePointName",
		COALESCE(SUM(T."TotalPrice"), 0) AS "TotalPrice",
		(CASE WHEN COUNT(TO_JSONB(T.*)) > 0 THEN array_to_json(array_agg(TO_JSONB(T.*)))::TEXT ELSE '[]' END) AS "ListHistory"
	FROM tmp SP
		LEFT JOIN tmp1 T ON T."SalePointId" = SP."SalePointId" 
	GROUP BY
		SP."SalePointId",
		SP."SalePointName"
	ORDER BY
		SP."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_salpoint_get_list_pay_vietlott(p_month character varying) OWNER TO postgres;

--
-- Name: crm_scratch_card_full(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_scratch_card_full() RETURNS TABLE("Data" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT array_to_json(ARRAY_AGG(R)) ::TEXT
	FROM (
		SELECT 
			LC."LotteryChannelId",
			LC."ShortName",
			LC."LotteryChannelName",
			SF."TotalRemaining"
		FROM "ScratchcardFull" SF
			JOIN "LotteryChannel" LC ON SF."LotteryChannelId" = LC."LotteryChannelId"
		WHERE SF."AgencyId" = 0
		ORDER BY LC."LotteryChannelTypeId"
	) R;
	
END;
$$;


ALTER FUNCTION public.crm_scratch_card_full() OWNER TO postgres;

--
-- Name: crm_shift_distribute_get_by_date(timestamp without time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_shift_distribute_get_by_date(p_date timestamp without time zone, p_user_id integer) RETURNS TABLE("ShiftDistributeId" integer, "SalePointId" integer, "SalePointName" character varying, "ShiftId" integer, "ShiftName" character varying, "WorkingTime" text, "UserId" integer, "FullName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying, "CanClick" boolean, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_role_id INT;
	v_current_shift_dis INT;
BEGIN

	SELECT UR."UserRoleId" INTO v_user_role_id FROM "UserRole" UR WHERE UR."UserId" = p_user_id;

	SELECT f."ShiftDistributeId" INTO v_current_shift_dis FROM fn_get_shift_info(v_user_role_id) f;

	RETURN QUERY 
	SELECT 
		SD."ShiftDistributeId",
		SD."SalePointId",
		SP."SalePointName",
		SD."ShiftId",
		S."ShiftName",
		TO_CHAR(S."StartTime",'HH24:MI') || ' - ' || TO_CHAR(S."EndTime",'HH24:MI') AS "WorkingTime",
		SD."UserId",
		U."FullName",
		SD."ShiftTypeId",
		ST."ShiftTypeName",
		(CASE WHEN 
				(v_current_shift_dis <> SD."ShiftDistributeId" AND SD."ShiftId" = 1 AND EXISTS (SELECT 1 FROM "ShiftTransfer" ST WHERE ST."ActionDate"::DATE = SD."DistributeDate" AND ST."ShiftId" = 1 AND ST."ShiftDistributeId" = SD."ShiftDistributeId")) OR
				(v_current_shift_dis = SD."ShiftDistributeId" AND SD."ShiftId" = 1) OR 
				(v_current_shift_dis = SD."ShiftDistributeId" AND SD."ShiftId" = 2 AND EXISTS (SELECT 1 FROM "ShiftTransfer" ST WHERE ST."ActionDate"::DATE = SD."DistributeDate" AND ST."ShiftId" IN(1,2) AND ST."SalePointid" = SD."SalePointId"))
			THEN TRUE ELSE FALSE END) AS "CanClick",
		(CASE WHEN 
				(v_current_shift_dis <> SD."ShiftDistributeId" AND SD."ShiftId" = 1 AND EXISTS (SELECT 1 FROM "ShiftTransfer" ST WHERE ST."ActionDate"::DATE = SD."DistributeDate" AND ST."ShiftId" = 1 AND ST."ShiftDistributeId" = SD."ShiftDistributeId")) OR
				(v_current_shift_dis = SD."ShiftDistributeId" AND SD."ShiftId" = 1) OR 
				(v_current_shift_dis = SD."ShiftDistributeId" AND SD."ShiftId" = 2 AND EXISTS (SELECT 1 FROM "ShiftTransfer" ST WHERE ST."ActionDate"::DATE = SD."DistributeDate" AND ST."ShiftId" IN(1,2) AND ST."SalePointid" = SD."SalePointId"))
			THEN 'Ok' ELSE 'Ca trước chưa kết ca' END) AS "Message"
	FROM "ShiftDistribute" SD
		JOIN "SalePoint" SP ON SP."SalePointId" = SD."SalePointId"
		JOIN "Shift" S ON S."ShiftId" = SD."ShiftId"
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = SD."ShiftTypeId"
		JOIN "User" U ON U."UserId" = SD."UserId"
	WHERE SD."DistributeDate" = p_date::DATE
		AND (COALESCE(p_user_id, 0) = 0 OR SD."UserId" = p_user_id)
	ORDER BY SD."ShiftId";
	
END;
$$;


ALTER FUNCTION public.crm_shift_distribute_get_by_date(p_date timestamp without time zone, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_student_get_real_time_studying_student(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_student_get_real_time_studying_student() RETURNS TABLE("StudentName" character varying, "DayOfBirth" timestamp without time zone, "SC" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	SELECT S."StudentName", S."DOB"::TIMESTAMP ,C."CurrentSCName"
	FROM "Student" S 
		LEFT JOIN "StudentClassMapping" SCM ON SCM."StudentId" = S."StudentId"
		LEFT JOIN "Class" C ON C."ClassId" = SCM."ClassId"
	WHERE C."ClassStatusId" = 2;
END;
$$;


ALTER FUNCTION public.crm_student_get_real_time_studying_student() OWNER TO postgres;

--
-- Name: crm_sub_agency_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_sub_agency_ddl() RETURNS TABLE("SubAgencyId" bigint, "SubAgencyName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	RETURN QUERY
	SELECT S."AgencyId", S."AgencyName" 
	FROM "SubAgency" S
	WHERE S."IsActive" = TRUE AND S."IsDelete" = FALSE;
END;
$$;


ALTER FUNCTION public.crm_sub_agency_ddl() OWNER TO postgres;

--
-- Name: crm_temp(integer, character varying, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_temp(p_sale_point_id integer, p_month character varying, p_total_commision numeric) RETURNS TABLE("FullName" character varying, "Percent" numeric, "TotalCommisionUser" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_temp_main_user_data JSON;
BEGIN
		v_temp_main_user_data:= (SELECT 
																T."MainUserData"
															FROM crm_salepoint_get_percent('2023-01') T
															WHERE T."SalePointId" = 1)::JSON;
	RETURN QUERY
	WITH tmp AS
	(
		select 
		* 
		from json_to_recordset('[{"UserId" : 30, "FullName" : "Việ12t Đập Đá", "Percent" : 0.3},{"UserId" : 31, "FullName" : "Việ1322t 23Đập Đá", "Percent" : 0.4}]') as x("UserId" int, "FullName" text, "Percent" NUMERIC)
		 
	)
	SELECT 
		T."FullName"::VARCHAR,
		T."Percent",
		 ROUND(T."Percent"::NUMERIC * p_total_commision,2) AS "TotalCommisionUser"
	FROM tmp T ;

END;
$$;


ALTER FUNCTION public.crm_temp(p_sale_point_id integer, p_month character varying, p_total_commision numeric) OWNER TO postgres;

--
-- Name: crm_transition_get_list_confirm(integer, integer, timestamp without time zone, integer, integer, integer, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_confirm(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer, p_user_id bigint) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
	v_user_id_temp INT;
BEGIN
	--Chọn ra người thế ca khi user nghỉ
	IF EXISTS(SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" = p_user_id) THEN
		SELECT GSP."UserId" INTO v_user_id_temp FROM "GroupSalePoint" GSP
		 WHERE (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) = ANY (GSP."SalePointIds")
		 GROUP BY GSP."UserId", GSP."GroupSalePointId"
		 ORDER BY GSP."GroupSalePointId" DESC LIMIT 1;
	ELSE
		SELECT p_user_id INTO v_user_id;
		SELECT p_user_id INTO v_user_id_temp;
	END IF;
	RAISE NOTICE 'viet: %',v_user_id;
	RAISE NOTICE 'viet2: %',v_user_id_temp;
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy"
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."TransitionDate"::DATE = p_date::DATE
		AND (T."FromSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) OR T."FromSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = v_user_id_temp) OR T."ToSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) OR T."ToSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = v_user_id_temp))
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id))
-- 		AND (COALESCE(v_user_id, 0) = 0  OR T."ManagerId" = v_user_id)
	GROUP BY
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_confirm(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer, p_user_id bigint) OWNER TO postgres;

--
-- Name: crm_transition_get_list_to_confirm(integer, integer, timestamp without time zone, integer, integer, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_to_confirm(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_id bigint) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
	v_user_id_temp INT;
BEGIN
	--Chọn ra người thế ca khi user nghỉ
	IF EXISTS(SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" = p_user_id) THEN
		SELECT GSP."UserId" INTO v_user_id_temp FROM "GroupSalePoint" GSP
		 WHERE (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) = ANY (GSP."SalePointIds")
		 GROUP BY GSP."UserId", GSP."GroupSalePointId"
		 ORDER BY GSP."GroupSalePointId" DESC LIMIT 1;
	ELSE
		SELECT p_user_id INTO v_user_id;
		SELECT p_user_id INTO v_user_id_temp;
	END IF;
	IF EXISTS(SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" <> p_user_id) THEN
		SELECT GSP."UserId" INTO v_user_id_temp FROM "GroupSalePoint" GSP
		 WHERE (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) = ANY (GSP."SalePointIds")
		 GROUP BY GSP."UserId", GSP."GroupSalePointId"
		 ORDER BY GSP."GroupSalePointId" DESC LIMIT 1;
	ELSE
		SELECT p_user_id INTO v_user_id;
		SELECT p_user_id INTO v_user_id_temp;
	END IF;
	RAISE NOTICE 'viet: %',v_user_id;
	RAISE NOTICE 'viet2: %',v_user_id_temp;
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy"
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."TransitionDate"::DATE = p_date::DATE
		AND (T."FromSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) OR T."FromSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = v_user_id_temp) OR T."ToSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) OR T."ToSalePointId" = (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = v_user_id_temp))
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id))
-- 		AND (COALESCE(v_user_id, 0) = 0  OR T."ManagerId" = v_user_id)
	GROUP BY
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_to_confirm(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_id bigint) OWNER TO postgres;

--
-- Name: crm_transition_get_list_to_confirm_v1(integer, integer, timestamp without time zone, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_to_confirm_v1(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
BEGIN
SELECT "UserId" INTO v_user_id FROM fn_get_shift_info(p_user_role_id);
-- 	--Chọn ra người thế ca khi user nghỉ
-- 	IF EXISTS(SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" = p_user_id) THEN
-- 		SELECT GSP."UserId" INTO v_user_id_temp FROM "GroupSalePoint" GSP
-- 		 WHERE (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) = ANY (GSP."SalePointIds")
-- 		 GROUP BY GSP."UserId", GSP."GroupSalePointId"
-- 		 ORDER BY GSP."GroupSalePointId" DESC LIMIT 1;
-- 	ELSE
-- 		SELECT p_user_id INTO v_user_id;
-- 		SELECT p_user_id INTO v_user_id_temp;
-- 	END IF;
-- 	IF EXISTS(SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" <> p_user_i9d) THEN
-- 		SELECT GSP."UserId" INTO v_user_id_temp FROM "GroupSalePoint" GSP
-- 		 WHERE (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = p_user_id) = ANY (GSP."SalePointIds")
-- 		 GROUP BY GSP."UserId", GSP."GroupSalePointId"
-- 		 ORDER BY GSP."GroupSalePointId" DESC LIMIT 1;
-- 	ELSE
-- 		SELECT p_user_id INTO v_user_id;
-- 		SELECT p_user_id INTO v_user_id_temp;
-- 	END IF;
-- 	RAISE NOTICE 'viet: %',v_user_id;
-- 	RAISE NOTICE 'viet2: %',v_user_id_temp;
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy"
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."TransitionDate"::DATE = p_date::DATE
		
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id))
		AND (COALESCE(v_user_id, 0) = 0  OR T."ManagerId" = v_user_id)
	GROUP BY
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_to_confirm_v1(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_transition_get_list_to_confirm_v2(integer, integer, timestamp without time zone, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_to_confirm_v2(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
	v_user_id_for_off INT;
	v_off_user INT;
BEGIN
SELECT "UserId" INTO v_user_id FROM fn_get_shift_info(p_user_role_id);

SELECT LOL."UserId" INTO v_off_user FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" <> v_user_id; 
	RAISE NOTICE 'vietBefore: %',v_user_id;
	IF EXISTS(SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date AND LOL."UserId" <> v_user_id) THEN

		IF (	SELECT GSP."UserId"  FROM "GroupSalePoint" GSP
		 WHERE (SELECT U."SalePointId" FROM "User" U WHERE U."UserId" = v_off_user) = ANY (GSP."SalePointIds") AND GSP."UserId" <> v_off_user
	 GROUP BY GSP."UserId","GroupSalePointId" ORDER BY "GroupSalePointId" DESC LIMIT 1 ) = v_user_id THEN 
	 	SELECT LOL."UserId" INTO v_user_id_for_off FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = p_date;
		ELSE 
		SELECT v_user_id INTO v_user_id_for_off;
		END IF;
	ELSE
		SELECT "UserId" INTO v_user_id_for_off FROM fn_get_shift_info(p_user_role_id);
	END IF;

	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy"
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId" 
	WHERE T."TransitionDate"::DATE = p_date::DATE
		
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id))
	GROUP BY
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	WHERE t."ManagerId" = v_user_id or (t."ManagerId" = v_user_id_for_off)
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_to_confirm_v2(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_transition_get_list_to_confirm_v3(integer, integer, timestamp without time zone, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_to_confirm_v3(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
BEGIN
SELECT "UserId" INTO v_user_id FROM fn_get_shift_info(p_user_role_id);
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT 
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy"  -- Điều kiện thêm ở đây
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."TransitionDate"::DATE = p_date::DATE and T."ShiftDistributeId" <> -1 
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id)) 
	GROUP BY
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"

	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_to_confirm_v3(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_transition_get_list_to_confirm_v4(integer, integer, timestamp without time zone, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_to_confirm_v4(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
BEGIN
SELECT "UserId" INTO v_user_id FROM fn_get_shift_info(p_user_role_id);
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT 
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy" and TT."ToSalePointId"=T."ToSalePointId" and TT."ShiftDistributeId"=-1
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."TransitionDate"::DATE = p_date::DATE and T."ShiftDistributeId"=-1
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id))
	GROUP BY
	

	T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"

		

	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_to_confirm_v4(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_transition_get_list_to_confirm_v5(integer, integer, timestamp without time zone, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_transition_get_list_to_confirm_v5(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "TransitionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "TransitionTypeId" integer, "TransitionTypeName" character varying, "FromSalePointId" integer, "FromSalePointName" character varying, "ToSalePointId" integer, "ToSalePointName" character varying, "ConfirmDate" timestamp without time zone, "ConfirmBy" integer, "ConfirmByName" character varying, "TransData" text, "ManagerId" integer, "ManagerName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
	v_user_id INT;
BEGIN
SELECT "UserId" INTO v_user_id FROM fn_get_shift_info(p_user_role_id);
	RETURN QUERY 
	WITH tmp AS(
	SELECT 
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		(CASE WHEN T."FromSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "FromSalePointName",
		T."ToSalePointId",
		(CASE WHEN T."ToSalePointId" = 0 THEN 'Kho' ELSE SP."SalePointName" END) AS "ToSalePointName",
		T."ConfirmDate",
		T."ConfirmBy",
		T."ConfirmByName",
		(
			SELECT array_to_json(
				ARRAY_AGG (r))
			FROM
			(
				SELECT 
					TT."TransitionId",
					TT."LotteryDate",	
					TT."LotteryChannelId",
					TT."TotalTrans",
					TT."ConfirmTrans",
					TT."LotteryDate",
					TT."TotalTransDup",
					TT."ConfirmTransDup",
					TT."IsScratchcard"
				FROM "Transition" TT 
					JOIN "LotteryChannel" LC ON TT."LotteryChannelId" = LC."LotteryChannelId" 
				WHERE TT."TransitionDate" = T."TransitionDate" AND TT."ActionBy" = T."ActionBy"  -- Điều kiện thêm ở đây
				ORDER BY 
					TT."IsScratchcard",
					TT."LotteryDate",
					LC."LotteryChannelTypeId"
			) r
		)::TEXT AS "TransData",
		T."ManagerId",
		U."FullName" AS "ManagerName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"
	FROM "Transition" T
		JOIN "TransitionType" TT ON TT."TransitionTypeId" = T."TransitionTypeId"
		JOIN "SalePoint" SP ON (SP."SalePointId" = T."ToSalePointId" OR SP."SalePointId" = T."FromSalePointId")
		JOIN "ConfirmStatus" CS ON CS."ConfirmStatusId" = T."ConfirmStatusId"
		LEFT JOIN "User" U ON U."UserId" = T."ManagerId"
	WHERE T."TransitionDate"::DATE = p_date::DATE and T."ShiftDistributeId" = -1 
		AND (COALESCE(p_trans_type_id, 0) = 0 OR T."TransitionTypeId" = p_trans_type_id)
		AND (COALESCE(p_sale_point_id, 0) = 0 
			OR (COALESCE(p_trans_type_id, 0) = 0 AND SP."SalePointId" = p_sale_point_id) 
			OR (COALESCE(p_trans_type_id, 0) = 1 AND T."FromSalePointId" = p_sale_point_id)
			OR (COALESCE(p_trans_type_id, 0) = 2 AND T."ToSalePointId" = p_sale_point_id)) 
	GROUP BY
		T."TransitionDate",
		T."ActionBy",
		T."ActionByName",
		T."TransitionTypeId",
		TT."TransitionTypeName",
		T."FromSalePointId",
		T."ToSalePointId",
		T."ConfirmBy",
		T."ConfirmDate",
		T."ConfirmByName",
		SP."SalePointName",
		T."ManagerId",
		U."FullName",
		T."ConfirmStatusId",
		CS."ConfirmStatusName"

	)
	SELECT
		ROW_NUMBER() OVER (ORDER BY t."TransitionDate" DESC) AS "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		t.*
	FROM tmp t
	OFFSET v_offset_row LIMIT p_page_size;
	
END;
$$;


ALTER FUNCTION public.crm_transition_get_list_to_confirm_v5(p_page_size integer, p_page_number integer, p_date timestamp without time zone, p_sale_point_id integer, p_trans_type_id integer, p_user_role_id integer) OWNER TO postgres;

--
-- Name: crm_type_of_item_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_type_of_item_ddl() RETURNS TABLE("TypeOfItemId" integer, "TypeName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT
		TI."TypeOfItemId",
		TI."TypeName"
	FROM "TypeOfItem" TI
	ORDER BY TI."TypeOfItemId";
	
END;
$$;


ALTER FUNCTION public.crm_type_of_item_ddl() OWNER TO postgres;

--
-- Name: crm_update_action_guest_action(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_update_action_guest_action(p_action_by integer, p_action_by_name character varying, p_guest_action_id integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
	UPDATE "GuestAction"
	SET
		"ModifyBy" = p_action_by,
		"ModifyByName" = p_action_by_name,
		"ModifyDate" = NOW(),
		"IsDeleted"= TRUE
	WHERE "GuestActionId" = p_guest_action_id;
    
    v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_update_action_guest_action(p_action_by integer, p_action_by_name character varying, p_guest_action_id integer) OWNER TO postgres;

--
-- Name: crm_update_activity_guest_action(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_update_activity_guest_action(p_action_by integer, p_action_by_name character varying, p_arr_guest_action_id text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
arr integer[];
i integer;
BEGIN   
	arr := string_to_array(p_arr_guest_action_id, ',');
	FOR i IN 1..array_length(arr, 1)
	LOOP 
		raise notice 'for i: %', ((arr[i])::integer);
		UPDATE "GuestAction"
		SET
			"ModifyBy" = p_action_by,
			"ModifyByName" = p_action_by_name,
			"ModifyDate" = NOW(),
			"IsDeleted"= TRUE
		WHERE "GuestActionId" = ((arr[i])::integer);
  END LOOP;
    v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_update_activity_guest_action(p_action_by integer, p_action_by_name character varying, p_arr_guest_action_id text) OWNER TO postgres;

--
-- Name: crm_update_date_off_of_leader(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_update_date_off_of_leader(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			
				UPDATE "LeaderOffLog" 
				SET 
					"IsDeleted" = TRUE,
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = v_time
				WHERE 
					"WorkingDate" = (ele->>'WorkingDate')::DATE;
				
--			IF NOT EXISTS (SELECT 1 FROM "LeaderOffLog" L WHERE L."WorkingDate" = (ele->>'WorkingDate')::DATE AND L."IsDeleted" IS FALSE) THEN 
				INSERT INTO "LeaderOffLog"(
					"WorkingDate",
					"UserId",
					"Note",
					"ActionBy",
					"ActionByName",
					"ActionDate",
					"IsDeleted"
				)
				VALUES(
					(ele->>'WorkingDate')::DATE,
					(ele->>'UserId')::INT,
					(ele->>'Note')::VARCHAR,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE
				) RETURNING "LeaderOffLogId" INTO v_id;
			IF EXISTS (SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = (ele->>'WorkingDate')::DATE and LOL."UserId" <> (ele->>'UserId')::INT)
			THEN UPDATE "LeaderOffLog"
			SET 
				"IsDeleted" = TRUE 
			WHERE "UserId" <> (ele->>'UserId')::INT AND "WorkingDate" = (ele->>'WorkingDate')::DATE;
			END IF;
--			ELSE
--				RAISE 'Ngày % đã có một trưởng nhóm xin off', TO_CHAR((ele->>'WorkingDate')::DATE, 'DD/MM/YYYY');
--			END IF;			
		END LOOP;
		
		v_mess := 'Thêm thành công';
		
	--UPDATE
	ELSEIF p_action_type = 2 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			-- DO SOMETHING
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "LeaderOffLog"
			SET 
				"IsDeleted" = TRUE,
				"ActionBy" = p_action_by,
				"ActionByName" = p_action_by_name,
				"ActionDate" = v_time
			WHERE 
				"LeaderOffLogId" = (ele->>'LeaderOffLogId')::INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xóa thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_update_date_off_of_leader(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_update_date_off_of_leader_v2(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_update_date_off_of_leader_v2(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			
				UPDATE "LeaderOffLog" 
				SET 
					"IsDeleted" = TRUE,
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = v_time
				WHERE 
					"WorkingDate" = (ele->>'WorkingDate')::DATE;
				
--			IF NOT EXISTS (SELECT 1 FROM "LeaderOffLog" L WHERE L."WorkingDate" = (ele->>'WorkingDate')::DATE AND L."IsDeleted" IS FALSE) THEN 
				INSERT INTO "LeaderOffLog"(
					"WorkingDate",
					"UserId",
					"Note",
					"ActionBy",
					"ActionByName",
					"ActionDate",
					"IsDeleted"
				)
				VALUES(
					(ele->>'WorkingDate')::DATE,
					(ele->>'UserId')::INT,
					(ele->>'Note')::VARCHAR,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE
				) RETURNING "LeaderOffLogId" INTO v_id;
			IF EXISTS (SELECT 1 FROM "LeaderOffLog" LOL WHERE LOL."WorkingDate" = (ele->>'WorkingDate')::DATE and LOL."UserId" <> (ele->>'UserId')::INT)
			THEN UPDATE "LeaderOffLog"
			SET 
				"IsDeleted" = TRUE 
			WHERE "UserId" <> (ele->>'UserId')::INT AND "WorkingDate" = (ele->>'WorkingDate')::DATE;
			END IF;
--			ELSE
--				RAISE 'Ngày % đã có một trưởng nhóm xin off', TO_CHAR((ele->>'WorkingDate')::DATE, 'DD/MM/YYYY');
--			END IF;			
		END LOOP;
		
		v_mess := 'Thêm thành công';
		
	--UPDATE
	ELSEIF p_action_type = 2 THEN
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			-- DO SOMETHING
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "LeaderOffLog"
			SET 
				"IsDeleted" = TRUE,
				"ActionBy" = p_action_by,
				"ActionByName" = p_action_by_name,
				"ActionDate" = v_time
			WHERE 
				"LeaderOffLogId" = (ele->>'LeaderOffLogId')::INT;
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xóa thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_update_date_off_of_leader_v2(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_update_reward_lottery(date, integer, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_update_reward_lottery(p_date date, p_check integer, p_promotioncode text, p_promotioncode_id text) RETURNS TABLE("Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
-- 		v_code_id int[];
BEGIN
		UPDATE 
		"SalePointLog"
		SET
		"PromotionCode" =p_promotioncode::INT[],
		"PromotionCodeId" = p_promotioncode_id::INT[]
-- 		"IsUsed" = TRUE
		WHERE "SalePointLogId" = p_check;
		Update
			"PromotionCode"
		SET 
			"IsUsed" = true
		WHERE "PromotionCodeId" = ANY(p_promotioncode_id::INT[]);
		v_mess := 'Đã thêm mã trúng thưởng';
    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_update_reward_lottery(p_date date, p_check integer, p_promotioncode text, p_promotioncode_id text) OWNER TO postgres;

--
-- Name: crm_update_status_active_of_staff(integer, character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_update_status_active_of_staff(p_action_by integer, p_action_by_name character varying, p_user_id integer, p_toggle boolean) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
    
		UPDATE "User"
		SET "IsActive" = p_toggle WHERE "UserId" = p_user_id;
		v_id := 1;
		v_mess := 'Cập nhật thành công';

    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_update_status_active_of_staff(p_action_by integer, p_action_by_name character varying, p_user_id integer, p_toggle boolean) OWNER TO postgres;

--
-- Name: crm_user_by_title(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_by_title(p_usertitle_id integer) RETURNS TABLE("Id" integer, "Name" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		U."UserId",
		U."FullName"
	FROM "User" U
		JOIN "UserRole" UR ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
	WHERE U."IsActive" IS TRUE
		AND (COALESCE(p_usertitle_id, 0) = 0 OR UT."UserTitleId" = p_usertitle_id)
		order by "SalePointId" ;
	
END;
$$;


ALTER FUNCTION public.crm_user_by_title(p_usertitle_id integer) OWNER TO postgres;

--
-- Name: crm_user_confirm_salary(integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_confirm_salary(p_action_by integer, p_action_by_name character varying, p_data text, p_action_type integer DEFAULT 1) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			
			IF (ele ->> 'SalaryConfirmId')::INT IS NOT NULL THEN 
				UPDATE "SalaryConfirm"
				SET
					"ModifyBy" = p_action_by,
					"ModifyByName" = p_action_by_name,
					"ModifyDate" = v_time,
					"Data" = COALESCE((ele ->> 'SalaryData')::TEXT, "Data")
				WHERE "SalaryConfirmId" = (ele ->> 'SalaryConfirmId')::INT;			
			ELSEIF NOT EXISTS (
				SELECT 1 FROM "SalaryConfirm" SC
				WHERE SC."UserId" = (ele ->> 'UserId')::INT 
					AND SC."Month" = (ele ->> 'Month')::VARCHAR
					AND SC."IsDeleted" IS FALSE
			) THEN
				INSERT INTO "SalaryConfirm"(
					"UserId",
					"Month",
					"Data",
					"CreatedBy",
					"CreatedByName",
					"CreatedDate",
					"IsDeleted"
				)
				VALUES(
					(ele ->> 'UserId')::INT,
					(ele ->> 'Month')::VARCHAR,
					(ele ->> 'SalaryData')::TEXT,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE
				);
			
			END IF; 
			
		END LOOP;
		
		v_id := 1;
		v_mess := 'cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "SalaryConfirm"
			SET
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = v_time,
				"IsDeleted" = TRUE
			WHERE "SalaryConfirmId" = (ele ->> 'SalaryConfirmId')::INT;			
		END LOOP;
		
		v_id := 1;
		v_mess := 'Xóa thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_confirm_salary(p_action_by integer, p_action_by_name character varying, p_data text, p_action_type integer) OWNER TO postgres;

--
-- Name: crm_user_create(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_create(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	--
	ele JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		IF(NOT EXISTS(SELECT 1 FROM "User" WHERE ("Account" = (ele->>'Account')::VARCHAR OR "Email" = (ele->>'Email')::VARCHAR) AND "IsActive" IS TRUE )) THEN
			INSERT INTO "User"(
				"Account",
				"Password",
				"FullName",
				"Phone",
				"Email",
				"SalePointId",
				"ActionBy",
				"ActionByName",
				"Address",
				"BankAccount",
				"NumberIdentity"
			)
			VALUES(
				(ele ->> 'Account'):: VARCHAR,
				(ele ->> 'Password'):: VARCHAR,
				(ele ->> 'FullName'):: VARCHAR,
				(ele ->> 'Phone'):: VARCHAR,
				(ele ->> 'Email'):: VARCHAR,
				(ele ->> 'SalePointId'):: INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'Address')::VARCHAR,
				(ele ->> 'BankAccount')::VARCHAR,
				(ele ->> 'NumberIdentity')::VARCHAR
			) RETURNING "UserId" INTO v_id;
			v_mess := 'Tạo người dùng thành công!';
		ELSE
			v_mess := 'Tài khoản hoặc email đã tồn tại';
			v_id := -1;
		END IF;
	 
		IF (v_id > 0) THEN
				INSERT INTO "UserRole"(
					"UserRoleId",
					"UserId",
					"UserTitleId"
				)
				VALUES(
					v_id,
					v_id,
					(ele ->> 'Role'):: INT
				);
		END IF;
	END LOOP;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_create(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_user_create_v2(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_create_v2(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_password VARCHAR = 'GjNJi5nlYpLw8no39S+hcg==';
	--
	ele JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		IF(NOT EXISTS(SELECT 1 FROM "User" WHERE ("Account" = (ele->>'Account')::VARCHAR OR "Email" = (ele->>'Email')::VARCHAR) AND "IsActive" IS TRUE )) THEN
			INSERT INTO "User"(
				"Account",
				"Password",
				"FullName",
				"Phone",
				"Email",
				"SalePointId",
				"ActionBy",
				"ActionByName",
				"Address",
				"BankAccount",
				"NumberIdentity"
			)
			VALUES(
				(ele ->> 'Account'):: VARCHAR,
				v_password,
				(ele ->> 'FullName'):: VARCHAR,
				(ele ->> 'Phone'):: VARCHAR,
				(ele ->> 'Email'):: VARCHAR,
				(ele ->> 'SalePointId'):: INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'Address')::VARCHAR,
				(ele ->> 'BankAccount')::VARCHAR,
				(ele ->> 'NumberIdentity')::VARCHAR
			) RETURNING "UserId" INTO v_id;
			v_mess := 'User created';
		ELSE
			v_mess := 'Tài khoản hoặc email đã tồn tại';
			v_id := -1;
		END IF;
	 
		IF (v_id > 0) THEN
				INSERT INTO "UserRole"(
					"UserRoleId",
					"UserId",
					"UserTitleId"
				)
				VALUES(
					v_id,
					v_id,
					2
				);
		END IF;
	END LOOP;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_create_v2(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_user_create_v3(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_create_v3(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	v_password VARCHAR = 'GjNJi5nlYpLw8no39S+hcg==';
	--
	ele JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		IF(NOT EXISTS(SELECT 1 FROM "User" WHERE ("Account" = (ele->>'Account')::VARCHAR OR "Email" = (ele->>'Email')::VARCHAR) AND "IsActive" IS TRUE )) THEN
			INSERT INTO "User"(
				"Account",
				"Password",
				"FullName",
				"Phone",
				"Email",
				"SalePointId",
				"ActionBy",
				"ActionByName",
				"Address",
				"BankAccount",
				"NumberIdentity"
			)
			VALUES(
				(ele ->> 'Account'):: VARCHAR,
				v_password,
				(ele ->> 'FullName'):: VARCHAR,
				(ele ->> 'Phone'):: VARCHAR,
				(ele ->> 'Email'):: VARCHAR,
				(ele ->> 'SalePointId'):: INT,
				p_action_by,
				p_action_by_name,
				(ele ->> 'Address')::VARCHAR,
				(ele ->> 'BankAccount')::VARCHAR,
				(ele ->> 'NumberIdentity')::VARCHAR
			) RETURNING "UserId" INTO v_id;
			v_mess := 'User created';
		ELSE
			v_mess := 'Tài khoản hoặc email đã tồn tại';
			v_id := -1;
		END IF;
	 
		IF (v_id > 0) THEN
				INSERT INTO "UserRole"(
					"UserRoleId",
					"UserId",
					"UserTitleId"
				)
				VALUES(
					v_id,
					v_id,
					5
				);
		END IF;
	END LOOP;
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_create_v3(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_user_delete_shift_of_intern(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_delete_shift_of_intern(p_shift_distribute_id bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
BEGIN

			UPDATE "ShiftDistributeForIntern"
			SET "IsActive" = False
			WHERE "ShiftDistributeId" = p_shift_distribute_id;
				
        v_id := 1;
        v_mess := 'Xóa thành công';



    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.crm_user_delete_shift_of_intern(p_shift_distribute_id bigint) OWNER TO postgres;

--
-- Name: crm_user_distribute_shift(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_distribute_shift(p_action_by integer, p_action_by_name character varying, p_sale_point_id integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_data::JSON;
	ele JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
	
		IF NOT EXISTS (SELECT 1 FROM "ShiftDistribute" S WHERE S."SalePointId" = p_sale_point_id 
			AND S."DistributeDate" = (ele ->> 'DistributeDate')::DATE 
			AND S."ShiftId" = (ele ->> 'ShiftId')::INT) THEN	
			
			INSERT INTO "ShiftDistribute"(
				"DistributeDate",
				"SalePointId",
				"ShiftId",
				"UserId",
				"ShiftTypeId",
				"ActionBy",
				"ActionByName"
			) VALUES (
				(ele ->> 'DistributeDate')::DATE,
				p_sale_point_id,
				(ele ->> 'ShiftId')::INT,
				(ele ->> 'UserId')::INT,
				1,
				p_action_by,
				p_action_by_name
			);
			
		ELSE 
		
			UPDATE "ShiftDistribute" S
			SET
				"UserId" = (ele ->> 'UserId')::INT,
				"ActionBy" = p_action_by,
				"ActionByName" = p_action_by_name,
				"ActionDate" = NOW()
			WHERE S."DistributeDate" = (ele ->> 'DistributeDate')::DATE
				AND S."SalePointId" = p_sale_point_id
				AND S."ShiftId" = (ele ->> 'ShiftId')::INT;
			
		END IF;
	
	END LOOP;
	
	v_mess := 'Thao tác thành công';
	
	RETURN QUERY 
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.crm_user_distribute_shift(p_action_by integer, p_action_by_name character varying, p_sale_point_id integer, p_data text) OWNER TO postgres;

--
-- Name: crm_user_get_average_kpi_of_user_by_month(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_average_kpi_of_user_by_month(p_month character varying, p_user_id integer DEFAULT 0) RETURNS TABLE("UserId" integer, "SalePointId" integer, "KPI" numeric, "TotalWeek" bigint, "AverageKPI" numeric, "DataWeek" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_month DATE := (p_month||'-01')::DATE;
	v_total_month INT := (SELECT 
		date_part('week', date_trunc('month', v_month) + INTERVAL '1 month' - INTERVAL '1 day')
		- date_part('week', date_trunc('month', v_month))
		+1)::INT;
BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY K."UserId", K."WeekId", K."SalePointId", K."CriteriaId" ORDER BY K."CreatedDate" DESC) AS "Id",
			K."UserId",
			K."WeekId",
			K."CriteriaId",
			K."SalePointId",
			(K."KPI" * C."Coef") AS "KPI"
		FROM "KPILog" K	
			JOIN "Criteria" C ON K."CriteriaId" = C."CriteriaId"
		WHERE K."IsDeleted" IS FALSE	
			AND K."Month" = p_month
	),
	tmp2 AS (
		SELECT 
			K."UserId",
			K."WeekId",
			K."CriteriaId",
			K."SalePointId",
			K."KPI"
		FROM tmp K
		WHERE K."Id" = 1
			AND (COALESCE(p_user_id, 0) = 0 OR p_user_id = K."UserId")
	),
	tmp3 AS (
		SELECT
			K."UserId",
			K."WeekId",
			K."SalePointId",
			SUM(K."KPI") AS "KPI"
		FROM tmp2 K
		GROUP BY 
			K."UserId",
			K."WeekId",
			K."SalePointId"
	)
	SELECT 
		T."UserId",
		T."SalePointId",
		SUM(T."KPI") AS "KPI",
		COUNT(T."WeekId") AS "TotalWeek",
		ROUND(SUM(T."KPI")::NUMERIC/ v_total_month, 2) AS "AverageKPI",
		(
			SELECT ARRAY_TO_JSON(ARRAY_AGG(R))
			FROM (
				SELECT 
					K.*
				FROM tmp3 K
				WHERE K."UserId" = T."UserId"
					AND K."SalePointId" = T."SalePointId"
			) R
		)::TEXT AS "DataWeek" 
	FROM tmp3 T
	GROUP BY 
		T."UserId",
		T."SalePointId";
END;
$$;


ALTER FUNCTION public.crm_user_get_average_kpi_of_user_by_month(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_user_get_data_distribute_month(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_data_distribute_month(p_distribute_month character varying) RETURNS TABLE("IsIntern" boolean, "DistributeDate" date, "SalePointId" integer, "ShiftId" integer, "UserId" integer, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Note" text, "ShiftMain" character varying, "IsActive" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	WITH tmp AS
	(
			(SELECT 
				FALSE,
				S."DistributeDate",
				S."SalePointId",
				S."ShiftId",
				S."UserId",
				S."ShiftTypeId",
				ST."ShiftTypeName",
				S."Note",
				SM."MainUser",
				S."IsActive"
			FROM "ShiftDistribute" S
				JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
				JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
				LEFT JOIN "ShiftMain" SM ON S."ShiftMainId" = SM."ShiftMainId" AND S."SalePointId" = SM."SalePointId"
			WHERE S."UserId" IS NOT NULL AND TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month AND SP."IsActive" IS TRUE
			ORDER BY S."DistributeDate")
	)
	SELECT *
	FROM tmp T 
	ORDER BY T."DistributeDate";
	
END;
$$;


ALTER FUNCTION public.crm_user_get_data_distribute_month(p_distribute_month character varying) OWNER TO postgres;

--
-- Name: crm_user_get_data_distribute_month_of_intern(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_data_distribute_month_of_intern(p_distribute_month character varying) RETURNS TABLE("DistributeDate" date, "SalePointId" integer, "ShiftId" integer, "UserId" integer, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Note" text, "ShiftMain" character varying, "IsActive" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		S."DistributeDate",
		S."SalePointId",
		S."ShiftId",
		S."UserId",
		S."ShiftTypeId",
		ST."ShiftTypeName",
		S."Note",
		SM."MainUser",
		S."IsActive"
	FROM "ShiftDistributeForIntern" S
		JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
		LEFT JOIN "ShiftMain" SM ON S."ShiftMainId" = SM."ShiftMainId" AND S."SalePointId" = SM."SalePointId"
	WHERE S."UserId" IS NOT NULL AND TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month AND SP."IsActive" IS TRUE
	ORDER BY S."DistributeDate";
	
END;
$$;


ALTER FUNCTION public.crm_user_get_data_distribute_month_of_intern(p_distribute_month character varying) OWNER TO postgres;

--
-- Name: crm_user_get_data_distribute_month_v2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_data_distribute_month_v2(p_distribute_month character varying) RETURNS TABLE("DistributeDate" date, "SalePointId" integer, "ShiftId" integer, "UserId" integer, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Note" text, "ShiftMain" character varying, "IsActive" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	with tmp AS(
	SELECT 
		S."DistributeDate",
		S."SalePointId",
		S."ShiftId",
		S."UserId",
		S."ShiftTypeId",
		ST."ShiftTypeName",
		S."Note",
		SM."MainUser",
		S."IsActive"
	FROM "ShiftDistribute" S
		JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
		LEFT JOIN "ShiftMain" SM ON S."ShiftMainId" = SM."ShiftMainId" AND S."SalePointId" = SM."SalePointId"
	WHERE S."UserId" IS NOT NULL AND TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month AND SP."IsActive" IS TRUE
	ORDER BY S."DistributeDate"
	),tmp2 AS(
	SELECT
		S."DistributeDate",
		S."SalePointId",
		0,
		S."UserId",
		S."ShiftTypeId",
		'Thử việc',
		S."Note",
		SM."MainUser",
		S."IsActive"
	FROM "ShiftDistribute" S
		JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
		LEFT JOIN "ShiftMain" SM ON S."ShiftMainId" = SM."ShiftMainId" AND S."SalePointId" = SM."SalePointId"
		LEFT JOIN "User" U ON U."UserId" = S."UserId" 
	WHERE S."UserId" IS NOT NULL AND TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month AND SP."IsActive" IS TRUE AND U."IsIntern" = TRUE 
	ORDER BY S."DistributeDate")
	SELECT T.* FROM tmp T
	UNION
	SELECT T2.* FROM tmp2 T2;
	
END;
$$;


ALTER FUNCTION public.crm_user_get_data_distribute_month_v2(p_distribute_month character varying) OWNER TO postgres;

--
-- Name: crm_user_get_data_distribute_shift(character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_data_distribute_shift(p_distribute_month character varying, p_sale_point_id integer, p_is_active boolean) RETURNS TABLE("DistributeDate" date, "SalePointId" integer, "ShiftId" integer, "UserId" integer, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Note" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	with tmp AS(
	SELECT 
		S."DistributeDate",
		S."SalePointId",
		S."ShiftId",
		S."UserId",
		S."ShiftTypeId",
		ST."ShiftTypeName",
		S."Note"
	FROM "ShiftDistribute" S
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
	WHERE TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month
		AND S."SalePointId" = p_sale_point_id
		AND ((p_is_active IS TRUE AND S."IsActive" IS TRUE) OR (p_is_active IS FALSE AND S."ShiftTypeId" = 1))
	ORDER BY S."DistributeDate"
	), tmp2 AS( 
	SELECT 
		S."DistributeDate",
		S."SalePointId",
		S."ShiftId",
		S."UserId",
		S."ShiftTypeId",
		ST."ShiftTypeName",
		S."Note"
	FROM "ShiftDistributeForIntern" S
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
		JOIN "User" U ON U."UserId" = S."UserId"
	WHERE TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month
		AND S."SalePointId" = p_sale_point_id
		AND ((p_is_active IS TRUE AND S."IsActive" IS TRUE) OR (p_is_active IS FALSE AND S."ShiftTypeId" = 1))
		AND U."IsIntern" = TRUE 
	ORDER BY S."DistributeDate"
	)
	SELECT T1.* FROM tmp T1 UNION SELECT T2.* FROM tmp2 T2;
	
END;
$$;


ALTER FUNCTION public.crm_user_get_data_distribute_shift(p_distribute_month character varying, p_sale_point_id integer, p_is_active boolean) OWNER TO postgres;

--
-- Name: crm_user_get_data_distribute_shift_v2(character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_data_distribute_shift_v2(p_distribute_month character varying, p_sale_point_id integer, p_is_active boolean) RETURNS TABLE("IsIntern" boolean, "DistributeDate" date, "SalePointId" integer, "ShiftId" integer, "UserId" integer, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Note" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	with tmp AS(
	SELECT 
		FALSE,
		S."DistributeDate",
		S."SalePointId",
		S."ShiftId",
		S."UserId",
		S."ShiftTypeId",
		ST."ShiftTypeName",
		S."Note"
	FROM "ShiftDistribute" S
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
	WHERE TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month
		AND S."SalePointId" = p_sale_point_id
		AND ((p_is_active IS TRUE AND S."IsActive" IS TRUE) OR (p_is_active IS FALSE AND S."ShiftTypeId" = 1))
	),tmp1 AS
	(
				SELECT 
					ROW_NUMBER () OVER (ORDER BY S."DistributeDate") AS "Row",
					S."DistributeDate",
					S."SalePointId",
					S."ShiftId",
					S."UserId",
					S."ShiftTypeId",
					ST."ShiftTypeName",
					S."Note"
				FROM "ShiftDistributeForIntern" S
					JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
				WHERE TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month
					AND S."SalePointId" = p_sale_point_id
					AND ((p_is_active IS TRUE AND S."IsActive" IS TRUE) OR (p_is_active IS FALSE AND S."ShiftTypeId" = 1))
				ORDER BY S."DistributeDate"
	),
	tmp2 AS
	(
		(SELECT 
			(CASE WHEN T2."Row" <= 5 THEN TRUE ELSE FALSE END) AS "IsIntern",
			T2."DistributeDate",
			T2."SalePointId",
			T2."ShiftId",
			T2."UserId",
			T2."ShiftTypeId",
			T2."ShiftTypeName",
			T2."Note"
		FROM tmp1 T2)
		UNION
		(SELECT T1.* FROM tmp T1)
		
	)
	SELECT * FROM tmp2 T2 ORDER BY T2."DistributeDate";
	
	
END;
$$;


ALTER FUNCTION public.crm_user_get_data_distribute_shift_v2(p_distribute_month character varying, p_sale_point_id integer, p_is_active boolean) OWNER TO postgres;

--
-- Name: crm_user_get_fund_of_user(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_fund_of_user(p_year integer) RETURNS TABLE("UserId" integer, "Data" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
DECLARE
	F RECORD;
	i INT;
	n INT;
	v_array INT[];
	v_commision NUMERIC;
BEGIN
	--Lấy quỹ hoa hồng
	CREATE TEMP TABLE CommissionData (
		"Id" SERIAL,
		"SalePointId" INT,
		"UserId" INT,
		"Date" DATE,
		"TotalCommision" NUMERIC
	)
	ON COMMIT DROP;
	
	FOR F IN (
		SELECT 
			C."ListStaff",
			C."TotalValue",
			C."Date",
			C."SalePointId"
		FROM "Commission" C 
		WHERE C."IsDeleted" IS FALSE
	) LOOP			
		v_array := translate(F."ListStaff"::TEXT, '[]','{}')::INT[];
		n := array_length(v_array, 1);
		v_commision := ROUND(F."TotalValue" / 3 / n, 0);
		
		FOR i IN 1..n LOOP
			
			INSERT INTO CommissionData(
				"SalePointId",
				"UserId",
				"Date",
				"TotalCommision"
			)
			VALUES(
				F."SalePointId",
				v_array[i],
				F."Date",
				v_commision
			);
			END LOOP;
				
	END LOOP;
	
	RETURN QUERY
	--Lấy danh sách user
	WITH tmp0 AS (
		SELECT 
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			SP."SalePointName"
		FROM crm_get_user_ddl(0, (p_year||'-01-01')::TIMESTAMP) U
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = U."SalePointId" 
		WHERE U."UserTitleId" IN (4, 5)
	),
	--Lấy danh sách tồn đầu năm
	tmp AS (
		SELECT 
			C."UserId",
			SUM(C."TotalCommision") AS "TotalCommision"
		FROM tmp0 U
			LEFT JOIN CommissionData C ON U."UserId" = C."UserId"
		WHERE TO_CHAR(C."Date", 'YYYY')::INT < p_year
		GROUP BY
			C."UserId"
	),
	--Lấy danh sách trả trước năm đang lấy
	tmp1 AS (
		SELECT 
			T."UserId",
			SUM(T."TotalPrice") AS "TotalPrice"
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND T."TransactionTypeId" = 11
			AND TO_CHAR(T."Date", 'YYYY')::INT < p_year
		GROUP BY 
			T."UserId"
	),
	--Lấy tổng bảo hiểm
	tmp2 AS (
		SELECT 
			SC."UserId",
			SUM(((SC."Data"::JSON)->>'Insure')::NUMERIC) AS "TotalInsure"
		FROM "SalaryConfirm" SC
		WHERE SUBSTRING(SC."Month", 1, 4)::INT < p_year
			AND SC."IsDeleted" IS FALSE
		GROUP BY 
			SC."UserId"
	),
	--Lấy tổng tiền tồn đầu năm
	tmp3 AS (
		SELECT 
			U."UserId",
			U."FullName",
			(CASE WHEN TO_CHAR(now(), 'YYYY')='2023'
				THEN
						(SELECT U1."TotalFirst" FROM "User" U1 WHERE U."UserId" = U1."UserId")
				ELSE COALESCE(C."TotalCommision", 0) / 2 + COALESCE(A."TotalInsure", 0) * 2 - COALESCE(T."TotalPrice", 0)
				END) AS "TotalFirst"
		FROM tmp0 U
			LEFT JOIN tmp C ON C."UserId" = U."UserId"
			LEFT JOIN tmp1 T ON U."UserId" = T."UserId"
			LEFT JOIN tmp2 A ON A."UserId" = U."UserId"
	),
	--Lấy danh sách hoa hồng năm đang truy vấn
	tmp4 AS (
		SELECT 
			C."UserId",
			TO_CHAR(C."Date", 'YYYY-MM') AS "Month",
			SUM(C."TotalCommision") AS "TotalCommision"
		FROM tmp0 U
			LEFT JOIN CommissionData C ON U."UserId" = C."UserId"
		WHERE TO_CHAR(C."Date", 'YYYY')::INT = p_year
		GROUP BY
			C."UserId",
			TO_CHAR(C."Date", 'YYYY-MM')
	),
	--Lấy danh sách bảo hiểm trong năm đang truy vấn
	tmp5 AS (
		SELECT 
			SC."UserId",
			SC."Month",
			SUM(((SC."Data"::JSON)->>'Insure')::NUMERIC) AS "Insure"
		FROM "SalaryConfirm" SC
		WHERE SUBSTRING(SC."Month", 1, 4)::INT = p_year
			AND SC."IsDeleted" IS FALSE
		GROUP BY 
			SC."UserId",
			SC."Month"
	),
	--Lấy danh sách trả trong năm đang lấy
	tmp6 AS (
		SELECT 
			T."UserId",
			array_to_json(array_agg(json_build_object(
				'TransactionId',
				T."TransactionId",
				'Date',
				T."Date",
				'Price',
				T."TotalPrice",
				'Note',
				T."Note"
			))) AS "ListDataReturn",
			SUM(T."TotalPrice") AS "TotalPriceHavePay"
		FROM "Transaction" T
		WHERE T."IsDeleted" IS FALSE
			AND T."TransactionTypeId" = 11
			AND TO_CHAR(T."Date", 'YYYY')::INT = p_year
		GROUP BY 
			T."UserId"
	),
	tmp7 AS (
		SELECT
			TO_CHAR((p_year||'-'||T."Data"||'-01')::DATE, 'YYYY-MM') AS "Month"
		FROM (
			SELECT
				*
			FROM generate_series(1, 12) "Data"
		) T
	),
	tmp8 AS (
		SELECT
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			U."SalePointName",
			array_to_json(array_agg(json_build_object(
				'Month',
				M."Month",
				'Insure',
				COALESCE(I."Insure" * 2, 0),
				'CommissionHavePay',
				COALESCE(D."TotalCommision" / 2, 0),
				'CommissionExtra',
				COALESCE(D."TotalCommision" / 2, 0)
			))) AS "DataMonth",
			SUM(COALESCE(I."Insure", 0) * 2 + COALESCE(D."TotalCommision", 0) / 2) AS "TotalExtra"
		FROM tmp0 U
			LEFT JOIN tmp7 M ON TRUE
			LEFT JOIN tmp4 D ON M."Month" = D."Month" AND U."UserId" = D."UserId"
			LEFT JOIN tmp5 I ON I."Month" = M."Month" AND U."UserId" = I."UserId"
		GROUP BY
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."ListSalePoint",
			U."SalePointName"
	),
	tmp9 AS (
		SELECT
			U."UserId",
			U."FullName",
			U."UserTitleId",
			U."SalePointId",
			U."SalePointName",
			U."ListSalePoint",
			P."TotalFirst",
			U."DataMonth",
			U."TotalExtra",
			COALESCE(L."TotalPriceHavePay", 0) AS "TotalPriceHavePay",
			COALESCE(P."TotalFirst", 0) + COALESCE(U."TotalExtra", 0) - COALESCE(L."TotalPriceHavePay", 0) AS "TotalPriceRemain",
			L."ListDataReturn"		
		FROM tmp8 U 
			LEFT JOIN tmp3 P ON P."UserId" = U."UserId"
			LEFT JOIN tmp6 L ON L."UserId" = U."UserId"		
		ORDER BY 
			U."UserTitleId" DESC,
			U."SalePointId",
			U."UserId"
	)
	SELECT
		R."UserId",
		TO_JSONB(R.*)::TEXT AS "Data"
	FROM tmp9 R;
	
	
END;
$$;


ALTER FUNCTION public.crm_user_get_fund_of_user(p_year integer) OWNER TO postgres;

--
-- Name: crm_user_get_history_scratch_card_full_log(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_history_scratch_card_full_log(p_page_size integer, p_page_number integer, p_date character varying DEFAULT ''::character varying) RETURNS TABLE("ScratchcardFullLogId" integer, "AgencyName" character varying, "ActionByName" character varying, "ActionDate" character varying, "TotalReceive" integer, "LotteryChannelName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN

	RETURN QUERY
	SELECT
		SFL."ScratchcardFullLogId",
		A."AgencyName",
		SFL."ActionByName",
		TO_CHAR(SFL."ActionDate",'YYYY-MM-DD HH:MM')::VARCHAR(255),
		SFL."TotalReceived",
		LC."LotteryChannelName"
	FROM "ScratchcardFullLog" SFL 
	LEFT JOIN "Agency" A ON SFL."AgencyId" = A."AgencyId"
	LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = SFL."LotteryChannelId"
	WHERE SFL."ActionDate"::DATE = p_date::DATE OR p_date = ''
	ORDER BY SFL."ScratchcardFullLogId" 
	OFFSET v_offset_row LIMIT p_page_size;
END;
$$;


ALTER FUNCTION public.crm_user_get_history_scratch_card_full_log(p_page_size integer, p_page_number integer, p_date character varying) OWNER TO postgres;

--
-- Name: crm_user_get_history_scratch_card_log(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_history_scratch_card_log(p_page_size integer, p_page_number integer, p_date character varying DEFAULT ''::character varying) RETURNS TABLE("ScratchcardLogId" integer, "ActionByName" character varying, "ActionDate" character varying, "LotteryChannelName" character varying, "SalePointName" character varying, "TotalReceived" integer, "TransitionId" bigint, "ConfirmStatusId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN

	RETURN QUERY
	SELECT
	SL."ScratchcardLogId",
	SL."ActionByName",
	TO_CHAR(SL."ActionDate",'YYYY-MM-DD HH:MM')::VARCHAR(255),
	LC."LotteryChannelName",
	S."SalePointName",
	SL."TotalReceived",
	SL."TransitionId",
	TR."ConfirmStatusId"
	FROM "ScratchcardLog" SL 
	LEFT JOIN "SalePoint" S ON SL."SalePointId" = S."SalePointId"
	LEFT JOIN "LotteryChannel" LC ON SL."LotteryChannelId" = LC."LotteryChannelId"
	LEFT JOIN "Transition" TR ON SL."TransitionId" = TR."TransitionId"
	WHERE SL."ActionDate"::DATE = p_date::DATE OR p_date = ''
	ORDER BY SL."ScratchcardLogId" DESC 
	OFFSET v_offset_row LIMIT p_page_size;
END;
$$;


ALTER FUNCTION public.crm_user_get_history_scratch_card_log(p_page_size integer, p_page_number integer, p_date character varying) OWNER TO postgres;

--
-- Name: crm_user_get_history_scratchcardlog(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_history_scratchcardlog(p_page_size integer, p_page_number integer, p_date character varying) RETURNS TABLE("ScratchcardLogId" integer, "ActionByName" character varying, "ActionDate" character varying, "LotteryChannelName" character varying, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN

	RETURN QUERY
	SELECT
	SL."ScratchcardLogId",
	SL."ActionByName",
	TO_CHAR(SL."ActionDate",'YYYY-MM-DD HH:MM')::VARCHAR(255),
	LC."LotteryChannelName",
	S."SalePointName"
	FROM "ScratchcardLog" SL 
	LEFT JOIN "SalePoint" S ON SL."SalePointId" = S."SalePointId"
	LEFT JOIN "LotteryChannel" LC ON SL."LotteryChannelId" = LC."LotteryChannelId"
	WHERE SL."ActionDate"::DATE = p_date::DATE
	OFFSET v_offset_row LIMIT p_page_size;
END;
$$;


ALTER FUNCTION public.crm_user_get_history_scratchcardlog(p_page_size integer, p_page_number integer, p_date character varying) OWNER TO postgres;

--
-- Name: crm_user_get_intern_data_distribute_month(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_intern_data_distribute_month(p_distribute_month text) RETURNS TABLE("ShiftDistributeId" integer, "DistributeDate" date, "SalePointId" integer, "ShiftId" integer, "UserId" integer, "ShiftTypeId" integer, "ShiftTypeName" character varying, "Note" text, "ShiftMain" character varying, "IsActive" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		S."ShiftDistributeId",
		S."DistributeDate",
		S."SalePointId",
		S."ShiftId",
		S."UserId",
		S."ShiftTypeId",
		ST."ShiftTypeName",
		S."Note",
		SM."MainUser",
		S."IsActive"
	FROM "ShiftDistributeForIntern" S
		JOIN "SalePoint" SP ON S."SalePointId" = SP."SalePointId"
		JOIN "ShiftType" ST ON ST."ShiftTypeId" = S."ShiftTypeId"
		LEFT JOIN "ShiftMain" SM ON S."ShiftMainId" = SM."ShiftMainId" AND S."SalePointId" = SM."SalePointId"
		LEFT JOIN "User" U ON U."UserId" = S."UserId" 
	WHERE S."UserId" IS NOT NULL AND TO_CHAR(S."DistributeDate",'YYYY-MM') = p_distribute_month AND SP."IsActive" IS TRUE 
	ORDER BY S."DistributeDate";
	
END;
$$;


ALTER FUNCTION public.crm_user_get_intern_data_distribute_month(p_distribute_month text) OWNER TO postgres;

--
-- Name: crm_user_get_list(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list(p_page_size integer, p_page_number integer, p_usertitle_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "UserId" integer, "Account" character varying, "Phone" character varying, "FullName" character varying, "Email" character varying, "IsActive" boolean, "IsDeleted" boolean, "StartDate" date, "EndDate" date, "UserTitleId" integer, "UserTitleName" character varying, "SalePointId" integer, "BasicSalary" bigint, "Address" character varying, "BankAccount" character varying, "NumberIdentity" character varying, "IsIntern" boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN
	
	RETURN QUERY 
	WITH tmp AS(
		SELECT
			ROW_NUMBER() OVER(PARTITION BY BS."UserId" ORDER BY BS."CreatedDate" DESC) AS "Id",
			BS."UserId",
			BS."Salary"
		FROM "BasicSalary" BS
	),
	tmp2 AS (
		SELECT * 
		FROM tmp 
		WHERE tmp."Id" = 1
	)
	SELECT 
		ROW_NUMBER() OVER (ORDER BY U."UserId") "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		U."UserId",
		U."Account",
		U."Phone",
		U."FullName",
		U."Email",
		U."IsActive",
		U."IsDeleted",
		U."StartDate",
		U."EndDate",
		UT."UserTitleId",
		UT."UserTitleName",
		U."SalePointId",
		COALESCE(T."Salary", 0) AS "BasicSalary",
		U."Address",
		U."BankAccount",
		U."NumberIdentity",
		U."IsIntern"
	FROM "User" U
		JOIN "UserRole" UR ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
		LEFT JOIN tmp2 T ON T."UserId" = U."UserId"
	WHERE (COALESCE(p_usertitle_id, 0) = 0 OR UT."UserTitleId" = p_usertitle_id)
		AND UT."UserTitleId" <> 1
-- AND U."IsActive" IS TRUE
-- 		AND U."IsIntern" IS FALSE
	ORDER BY 
		U."IsActive" DESC,
		UR."UserTitleId",
		U."SalePointId",
		U."UserId"
	OFFSET v_offset_row LIMIT 100000;
	
END;
$$;


ALTER FUNCTION public.crm_user_get_list(p_page_size integer, p_page_number integer, p_usertitle_id integer) OWNER TO postgres;

--
-- Name: crm_user_get_list_borrow_in_date(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_borrow_in_date(p_month character varying DEFAULT now(), p_user_id integer DEFAULT 0) RETURNS TABLE("Date" date, "TotalData" text)
    LANGUAGE plpgsql
    AS $$DECLARE
    v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
    v_time TIMESTAMP := NOW();
BEGIN
    RETURN QUERY
    WITH tmp AS (
        SELECT 
            U."UserId",
            U."FullName"
        FROM crm_get_user_ddl(4, v_time::DATE) U
        WHERE (U."UserId" = p_user_id OR p_user_id = 0)
    ),
    --Lấy tất cả mượn trả từ trước đến giờ
    tmp1 AS (
        SELECT
            MB."UserId",
            MB."Price",
            MB."Commission",
			MB."ManagerBorrowId",
            MB."FormPaymentId",
            F."PaymentName",
            MB."Note",
            MB."CreatedDate",
            MB."IsPay",
			MB."TotalPay",
			MB."Tax"
        FROM "ManagerBorrow" MB
            JOIN "FormPayment" F ON MB."FormPaymentId" = F."FormPaymentId"
        WHERE MB."IsDeleted" IS FALSE
        ORDER BY 
            MB."CreatedDate"
    ),
    --Tạo chuỗi ngày
    tmp3 AS (
        SELECT
            (p_month||'-'||"D")::DATE AS "Date"
        FROM generate_series(1, v_total_date) AS "D"
        WHERE (p_month||'-'||"D")::DATE <= v_time::DATE
    ),
    tmp4 AS (
        SELECT
             U."CreatedDate"::DATE AS "Date",
            U."UserId",
            U."Price"  AS "TotalBorrow",
            U."TotalPay"  AS "TotalPay",
			U."Tax",
			U."Commission",
			U."ManagerBorrowId",
            jsonb_build_object(
                'CreatedDate',
                U."CreatedDate",
                'Price',
                U."Price",
                'Commission',
                U."Commission",
                'Note',
                U."Note"
            ) AS "DataInDate"
        FROM tmp1 U
        ORDER BY U."CreatedDate"
    ),
    tmp5 AS (
        SELECT 
            D."Date",
            U."UserId",
            U."FullName",        
            M."DataInDate",
            (
                SELECT
                         COALESCE(SUM(T."Price") FILTER (WHERE T."IsPay" IS FALSE), 0) - COALESCE(SUM(T."TotalPay") FILTER (WHERE T."IsPay" IS FALSE), 0) AS "FisrtDate"
                FROM tmp1 T 
                WHERE T."CreatedDate"::DATE < D."Date"
                    AND T."UserId" = U."UserId"
            )::NUMERIC AS "FisrtDate",
            COALESCE(M."TotalBorrow", 0) AS "TotalBorrow",
            COALESCE(M."TotalPay", 0) AS "TotalPay",
			M."Tax",
			M."Commission",
			M."ManagerBorrowId"
        FROM tmp3 D 
            JOIN tmp U ON TRUE
           left  JOIN tmp4 M ON D."Date" = M."Date" AND U."UserId" = M."UserId"
    ),
    tmp6 AS (
        SELECT
            U."Date",
            U."UserId",
            U."FullName",        
            U."DataInDate",
            U."FisrtDate",
            U."TotalBorrow",
			U."Commission",
			U."ManagerBorrowId",
            U."TotalPay",
			U."Tax",
            (U."FisrtDate" + U."TotalBorrow"+U."Commission") - U."TotalPay"  AS "TotalRemaining"
        FROM tmp5 U
        ORDER BY
            U."Date",
            U."UserId"
    )
SELECT
		U."Date",
		array_to_json(array_agg(TO_JSONB(U.*)))::TEXT AS "TotalData"
	FROM tmp6 U
	GROUP BY 
		U."Date"
	ORDER BY 
		U."Date" DESC;
END;











-- DECLARE
-- 		v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
-- 		v_time TIMESTAMP := NOW();
-- BEGIN
-- 	RETURN QUERY
-- 	WITH tmp AS (
-- 		SELECT 
-- 			U."UserId",
-- 			U."FullName"
-- 		FROM crm_get_user_ddl(4, v_time::DATE) U
-- 		WHERE (U."UserId" = p_user_id OR p_user_id = 0)
-- 	),
-- 	--Lấy tất cả mượn trả từ trước đến giờ
-- 	tmp1 AS (
-- 		SELECT
-- 			MB."UserId",
-- 			MB."Price",
-- 			MB."FormPaymentId",
-- 			F."PaymentName",
-- 			MB."Note",
-- 			MB."CreatedDate",
-- 			MB."IsPay"
-- 		FROM "ManagerBorrow" MB
-- 			JOIN "FormPayment" F ON MB."FormPaymentId" = F."FormPaymentId"
-- 		WHERE MB."IsDeleted" IS FALSE
-- 		ORDER BY 
-- 			MB."CreatedDate"
-- 	),
-- 	--Tạo chuỗi ngày
-- 	tmp3 AS (
-- 		SELECT
-- 			(p_month||'-'||"D")::DATE AS "Date"
-- 		FROM generate_series(1, v_total_date) AS "D"
-- 		WHERE (p_month||'-'||"D")::DATE <= v_time::DATE
-- 	),
-- 	tmp4 AS (
-- 		SELECT
-- 			U."CreatedDate"::DATE AS "Date",
-- 			U."UserId",
-- 			COALESCE(SUM(U."Price") FILTER (WHERE U."IsPay" IS FALSE), 0) AS "TotalBorrow",
-- 			COALESCE(SUM(U."Price") FILTER (WHERE U."IsPay" IS TRUE), 0) AS "TotalPay",
-- 			array_to_json(array_agg(jsonb_build_object(
-- 				'CreatedDate',
-- 				U."CreatedDate",
-- 				'Price',
-- 				U."Price",
-- 				'Note',
-- 				U."Note"
-- 			))) AS "DataInDate"
-- 		FROM tmp1 U
-- 		GROUP BY 
-- 			U."CreatedDate"::DATE,
-- 			U."UserId"
-- 	),
-- 	tmp5 AS (
-- 		SELECT 
-- 			D."Date",
-- 			U."UserId",
-- 			U."FullName",		
-- 			M."DataInDate",
-- 			(
-- 				SELECT
-- 						COALESCE(SUM(T."Price") FILTER (WHERE T."IsPay" IS FALSE), 0) - COALESCE(SUM(T."Price") FILTER (WHERE T."IsPay" IS TRUE), 0) AS "FisrtDate"
-- 				FROM tmp1 T 
-- 				WHERE T."CreatedDate"::DATE < D."Date"
-- 					AND T."UserId" = U."UserId"
-- 			)::NUMERIC AS "FisrtDate",
-- 			COALESCE(M."TotalBorrow", 0) AS "TotalBorrow",
-- 			COALESCE(M."TotalPay", 0) AS "TotalPay"
-- 		FROM tmp3 D 
-- 			JOIN tmp U ON TRUE
-- 			LEFT JOIN tmp4 M ON D."Date" = M."Date" AND U."UserId" = M."UserId"
-- 	),
-- 	tmp6 AS (
-- 		SELECT
-- 			U."Date",
-- 			U."UserId",
-- 			U."FullName",		
-- 			U."DataInDate",
-- 			U."FisrtDate",
-- 			U."TotalBorrow",
-- 			U."TotalPay",
-- 			(U."FisrtDate" + U."TotalBorrow")-U."TotalPay" AS "TotalRemaining"
-- 		FROM tmp5 U
-- 		ORDER BY
-- 			U."Date",
-- 			U."UserId"
-- 	)
-- 	SELECT
-- 		U."Date",
-- 		array_to_json(array_agg(TO_JSONB(U.*)))::TEXT AS "TotalData"
-- 	FROM tmp6 U
-- 	GROUP BY 
-- 		U."Date"
-- 	ORDER BY 
-- 		U."Date" DESC;
-- END;
$$;


ALTER FUNCTION public.crm_user_get_list_borrow_in_date(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_user_get_list_event_date(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_event_date(p_year integer, p_month integer) RETURNS TABLE("EventDayId" integer, "Date" date, "DateName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
		EV."EventDayId",
		EV."Date",
		EV."Note" AS "DateName"
	FROM "EventDay" EV
	WHERE EV."IsDeleted" IS FALSE
		AND EV."Year" = p_year
		AND (COALESCE(p_month, 0) = 0 OR EV."Month" = p_month)
	ORDER BY EV."Date";
END;
$$;


ALTER FUNCTION public.crm_user_get_list_event_date(p_year integer, p_month integer) OWNER TO postgres;

--
-- Name: crm_user_get_list_kpi_of_user_by_month(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_kpi_of_user_by_month(p_month character varying, p_user_id integer DEFAULT 0) RETURNS TABLE("KPILogId" integer, "UserId" integer, "FullName" character varying, "UserTitleId" integer, "WeekId" integer, "CriteriaId" integer, "CriteriaName" character varying, "SalePointId" integer, "SalePointName" character varying, "KPI" numeric, "CreatedDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
-- 	WITH tmp AS (
-- 		SELECT 
-- 			ROW_NUMBER() OVER(PARTITION BY K."UserId" ORDER BY K."CreatedDate" DESC) AS "Id",
-- 			K."KPILogId",
-- 			K."UserId",
-- 			K."KPI",
-- 			K."CreatedDate"
-- 		FROM "KPILog" K
-- 		WHERE K."IsDeleted" IS FALSE
-- 			AND TO_CHAR(K."CreatedDate", 'YYYY-MM') = p_month
-- 	),
-- 	tmp2 AS (
-- 		SELECT 
-- 			U."UserId",
-- 			U."FullName",
-- 			U."TypeUserId"
-- 		FROM "User" U 
-- 			JOIN "UserRole" UR ON U."UserId" = UR."UserId"
-- 		WHERE U."IsDeleted" IS FALSE	
-- 			AND U."IsActive" IS TRUE
-- 			AND UR."UserTitleId" IN (5)
-- 	)
-- 	SELECT 
-- 		U."UserId",
-- 		U."FullName",
-- 		S."KPILogId",
-- 		S."KPI",
-- 		S."CreatedDate"
-- 	FROM tmp2 U
-- 		LEFT JOIN tmp S ON U."UserId" = S."UserId" AND S."Id" = 1
-- 	WHERE (COALESCE(p_user_id, 0) = 0 OR p_user_id = U."UserId")
-- 	ORDER BY
-- 		U."TypeUserId",
-- 		U."UserId";
	WITH tmp AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY K."UserId", K."WeekId", K."SalePointId", K."CriteriaId" ORDER BY K."CreatedDate" DESC) AS "Id",
			K."KPILogId",
			K."UserId",
			U."FullName",
			UR."UserTitleId",
			K."WeekId",
			K."CriteriaId",
			C."CriteriaName",
			K."SalePointId",
			SP."SalePointName",
			K."KPI",
			K."CreatedDate",
			U."TypeUserId"
		FROM "KPILog" K	
			JOIN "Criteria" C ON K."CriteriaId" = C."CriteriaId"
			JOIN "User" U ON K."UserId" = U."UserId"
			JOIN "UserRole" UR ON U."UserId" = UR."UserId"
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = K."SalePointId"
		WHERE K."IsDeleted" IS FALSE	
			AND K."Month" = p_month
	)
	SELECT 
		K."KPILogId",
		K."UserId",
		K."FullName",
		K."UserTitleId",
		K."WeekId",
		K."CriteriaId",
		K."CriteriaName",
		K."SalePointId",
		(SELECT S."SalePointName" FROM "SalePoint" S WHERE S."SalePointId" = K."SalePointId"),
		K."KPI",
		K."CreatedDate"
	FROM tmp K
	WHERE K."Id" = 1
		AND (COALESCE(p_user_id, 0) = 0 OR p_user_id = K."UserId")
	ORDER BY 
		K."TypeUserId",
		K."UserId",	
		K."CriteriaId";
END;
$$;


ALTER FUNCTION public.crm_user_get_list_kpi_of_user_by_month(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: crm_user_get_list_manager_borrow_for_confirm(integer, timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_manager_borrow_for_confirm(p_user_id integer DEFAULT 0, p_date timestamp without time zone DEFAULT now(), p_page_size integer DEFAULT 100, p_page_number integer DEFAULT 1) RETURNS TABLE("ConfirmLogId" integer, "ActionDate" timestamp without time zone, "ActionBy" integer, "ActionByName" character varying, "ConfirmStatusId" integer, "ConfirmStatusName" character varying, "DataConfirm" text, "Note" character varying, "UserId" integer, "FullName" character varying)
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN
	RETURN QUERY 
	SELECT 
		CL."ConfirmLogId",
		CL."ActionDate",
		CL."ActionBy",
		CL."ActionByName",
		CL."ConfirmStatusId",
		CS."ConfirmStatusName",
		(
			SELECT
				array_to_json(array_agg(T::JSONB ||('{"PaymentName": "'||(SELECT "PaymentName" FROM "FormPayment" WHERE "FormPaymentId" = (T->>'FormPaymentId')::INT)::TEXT||'"}')::JSONB))
			FROM json_array_elements(((CL."Data"::JSON)->>'DataForConfirm')::JSON) T
		)::TEXT AS "DataConfirm",
		(CL."Data"::JSON->>'Note')::VARCHAR AS "Note",
		CL."DataActionInfo"::INT AS "UserId",
		U."FullName"
	FROM "ConfirmLog" CL 
		JOIN "ConfirmStatus" CS ON CL."ConfirmStatusId" = CS."ConfirmStatusId"
		JOIN "User" U ON CL."DataActionInfo"::INT = U."UserId"
	WHERE CL."ConfirmFor" = 5
		AND (CL."DataActionInfo"::INT = p_user_id OR p_user_id = 0)
		AND CL."IsDeleted" IS FALSE
		AND CL."ActionDate"::DATE = p_date::DATE
	ORDER BY CL."ActionDate" ASC
	OFFSET v_offset_row LIMIT p_page_size;	
END;
$$;


ALTER FUNCTION public.crm_user_get_list_manager_borrow_for_confirm(p_user_id integer, p_date timestamp without time zone, p_page_size integer, p_page_number integer) OWNER TO postgres;

--
-- Name: crm_user_get_list_off_of_leader(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_off_of_leader(p_month character varying) RETURNS TABLE("UserId" integer, "FullName" character varying, "Date" date, "Note" character varying, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT 
		LO."UserId",
		U."FullName",
		LO."WorkingDate",
		LO."Note",
		LO."ActionBy",
		LO."ActionByName",
		LO."ActionDate"
	FROM "LeaderOffLog" LO
		JOIN "User" U ON LO."UserId" = U."UserId"
	WHERE TO_CHAR(LO."WorkingDate", 'YYYY-MM') = p_month
		AND LO."IsDeleted" IS FALSE
	ORDER BY 
		LO."WorkingDate";
END;
$$;


ALTER FUNCTION public.crm_user_get_list_off_of_leader(p_month character varying) OWNER TO postgres;

--
-- Name: crm_user_get_list_quitjob(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_quitjob(p_page_size integer, p_page_number integer, p_usertitle_id integer) RETURNS TABLE("RowNumber" bigint, "TotalCount" bigint, "UserId" integer, "Account" character varying, "Phone" character varying, "FullName" character varying, "Email" character varying, "IsActive" boolean, "IsDeleted" boolean, "StartDate" date, "EndDate" date, "UserTitleId" integer, "UserTitleName" character varying, "SalePointId" integer, "BasicSalary" bigint, "Address" character varying, "BankAccount" character varying, "NumberIdentity" character varying, "IsIntern" boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_offset_row INT8 := p_page_size * (p_page_number - 1);
BEGIN
	
	RETURN QUERY 
	WITH tmp AS(
		SELECT
			ROW_NUMBER() OVER(PARTITION BY BS."UserId" ORDER BY BS."CreatedDate" DESC) AS "Id",
			BS."UserId",
			BS."Salary"
		FROM "BasicSalary" BS
	),
	tmp2 AS (
		SELECT * 
		FROM tmp 
		WHERE tmp."Id" = 1
	)
	SELECT 
		ROW_NUMBER() OVER (ORDER BY U."UserId") "RowNumber",
		COUNT(1) OVER() AS "TotalCount",
		U."UserId",
		U."Account",
		U."Phone",
		U."FullName",
		U."Email",
		U."IsActive",
		U."IsDeleted",
		U."StartDate",
		U."EndDate",
		UT."UserTitleId",
		UT."UserTitleName",
		U."SalePointId",
		COALESCE(T."Salary", 0) AS "BasicSalary",
		U."Address",
		U."BankAccount",
		U."NumberIdentity",
		U."IsIntern"
	FROM "User" U
		JOIN "UserRole" UR ON UR."UserId" = U."UserId"
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
		LEFT JOIN tmp2 T ON T."UserId" = U."UserId"
	WHERE (COALESCE(p_usertitle_id, 0) = 0 OR UT."UserTitleId" = p_usertitle_id)
		AND UT."UserTitleId" <> 1
 AND U."IsActive" IS TRUE
-- 		AND U."IsIntern" IS FALSE
	ORDER BY 
		U."IsActive" DESC,
		UR."UserTitleId",
		U."SalePointId",
		U."UserId"
	OFFSET v_offset_row LIMIT 100000;
	
END;
$$;


ALTER FUNCTION public.crm_user_get_list_quitjob(p_page_size integer, p_page_number integer, p_usertitle_id integer) OWNER TO postgres;

--
-- Name: crm_user_get_list_salepoint_in_date(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_salepoint_in_date(p_user_id integer, p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("ShiftDistributeId" integer, "ShiftId" integer, "SalePointId" integer, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	SELECT
		SD."ShiftDistributeId",
		SD."ShiftId",
		SD."SalePointId",
		SP."SalePointName"
	FROM "ShiftDistribute" SD 
		JOIN "SalePoint" SP ON SD."SalePointId" = SP."SalePointId"
	WHERE SD."UserId" = p_user_id
		AND SD."DistributeDate" = p_date::DATE
	ORDER BY SD."ShiftId";
END;
$$;


ALTER FUNCTION public.crm_user_get_list_salepoint_in_date(p_user_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_user_get_list_target(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_list_target() RETURNS TABLE("ResponsibilityLottery" text, "TargetVietlott" text, "TargetLottery" text, "TargetKPI" text, "TargetKPILeader" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	RETURN QUERY
	WITH tmp AS(
		SELECT 
			TD."TargetDataId",
			TD."TargetDataTypeId",
			TD."FromValue" AS "minTarget",
			TD."ToValue" AS "maxTarget",
			TD."Value" AS "commission"
		FROM "TargetData" TD
		WHERE TD."IsDeleted" IS FALSE
	),
	tmp2 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "ResponsibilityLottery"
		FROM (
			SELECT
				T."TargetDataId",
				T."minTarget",
				T."maxTarget",
				T."commission"
			FROM tmp T
			WHERE T."TargetDataTypeId" = 1
			ORDER BY T."minTarget"
		) R
	),
	tmp3 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "TargetVietlott"
		FROM (
			SELECT
				T."TargetDataId",
				T."minTarget",
				T."maxTarget",
				T."commission"
			FROM tmp T
			WHERE T."TargetDataTypeId" = 2
			ORDER BY T."minTarget"
		) R
	),
	tmp4 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "TargetLottery"
		FROM (
			SELECT
				T."TargetDataId",
				T."minTarget",
				T."maxTarget",
				T."commission"
			FROM tmp T
			WHERE T."TargetDataTypeId" = 3
			ORDER BY T."minTarget"
		) R
	),
	tmp5 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "TargetKPI"
		FROM (
			SELECT
				T."TargetDataId",
				T."minTarget",
				T."maxTarget",
				T."commission"
			FROM tmp T
			WHERE T."TargetDataTypeId" = 4
			ORDER BY T."minTarget"
		) R
	),
	tmp6 AS (
		SELECT ARRAY_TO_JSON(ARRAY_AGG(R))::TEXT AS "TargetKPILeader"
		FROM (
			SELECT
				T."TargetDataId",
				T."minTarget",
				T."maxTarget",
				T."commission"
			FROM tmp T
			WHERE T."TargetDataTypeId" = 5
			ORDER BY T."minTarget"
		) R
	)
	SELECT
		tmp2."ResponsibilityLottery",
		tmp3."TargetVietlott",
		tmp4."TargetLottery",
		tmp5."TargetKPI",
		tmp6."TargetKPILeader"
	FROM tmp2, tmp3, tmp4, tmp5, tmp6;
END;
$$;


ALTER FUNCTION public.crm_user_get_list_target() OWNER TO postgres;

--
-- Name: crm_user_get_session_info(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_session_info(p_user_id integer) RETURNS TABLE("UserId" integer, "UserRoleId" integer, "Account" character varying, "FullName" character varying, "Email" character varying, "UserTitleId" integer, "UserTitleName" character varying, "SubUserTitle" text, "IsSuperAdmin" boolean, "IsManager" boolean, "IsStaff" boolean, "SalePointId" integer, "ShiftDistributeId" integer, "IsIntern" boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_user_role_id INT;
	v_user_title_id INT;
	v_user_title_name VARCHAR;
	v_sub_user_title INT[];
BEGIN
	
	SELECT 
		UR."UserRoleId",
		UT."UserTitleId",
		UT."UserTitleName",
		UR."SubUserTitleId" 
	INTO v_user_role_id, v_user_title_id, v_user_title_name, v_sub_user_title
	FROM "UserRole" UR 
		JOIN "UserTitle" UT ON UT."UserTitleId" = UR."UserTitleId"
	WHERE UR."UserId" = p_user_id;
	
	RETURN QUERY 
	WITH tmp AS(
		SELECT * FROM fn_get_shift_info(v_user_role_id)
	)
	SELECT 
		p_user_id,
		v_user_role_id,
		U."Account",
		U."FullName",
		U."Email",
		v_user_title_id,
		v_user_title_name,
		(
			CASE WHEN array_length(v_sub_user_title, 1) > 0 THEN
				(SELECT
					array_to_json(array_agg(
						(	
							SELECT 
								json_build_object(
									'UserTitleId',
									A,
									'UserTitleName',
									UT."UserTitleName"
								)
							FROM "UserTitle" UT 
							WHERE UT."UserTitleId" = A 
						)::JSON
					))
				FROM UNNEST(v_sub_user_title) A)::TEXT
			ELSE
				'[]'
			END
		)::TEXT AS "SubUserTitle",
		t."IsSuperAdmin",
		t."IsManager",
		t."IsStaff",
		t."SalePointId",
		t."ShiftDistributeId",
		U."IsIntern"
	FROM "User" U
		JOIN tmp t ON t."UserId" = U."UserId"
	WHERE U."IsActive" IS TRUE AND U."IsDeleted" IS FALSE AND U."UserId" = p_user_id;
	
END;
$$;


ALTER FUNCTION public.crm_user_get_session_info(p_user_id integer) OWNER TO postgres;

--
-- Name: crm_user_get_target_master(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_get_target_master(p_user_title_id integer DEFAULT 0) RETURNS TABLE("TargetMasterLevelData" text, "TargetMasterLevel" text, "TargetKPI" text, "TargetKPILeader" text)
    LANGUAGE plpgsql
    AS $$

BEGIN
	RETURN QUERY
	WITH tmp AS (
		SELECT 
			C."CriteriaId",
			C."CriteriaName",
			C."UserTitleId"
		FROM "Criteria" C
		WHERE (C."UserTitleId" = p_user_title_id OR p_user_title_id = 0)
		ORDER BY
			C."UserTitleId",
			C."CriteriaId"
	),
	tmp2 AS (
		SELECT
			T."CriteriaId",
			T."UserTitleId",
			array_to_json(
				array_agg(
					TO_JSONB(TM.*)
				)	
			) AS "TargetMaster"
		FROM tmp T
			JOIN "TargetMaster" TM ON T."CriteriaId" = TM."CriteriaId"
		GROUP BY 
			T."CriteriaId",
			T."UserTitleId"
	),
	tmp3 AS (
		SELECT DISTINCT 
			TM."LevelId", 
			T."UserTitleId",
			TM."TargetMasterName"
		FROM tmp T
			JOIN "TargetMaster" TM ON T."CriteriaId" = TM."CriteriaId"
		ORDER BY 
			TM."LevelId"
	),
	tmp4 AS (
		SELECT
			array_to_json(array_agg(R))::TEXT AS "TargetMasterLevelData"
		FROM (
			SELECT T.* 
			FROM tmp2 T
			ORDER BY 
				T."UserTitleId",
				T."CriteriaId"
		) R
	),
	tmp5 AS (
		SELECT
			array_to_json(array_agg(R))::TEXT AS "TargetMasterLevel"
		FROM (
			SELECT * FROM tmp3
		) R 
	),
	tmp6 AS (
		SELECT 
			T."TargetKPI",
			T."TargetKPILeader"
		FROM crm_user_get_list_target() T
	)
	SELECT 
		tmp4."TargetMasterLevelData",
		tmp5."TargetMasterLevel",
		tmp6."TargetKPI",
		tmp6."TargetKPILeader"
	FROM tmp4
		JOIN tmp5 ON TRUE
		JOIN tmp6 ON TRUE;	
END;
$$;


ALTER FUNCTION public.crm_user_get_target_master(p_user_title_id integer) OWNER TO postgres;

--
-- Name: crm_user_insert_promotioncode(timestamp without time zone, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_insert_promotioncode(p_date timestamp without time zone, p_total_number bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;
BEGIN   
	raise notice '%', p_date;
	WITH tmp AS
	(
		SELECT 
			A::INT AS "Number",
			p_date::DATE AS "Date"
		FROM generate_series(1, p_total_number) A
	)
	INSERT INTO "PromotionCode" ("PromotionCode", "Date")
	SELECT 
		CONCAT( SUBSTRING('000000',1,(6 - LENGTH(T."Number"::VARCHAR(255)))), T."Number"::VARCHAR(255)), 
		T."Date"
	FROM tmp T
	ORDER BY RANDOM();

    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_user_insert_promotioncode(p_date timestamp without time zone, p_total_number bigint) OWNER TO postgres;

--
-- Name: crm_user_pay_for_borrow(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_pay_for_borrow(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
-- DECLARE
-- 	v_id INT;
-- 	v_mess TEXT;
-- 	ele JSON := p_data::JSON;
-- 	v_time TIMESTAMP := NOW();
-- BEGIN
-- 	--INSERT
-- 	IF p_action_type = 1 THEN 
		
-- 		INSERT INTO "ManagerBorrow"(
-- 			"UserId",
-- 			"FormPaymentId",
-- 			"Price",
-- 			"CreatedBy",
-- 			"CreatedByName",
-- 			"CreatedDate",
-- 			"Note",
-- 			"IsDeleted",
-- 			"IsPay"
-- 		)
-- 		VALUES(
-- 			(ele->>'UserId')::INT,
-- 			COALESCE((ele->>'FormPaymentId')::INT, 1),
-- 			(ele->>'Price')::NUMERIC,
-- 			p_action_by,
-- 			p_action_by_name,
-- 			v_time,
-- 			(ele->>'Note')::VARCHAR,
-- 			FALSE,
-- 			TRUE			
-- 		)RETURNING "ManagerBorrowId" INTO v_id;
				
-- 		v_mess := 'Thêm thành công';
		
-- 	--UPDATE
-- 	ELSEIF p_action_type = 2 THEN
-- 		--DO SOMETHING
		
-- 		v_id := 1;
-- 		v_mess := 'Cập nhật thành công';
		
-- 	--DELETE
-- 	ELSEIF p_action_type = 3 THEN
	
-- 		IF (ele->>'ManagerBorrowId')::INT IS NOT NULL THEN
		
-- 			UPDATE "ManagerBorrow"
-- 			SET	
-- 				"IsDeleted" = TRUE,
-- 				"CreatedBy" = p_action_by,
-- 				"CreatedByName" = p_action_by_name,
-- 				"CreatedDate" = v_time
-- 			WHERE "ManagerBorrowId" = (ele->>'ManagerBorrowId')::INT;
			
-- 			v_id := 1;
-- 			v_mess := 'Xóa thành công';
-- 		ELSE 
-- 			RAISE 'Không có gì để xoá';
-- 		END IF;
		
-- 	END IF;
	
-- 	RETURN QUERY
-- 	SELECT v_id, v_mess;

-- 	EXCEPTION WHEN OTHERS THEN
-- 	BEGIN
-- 		v_id := -1;
-- 		v_mess := sqlerrm;
-- 		RETURN QUERY
-- 		SELECT v_id, v_mess;
-- 	END;

-- END;


-----


DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON := p_data::JSON;
	v_time TIMESTAMP := NOW();
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		update "ManagerBorrow" set "TotalPay"=(select "TotalPay" from "ManagerBorrow" where "ManagerBorrowId" = (ele->>'ManagerBorrowId')::INT)::NUMERIC+(ele->>'Price')::NUMERIC
		where "ManagerBorrowId" = (ele->>'ManagerBorrowId')::INT;
-- 		INSERT INTO "ManagerBorrow"(
-- 			"UserId",
-- 			"FormPaymentId",
-- 			"Price",
-- 			"CreatedBy",
-- 			"CreatedByName",
-- 			"CreatedDate",
-- 			"Note",
-- 			"IsDeleted",
-- 			"IsPay"
-- 		)
-- 		VALUES(
-- 			(ele->>'UserId')::INT,
-- 			COALESCE((ele->>'FormPaymentId')::INT, 1),
-- 			(ele->>'Price')::NUMERIC,
-- 			p_action_by,
-- 			p_action_by_name,
-- 			v_time,
-- 			(ele->>'Note')::VARCHAR,
-- 			FALSE,
-- 			TRUE			
-- 		)
	update "ManagerBorrow" SET "IsPay" = TRUE
	where "ManagerBorrowId" = (ele->>'ManagerBorrowId')::INT  and (select ("Price"+"Commission") - "TotalPay" from "ManagerBorrow" where  "ManagerBorrowId" = (ele->>'ManagerBorrowId')::INT)=0;
	-- 	RETURNING "ManagerBorrowId" INTO v_id;
		v_id := 1;		
		v_mess := 'Thêm thành công';
		
	--UPDATE
	ELSEIF p_action_type = 2 THEN
		--DO SOMETHING
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
		
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		IF (ele->>'ManagerBorrowId')::INT IS NOT NULL THEN
		
			UPDATE "ManagerBorrow"
			SET	
				"IsDeleted" = TRUE,
				"CreatedBy" = p_action_by,
				"CreatedByName" = p_action_by_name,
				"CreatedDate" = v_time
			WHERE "ManagerBorrowId" = (ele->>'ManagerBorrowId')::INT;
			
			v_id := 1;
			v_mess := 'Xóa thành công';
		ELSE 
			RAISE 'Không có gì để xoá';
		END IF;
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;

$$;


ALTER FUNCTION public.crm_user_pay_for_borrow(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: crm_user_shift_distribute_month(integer, character varying, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_shift_distribute_month(p_action_by integer, p_action_by_name character varying, p_month character varying, p_distribute_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_distribute_data::JSON;
	ele JSON;
	v_shift_main_id INT;
	shift JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
		IF NOT EXISTS (SELECT 1 FROM "ShiftMain" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "Month" = p_month) THEN
			
			INSERT INTO "ShiftMain"(
				"SalePointId",
				"Month",
				"MainUser"
			) VALUES (
				(ele ->> 'SalePointId')::INT,
				p_month,
				(ele ->> 'MainShift')
			) RETURNING "ShiftMainId" INTO v_shift_main_id;
		
		ELSE

			UPDATE "ShiftMain"
			SET
				"MainUser" = (ele ->> 'MainShift')
			WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "Month" = p_month
			RETURNING "ShiftMainId" INTO v_shift_main_id;
		
		END IF;
		
		FOR shift IN SELECT * FROM json_array_elements((ele ->> 'ShiftData')::JSON) LOOP
		
			IF NOT EXISTS (SELECT 1 FROM "ShiftDistribute" S WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT 
				AND S."DistributeDate" = (shift ->> 'DistributeDate')::DATE 
				AND S."ShiftId" = (shift ->> 'ShiftId')::INT) THEN	
			
				INSERT INTO "ShiftDistribute"(
					"DistributeDate",
					"SalePointId",
					"ShiftId",
					"UserId",
					"ShiftTypeId",
					"Note",
					"ShiftMainId",
					"ActionBy",
					"ActionByName"
				) VALUES (
					(shift ->> 'DistributeDate')::DATE,
					(ele ->> 'SalePointId')::INT,
					(shift ->> 'ShiftId')::INT,
					(shift ->> 'UserId')::INT,
					(shift ->> 'ShiftTypeId')::INT,
					(shift ->> 'Note'),
					v_shift_main_id,
					p_action_by,
					p_action_by_name
				);
				
			ELSE 
			
				UPDATE "ShiftDistribute" S
				SET
					"UserId" = (shift ->> 'UserId')::INT,
					"Note" = (shift ->> 'Note'),
					"ShiftTypeId" = (shift ->> 'ShiftTypeId')::INT,
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = NOW()
				WHERE S."DistributeDate" = (shift ->> 'DistributeDate')::DATE
					AND S."SalePointId" = (ele ->> 'SalePointId')::INT
					AND S."ShiftId" = (shift ->> 'ShiftId')::INT;
				
			END IF;
		
		END LOOP;
		
	END LOOP;
	
	v_mess := 'Thao tác thành công';
	
	RETURN QUERY 
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_shift_distribute_month(p_action_by integer, p_action_by_name character varying, p_month character varying, p_distribute_data text) OWNER TO postgres;

--
-- Name: crm_user_shift_distribute_month_get_data(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_shift_distribute_month_get_data(p_month character varying) RETURNS TABLE("SalePointId" integer, "SalePointName" character varying, "DistributeDate" date, "ShiftId" integer, "UserId" integer, "FullName" character varying, "ShiftTypeId" integer, "ShiftTypeName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

	RETURN QUERY
	SELECT 
		SD."SalePointId", 
		SP."SalePointName", 
		SD."DistributeDate", 
		SD."ShiftId", 
		SD."UserId", 
		u."FullName", 
		SD."ShiftTypeId", 
		ST."ShiftTypeName"
	FROM "SalePoint" SP
		LEFT JOIN "ShiftDistribute" SD ON SP."SalePointId"= SD."SalePointId"
		LEFT JOIN "ShiftType" ST ON SD."ShiftTypeId" = ST."ShiftTypeId"
		LEFT JOIN "User" U On U."UserId" = SD."UserId"
	WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month;
	
END;
$$;


ALTER FUNCTION public.crm_user_shift_distribute_month_get_data(p_month character varying) OWNER TO postgres;

--
-- Name: crm_user_shift_distribute_month_intern(integer, character varying, character varying, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_shift_distribute_month_intern(p_action_by integer, p_action_by_name character varying, p_month character varying, p_distribute_data text, p_attendance_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_distribute_data::JSON;
	v_att_data JSON := p_attendance_data::JSON;
	ele JSON;
	v_shift_main_id INT;
	shift JSON;
	ala JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
		IF NOT EXISTS (SELECT 1 FROM "ShiftMainForIntern" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "Month" = p_month FOR UPDATE) THEN
			
			INSERT INTO "ShiftMainForIntern"(
				"SalePointId",
				"Month",
				"MainUser"
			) VALUES (
				(ele ->> 'SalePointId')::INT,
				p_month,
				(ele ->> 'MainShift')
			) RETURNING "ShiftMainId" INTO v_shift_main_id;
		
		ELSE

			UPDATE "ShiftMain"
			SET
				"MainUser" = (ele ->> 'MainShift')
			WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "Month" = p_month
			RETURNING "ShiftMainId" INTO v_shift_main_id;
		
		END IF;
		
		FOR shift IN SELECT * FROM json_array_elements((ele ->> 'ShiftData')::JSON) LOOP
		
			IF NOT EXISTS (SELECT 1 FROM "ShiftDistributeForIntern" S WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT 
				AND S."DistributeDate" = (shift ->> 'DistributeDate')::DATE 
				AND S."ShiftId" = (shift ->> 'ShiftId')::INT  FOR UPDATE) THEN	
			
				INSERT INTO "ShiftDistributeForIntern"(
					"DistributeDate",
					"SalePointId",
					"ShiftId",
					"UserId",
					"ShiftTypeId",
					"Note",
					"ShiftMainId",
					"ActionBy",
					"ActionByName"
				) VALUES (
					(shift ->> 'DistributeDate')::DATE,
					(ele ->> 'SalePointId')::INT,
					(shift ->> 'ShiftId')::INT,
					(shift ->> 'UserId')::INT,
					(shift ->> 'ShiftTypeId')::INT,
					(shift ->> 'Note'),
					v_shift_main_id,
					p_action_by,
					p_action_by_name
				);
				
			ELSE 
			
				UPDATE "ShiftDistributeForIntern" S
				SET
					"UserId" = (shift ->> 'UserId')::INT,
					"Note" = (shift ->> 'Note'),
					"ShiftTypeId" = (shift ->> 'ShiftTypeId')::INT,
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = NOW()
				WHERE S."DistributeDate" = (shift ->> 'DistributeDate')::DATE
					AND S."SalePointId" = (ele ->> 'SalePointId')::INT
					AND S."ShiftId" = (shift ->> 'ShiftId')::INT;
				
			END IF;
		
		END LOOP;
		
	END LOOP;
	
	FOR ala IN SELECT * FROM json_array_elements(v_att_data) LOOP
	
		IF NOT EXISTS(SELECT 1 FROM "ShiftAttendanceForIntern" SA WHERE SA."UserId" = (ala ->> 'UserId')::INT AND SA."DistributeMonth" = p_month  FOR UPDATE) THEN
		
			INSERT INTO "ShiftAttendanceForIntern"(
				"DistributeMonth",
				"UserId",
				"TotalShift",
				"TotalAbsent",
				"TotalOT",
				"TotalMakeup",
				"IsMainShift",
				"LastActionBy",
				"LastActionByName"
			) VALUES(
				p_month,
				(ala ->> 'UserId')::INT,
				(ala ->> 'TotalShift')::INT,
				(ala ->> 'TotalAbsent')::INT,
				(ala ->> 'TotalOT')::INT,
				(ala ->> 'TotalMakeup')::INT,
				(ala ->> 'IsMainShift')::BOOL,
				p_action_by,
				p_action_by_name
			);
		
		ELSE
		
			UPDATE "ShiftAttendanceForIntern" SA
			SET
				"TotalShift" = (ala ->> 'TotalShift')::INT,
				"TotalAbsent" = (ala ->> 'TotalAbsent')::INT,
				"TotalOT" = (ala ->> 'TotalOT')::INT,
				"TotalMakeup" = (ala ->> 'TotalMakeup')::INT,
				"IsMainShift" = (ala ->> 'IsMainShift')::BOOL,
				"LastActionDate" = NOW(),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name
			WHERE SA."UserId" = (ala ->> 'UserId')::INT
				AND SA."DistributeMonth" = p_month;
		
		END IF;
	
	END LOOP;
	
	v_mess := 'Thao tác thành công';
	
	RETURN QUERY 
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_shift_distribute_month_intern(p_action_by integer, p_action_by_name character varying, p_month character varying, p_distribute_data text, p_attendance_data text) OWNER TO postgres;

--
-- Name: crm_user_shift_distribute_month_v2(integer, character varying, character varying, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_shift_distribute_month_v2(p_action_by integer, p_action_by_name character varying, p_month character varying, p_distribute_data text, p_attendance_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT := 1;
	v_mess TEXT;
	v_data JSON := p_distribute_data::JSON;
	v_att_data JSON := p_attendance_data::JSON;
	ele JSON;
	v_shift_main_id INT;
	shift JSON;
	ala JSON;
BEGIN
	
	FOR ele IN SELECT * FROM json_array_elements(v_data) LOOP
		
		IF NOT EXISTS (SELECT 1 FROM "ShiftMain" WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "Month" = p_month FOR UPDATE) THEN
			
			INSERT INTO "ShiftMain"(
				"SalePointId",
				"Month",
				"MainUser"
			) VALUES (
				(ele ->> 'SalePointId')::INT,
				p_month,
				(ele ->> 'MainShift')
			) RETURNING "ShiftMainId" INTO v_shift_main_id;
		
		ELSE

			UPDATE "ShiftMain"
			SET
				"MainUser" = (ele ->> 'MainShift')
			WHERE "SalePointId" = (ele ->> 'SalePointId')::INT AND "Month" = p_month
			RETURNING "ShiftMainId" INTO v_shift_main_id;
		
		END IF;
		
		FOR shift IN SELECT * FROM json_array_elements((ele ->> 'ShiftData')::JSON) LOOP
		
			IF NOT EXISTS (SELECT 1 FROM "ShiftDistribute" S WHERE S."SalePointId" = (ele ->> 'SalePointId')::INT 
				AND S."DistributeDate" = (shift ->> 'DistributeDate')::DATE 
				AND S."ShiftId" = (shift ->> 'ShiftId')::INT  FOR UPDATE) THEN	
			
				INSERT INTO "ShiftDistribute"(
					"DistributeDate",
					"SalePointId",
					"ShiftId",
					"UserId",
					"ShiftTypeId",
					"Note",
					"ShiftMainId",
					"ActionBy",
					"ActionByName"
				) VALUES (
					(shift ->> 'DistributeDate')::DATE,
					(ele ->> 'SalePointId')::INT,
					(shift ->> 'ShiftId')::INT,
					(shift ->> 'UserId')::INT,
					(shift ->> 'ShiftTypeId')::INT,
					(shift ->> 'Note'),
					v_shift_main_id,
					p_action_by,
					p_action_by_name
				);
				
			ELSE 
			
				UPDATE "ShiftDistribute" S
				SET
					"UserId" = (shift ->> 'UserId')::INT,
					"Note" = (shift ->> 'Note'),
					"ShiftTypeId" = (shift ->> 'ShiftTypeId')::INT,
					"ActionBy" = p_action_by,
					"ActionByName" = p_action_by_name,
					"ActionDate" = NOW()
				WHERE S."DistributeDate" = (shift ->> 'DistributeDate')::DATE
					AND S."SalePointId" = (ele ->> 'SalePointId')::INT
					AND S."ShiftId" = (shift ->> 'ShiftId')::INT;
				
			END IF;
		
		END LOOP;
		
	END LOOP;
	
	FOR ala IN SELECT * FROM json_array_elements(v_att_data) LOOP
	
		IF NOT EXISTS(SELECT 1 FROM "ShiftAttendance" SA WHERE SA."UserId" = (ala ->> 'UserId')::INT AND SA."DistributeMonth" = p_month  FOR UPDATE) THEN
		
			INSERT INTO "ShiftAttendance"(
				"DistributeMonth",
				"UserId",
				"TotalShift",
				"TotalAbsent",
				"TotalOT",
				"TotalMakeup",
				"IsMainShift",
				"LastActionBy",
				"LastActionByName"
			) VALUES(
				p_month,
				(ala ->> 'UserId')::INT,
				(ala ->> 'TotalShift')::INT,
				(ala ->> 'TotalAbsent')::INT,
				(ala ->> 'TotalOT')::INT,
				(ala ->> 'TotalMakeup')::INT,
				(ala ->> 'IsMainShift')::BOOL,
				p_action_by,
				p_action_by_name
			);
		
		ELSE
		
			UPDATE "ShiftAttendance" SA
			SET
				"TotalShift" = (ala ->> 'TotalShift')::INT,
				"TotalAbsent" = (ala ->> 'TotalAbsent')::INT,
				"TotalOT" = (ala ->> 'TotalOT')::INT,
				"TotalMakeup" = (ala ->> 'TotalMakeup')::INT,
				"IsMainShift" = (ala ->> 'IsMainShift')::BOOL,
				"LastActionDate" = NOW(),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name
			WHERE SA."UserId" = (ala ->> 'UserId')::INT
				AND SA."DistributeMonth" = p_month;
		
		END IF;
	
	END LOOP;
	
	v_mess := 'Thao tác thành công';
	
	RETURN QUERY 
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_shift_distribute_month_v2(p_action_by integer, p_action_by_name character varying, p_month character varying, p_distribute_data text, p_attendance_data text) OWNER TO postgres;

--
-- Name: crm_user_update_event_date(integer, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_event_date(p_action_by integer, p_action_by_name character varying, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	v_cur_time DATE := NOW()::DATE;
ele JSON;
BEGIN

	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		IF((ele->>'Date')::DATE <= v_cur_time) THEN 
			RAISE 'Không thể cập nhật ngày của quá khứ';
		END IF;
	END LOOP;

	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		--Xóa 
		IF((ele ->> 'IsDeleted')::BOOL IS TRUE) THEN 
			UPDATE "EventDay"
			SET "IsDeleted" = TRUE,
				"ModifyBy" = p_action_by,
				"ModifyByName" = p_action_by_name,
				"ModifyDate" = v_cur_time
			WHERE "Date" = (ele ->> 'Date')::DATE AND "IsDeleted" IS FAlSE;
			
			v_id := 1;
			v_mess := 'Xóa thành công';
		-- Nếu không xóa
		ELSEIF((ele ->> 'IsDeleted')::BOOL IS FALSE OR ((ele ->> 'IsDeleted')::BOOL IS NULL)) THEN
			-- Thêm nếu chưa có
			IF(NOT EXISTS(SELECT 1 FROM "EventDay" E WHERE E."Date" = (ele->>'Date')::DATE AND E."IsDeleted" IS FALSE)) THEN 
				INSERT INTO "EventDay"(
					"Year",
					"Date",
					"CreateBy",
					"CreateByName",
					"CreateDate",
					"Month",
					"IsDeleted",
					"Note"					
				)
				VALUES(
					EXTRACT(YEAR FROM (ele ->> 'Date')::DATE),
					(ele ->> 'Date')::DATE,
					p_action_by,
					p_action_by_name,
					v_cur_time,
					EXTRACT(MONTH FROM (ele ->> 'Date')::DATE),
					FALSE,
					(ele ->> 'Note')::VARCHAR
				);
				
				v_id := 1;
				v_mess := 'Thêm thành công';
			-- Cập nhật lại khi đã có và chưa bị xóa
			ELSE 
				UPDATE "EventDay"
				SET
					"Note" = (ele ->> 'Note')::VARCHAR, 
					"ModifyBy" = p_action_by,
					"ModifyByName" = p_action_by_name,
					"ModifyDate" = v_cur_time
				WHERE "Date" = (ele ->> 'Date')::DATE AND "IsDeleted" IS FALSE;
				
				v_id := 1;
				v_mess := 'Cập nhật thành công';
			END IF;
		END IF;
	END LOOP;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
	v_id := -1;
	v_mess := sqlerrm;
	RETURN QUERY
	SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_update_event_date(p_action_by integer, p_action_by_name character varying, p_data text) OWNER TO postgres;

--
-- Name: crm_user_update_info(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_info(p_action_by integer, p_action_by_name character varying, p_user_id integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
	ele JSON := p_data::JSON;
	v_check BOOL;
	v_check_2 BOOL;
	v_account VARCHAR;
	v_email VARCHAR;
BEGIN	

	SELECT "IsActive", "IsDeleted", "Account", "Email" INTO v_check, v_check_2, v_account, v_email FROM "User" WHERE "UserId" = p_user_id;
	IF v_check IS FALSE OR v_check_2 IS TRUE THEN
		IF EXISTS (
			SELECT 1 FROM "User" U
			WHERE U."UserId" <> p_user_id
				AND (U."Account" = v_account OR U."Email" = v_email)
		) THEN
			RAISE 'Không thể cập nhật do tài khoản này đã được tạo mới trong hệ thống';
		END IF;
	END IF;

	UPDATE "User"
	SET
		"IsActive" = COALESCE((ele->> 'IsActive'):: BOOLEAN, "IsActive"),
		"FullName" = COALESCE((ele->> 'FullName'):: VARCHAR,"FullName"),
		"IsDeleted" = COALESCE((ele ->> 'IsDeleted')::BOOL, "IsDeleted"),
		"StartDate" = COALESCE((ele ->> 'StartDate')::DATE, "StartDate"),
		"EndDate" = (CASE WHEN (ele->> 'IsActive'):: BOOLEAN IS FALSE THEN COALESCE((ele ->> 'EndDate')::DATE, "EndDate") ELSE NULL::DATE END),
		"SalePointId" = COALESCE((ele->>'SalePointId')::INT, "SalePointId"),
		"ModifyBy"= p_action_by,	
		"ModifyByName" = p_action_by_name,
		"Address" = COALESCE((ele ->> 'Address')::VARCHAR,"Address"),
		"BankAccount" = COALESCE((ele ->> 'BankAccount')::VARCHAR,"BankAccount"),
		"NumberIdentity" = COALESCE((ele ->> 'NumberIdentity')::VARCHAR,"NumberIdentity"),
		"Phone" = COALESCE ((ele->>'Phone')::VARCHAR,"Phone"),
		"IsIntern" = COALESCE ((ele->>'IsIntern')::BOOL,"IsIntern")
	WHERE "UserId"= p_user_id;
	
	IF((ele->>'BasicSalary')::INT IS NOT NULL) THEN
		IF NOT EXISTS(
		SELECT 1 
		FROM "BasicSalary" C 
		WHERE C."UserId" = p_user_id
			AND C."Salary" = (ele->>'BasicSalary')::INT
			AND C."Salary" = ANY(
				SELECT B."Salary"
				FROM "BasicSalary" B 
				WHERE B."UserId" = p_user_id 
				ORDER BY B."CreatedDate" DESC
				LIMIT 1
			)
		) THEN 
			INSERT INTO "BasicSalary" (
				"UserId",
				"CreatedBy",
				"CreatedByName",
				"Salary"
			)
			VALUES(
				p_user_id,
				p_action_by,
				p_action_by_name,
				(ele->>'BasicSalary')::INT
			);
		END IF;
	END IF;
	
	v_id := 1;
	v_mess := 'Cập nhật người dùng thành công';
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_update_info(p_action_by integer, p_action_by_name character varying, p_user_id integer, p_data text) OWNER TO postgres;

--
-- Name: crm_user_update_kpi_of_user(integer, character varying, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_kpi_of_user(p_action_by integer, p_action_by_name character varying, p_data text, p_action_type integer DEFAULT 1) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
	DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
	v_check NUMERIC;
BEGIN
	--INSERT
	IF p_action_type = 1 THEN 
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			IF ((ele->>'KPILogId')::INT IS NULL) THEN
				
				IF((ele->>'WeekId')::INT IS NULL OR (ele->>'CriteriaId')::INT IS NULL) THEN
					RAISE 'Không đủ thông tin để cập nhật';
				END IF;
				
				SELECT C."MaxValue" INTO v_check FROM "Criteria" C WHERE C."CriteriaId" = (ele->>'CriteriaId')::INT;

				IF((ele->>'KPI')::NUMERIC > v_check) THEN 
					RAISE 'Số KPI nhập vào % lớn hơn số KPI giới hạn %',(ele->>'KPI')::NUMERIC, v_check;
				END IF;
				
				INSERT INTO "KPILog"(
					"UserId",
					"KPI",
					"WeekId",
					"SalePointId",
					"CriteriaId",
					"Note",
					"Month",
					"CreatedBy",
					"CreatedByName",
					"CreatedDate",
					"IsDeleted" 
				)
				VALUES(
					(ele->>'UserId')::INT,
					(ele->>'KPI')::NUMERIC,
					(ele->>'WeekId')::INT,
					COALESCE((ele->>'SalePointId')::INT, 0),
					(ele->>'CriteriaId')::INT,
					(ele->>'Note')::VARCHAR,
					(ele->>'Month')::VARCHAR,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE
				);
				
			ELSE 
			
				UPDATE "KPILog" 
				SET 
					"KPI" = COALESCE((ele->>'KPI')::NUMERIC, "KPI"),
					"Note" = COALESCE((ele->>'Note')::VARCHAR, "Note"),
					"ModifyBy" = p_action_by,
					"ModifyByName" = p_action_by_name,
					"ModifyDate" = v_time
				WHERE "KPILogId" = (ele->>'KPILogId')::INT;
				
			END IF;	
			
		END LOOP;
		
		v_id := 1;
		v_mess := 'Cập nhật thành công';
	--DELETE
	ELSEIF p_action_type = 3 THEN
	
		FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
			UPDATE "KPILog"
			SET 
				"IsDeleted" = TRUE
			WHERE "KPILogId" = (ele->>'KPILogId')::INT;
	
		END LOOP;
			
		v_id := 1;
		v_mess := 'Xoá thành công';
		
	END IF;
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_update_kpi_of_user(p_action_by integer, p_action_by_name character varying, p_data text, p_action_type integer) OWNER TO postgres;

--
-- Name: crm_user_update_scratch_card_full_log(integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_scratch_card_full_log(p_acction_by integer, p_acction_by_name character varying, p_scratchcard_full_log_id integer, p_revision_number integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
v_number INT := (SELECT SFL."TotalReceived" FROM "ScratchcardFullLog" SFL WHERE SFL."ScratchcardFullLogId"= p_scratchcard_full_log_id) - p_revision_number;
BEGIN   
	UPDATE "ScratchcardFullLog"
	SET
			"TotalReceived" = p_revision_number,
			"IsActive" = FALSE
	WHERE "ScratchcardFullLogId"= p_scratchcard_full_log_id;
	UPDATE "ScratchcardFull" 
	SET "TotalRemaining" = ("TotalRemaining" - v_number)
	WHERE "LotteryChannelId" = (SELECT 
																SCFL."LotteryChannelId"
															FROM "ScratchcardFullLog" SCFL
															LEFT JOIN "ScratchcardFull" SCF
																ON SCF."LotteryChannelId" = SCFL."LotteryChannelId"
															WHERE SCFL."ScratchcardFullLogId"= p_scratchcard_full_log_id);
    
    v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_user_update_scratch_card_full_log(p_acction_by integer, p_acction_by_name character varying, p_scratchcard_full_log_id integer, p_revision_number integer) OWNER TO postgres;

--
-- Name: crm_user_update_scratchcard_full_log(integer, character varying, integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_scratchcard_full_log(p_action_by integer, p_action_by_name character varying, p_scratchcard_full_log_id integer, p_revision_number integer, p_is_deleted boolean) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
v_number INT := (SELECT SFL."TotalReceived" FROM "ScratchcardFullLog" SFL WHERE SFL."ScratchcardFullLogId"= p_scratchcard_full_log_id) - p_revision_number;
BEGIN   
	IF p_is_deleted IS FALSE
	THEN
		UPDATE "ScratchcardFullLog"
		SET
				"ActionBy" = p_action_by,
				"ActionByName" = p_action_by_name,
				"TotalReceived" = p_revision_number,
				"IsActive" = TRUE,
				"ActionDate" = NOW()
		WHERE "ScratchcardFullLogId"= p_scratchcard_full_log_id;
		UPDATE "ScratchcardFull" 
			SET 
				"TotalRemaining" = ("TotalRemaining" - v_number),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name,
				"LastActionDate" = NOW()
		WHERE "LotteryChannelId" = (SELECT 
																	SCFL."LotteryChannelId"
																FROM "ScratchcardFullLog" SCFL
																LEFT JOIN "ScratchcardFull" SCF
																	ON SCF."LotteryChannelId" = SCFL."LotteryChannelId"
																WHERE SCFL."ScratchcardFullLogId"= p_scratchcard_full_log_id);
	ELSE
		UPDATE "ScratchcardFullLog"
		SET
				"ActionBy" = p_action_by,
				"ActionByName" = p_action_by_name,
				"IsActive" = FALSE,
				"ActionDate" = NOW()
		WHERE "ScratchcardFullLogId"= p_scratchcard_full_log_id;
		UPDATE "ScratchcardFull" 
			SET 
				"TotalRemaining" = ("TotalRemaining" - v_number),
				"LastActionBy" = p_action_by,
				"LastActionByName" = p_action_by_name,
				"LastActionDate" = NOW()
		WHERE "LotteryChannelId" = (SELECT 
																	SCFL."LotteryChannelId"
																FROM "ScratchcardFullLog" SCFL
																LEFT JOIN "ScratchcardFull" SCF
																	ON SCF."LotteryChannelId" = SCFL."LotteryChannelId"
																WHERE SCFL."ScratchcardFullLogId"= p_scratchcard_full_log_id);
		END IF;
    
    v_id := 1;
    v_mess := 'Update thanh cong';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_user_update_scratchcard_full_log(p_action_by integer, p_action_by_name character varying, p_scratchcard_full_log_id integer, p_revision_number integer, p_is_deleted boolean) OWNER TO postgres;

--
-- Name: crm_user_update_scratchcard_log(integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_scratchcard_log(p_action_by integer, p_action_by_name character varying, p_scratchcard_log_id integer, p_revision_number integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
v_number INT := (SELECT SL."TotalReceived" FROM "ScratchcardLog" SL WHERE SL."ScratchcardLogId" = p_scratchcard_log_id) - p_revision_number;
v_transition_id INT :=  (SELECT SL."TransitionId" FROM "ScratchcardLog" SL WHERE SL."ScratchcardLogId" = p_scratchcard_log_id) ;
v_sale_point_id INT :=  (SELECT SL."SalePointId" FROM "ScratchcardLog" SL WHERE SL."ScratchcardLogId" = p_scratchcard_log_id) ;
v_lottery_channel_id INT :=  (SELECT SL."LotteryChannelId" FROM "ScratchcardLog" SL WHERE SL."ScratchcardLogId" = p_scratchcard_log_id) ;
BEGIN   
	
	-- update ScratchcardLog
	UPDATE "ScratchcardLog"
	SET
		"TotalReceived" = p_revision_number
	WHERE "ScratchcardLogId" = p_scratchcard_log_id;
	
	-- update Scratchcard full
	UPDATE "ScratchcardFull" 
	SET "TotalRemaining" = ("TotalRemaining" + v_number)
	WHERE "LotteryChannelId" = (SELECT 
																SCL."LotteryChannelId"
															FROM "ScratchcardLog" SCL
															LEFT JOIN "ScratchcardFull" SCF
																ON SCF."LotteryChannelId" = SCL."LotteryChannelId"
															WHERE SCL."ScratchcardLogId"= p_scratchcard_log_id);
	
	-- update ScratchcardConfirm
	UPDATE "ScratchcardConfirm"
	SET
		"TotalReceived" = ("TotalReceived" - v_number),
		"TotalRemaining" = ("TotalRemaining" - v_number)
	WHERE "SalePointId" = v_sale_point_id and "LotteryChannelId" = v_lottery_channel_id;
	
	
	-- update Transition
	UPDATE "Transition"
	SET
		"TotalTrans" = p_revision_number,
		"TotalTransDup" = p_revision_number
	WHERE "TransitionId" = v_transition_id;
	
    
    v_id := 1;
    v_mess := 'Update thanh cong';
		raise notice '%',v_number;
   RETURN QUERY   
	 
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_user_update_scratchcard_log(p_action_by integer, p_action_by_name character varying, p_scratchcard_log_id integer, p_revision_number integer) OWNER TO postgres;

--
-- Name: crm_user_update_scratchcard_log_bk(integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_scratchcard_log_bk(p_action_by integer, p_action_by_name character varying, p_scratchcard_log_id integer, p_revision_number integer) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
v_number INT := (SELECT SL."TotalReceived" FROM "ScratchcardLog" SL WHERE SL."ScratchcardLogId" = p_scratchcard_log_id) - p_revision_number;
BEGIN   
	
	UPDATE "ScratchcardLog"
	SET
		"TotalReceived" = p_revision_number
	WHERE "ScratchcardLogId" = p_scratchcard_log_id;
	UPDATE "ScratchcardFull" 
	SET "TotalRemaining" = ("TotalRemaining" + v_number)
	WHERE "LotteryChannelId" = (SELECT 
																SCL."LotteryChannelId"
															FROM "ScratchcardLog" SCL
															LEFT JOIN "ScratchcardFull" SCF
																ON SCF."LotteryChannelId" = SCL."LotteryChannelId"
															WHERE SCL."ScratchcardLogId"= p_scratchcard_log_id);
	UPDATE "Scratchcard"
	SET "TotalReceived" = ("TotalReceived" - v_number),
	"TotalRemaining" = ("TotalRemaining" - v_number)
	WHERE "SalePointId" = (SELECT 
													 SL."SalePointId"
												 FROM "ScratchcardLog" SL
												 WHERE SL."ScratchcardLogId" = p_scratchcard_log_id
												 LIMIT 1)  and "LotteryChannelId"=(SELECT 
																SCL."LotteryChannelId"
															FROM "ScratchcardLog" SCL
															LEFT JOIN "ScratchcardFull" SCF
																ON SCF."LotteryChannelId" = SCL."LotteryChannelId"
															WHERE SCL."ScratchcardLogId"= p_scratchcard_log_id);
    
    
    v_id := 1;
    v_mess := 'Update thanh cong';
		raise notice '%',v_number;
   RETURN QUERY   
	 
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_user_update_scratchcard_log_bk(p_action_by integer, p_action_by_name character varying, p_scratchcard_log_id integer, p_revision_number integer) OWNER TO postgres;

--
-- Name: crm_user_update_shift(integer, character varying, timestamp without time zone, integer, integer, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_shift(p_action_by integer, p_action_by_name character varying, p_distribute_date timestamp without time zone, p_sale_point_id integer, p_shift_id integer, p_user_id integer, p_shift_type_id integer, p_note text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_id INT;
	v_mess TEXT;
BEGIN
	
	UPDATE "ShiftDistribute"
	SET
		"IsActive" = FALSE,
		"ActionBy" = p_action_by,
		"ActionByName" = p_action_by_name,
		"ActionDate" = NOW()
	WHERE "DistributeDate" = p_distribute_date::DATE
		AND "SalePointId" = p_sale_point_id
		AND "ShiftId" = p_shift_id;
		
	INSERT INTO "ShiftDistribute"(
		"DistributeDate",
		"SalePointId",
		"ShiftId",
		"UserId",
		"ActionBy",
		"ActionByName",
		"ShiftTypeId",
		"Note"
	) VALUES (
		p_distribute_date::DATE,
		p_sale_point_id,
		p_shift_id,
		p_user_id,
		p_action_by,
		p_action_by_name,
		p_shift_type_id,
		p_note
	) RETURNING "ShiftDistributeId" INTO v_id;
	
	v_mess := 'Cập nhật ca làm việc thành công';
	
	RETURN QUERY 
	SELECT 	v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN				
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY 
		SELECT 	v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_update_shift(p_action_by integer, p_action_by_name character varying, p_distribute_date timestamp without time zone, p_sale_point_id integer, p_shift_id integer, p_user_id integer, p_shift_type_id integer, p_note text) OWNER TO postgres;

--
-- Name: crm_user_update_target(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_target(p_action_by integer, p_action_by_name character varying, p_target_type_id integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	A INT[] := '{}' ::INT[];
	v_time TIMESTAMP := NOW();
	v_value_index INT;
BEGIN
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		
		IF NOT EXISTS (
			SELECT 1 FROM "TargetData" T 
			WHERE T."TargetDataTypeId" = p_target_type_id 
				AND T."FromValue" = (ele->>'FromValue')::INT 
				AND T."ToValue" = (ele->>'ToValue')::INT
				AND T."Value" = (ele->>'Value')::NUMERIC
				AND T."IsDeleted" IS FALSE
		) THEN 
			-- Insert nếu chưa có
			INSERT INTO "TargetData"(
				"TargetDataTypeId",
				"FromValue",
				"ToValue",
				"Value",
				"IsDeleted",
			  "CreatedBy",
				"CreatedByName",
				"CreatedDate"
			)
			VALUES(
				p_target_type_id,
				(ele->>'FromValue')::INT,
				(ele->>'ToValue')::INT,
				(ele->>'Value')::NUMERIC,
				FALSE,
				p_action_by,
				p_action_by_name,
				v_time
			) RETURNING "TargetDataId" INTO v_value_index;
			
			SELECT array_append(A, v_value_index) INTO A;
			
		ELSE
			--Thêm id của số đã có vào mảng tạm
			SELECT T."TargetDataId" INTO v_value_index 
			FROM "TargetData" T
			WHERE T."TargetDataTypeId" = p_target_type_id 
				AND T."FromValue" = (ele->>'FromValue')::INT 
				AND T."ToValue" = (ele->>'ToValue')::INT
				AND T."Value" = (ele->>'Value')::NUMERIC
				AND T."IsDeleted" IS FALSE;
				
			SELECT array_append(A, v_value_index) INTO A;
						
		END IF;
		
	END LOOP;
	
	UPDATE "TargetData"
	SET "IsDeleted" = TRUE
	WHERE "TargetDataTypeId" = p_target_type_id
		AND "TargetDataId" <> ALL(A)
		AND "IsDeleted" IS FALSE;
	
	v_id := 1;
	v_mess := 'Cập nhật thành công';
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_user_update_target(p_action_by integer, p_action_by_name character varying, p_target_type_id integer, p_data text) OWNER TO postgres;

--
-- Name: crm_user_update_target_new(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_target_new(p_data text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_mess TEXT;
	ele JSON;
BEGIN

	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		UPDATE "TargetData"
		SET "FromValue"=(ele->>'minTarget')::double precision,
			"ToValue"=(ele->>'maxTarget')::double precision,
			"Value"=(ele->>'commission')::numeric
		WHERE "TargetDataId" =(ele->>'TargetDataId')::INT;
	END LOOP;
	v_mess := 'Cập nhật thành công';
END;
$$;


ALTER FUNCTION public.crm_user_update_target_new(p_data text) OWNER TO postgres;

--
-- Name: crm_user_update_total_first(integer, character varying, integer, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_update_total_first(p_action_by integer, p_action_by_name character varying, p_user_id integer, p_total_first bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE   
v_id INT;  
v_mess TEXT;   
BEGIN   
	UPDATE "User"
	SET
		"TotalFirst" = p_total_first,
		"ModifyBy" = p_action_by,
		"ModifyByName" = p_action_by_name
	WHERE "UserId" = p_user_id;
    v_id := 1;
    v_mess := 'Update successful';
   RETURN QUERY   
SELECT
    v_id,
    v_mess;

   EXCEPTION WHEN OTHERS THEN    
			BEGIN        
				v_id := -1;        
				v_mess := sqlerrm;        
	 RETURN QUERY        
			SELECT 
				v_id, 
				v_mess;    
	 END;

END;
$$;


ALTER FUNCTION public.crm_user_update_total_first(p_action_by integer, p_action_by_name character varying, p_user_id integer, p_total_first bigint) OWNER TO postgres;

--
-- Name: crm_user_usertitle_ddl(boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_user_usertitle_ddl(p_get_full boolean DEFAULT false) RETURNS TABLE("Id" integer, "Name" character varying)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT
		"UserTitleId",
		"UserTitleName"
	FROM "UserTitle"
	WHERE p_get_full IS TRUE OR "UserTitleId" <> 1
	ORDER BY "UserTitleId";
	
END;
$$;


ALTER FUNCTION public.crm_user_usertitle_ddl(p_get_full boolean) OWNER TO postgres;

--
-- Name: crm_winning_get_list(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_winning_get_list(p_user_role_id integer, p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("WinningId" integer, "WinningTypeId" integer, "WinningTypeName" character varying, "LotteryNumber" character varying, "LotteryChannelId" integer, "LotteryChannelName" character varying, "Quantity" integer, "WinningPrice" numeric, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "FromSalePointId" integer, "FromSalePointName" character varying, "SalePointId" integer, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN
	
	SELECT 
		f."IsSuperAdmin",
		f."IsManager",
		f."IsStaff",
		f."SalePointId",
		f."ShiftDistributeId"
	INTO v_is_super_admin, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id
	FROM fn_get_shift_info(p_user_role_id) f;
	
	v_is_super_admin := TRUE;
	
	
	IF v_is_super_admin IS TRUE OR v_is_manager IS TRUE THEN
		
		RETURN QUERY 
		SELECT 
			W."WinningId",
			W."WinningTypeId",
			WT."WinningTypeName",
			W."LotteryNumber",
			W."LotteryChannelId",
			LC."LotteryChannelName",
			W."Quantity",
			W."WinningPrice",
			W."ActionBy",
			W."ActionByName",
			W."ActionDate",
			W."FromSalePointId",
			SP2."SalePointName",
			W."SalePointId",
			SP."SalePointName"
		FROM "Winning" W
			JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = W."LotteryChannelId"
			JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN "SalePoint" SP2 ON SP2."SalePointId" = W."FromSalePointId"
		WHERE (COALESCE(p_sale_point_id, 0) = 0 OR W."SalePointId" = p_sale_point_id)
			AND (p_date IS NULL OR W."ActionDate"::DATE = p_date::DATE)
		ORDER BY "ActionDate" DESC;
		
	ELSE
	
		RETURN QUERY 
		SELECT 
			W."WinningId",
			W."WinningTypeId",
			WT."WinningTypeName",
			W."LotteryNumber",
			W."LotteryChannelId",
			LC."LotteryChannelName",
			W."Quantity",
			W."WinningPrice",
			W."ActionBy",
			W."ActionByName",
			W."ActionDate",
			W."FromSalePointId",
			SP2."SalePointName",
			W."SalePointId",
			SP."SalePointName"
		FROM "Winning" W
			JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = W."LotteryChannelId"
			JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN "SalePoint" SP2 ON SP2."SalePointId" = W."FromSalePointId"
		WHERE W."ShiftDistributeId" = v_shift_dis_id
			AND (p_date IS NULL OR W."ActionDate"::DATE = p_date::DATE)
		ORDER BY "ActionDate" DESC;
	
	END IF;
	
END;
$$;


ALTER FUNCTION public.crm_winning_get_list(p_user_role_id integer, p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_winning_get_list_v2(integer, integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_winning_get_list_v2(p_shift_dis_id integer, p_sale_point_id integer, p_date timestamp without time zone) RETURNS TABLE("WinningId" integer, "WinningTypeId" integer, "WinningTypeName" character varying, "LotteryNumber" character varying, "LotteryChannelId" integer, "LotteryChannelName" character varying, "Quantity" integer, "WinningPrice" numeric, "ActionBy" integer, "ActionByName" character varying, "ActionDate" timestamp without time zone, "FromSalePointId" integer, "FromSalePointName" character varying, "SalePointId" integer, "SalePointName" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_sale_point_id INT;
	v_shift_dis_id INT;
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
BEGIN	
		RETURN QUERY 
		SELECT 
			W."WinningId",
			W."WinningTypeId",
			WT."WinningTypeName",
			W."LotteryNumber",
			W."LotteryChannelId",
			LC."LotteryChannelName",
			W."Quantity",
			W."WinningPrice",
			W."ActionBy",
			W."ActionByName",
			W."ActionDate",
			W."FromSalePointId",
			SP2."SalePointName",
			W."SalePointId",
			SP."SalePointName"
		FROM "Winning" W
			JOIN "WinningType" WT ON WT."WinningTypeId" = W."WinningTypeId"
			LEFT JOIN "LotteryChannel" LC ON LC."LotteryChannelId" = W."LotteryChannelId"
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = W."SalePointId"
			LEFT JOIN "SalePoint" SP2 ON SP2."SalePointId" = W."FromSalePointId"
		WHERE W."ShiftDistributeId" = p_shift_dis_id
			AND (p_date IS NULL OR W."ActionDate"::DATE = p_date::DATE)
		ORDER BY "ActionDate" DESC;	
END;
$$;


ALTER FUNCTION public.crm_winning_get_list_v2(p_shift_dis_id integer, p_sale_point_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_winning_type_ddl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_winning_type_ddl() RETURNS TABLE("Id" integer, "Name" character varying, "WinningPrize" numeric, "HasSalePoint" boolean, "HasFourNumber" boolean, "HasChannel" boolean, "CanChangePrice" boolean)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	RETURN QUERY 
	SELECT 
		W."WinningTypeId",
		W."WinningTypeName",
		W."WinningPrize",
		W."HasSalePoint",
		W."HasFourNumber",
		W."HasChannel",
		W."CanChangePrice"
	FROM "WinningType" W
	ORDER BY W."WinningTypeId";
	
END;
$$;


ALTER FUNCTION public.crm_winning_type_ddl() OWNER TO postgres;

--
-- Name: crm_worker_get_list_link_to_call_api(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_worker_get_list_link_to_call_api(p_time timestamp without time zone DEFAULT now()) RETURNS TABLE("LotteryChannelId" integer, "URL" character varying, "Method" character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_day_id INT = EXTRACT(DOW from p_time);
	v_URL VARCHAR = (SELECT C."ConstLink" FROM "ConstLinkApi" C LIMIT 1);
BEGIN
	RETURN QUERY
	SELECT 
		LC."LotteryChannelId",
		(v_URL||'/'||LC."LinkApi"||'.json')::VARCHAR AS "URL",
		'GET'::VARCHAR AS "Method"
	FROM "LotteryChannel" LC
	WHERE LC."LotteryChannelId" < 1000
	--array_position(LC."DayIds", v_day_id) > 0 
		AND LC."IsActive" IS TRUE 
		AND LC."IsDeleted" IS FALSE
		AND LC."RegionId" IN (2,3)
	ORDER BY 
		LC."LotteryChannelId";
END;
$$;


ALTER FUNCTION public.crm_worker_get_list_link_to_call_api(p_time timestamp without time zone) OWNER TO postgres;

--
-- Name: crm_worker_insert_result_lottery(text, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crm_worker_insert_result_lottery(p_data text, p_action_by integer DEFAULT 0, p_action_by_name character varying DEFAULT 'Worker'::character varying) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT;
	v_mess TEXT;
	ele JSON;
	v_time TIMESTAMP := NOW();
	v_lottery_date DATE;
	v_lottery_code VARCHAR;
	v_lottery_channel_id INT;
	v_array_award INT[] := (SELECT ARRAY(select generate_series(1, 9)::INT))::INT[];
	v_list_number_text TEXT;
	v_list_number VARCHAR[];
	v_list_code JSON;
	i INT;
	
    day_of_week INTEGER;
BEGIN
	
    
    
	--INSERT
	FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP
		--Khởi tạo các biến
		v_lottery_date := (ele->>'opendate')::DATE;
		v_lottery_code := LOWER((ele->>'lotterycode')::VARCHAR);
		day_of_week := EXTRACT(DOW FROM v_lottery_date);
		IF day_of_week != 6 THEN
			SELECT LC."LotteryChannelId" INTO v_lottery_channel_id FROM "LotteryChannel" LC WHERE SUBSTRING(LC."LinkApi", 1, "length"(LC."LinkApi") -2) = v_lottery_code;
		ELSE
			IF(v_lottery_code='fzmsc') THEN
				SELECT LC."LotteryChannelId" INTO v_lottery_channel_id FROM "LotteryChannel" LC WHERE LC."LinkApi"='fz1msc-5';
			ELSE
				SELECT LC."LotteryChannelId" INTO v_lottery_channel_id FROM "LotteryChannel" LC WHERE SUBSTRING(LC."LinkApi", 1, "length"(LC."LinkApi") -2) = v_lottery_code;
				END IF;
		END IF;
		
		v_list_code := (ele ->> 'code')::JSON;
		--LOOP qua cá giải 
		FOR i IN SELECT UNNEST(v_array_award)::INT LOOP
			--Kiểm tra nếu chưa có 
			IF NOT EXISTS (
				SELECT 1
				FROM "ResultLottery" RL
				WHERE RL."LotteryDate" = v_lottery_date
					AND RL."LotteryChannelId" = v_lottery_channel_id
					AND RL."TypeAwardId" = i 
			) THEN 
				
				v_list_number_text := (v_list_code->>(CASE WHEN i = 9 THEN 'code' ELSE 'code'||i END))::TEXT;
				--Kiểm tra chuỗi truyền vào có phải mảng không
				IF POSITION('[' IN v_list_number_text) = 0 THEN 
					v_list_number_text := '["'||v_list_number_text||'"]';
				END IF;
				
				v_list_number := (
					SELECT 
						ARRAY_AGG(TRANSLATE(A::TEXT, ',', ''))
					FROM UNNEST(TRANSLATE(v_list_number_text, '[]', '{}')::VARCHAR[]) A
				);
				
				INSERT INTO "ResultLottery"(
					"LotteryChannelId",
					"LotteryDate",
					"TypeAwardId",
					"ListNumber",
					"ActionBy",
					"ActionByName",
					"ActionDate",
					"IsDeleted"
				)
				VALUES(
					v_lottery_channel_id,
					v_lottery_date,
					i,
					v_list_number,
					p_action_by,
					p_action_by_name,
					v_time,
					FALSE		
				);
				
			END IF;
			
			
		END LOOP;
	END LOOP;
	
	INSERT INTO "WorkerLog"(
		"WorkerName"
	)
	VALUES(
		'Lấy data vé số'
	);
	v_id := 1;
	v_mess := 'Thêm thành công';

	
	
	RETURN QUERY
	SELECT v_id, v_mess;

	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		RETURN QUERY
		SELECT v_id, v_mess;
	END;

END;
$$;


ALTER FUNCTION public.crm_worker_insert_result_lottery(p_data text, p_action_by integer, p_action_by_name character varying) OWNER TO postgres;

--
-- Name: dropallfunction_byname(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dropallfunction_byname(functionname text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	funcrow RECORD;
	numfunctions smallint := 0;
	numparameters int;
	i int;
	paramtext text;
BEGIN
FOR funcrow IN SELECT proargtypes,proname FROM pg_proc WHERE LOWER(proname) = LOWER(functionname) LOOP
    numparameters = array_upper(funcrow.proargtypes, 1) + 1;

    i = 0;
    paramtext = '';

    LOOP
        IF i < numparameters THEN
            IF i > 0 THEN
                paramtext = paramtext || ', ';
            END IF;
            paramtext = paramtext || (SELECT typname FROM pg_type WHERE oid = funcrow.proargtypes[i]);
            i = i + 1;
        ELSE
            EXIT;
        END IF;
    END LOOP;

    EXECUTE 'DROP FUNCTION ' || funcrow.proname || '(' || paramtext || ');';
    numfunctions = numfunctions + 1;

END LOOP;

RETURN 'Dropped ' || numfunctions || ' functions';
END;
$$;


ALTER FUNCTION public.dropallfunction_byname(functionname text) OWNER TO postgres;

--
-- Name: dwadaw(integer, character varying, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dwadaw(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_id INT;
    v_mess TEXT;
    ele JSON;
    v_time TIMESTAMP := NOW();
BEGIN
    --INSERT
    IF p_action_type = 1 THEN 
        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP

        END LOOP;

        v_mess := 'Thêm thành công';

    --UPDATE
    ELSEIF p_action_type = 2 THEN
        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP

        END LOOP;

        v_id := 1;
        v_mess := 'Cập nhật thành công';

    --DELETE
    ELSEIF p_action_type = 3 THEN

        FOR ele IN SELECT * FROM json_array_elements(p_data::JSON) LOOP

        END LOOP;

        v_id := 1;
        v_mess := 'Xóa thành công';

    END IF;

    RETURN QUERY
    SELECT v_id, v_mess;

    EXCEPTION WHEN OTHERS THEN
    BEGIN
        v_id := -1;
        v_mess := sqlerrm;
        RETURN QUERY
        SELECT v_id, v_mess;
    END;

END;
$$;


ALTER FUNCTION public.dwadaw(p_action_by integer, p_action_by_name character varying, p_action_type integer, p_data text) OWNER TO postgres;

--
-- Name: fn_edit_monthly_report(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_edit_monthly_report(p_class_id bigint) RETURNS TABLE("Id" bigint, "Message" text)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_id INT8;
	v_mess TEXT;
	v_course_outline_id INT8;
BEGIN

	CREATE TEMP TABLE tmpData ON COMMIT DROP AS
	WITH tmp AS(
		SELECT
			
			CL."TeacherName",
			COI."BookName",
			CL."GoingDate",
			TO_CHAR(CL."GoingDate",'YYYYMM') AS "Month"
		FROM "ClassSession" CL
			LEFT JOIN "CourseOutlineItem" COI ON COI."ClassSessionId" = CL."ClassSessionId"
		WHERE CL."ClassId" = p_class_id
			AND CL."ClassSessionId" NOT IN(3,4)
	),
	tmpMonth AS(
		SELECT
			STRING_AGG(DISTINCT "TeacherName",',') AS "TeacherNames",
			STRING_AGG(DISTINCT "BookName",',') FILTER(WHERE COALESCE("BookName",'') <> '') AS "BookNames",
			"Month"
		FROM tmp
		GROUP BY "Month"
	)
	SELECT
		ROW_NUMBER() OVER(ORDER BY tm."Month") AS "RowId",
		tm."TeacherNames",
		tm."BookNames",
		(SELECT MIN(t."GoingDate") FROM tmp t WHERE t."Month" = tm."Month") AS "FromDate",
		(SELECT MAX(t."GoingDate") FROM tmp t WHERE t."Month" = tm."Month") AS "ToDate"
	FROM tmpMonth tm;

	IF NOT EXISTS(SELECT 1 FROM "MonthlyReport" WHERE "ClassId" = p_class_id) THEN
		
		INSERT INTO "MonthlyReport"(
			"ClassId",
			"MonthNumber"
		) VALUES(
			p_class_id,
			0
		);
		
		INSERT INTO "MonthlyReport"(
			"ClassId",
			"TeacherNames",
			"BookNames",
			"MonthNumber",
			"FromDate",
			"ToDate"
		)
		SELECT
			p_class_id,
			"TeacherNames",
			"BookNames",
			"RowId",
			"FromDate",
			"ToDate"
		FROM tmpData td;
		
		INSERT INTO "MonthlyReport"(
			"ClassId",
			"MonthNumber"
		) VALUES(
			p_class_id,
			(SELECT MAX(td."RowId") FROM tmpData td) + 1
		);
		
	ELSE
	
		UPDATE "MonthlyReport" M
		SET
			"FromDate" = td."FromDate",
			"ToDate" = td."ToDate",
			"ModifiedBy" = p_action_by,
			"ModifiedByName" = p_action_by_name,
			"ModifiedDate" = NOW()
		FROM tmpData td
		WHERE M."ClassId" = p_class_id AND td."RowId" = M."MonthNumber";
	
	END IF;
	
	v_id := p_class_id;
	v_mess := 'Ok';
	
	RETURN QUERY
	SELECT v_id, v_mess;
	
	EXCEPTION WHEN OTHERS THEN
	BEGIN
		v_id := -1;
		v_mess := sqlerrm;
		
		RETURN QUERY
		SELECT v_id, v_mess;
	END;
	
END;
$$;


ALTER FUNCTION public.fn_edit_monthly_report(p_class_id bigint) OWNER TO postgres;

--
-- Name: fn_get_price_by_shift(date, integer, integer, numeric, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_price_by_shift(p_date date, p_sale_point_id integer, p_shift_distribute_id integer, p_price numeric, p_transaction_type_id integer, p_field character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
		DECLARE
			shiftId INT4;
			ShiftDistributeId1 INT4;
			ShiftDistributeId2 INT4;
			price numeric;
			ele record;
			transactionRecord record;
	BEGIN
	IF p_transaction_type_id = 2
		THEN
			FOR ele IN SELECT * FROM "ShiftDistribute" WHERE TO_CHAR("DistributeDate", 'YYYY-MM-DD') =  TO_CHAR(p_date, 'YYYY-MM-DD')  AND "SalePointId" = p_sale_point_id LIMIT 1000 OFFSET 0
			LOOP
				IF ele."ShiftDistributeId" = p_shift_distribute_id
					THEN 
						shiftId = ele."ShiftId";
				END IF;
				
				IF ele."ShiftId" = 1
					THEN ShiftDistributeId1 := ele."ShiftDistributeId";
				ELSE ShiftDistributeId2 := ele."ShiftDistributeId";
				END IF;
			END LOOP;
			
			IF shiftId = 2
				THEN 
					FOR transactionRecord IN SELECT * FROM "Transaction"
							WHERE TO_CHAR("Date", 'YYYY-MM-DD') =  TO_CHAR(p_date, 'YYYY-MM-DD') 
								AND "SalePointId" = p_sale_point_id 
								AND "TransactionTypeId" = p_transaction_type_id 
								AND "IsDeleted" = false
								AND "ShiftDistributeId" = ShiftDistributeId1 LIMIT 1 OFFSET 0
					LOOP
						IF p_field = 'six45'
							THEN price = (p_price - transactionRecord."six45" );
						END IF;
						
						IF p_field = 'six55'
							THEN price = (p_price - transactionRecord."six55" );
						END IF;
						
						IF p_field = 'keno'
							THEN price = (p_price - transactionRecord."keno" );
						END IF;
						
						IF p_field = 'Ticket3d'
							THEN price = (p_price - transactionRecord."Ticket3d" );
						END IF;
						
						IF p_field = 'Ticket3dPro'
							THEN price = (p_price - transactionRecord."Ticket3dPro" );
						END IF;
						
						IF p_field = 'CancleTicket'
							THEN price = (p_price - transactionRecord."CancleTicket" );
						END IF;
						
						IF p_field = 'ReturnWining'
							THEN price = (p_price - transactionRecord."ReturnWining");
						END IF;
				
					END LOOP;
			ELSE price = p_price;
			END IF;
	ELSE price = p_price;
	END IF;
	
	RETURN price;

END;
$$;


ALTER FUNCTION public.fn_get_price_by_shift(p_date date, p_sale_point_id integer, p_shift_distribute_id integer, p_price numeric, p_transaction_type_id integer, p_field character varying) OWNER TO postgres;

--
-- Name: fn_get_price_by_shift(text, integer, integer, numeric, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_price_by_shift(p_month text, p_sale_point_id integer, p_shift_distribute_id integer, p_price numeric, p_transaction_type_id integer, p_field character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
		DECLARE
			shiftId INT4;
			ShiftDistributeId1 INT4;
			ShiftDistributeId2 INT4;
			price numeric;
			ele record;
			transactionRecord record;
	BEGIN
	IF p_transaction_type_id = 2
		THEN
			FOR ele IN SELECT * FROM "ShiftDistribute" WHERE TO_CHAR("DistributeDate", 'YYYY-MM-DD') = p_month AND "SalePointId" = p_sale_point_id LIMIT 1000 OFFSET 0
			LOOP
				IF ele."ShiftDistributeId" = p_shift_distribute_id
					THEN 
						shiftId = ele."ShiftId";
				END IF;
				
				IF ele."ShiftId" = 1
					THEN ShiftDistributeId1 := ele."ShiftDistributeId";
				ELSE ShiftDistributeId2 := ele."ShiftDistributeId";
				END IF;
			END LOOP;
			
			IF shiftId = 2
				THEN 
					FOR transactionRecord IN SELECT * FROM "Transaction"
							WHERE TO_CHAR("Date", 'YYYY-MM-DD') = p_month 
								AND "SalePointId" = p_sale_point_id 
								AND "TransactionTypeId" = p_transaction_type_id 
								AND "IsDeleted" = false
								AND "ShiftDistributeId" = ShiftDistributeId1 LIMIT 1 OFFSET 0
					LOOP
						IF p_field = 'six45'
							THEN price = (p_price - transactionRecord."six45" );
						END IF;
						
						IF p_field = 'six55'
							THEN price = (p_price - transactionRecord."six55" );
						END IF;
						
						IF p_field = 'keno'
							THEN price = (p_price - transactionRecord."keno" );
						END IF;
						
						IF p_field = 'Ticket3d'
							THEN price = (p_price - transactionRecord."Ticket3d" );
						END IF;
						
						IF p_field = 'Ticket3dPro'
							THEN price = (p_price - transactionRecord."Ticket3dPro" );
						END IF;
						
						IF p_field = 'CancleTicket'
							THEN price = (p_price - transactionRecord."CancleTicket" );
						END IF;
	-- 			
					END LOOP;
			ELSE price = p_price;
			END IF;
	ELSE price = p_price;
	END IF;
	
	RETURN price;

END;
$$;


ALTER FUNCTION public.fn_get_price_by_shift(p_month text, p_sale_point_id integer, p_shift_distribute_id integer, p_price numeric, p_transaction_type_id integer, p_field character varying) OWNER TO postgres;

--
-- Name: fn_get_price_by_shift(character varying, integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_price_by_shift(p_month character varying, p_sale_point_id integer, p_shift_distribute_id integer, p_price integer, p_transaction_type_id integer, p_field character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
		DECLARE
			shiftId INT4;
			ShiftDistributeId1 INT4;
			ShiftDistributeId2 INT4;
			price numeric;
			ele record;
			transactionRecord record;
	BEGIN
	IF p_transaction_type_id = 2
		THEN
			FOR ele IN SELECT * FROM "ShiftDistribute" WHERE TO_CHAR("DistributeDate", 'YYYY-MM-DD') = p_month AND "SalePointId" = p_sale_point_id LIMIT 1000 OFFSET 0
			LOOP
				IF ele."ShiftDistributeId" = p_shift_distribute_id
					THEN 
						shiftId = ele."ShiftId";
				END IF;
				IF ele."ShiftId" = 1
					THEN ShiftDistributeId1 := ele."ShiftDistributeId";
				ELSE ShiftDistributeId2 := ele."ShiftDistributeId";
				END IF;
			END LOOP;
			
			IF shiftId = 2
				THEN 
					FOR transactionRecord IN SELECT * FROM "Transaction"
							WHERE TO_CHAR("Date", 'YYYY-MM-DD') = p_month 
								AND "SalePointId" = p_sale_point_id 
								AND "TransactionTypeId" = p_transaction_type_id 
								AND "ShiftDistributeId" = ShiftDistributeId1 LIMIT 1 OFFSET 0
					LOOP
						IF p_field = 'six45'
							THEN price = (p_price - transactionRecord."six45" );
						END IF;
						
						IF p_field = 'six55'
							THEN price = (p_price - transactionRecord."six55" );
						END IF;
						
						IF p_field = 'keno'
							THEN price = (p_price - transactionRecord."keno" );
						END IF;
						
						IF p_field = 'Ticket3d'
							THEN price = (p_price - transactionRecord."Ticket3d" );
						END IF;
						
						IF p_field = 'Ticket3dPro'
							THEN price = (p_price - transactionRecord."Ticket3dPro" );
						END IF;
						
						IF p_field = 'CancleTicket'
							THEN price = (p_price - transactionRecord."CancleTicket" );
						END IF;
						
						IF p_filed = 'ReturnWining'
							THEN price = (p_price - transactionRecord."ReturnWining");
						END IF;
	-- 			
					END LOOP;
			ELSE price = p_price;
			END IF;
	ELSE price = p_price;
	END IF;
	
	RETURN price;

END;
$$;


ALTER FUNCTION public.fn_get_price_by_shift(p_month character varying, p_sale_point_id integer, p_shift_distribute_id integer, p_price integer, p_transaction_type_id integer, p_field character varying) OWNER TO postgres;

--
-- Name: fn_get_salepoint_shiftid(integer, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_salepoint_shiftid(p_shift_distribute integer, p_date date) RETURNS TABLE("SalePointId" integer, "ShiftId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	SELECT 
		ST."SalePointId",
		ST."ShiftId"
	FROM "ShiftTransfer" ST 
	WHERE ST."ActionDate"::DATE = p_date::DATE AND ST."ShiftDistributeId" = p_shift_distribute;
END;
$$;


ALTER FUNCTION public.fn_get_salepoint_shiftid(p_shift_distribute integer, p_date date) OWNER TO postgres;

--
-- Name: fn_get_salepointid_shiftid(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_salepointid_shiftid(p_shift_distribute integer, p_date timestamp without time zone) RETURNS TABLE("SalePointId" integer, "ShiftId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

	RETURN QUERY
	SELECT 
		ST."SalePointid",
		ST."ShiftId"
	FROM "ShiftTransfer" ST 
	WHERE ST."ActionDate"::DATE = '2023-02-10'::DATE AND ST."ShiftDistributeId" = 1074
	LIMIT 1;
END;
$$;


ALTER FUNCTION public.fn_get_salepointid_shiftid(p_shift_distribute integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: fn_get_shift_info(integer, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_shift_info(p_user_role_id integer, p_date timestamp without time zone DEFAULT now()) RETURNS TABLE("UserId" integer, "IsSuperAdmin" boolean, "IsLeader" boolean, "IsManager" boolean, "IsStaff" boolean, "SalePointId" integer, "ShiftDistributeId" integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_sale_point_id INT;
	v_user_id INT;
	v_shift_dis_id INT;
	--
	v_is_super_admin BOOL;
	v_is_manager BOOL;
	v_is_staff BOOL;
	v_is_leader BOOL;
BEGIN
	
	SELECT
		UT."IsSuperAdmin",
		UT."IsLeader",
		UT."IsManager",
		UT."IsStaff",
		UR."UserId"
	INTO 
		v_is_super_admin,
		v_is_leader,
		v_is_manager,
		v_is_staff,
		v_user_id
	FROM "UserRole" UR
		JOIN "UserTitle" UT ON UR."UserTitleId" = UT."UserTitleId"
	WHERE UR."UserRoleId" = p_user_role_id;
	
	IF v_is_super_admin IS TRUE OR v_is_manager IS TRUE OR v_is_leader IS TRUE THEN
		
		RETURN QUERY 
		SELECT v_user_id, v_is_super_admin, v_is_leader, v_is_manager, v_is_staff, NULL::INT, NULL::INT;
	
	ELSE
	
		SELECT 
			SD."SalePointId", SD."ShiftDistributeId" INTO v_sale_point_id, v_shift_dis_id
		FROM "ShiftDistribute" SD 
		WHERE p_date::DATE = SD."DistributeDate" AND SD."UserId" = v_user_id
		ORDER BY EXISTS(SELECT 1 FROM "ShiftTransfer" T WHERE T."ShiftDistributeId" = SD."ShiftDistributeId" AND T."SalePointid" = SD."SalePointId" AND T."ShiftId" = 1), SD."ShiftId"
		LIMIT 1;
		
		RETURN QUERY 
		SELECT v_user_id, v_is_super_admin, v_is_leader, v_is_manager, v_is_staff, v_sale_point_id, v_shift_dis_id;
	
	END IF;

END;
$$;


ALTER FUNCTION public.fn_get_shift_info(p_user_role_id integer, p_date timestamp without time zone) OWNER TO postgres;

--
-- Name: fn_get_total_money_cost(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_total_money_cost(p_month character varying, p_sale_point_id integer) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_price INT;
	v_list_TransitionTypeId INT[] := ARRAY[1, 5, 6, 7];
BEGIN
	v_total_price:= (SELECT 
		SUM(T."TotalPrice")
	FROM "Transaction" T 
	WHERE to_char(T."ActionDate", 'YYYY-MM') = p_month
	AND T."TransactionTypeId" = ANY(v_list_TransitionTypeId)
	AND T."SalePointId" = p_sale_point_id)::INT;
	RETURN COALESCE(v_total_price, 0);
	
END;
$$;


ALTER FUNCTION public.fn_get_total_money_cost(p_month character varying, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: fn_get_total_price_lottery_type(character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_total_price_lottery_type(p_month character varying, p_sale_point_id integer, p_lottery_price_id integer, p_lottery_type_id integer) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_price_regular_ticket INT;
BEGIN
	v_total_price_regular_ticket := (SELECT 
																			SUM(SP."TotalValue")
																		FROM "SalePointLog" SP 
																		WHERE SP."LotteryTypeId" = p_lottery_type_id
																		AND SP."SalePointId" = p_sale_point_id
																		AND to_char(SP."ActionDate" , 'YYYY-MM') =  p_month
																		AND SP."LotteryPriceId" = p_lottery_price_id
																		GROUP BY SP."LotteryTypeId");
	RETURN COALESCE(v_total_price_regular_ticket,0);
	
END;
$$;


ALTER FUNCTION public.fn_get_total_price_lottery_type(p_month character varying, p_sale_point_id integer, p_lottery_price_id integer, p_lottery_type_id integer) OWNER TO postgres;

--
-- Name: fn_get_total_price_regular_ticket(character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_total_price_regular_ticket(p_month character varying, p_sale_point_id integer, p_lottery_price_id integer, p_lottery_type_id integer) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_price_regular_ticket INT;
BEGIN
	v_total_price_regular_ticket := (SELECT 
																			SUM(SP."TotalValue")
																		FROM "SalePointLog" SP 
																		WHERE SP."LotteryTypeId" = p_lottery_type_id
																		AND SP."SalePointId" = p_sale_point_id
																		AND to_char(SP."ActionDate" , 'YYYY-MM') =  p_month
																		AND SP."LotteryPriceId" = p_lottery_price_id
																		GROUP BY SP."LotteryTypeId");
	RETURN COALESCE(v_total_price_regular_ticket,0);
	
END;
$$;


ALTER FUNCTION public.fn_get_total_price_regular_ticket(p_month character varying, p_sale_point_id integer, p_lottery_price_id integer, p_lottery_type_id integer) OWNER TO postgres;

--
-- Name: fn_get_total_price_transaction_type(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_get_total_price_transaction_type(p_month character varying, p_transaction_type_id integer, p_sale_point_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_price_transaction INT8;
BEGIN
	v_total_price_transaction := (SELECT 
																	SUM(T."TotalPrice")
																FROM "Transaction" T 
																WHERE T."TransactionTypeId" = p_transaction_type_id
																AND T."SalePointId" = p_sale_point_id
																AND TO_CHAR(T."Date",'YYYY-MM') = p_month);
	RETURN COALESCE(	v_total_price_transaction,0);
	
	
END;
$$;


ALTER FUNCTION public.fn_get_total_price_transaction_type(p_month character varying, p_transaction_type_id integer, p_sale_point_id integer) OWNER TO postgres;

--
-- Name: fn_permission_data(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_permission_data(p_user_role_id integer) RETURNS TABLE("StudentId" bigint, "ClassId" bigint, "ClassSessionId" bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_is_superadmin BOOL;
	v_is_manager BOOL; 
	v_is_seller BOOL;
	v_is_qc BOOL;
	v_is_sc BOOL;
	v_is_teacher BOOL;
	v_is_student BOOL;
	v_user_id INT;
	v_arr_user_id INT[] := fn_get_arr_user_report_to(p_user_role_id);
BEGIN

	WITH tmp AS (
		SELECT
			STRING_AGG(DISTINCT UT."IsSuperAdmin"::VARCHAR,',') FILTER(WHERE UT."IsSuperAdmin" IS TRUE) AS "IsSuperAdmin",
			STRING_AGG(DISTINCT UT."IsManager"::VARCHAR,',') FILTER(WHERE UT."IsManager" IS TRUE) AS "IsManager",
			STRING_AGG(DISTINCT UT."IsSeller"::VARCHAR,',') FILTER(WHERE UT."IsSeller" IS TRUE) AS "IsSeller",
			STRING_AGG(DISTINCT UT."IsQC"::VARCHAR,',') FILTER(WHERE UT."IsQC" IS TRUE) AS "IsQC",
			STRING_AGG(DISTINCT UT."IsSC"::VARCHAR,',') FILTER(WHERE UT."IsSC" IS TRUE) AS "IsSC",
			STRING_AGG(DISTINCT UT."IsTeacher"::VARCHAR,',') FILTER(WHERE UT."IsTeacher" IS TRUE) AS "IsTeacher",
			UR."UserId"
		FROM "UserRole" UR
			JOIN "UserTitle" UT ON UT."UserTitleId" = ANY(UR."UserTitleIds")
		WHERE "UserRoleId" = p_user_role_id
		GROUP BY
			UR."UserId"
	)
	SELECT
		COALESCE(t."IsSuperAdmin"::BOOL, FALSE),
		COALESCE(t."IsManager"::BOOL, FALSE),
		COALESCE(t."IsSeller"::BOOL, FALSE),
		COALESCE(t."IsQC"::BOOL, FALSE),
		COALESCE(t."IsSC"::BOOL, FALSE),
		COALESCE(t."IsTeacher"::BOOL, FALSE),
		t."UserId"
	INTO
		v_is_superadmin,
		v_is_manager,
		v_is_seller,
		v_is_qc,
		v_is_sc,
		v_is_teacher,
		v_user_id
	FROM tmp t;
	
-- 	RAISE NOTICE 'v_user_id: %', v_user_id;		
-- 	RAISE NOTICE 'v_is_superadmin: %', v_is_superadmin;
-- 	RAISE NOTICE 'v_is_manager: %', v_is_manager;
-- 	RAISE NOTICE 'v_is_seller: %', v_is_seller;
-- 	RAISE NOTICE 'v_is_qc: %', v_is_qc;
-- 	RAISE NOTICE 'v_is_sc: %', v_is_sc;
-- 	RAISE NOTICE 'v_is_teacher: %', v_is_teacher;
	
	--LẤY DANH SÁCH LEADID THEO QUYỀN
	RETURN QUERY
	SELECT 
		S."StudentId",
		CL."ClassId",
		CL."ClassSessionId"
	FROM "ClassSession" CL
		JOIN "Class" C ON C."ClassId" = CL."ClassId"
		JOIN "StudentClassMapping" SM ON SM."ClassId" = C."ClassId"
		JOIN "Student" S ON S."StudentId" = SM."StudentId"
	WHERE C."IsDeleted" IS FALSE AND CL."IsDeleted" IS FALSE AND 
	(
		--SuperAdmin xem hết
		v_is_superadmin IS TRUE
		-- Class manager
		OR (v_is_manager IS TRUE AND v_is_qc IS TRUE AND v_is_sc IS TRUE)
		-- SC manager
		OR (v_is_manager IS TRUE AND v_is_sc IS TRUE)
		-- QC manager
		OR (v_is_manager IS TRUE AND v_is_qc IS TRUE)
		-- Sales manager 
		OR (v_is_manager IS TRUE AND v_is_seller IS TRUE)
		--OR (v_is_manager IS TRUE AND v_is_seller IS TRUE AND C."SaleId" = ANY(v_arr_user_id))
		--Seller xem những lớp mình sell
		OR (v_is_seller IS TRUE AND C."SaleId" = v_user_id)
		--QC xem hết những lớp mình đang quản lý
		OR ((v_is_manager IS TRUE AND v_is_qc IS TRUE AND COALESCE(C."CurrentQCId",C."QCId") = ANY(v_arr_user_id)) OR (v_is_qc IS TRUE AND (COALESCE(C."CurrentQCId",C."QCId" )= v_user_id)))
		--SC xem hết những lớp mình đang quản lý
		OR ((v_is_manager IS TRUE AND v_is_sc IS TRUE AND COALESCE(C."CurrentSCId",C."SCId") = ANY(v_arr_user_id)) OR (v_is_sc IS TRUE AND (COALESCE(C."CurrentSCId",C."SCId") = v_user_id)))
		--Teacher xem hết những lớp mình đang quản lý
		OR (v_is_teacher IS TRUE AND CL."TeacherId" = v_user_id)
	);

END;
$$;


ALTER FUNCTION public.fn_permission_data(p_user_role_id integer) OWNER TO postgres;

--
-- Name: fn_phoneconvert_11_to_10(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_phoneconvert_11_to_10(p_phone_number character varying) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_phone_origin VARCHAR;
	v_phone_prefix VARCHAR;
	v_phone_prefix_converted VARCHAR;
BEGIN 
		IF p_phone_number IS NULL OR TRIM(p_phone_number) = '' THEN
			RETURN NULL;
		ELSE
			v_phone_origin := TRIM(regexp_replace(p_phone_number,'[^0-9+]+', '','g'));

			-- Xử lý +84
			IF(LEFT(v_phone_origin, 3) = '+84') THEN
					v_phone_origin :=  regexp_replace(v_phone_origin, '(^\+84)(\w+)', '0\2');
			END IF;

			IF (LEFT(v_phone_origin, 2) = '84') THEN
					v_phone_origin :=  regexp_replace(v_phone_origin, '(^84)(\w+)', '0\2');
			END IF;

			IF (LEFT(v_phone_origin, 2) = '00') THEN
					v_phone_origin :=  regexp_replace(v_phone_origin, '(^00)(\w+)', '0\2');
			END IF;

			-- Chỉ xử lý số điện thoại 11 số
			IF(LENGTH(v_phone_origin) > 10) THEN
				-- Lấy 4 số đầu tiên kiểm tra
				v_phone_prefix := LEFT(v_phone_origin, 4);
				v_phone_prefix_converted := (
					CASE v_phone_prefix
						-- Viettel
						WHEN '0162' THEN '032'
						WHEN '0163' THEN '033'
						WHEN '0164' THEN '034'
						WHEN '0165' THEN '035'
						WHEN '0166' THEN '036'
						WHEN '0167' THEN '037'
						WHEN '0168' THEN '038'
						WHEN '0169' THEN '039'
						-- Mobifone
						WHEN '0120' THEN '070'
						WHEN '0121' THEN '079'
						WHEN '0122' THEN '077'
						WHEN '0126' THEN '076'
						WHEN '0128' THEN '078'
						-- Vinafone
						WHEN '0123' THEN '083'
						WHEN '0124' THEN '084'
						WHEN '0125' THEN '085'
						WHEN '0127' THEN '081'
						WHEN '0129' THEN '082'
						-- Vietnamobile
						WHEN '0186' THEN '056'
						WHEN '0188' THEN '058'
						-- Gmobile
						WHEN '0199' THEN '059'
						-- Cố định VSAT
						WHEN '0992' THEN '0672'
						ELSE v_phone_prefix END
				);
				
				IF LENGTH(v_phone_prefix_converted) > 0 THEN
					v_phone_origin := regexp_replace(v_phone_origin, '(^'||v_phone_prefix ||')(\w+)', v_phone_prefix_converted || '\2');
				END IF;
				
				RETURN v_phone_origin;
				
			ELSE
					-- Trả về như ban đầu không xử lý
					RETURN v_phone_origin;
			END IF;
		END IF;
		/* Xử lý các trường hợp lỗi ở trên*/  
		EXCEPTION WHEN OTHERS THEN 
		BEGIN 
			RETURN p_phone_number || sqlerrm;
		END;

END; 
$$;


ALTER FUNCTION public.fn_phoneconvert_11_to_10(p_phone_number character varying) OWNER TO postgres;

--
-- Name: fn_total_commision_user(integer, character varying, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_total_commision_user(p_sale_point_id integer, p_month character varying, p_total_commision numeric) RETURNS TABLE("FullName" character varying, "Percent" numeric, "TotalCommisionUser" numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_temp_main_user_data JSON;
BEGIN
		v_temp_main_user_data:= (SELECT 
																T."MainUserData"
															FROM crm_salepoint_get_percent(p_month) T
															WHERE T."SalePointId" = p_sale_point_id)::JSON;
	RETURN QUERY
	WITH tmp AS
	(
		select 
		* 
		from json_to_recordset(v_temp_main_user_data) as x("UserId" int, "FullName" text, "Percent" NUMERIC)
		 
	)
	SELECT 
		T."FullName"::VARCHAR,
		T."Percent",
		 ROUND(T."Percent"::NUMERIC * p_total_commision,2) AS "TotalCommisionUser"
	FROM tmp T ;

END;
$$;


ALTER FUNCTION public.fn_total_commision_user(p_sale_point_id integer, p_month character varying, p_total_commision numeric) OWNER TO postgres;

--
-- Name: fn_total_salary_bonus(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_total_salary_bonus(p_month character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_date INT := (SELECT date_part('days', (date_trunc('month', (p_month||'-01')::DATE) + INTERVAL '1 month - 1 day'))) :: INT;
	v_overtime DECIMAL;
	v_time TIMESTAMP := NOW();
	v_event DECIMAL;
	v_total INT8;
BEGIN
		--Lấy các hằng số
	CREATE TEMP TABLE ConstData1 ON COMMIT DROP AS (
		SELECT
			A."ConstId",
			A."Price"
		FROM "Constant" A
		WHERE A."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND A."CreatedDate" >= ALL(	
				SELECT
					C."CreatedDate"
				FROM "Constant" C 
				WHERE C."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND C."ConstId" = A."ConstId"
			)
	);
	v_overtime := (SELECT C."Price" FROM ConstData1 C WHERE C."ConstId" = 5)::NUMERIC;	
	v_event := (SELECT C."Price" FROM ConstData1 C WHERE C."ConstId" = 6)::NUMERIC;
		WITH tmp AS (
		SELECT 
			B."UserId", 
			B."CreatedDate",
			B."Salary",
			B."Salary"::NUMERIC / v_total_date AS "SalaryOneDate",
			B."Salary"::NUMERIC / v_total_date * v_overtime AS "SalaryOneDateSub"
		FROM "BasicSalary" B
		WHERE B."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
			AND B."CreatedDate" >= ALL(
				SELECT T."CreatedDate"
				FROM "BasicSalary" T 
				WHERE T."CreatedDate"::DATE <= ((p_month||'-01')::DATE + INTERVAL '1 month - 1 day')::DATE
					AND T."UserId" = B."UserId"
			)
		ORDER BY 
			B."UserId"
	),
		tmp1 AS (
		SELECT
			ROW_NUMBER() OVER(PARTITION BY SD."UserId" ORDER BY SD."DistributeDate", SD."ShiftId") AS "Id",
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		FROM "ShiftDistribute" SD 
		WHERE TO_CHAR(SD."DistributeDate", 'YYYY-MM') = p_month
			AND ((SD."DistributeDate" :: DATE) :: TIMESTAMP + (((CASE WHEN SD."ShiftId" = 1 THEN '6' ELSE '13' END)||' hour') :: INTERVAL))  <= v_time
		GROUP BY
			SD."UserId",
			SD."ShiftDistributeId",
			SD."DistributeDate",
			SD."ShiftId",
			SD."SalePointId"
		ORDER BY 
			SD."UserId", 
			SD."DistributeDate", 
			SD."ShiftId"
	),
		tmp5 AS(
		SELECT 
			E."Date"
		FROM "EventDay" E
		WHERE TO_CHAR(E."Date", 'YYYY-MM') = p_month
			AND E."IsDeleted" IS FALSE
	),tmp8 AS
	(
		SELECT
			SD."UserId",
			(SUM((CASE WHEN SD."Id" <= v_total_date THEN (CASE WHEN E."Date" IS NULL THEN 1 ELSE v_event END) ELSE 0 END) + (CASE WHEN (SD."Id" = v_total_date) THEN 1 ELSE 0 END)))::NUMERIC AS "TotalNormal"
		FROM tmp1 SD
			LEFT JOIN tmp S ON S."UserId" = SD."UserId"
			LEFT JOIN tmp5 E ON SD."DistributeDate" = E."Date"
		GROUP BY 
			SD."UserId"
	),
	tmp9 AS
	(
			SELECT
				T."UserId",
				(SUM(CASE WHEN T."TotalNormal" >= v_total_date-2 THEN 1 ELSE 0 END) * B."Salary") AS "TotalSalary"
			FROM tmp8 T
			LEFT JOIN "BasicSalary" B ON T."UserId" = B."UserId"
			GROUP BY T."UserId",B."Salary"
	)
	SELECT 
		SUM(T."TotalSalary")
		INTO v_total
	FROM tmp9 T;
	RETURN v_total;
END;
$$;


ALTER FUNCTION public.fn_total_salary_bonus(p_month character varying) OWNER TO postgres;

--
-- Name: fn_total_winning_price(character varying, integer, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_total_winning_price(p_month character varying, p_winning_type_id integer, p_sale_point_id bigint) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_winning_price INT;
BEGIN

	v_total_winning_price := (SELECT 
															SUM(W."WinningPrice") 
														FROM "Winning" W
														WHERE W."WinningTypeId" = p_winning_type_id AND W."SalePointId" = p_sale_point_id 
														AND to_char(W."ActionDate", 'YYYY-MM')  = p_month
														GROUP BY W."SalePointId");
	RETURN COALESCE(v_total_winning_price,0);		
														
END;
$$;


ALTER FUNCTION public.fn_total_winning_price(p_month character varying, p_winning_type_id integer, p_sale_point_id bigint) OWNER TO postgres;

--
-- Name: fn_totalreceived(integer, timestamp without time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_totalreceived(p_salepoint_id integer, p_lottery_date timestamp without time zone, p_lottery_channel_id integer, p_shift_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_totalreceived INT;
BEGIN 
		IF p_shift_id = 2
		THEN
			v_total_totalreceived:= COALESCE( (SELECT SUM(SL."TotalReceived")
														FROM "ScratchcardLog" SL 
														WHERE SL."SalePointId" = p_salepoint_id
															AND SL."LotteryChannelId" = p_lottery_channel_id
															AND SL."ActionDate"::TIMESTAMP >= (SELECT 
																															ST."ActionDate"
																														FROM "ShiftTransfer" ST
																														WHERE ST."SalePointid" = p_salepoint_id 
																														AND ST."ActionDate"::DATE = p_lottery_date::DATE
																														LIMIT 1)::TIMESTAMP
															AND SL."ActionDate"::DATE = p_lottery_date::DATE), 0);
			
		ELSE
			v_total_totalreceived:= COALESCE( (SELECT SUM(SL."TotalReceived")
												FROM "ScratchcardLog" SL 
												WHERE SL."SalePointId" = p_salepoint_id
													AND SL."LotteryChannelId" = p_lottery_channel_id
													AND SL."ActionDate"::TIMESTAMP <= (SELECT 
																													ST."ActionDate"
																												FROM "ShiftTransfer" ST
																												WHERE ST."SalePointid" = p_salepoint_id
																												AND ST."ActionDate"::DATE = p_lottery_date::DATE
																												LIMIT 1)::TIMESTAMP
													AND SL."ActionDate"::DATE = p_lottery_date::DATE), 0);
												
		END IF;
	
 
	RETURN v_total_totalreceived;
END; 
$$;


ALTER FUNCTION public.fn_totalreceived(p_salepoint_id integer, p_lottery_date timestamp without time zone, p_lottery_channel_id integer, p_shift_id integer) OWNER TO postgres;

--
-- Name: fn_user_kpi_coafficient_of_user_by_month(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_user_kpi_coafficient_of_user_by_month(p_month character varying, p_user_id integer) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_Total_KPI NUMERIC;
	v_KPI NUMERIC;
BEGIN

	WITH tmp AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY K."UserId", K."WeekId", K."SalePointId", K."CriteriaId" ORDER BY K."CreatedDate" DESC) AS "Id",
			K."KPILogId",
			K."UserId",
			U."FullName",
			UR."UserTitleId",
			K."WeekId",
			K."CriteriaId",
			C."CriteriaName",
			U."SalePointId",
			SP."SalePointName",
			K."KPI",
			K."CreatedDate",
			U."TypeUserId"
		FROM "KPILog" K	
			JOIN "Criteria" C ON K."CriteriaId" = C."CriteriaId"
			JOIN "User" U ON K."UserId" = U."UserId"
			JOIN "UserRole" UR ON U."UserId" = UR."UserId"
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = K."SalePointId"
		WHERE K."IsDeleted" IS FALSE	
			AND K."Month" = p_month
	), tmp1 AS
	(
			SELECT 
				K."UserId",
				K."WeekId",
				SUM(COALESCE( K."KPI",0)) AS "TotalKpiInweek"
			FROM tmp K
			WHERE K."Id" = 1
				AND p_user_id = K."UserId" 
			GROUP BY K."WeekId",K."UserId"
	)
	SELECT 
		ROUND(SUM(T1."TotalKpiInweek")/ COUNT(T1."WeekId") ,2) INTO v_Total_KPI
	FROM tmp1 T1
	WHERE T1."TotalKpiInweek" > 0
	GROUP BY T1."UserId"::NUMERIC;
	v_KPI := (SELECT 
							T."Value"
						FROM "TargetData" T WHERE "TargetDataTypeId" = 4 
						AND (v_Total_KPI BETWEEN T."FromValue" AND T."ToValue"));
	RETURN ROUND( COALESCE(v_KPI,0),2);
END;
$$;


ALTER FUNCTION public.fn_user_kpi_coafficient_of_user_by_month(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: fn_user_kpi_of_user_by_month(character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_user_kpi_of_user_by_month(p_month character varying, p_user_id integer) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_Total_KPI NUMERIC;
BEGIN

	WITH tmp AS (
		SELECT 
			ROW_NUMBER() OVER(PARTITION BY K."UserId", K."WeekId", K."SalePointId", K."CriteriaId" ORDER BY K."CreatedDate" DESC) AS "Id",
			K."KPILogId",
			K."UserId",
			U."FullName",
			UR."UserTitleId",
			K."WeekId",
			K."CriteriaId",
			C."CriteriaName",
			U."SalePointId",
			SP."SalePointName",
			K."KPI",
			K."CreatedDate",
			U."TypeUserId"
		FROM "KPILog" K	
			JOIN "Criteria" C ON K."CriteriaId" = C."CriteriaId"
			JOIN "User" U ON K."UserId" = U."UserId"
			JOIN "UserRole" UR ON U."UserId" = UR."UserId"
			LEFT JOIN "SalePoint" SP ON SP."SalePointId" = K."SalePointId"
		WHERE K."IsDeleted" IS FALSE	
			AND K."Month" = p_month
	), tmp1 AS
	(
			SELECT 
				K."UserId",
				K."WeekId",
				SUM(COALESCE( K."KPI",0)) AS "TotalKpiInweek"
			FROM tmp K
			WHERE K."Id" = 1
				AND p_user_id = K."UserId" 
			GROUP BY K."WeekId",K."UserId"
	)
	SELECT 
		ROUND(SUM(T1."TotalKpiInweek")/ COUNT(T1."WeekId") ,2) INTO v_Total_KPI
	FROM tmp1 T1
	WHERE T1."TotalKpiInweek" > 0
	GROUP BY T1."UserId"::NUMERIC;
	RETURN ROUND( COALESCE(v_Total_KPI,0),2);
END;
$$;


ALTER FUNCTION public.fn_user_kpi_of_user_by_month(p_month character varying, p_user_id integer) OWNER TO postgres;

--
-- Name: script_huy_ket_ca(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.script_huy_ket_ca(p_shift_dis_id bigint) RETURNS TABLE("Id" integer, "Message" text)
    LANGUAGE plpgsql
    AS $$
BEGIN
	
	DELETE FROM "ShiftTransfer" WHERE "ShiftDistributeId" = p_shift_dis_id;
	
	RETURN QUERY 
	SELECT 1, 'Ok';
	
END;
$$;


ALTER FUNCTION public.script_huy_ket_ca(p_shift_dis_id bigint) OWNER TO postgres;

--
-- Name: update_report_lottery(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_report_lottery() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
		IF EXISTS (SELECT 1 FROM "ReportLottery" WHERE "ReportLotteryId" = NEW."ReportLotteryId")
		THEN	
			UPDATE "ReportLottery"
			SET
				"Remaining" = "Stock" - "SoldRetail" + "Received" - "Transfer",
				"RemainingDup" = "StockDup" - "SoldRetailDup" + "ReceivedDup" - "TransferDup"
			WHERE NEW."ReportLotteryId" = "ReportLotteryId" AND "OrdinalNum" !=1; 
		END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_report_lottery() OWNER TO postgres;

--
-- Name: update_report_lottery_inventorylog(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_report_lottery_inventorylog() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_dup INT8;
	v_total INT8;
BEGIN
    IF EXISTS (SELECT 1 FROM "Inventory" WHERE "InventoryId" = NEW."InventoryId") 
									 AND NOT EXISTS (SELECT 1 FROM "ReportLottery" WHERE "LotteryDate" = NEW."LotteryDate"
												AND "LotteryChannelId" = NEW."LotteryChannelId"
												AND "SalePointId" = NEW."SalePointId")
		THEN
			FOR i IN 1..4 LOOP
					INSERT INTO "ReportLottery" 
					(
							"ShiftId", 
							"Date", 
							"LotteryChannelId", 
							"SalePointId", 
							"Stock", 
							"SoldRetail", 
							"Remaining", 
							--"LotteryTypeId", 
							"Transfer", 
							"Received", 
							"LotteryDate",
							"OrdinalNum", 
							"SoldRetailMoney",
							"SoldWholeSale",
							"SoldWholeSaleMoney",
							"ReceivedDup",
							"TransferDup",
							"RemainingDup"
					)
					VALUES(
						(CASE WHEN i % 2 = 0 THEN 2 ELSE 1 END),
						CASE WHEN i < 3 THEN (NEW."LotteryDate"::DATE - INTERVAL '1 day')  ELSE NEW."LotteryDate"::DATE END,
						NEW."LotteryChannelId",
						NEW."SalePointId",
						NEW."TotalReceived", 
						0, 
						NEW."TotalReceived", 
						--0, 
						0, 
						0 , 
						NEW."LotteryDate"::DATE,
						i,
						0,
						0,
						0,
						NEW."TotalDupReceived",
						0,
						NEW."TotalDupReceived"
					);
				END LOOP;
			ELSEIF NOT EXISTS (SELECT "SalePointId" FROM "Inventory" 
																							WHERE "LotteryDate" = NEW."LotteryDate"
																							AND "SalePointId" = NEW."SalePointId"
																							AND "LotteryChannelId" = NEW."LotteryChannelId"
																							)
							
			THEN
					UPDATE "ReportLottery" 
					SET 
						"Stock" =  "Stock" + NEW."TotalReceived",
						"Remaining" = "Remaining" + NEW."TotalReceived",
						"StockDup" = "StockDup" + NEW."TotalDupReceived",
						"RemainingDup" = "RemainingDup" + NEW."TotalDupReceived"
					WHERE "LotteryDate" = NEW."LotteryDate"
						AND "LotteryChannelId" = NEW."LotteryChannelId"
						AND "SalePointId" = NEW."SalePointId";
					
			ELSE
					v_total_dup := COALESCE( NEW."TotalDupReceived", 0) - (SELECT COALESCE(OLD."TotalDupReceived", 0 )
														FROM "ReportLottery" 
														WHERE "LotteryDate" = NEW."LotteryDate"
															AND "LotteryChannelId" = NEW."LotteryChannelId"
															AND "SalePointId" = NEW."SalePointId"
															AND "OrdinalNum" = 1);
					v_total := COALESCE(NEW."TotalReceived", 0) - (SELECT COALESCE(OLD."TotalReceived", 0)
																	FROM "ReportLottery" 
																	WHERE "LotteryDate" = NEW."LotteryDate"
																		AND "LotteryChannelId" = NEW."LotteryChannelId"
																		AND "SalePointId" = NEW."SalePointId"
																		AND "OrdinalNum" = 1);
																		
				 UPDATE "ReportLottery" 
					SET 
						"Stock" =  "Stock" + v_total,
						"Remaining" = "Remaining" + v_total,
						"StockDup" = "StockDup" + v_total_dup,
						"RemainingDup" = "RemainingDup" + v_total_dup
					WHERE "LotteryDate" = NEW."LotteryDate"
						AND "LotteryChannelId" = NEW."LotteryChannelId"
						AND "SalePointId" = NEW."SalePointId";
			END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_report_lottery_inventorylog() OWNER TO postgres;

--
-- Name: update_report_lottery_salepointlog(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_report_lottery_salepointlog() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	v_total_dup INT8;
	v_total INT8;
BEGIN
		IF NEW."IsDeleted" = TRUE AND OLD."IsDeleted" = FALSE AND NEW."LotteryTypeId" != 3
			THEN
				UPDATE "ReportLottery"
				SET 
					"SoldRetail" = "SoldRetail" - (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NOT NULL
													THEN 0 ELSE NEW."Quantity"  END),
					"SoldRetailMoney" = "SoldRetailMoney" - (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NOT NULL
													THEN 0 ELSE NEW."TotalValue"  END),
					"SoldWholeSale" = "SoldWholeSale" - (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NULL
													THEN 0 ELSE NEW."Quantity" END),
					"SoldWholeSaleMoney" = "SoldWholeSaleMoney" - (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NULL
													THEN 0 ELSE NEW."TotalValue" END),
					"SoldRetailDup" = "SoldRetailDup" - (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NULL
													THEN NEW."Quantity" ELSE 0 END),
					"SoldRetailMoneyDup" = "SoldRetailMoneyDup" - (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NULL
													THEN NEW."TotalValue"  ELSE 0 END),
					"SoldWholeSaleDup" = "SoldWholeSaleDup" - (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NOT NULL
													THEN NEW."Quantity"  ELSE 0 END),
					"SoldWholeSaleMoneyDup" = "SoldWholeSaleMoneyDup" - (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NOT NULL
													THEN NEW."TotalValue"  ELSE 0 END),
					"Remaining" = "Remaining" + (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
					"RemainingDup" = "RemainingDup" + (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END)
				WHERE "ShiftId" = (SELECT "ShiftId" 
													  FROM "ShiftDistribute" 
														WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
					AND "Date" = NEW."ActionDate"::DATE
					AND "LotteryChannelId" = NEW."LotteryChannelId"
					AND "SalePointId" = NEW."SalePointId";
					
			UPDATE "ReportLottery"
			SET 
				"Remaining" = "Remaining" + (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
				"Stock" = "Remaining" + "SoldRetail" + "SoldWholeSale" + "Transfer" - "Received" + (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
			 "RemainingDup" = "RemainingDup" + (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END),
				"StockDup" = "RemainingDup" + "SoldRetailDup" + "SoldWholeSaleDup" + "TransferDup" + "ReceivedDup" + (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END)
			WHERE "LotteryDate" = NEW."LotteryDate"
				AND "OrdinalNum" > (SELECT "OrdinalNum" 
														FROM "ReportLottery" 
															WHERE "ShiftId" = (SELECT "ShiftId" 
																									FROM "ShiftDistribute" 
																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")  
															AND "Date" = NEW."ActionDate"::DATE
															AND "LotteryChannelId" = NEW."LotteryChannelId"
															AND "SalePointId" = NEW."SalePointId"
															ORDER BY "OrdinalNum"
															LIMIT 1)
				AND "SalePointId" = NEW."SalePointId"
				AND "LotteryChannelId" = NEW."LotteryChannelId";
		ELSEIF  NEW."IsMigrated" = TRUE AND OLD."IsMigrated" IS FALSE AND NEW."IsDeleted" IS FALSE
			THEN
				UPDATE "ReportLottery"
				SET 
					"SoldRetail" = "SoldRetail" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NOT NULL
													THEN 0 ELSE NEW."Quantity"  END),
					"SoldRetailMoney" = "SoldRetailMoney" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NOT NULL
													THEN 0 ELSE NEW."TotalValue"  END),
					"SoldWholeSale" = "SoldWholeSale" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NULL
													THEN 0 ELSE NEW."Quantity" END),
					"SoldWholeSaleMoney" = "SoldWholeSaleMoney" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NULL
													THEN 0 ELSE NEW."TotalValue" END),
					"SoldRetailDup" = "SoldRetailDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NULL
													THEN NEW."Quantity" ELSE 0 END),
					"SoldRetailMoneyDup" = "SoldRetailMoneyDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NULL
													THEN NEW."TotalValue"  ELSE 0 END),
					"SoldWholeSaleDup" = "SoldWholeSaleDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NOT NULL
													THEN NEW."Quantity"  ELSE 0 END),
					"SoldWholeSaleMoneyDup" = "SoldWholeSaleMoneyDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NOT NULL
													THEN NEW."TotalValue"  ELSE 0 END),
					"Remaining" = "Remaining" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
					"RemainingDup" = "RemainingDup" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END)
				WHERE "ShiftId" = (SELECT "ShiftId" 
													  FROM "ShiftDistribute" 
														WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
					AND "Date" = NEW."ActionDate"::DATE
					AND "LotteryChannelId" = NEW."LotteryChannelId"
					AND "SalePointId" = NEW."SalePointId"
					AND NEW."IsDeleted" IS FALSE;
					
			UPDATE "ReportLottery"
			SET 
				"Remaining" = "Remaining" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
				"Stock" = "Remaining" + "SoldRetail" + "SoldWholeSale" + "Transfer" - "Received" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
			 "RemainingDup" = "RemainingDup" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END),
				"StockDup" = "RemainingDup" + "SoldRetailDup" + "SoldWholeSaleDup" + "TransferDup" + "ReceivedDup" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END)
			WHERE "LotteryDate" = NEW."LotteryDate"
				AND "OrdinalNum" > (SELECT "OrdinalNum" 
														FROM "ReportLottery" 
															WHERE "ShiftId" = (SELECT "ShiftId" 
																									FROM "ShiftDistribute" 
																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")  
															AND "Date" = NEW."ActionDate"::DATE
															AND "LotteryChannelId" = NEW."LotteryChannelId"
															AND "SalePointId" = NEW."SalePointId"
															ORDER BY "OrdinalNum"
															LIMIT 1)
				AND "SalePointId" = NEW."SalePointId"
				AND "LotteryChannelId" = NEW."LotteryChannelId";
					
					ELSEIF NEW."IsDeleted" IS FALSE AND NOT EXISTS (SELECT 1 FROM "SalePointLog" WHERE "SalePointLogId" = NEW."SalePointLogId")
			THEN
				UPDATE "ReportLottery"
				SET 
					"SoldRetail" = "SoldRetail" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NOT NULL
													THEN 0 ELSE NEW."Quantity"  END),
					"SoldRetailMoney" = "SoldRetailMoney" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NOT NULL
													THEN 0 ELSE NEW."TotalValue"  END),
					"SoldWholeSale" = "SoldWholeSale" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NULL
													THEN 0 ELSE NEW."Quantity" END),
					"SoldWholeSaleMoney" = "SoldWholeSaleMoney" + (CASE WHEN NEW."LotteryTypeId" = 2 OR NEW."GuestId" IS NULL
													THEN 0 ELSE NEW."TotalValue" END),
					"SoldRetailDup" = "SoldRetailDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NULL
													THEN NEW."Quantity" ELSE 0 END),
					"SoldRetailMoneyDup" = "SoldRetailMoneyDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NULL
													THEN NEW."TotalValue"  ELSE 0 END),
					"SoldWholeSaleDup" = "SoldWholeSaleDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NOT NULL
													THEN NEW."Quantity"  ELSE 0 END),
					"SoldWholeSaleMoneyDup" = "SoldWholeSaleMoneyDup" + (CASE WHEN NEW."LotteryTypeId" = 2 AND NEW."GuestId" IS NOT NULL
													THEN NEW."TotalValue"  ELSE 0 END),
					"Remaining" = "Remaining" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
					"RemainingDup" = "RemainingDup" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END)
				WHERE "ShiftId" = (SELECT "ShiftId" 
													  FROM "ShiftDistribute" 
														WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
					AND "Date" = NEW."ActionDate"::DATE
					AND "LotteryChannelId" = NEW."LotteryChannelId"
					AND "SalePointId" = NEW."SalePointId"
					AND NEW."IsDeleted" IS FALSE;
					
			UPDATE "ReportLottery"
			SET 
				"Remaining" = "Remaining" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
				"Stock" = "Remaining" + "SoldRetail" + "SoldWholeSale" + "Transfer" - "Received" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN 0 ELSE NEW."Quantity" END),
			 "RemainingDup" = "RemainingDup" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END),
				"StockDup" = "RemainingDup" + "SoldRetailDup" + "SoldWholeSaleDup" + "TransferDup" + "ReceivedDup" - (CASE WHEN NEW."LotteryTypeId" = 2  
													THEN NEW."Quantity" ELSE 0 END)
			WHERE "LotteryDate" = NEW."LotteryDate"
				AND "OrdinalNum" > (SELECT "OrdinalNum" 
														FROM "ReportLottery" 
															WHERE "ShiftId" = (SELECT "ShiftId" 
																									FROM "ShiftDistribute" 
																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")  
															AND "Date" = NEW."ActionDate"::DATE
															AND "LotteryChannelId" = NEW."LotteryChannelId"
															AND "SalePointId" = NEW."SalePointId"
															ORDER BY "OrdinalNum"
															LIMIT 1)
				AND "SalePointId" = NEW."SalePointId"
				AND "LotteryChannelId" = NEW."LotteryChannelId";
		END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_report_lottery_salepointlog() OWNER TO postgres;

--
-- Name: update_report_lottery_transition(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_report_lottery_transition() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	v_total_dup INT8;
	v_total INT8;
	 v_shift_id INT;
BEGIN
			-- xử lý trường hợp chuyển vé
    IF EXISTS (SELECT 1 FROM "Transition" WHERE "TransitionId" = NEW."TransitionId" 
																					AND NEW."TransitionTypeId" = 1 
																					AND NEW."ConfirmStatusId" = 2 
																					AND "IsDeleted" = FALSE)
		THEN
        UPDATE "ReportLottery" 
					SET 
						"Transfer" = "Transfer" + COALESCE(NEW."TotalTrans", 0) ,
						"TransferDup" = "TransferDup" + COALESCE(NEW."TotalTransDup", 0),
						"Remaining" = "Remaining" - COALESCE( NEW."TotalTrans", 0),
						"RemainingDup" = "RemainingDup" - COALESCE(NEW."TotalTransDup" ,0)
					WHERE "ShiftId" = (SELECT "ShiftId" 
																									FROM "ShiftDistribute" 
																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
						AND "Date" = NEW."TransitionDate"::DATE
						AND "LotteryDate" = NEW."LotteryDate"
						AND "LotteryChannelId" = NEW."LotteryChannelId"
						AND "SalePointId" = NEW."FromSalePointId";
		ELSEIF (SELECT 1 FROM "Transition" WHERE "TransitionId" = NEW."TransitionId" 
																					AND NEW."TransitionTypeId" = 2 
																					AND NEW."ConfirmStatusId" = 2
																					AND "IsDeleted" = FALSE)
		THEN
		  -- xử lý trường hợp Nhận vé nếu đã tồn tại dòng thì update không thì insert
				IF EXISTS (SELECT 1 FROM "ReportLottery" 
															WHERE "ShiftId" = (SELECT "ShiftId" FROM "ShiftDistribute" 
																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
															AND "Date" = NEW."TransitionDate"::DATE
															AND "LotteryDate" = NEW."LotteryDate"
															AND "LotteryChannelId" = NEW."LotteryChannelId"
															AND "SalePointId" = NEW."ToSalePointId" )
				THEN
					UPDATE "ReportLottery" 
					SET 
						"Received" = "Received"  +  COALESCE( NEW."TotalTrans", 0) ,
						"ReceivedDup" = "ReceivedDup"  + COALESCE( NEW."TotalTransDup",0) ,
						"Remaining" = "Remaining" +  COALESCE(NEW."TotalTrans",0),
						"RemainingDup" = "RemainingDup" + COALESCE( NEW."TotalTransDup",0)
					WHERE "ShiftId" = (SELECT "ShiftId" FROM "ShiftDistribute" 
																								WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
						AND "Date" = NEW."TransitionDate"::DATE
						AND "Date" = NEW."LotteryDate"
						AND "LotteryChannelId" = NEW."LotteryChannelId"
						AND "SalePointId" = NEW."ToSalePointId";
				ELSE
				SELECT "ShiftId" INTO v_shift_id FROM "ShiftDistribute" WHERE "ShiftDistributeId" = NEW."ShiftDistributeId";
				IF v_shift_id IS NOT NULL THEN
					FOR i IN 1..(3 - (SELECT "ShiftId" FROM "ShiftDistribute" 
																								WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")) LOOP
					INSERT INTO "ReportLottery" 
					(
							"ShiftId", 
							"Date", 
							"LotteryChannelId", 
							"SalePointId", 
							"Stock", 
							"SoldRetail", 
							"Remaining", 
							--"LotteryTypeId", 
							"Transfer", 
							"Received", 
							"LotteryDate",
							"OrdinalNum", 
							"SoldRetailMoney",
							"SoldWholeSale",
							"SoldWholeSaleMoney",
							"ReceivedDup",
							"TransferDup",
							"RemainingDup"
					)
					VALUES(
						ABS((i+(3 - (SELECT "ShiftId" FROM "ShiftDistribute" 
																								WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")) % 2) % 2 - 2),
						NEW."TransitionDate"::DATE,
						NEW."LotteryChannelId",
						NEW."ToSalePointId",
						0, 
						0, 
						NEW."TotalTrans", 
						--0, 
						0, 
						(CASE WHEN i = 1 THEN NEW."TotalTrans" ELSE 0 END) , 
						NEW."LotteryDate"::DATE,
						i,
						0,
						0,
						0,
						(CASE WHEN i = 1 THEN NEW."TotalTransDup" ELSE 0 END),
						0,
						NEW."TotalTransDup"
						
					);
				END LOOP;
				END IF;
				END IF;
    ELSE
        -- neu co truong hop tip them o day
    END IF;
					-- cập nhật lại stock, Remaining của các ca sau. 
		IF (NEW."TransitionTypeId" = 1 OR NEW."TransitionTypeId" = 2 ) AND NEW."ConfirmStatusId" = 2 AND NEW."IsDeleted" = FALSE
		THEN
			UPDATE "ReportLottery"
			SET 
				"Remaining" = "Remaining" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTrans",0)
																					ELSE COALESCE(NEW."TotalTrans",0) END),
				"Stock" =  "Remaining" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTrans",0)
																					ELSE COALESCE(NEW."TotalTrans",0) END),
			 "RemainingDup" = "RemainingDup" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTransDup",0)
																					ELSE COALESCE(NEW."TotalTransDup",0) END),
				"StockDup" = "RemainingDup" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTransDup",0)
																					ELSE COALESCE(NEW."TotalTransDup",0) END)
			WHERE "LotteryDate" = NEW."LotteryDate"
				AND "OrdinalNum" > (SELECT "OrdinalNum" 
														FROM "ReportLottery" 
															WHERE "ShiftId" = (SELECT "ShiftId" 
																									FROM "ShiftDistribute" 
																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")  
															AND "Date" = NEW."TransitionDate"::DATE
															AND "LotteryDate" = NEW."LotteryDate"
															AND "LotteryChannelId" = NEW."LotteryChannelId"
															AND "SalePointId"= (CASE WHEN NEW."TransitionTypeId" = 2 
																									THEN NEW."ToSalePointId" ELSE NEW."FromSalePointId" END))
				AND "SalePointId" = (CASE WHEN NEW."TransitionTypeId" = 2 
																									THEN NEW."ToSalePointId" ELSE NEW."FromSalePointId" END)
				AND "LotteryChannelId" = NEW."LotteryChannelId";
		END IF;
    RETURN NEW;
END;











-- DECLARE 
-- 	v_total_dup INT8;
-- 	v_total INT8;
-- BEGIN
-- 			-- xử lý trường hợp chuyển vé
--     IF EXISTS (SELECT 1 FROM "Transition" WHERE "TransitionId" = NEW."TransitionId" 
-- 																					AND NEW."TransitionTypeId" = 1 
-- 																					AND NEW."ConfirmStatusId" = 2 
-- 																					AND "IsDeleted" = FALSE)
-- 		THEN
--         UPDATE "ReportLottery" 
-- 					SET 
-- 						"Transfer" = "Transfer" + COALESCE(NEW."TotalTrans", 0) ,
-- 						"TransferDup" = "TransferDup" + COALESCE(NEW."TotalTransDup", 0),
-- 						"Remaining" = "Remaining" - COALESCE( NEW."TotalTrans", 0),
-- 						"RemainingDup" = "RemainingDup" - COALESCE(NEW."TotalTransDup" ,0)
-- 					WHERE "ShiftId" = (SELECT "ShiftId" 
-- 																									FROM "ShiftDistribute" 
-- 																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
-- 						AND "Date" = NEW."TransitionDate"::DATE
-- 						AND "LotteryDate" = NEW."LotteryDate"
-- 						AND "LotteryChannelId" = NEW."LotteryChannelId"
-- 						AND "SalePointId" = NEW."FromSalePointId";
-- 		ELSEIF (SELECT 1 FROM "Transition" WHERE "TransitionId" = NEW."TransitionId" 
-- 																					AND NEW."TransitionTypeId" = 2 
-- 																					AND NEW."ConfirmStatusId" = 2
-- 																					AND "IsDeleted" = FALSE)
-- 		THEN
-- 		  -- xử lý trường hợp Nhận vé nếu đã tồn tại dòng thì update không thì insert
-- 				IF EXISTS (SELECT 1 FROM "ReportLottery" 
-- 															WHERE "ShiftId" = (SELECT "ShiftId" FROM "ShiftDistribute" 
-- 																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
-- 															AND "Date" = NEW."TransitionDate"::DATE
-- 															AND "LotteryDate" = NEW."LotteryDate"
-- 															AND "LotteryChannelId" = NEW."LotteryChannelId"
-- 															AND "SalePointId" = NEW."ToSalePointId" )
-- 				THEN
-- 					UPDATE "ReportLottery" 
-- 					SET 
-- 						"Received" = "Received"  +  COALESCE( NEW."TotalTrans", 0) ,
-- 						"ReceivedDup" = "ReceivedDup"  + COALESCE( NEW."TotalTransDup",0) ,
-- 						"Remaining" = "Remaining" +  COALESCE(NEW."TotalTrans",0),
-- 						"RemainingDup" = "RemainingDup" + COALESCE( NEW."TotalTransDup",0)
-- 					WHERE "ShiftId" = (SELECT "ShiftId" FROM "ShiftDistribute" 
-- 																								WHERE "ShiftDistributeId" = NEW."ShiftDistributeId") 
-- 						AND "Date" = NEW."TransitionDate"::DATE
-- 						AND "Date" = NEW."LotteryDate"
-- 						AND "LotteryChannelId" = NEW."LotteryChannelId"
-- 						AND "SalePointId" = NEW."ToSalePointId";
-- 				ELSE
-- 					FOR i IN 1..(3 - (SELECT "ShiftId" FROM "ShiftDistribute" 
-- 																								WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")) LOOP
-- 					INSERT INTO "ReportLottery" 
-- 					(
-- 							"ShiftId", 
-- 							"Date", 
-- 							"LotteryChannelId", 
-- 							"SalePointId", 
-- 							"Stock", 
-- 							"SoldRetail", 
-- 							"Remaining", 
-- 							--"LotteryTypeId", 
-- 							"Transfer", 
-- 							"Received", 
-- 							"LotteryDate",
-- 							"OrdinalNum", 
-- 							"SoldRetailMoney",
-- 							"SoldWholeSale",
-- 							"SoldWholeSaleMoney",
-- 							"ReceivedDup",
-- 							"TransferDup",
-- 							"RemainingDup"
-- 					)
-- 					VALUES(
-- 						ABS((i+(3 - (SELECT "ShiftId" FROM "ShiftDistribute" 
-- 																								WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")) % 2) % 2 - 2),
-- 						NEW."TransitionDate"::DATE,
-- 						NEW."LotteryChannelId",
-- 						NEW."ToSalePointId",
-- 						0, 
-- 						0, 
-- 						NEW."TotalTrans", 
-- 						--0, 
-- 						0, 
-- 						(CASE WHEN i = 1 THEN NEW."TotalTrans" ELSE 0 END) , 
-- 						NEW."LotteryDate"::DATE,
-- 						i,
-- 						0,
-- 						0,
-- 						0,
-- 						(CASE WHEN i = 1 THEN NEW."TotalTransDup" ELSE 0 END),
-- 						0,
-- 						NEW."TotalTransDup"
						
-- 					);
-- 				END LOOP;
-- 				END IF;
--     ELSE
--         -- neu co truong hop tip them o day
--     END IF;
-- 					-- cập nhật lại stock, Remaining của các ca sau. 
-- 		IF (NEW."TransitionTypeId" = 1 OR NEW."TransitionTypeId" = 2 ) AND NEW."ConfirmStatusId" = 2 AND NEW."IsDeleted" = FALSE
-- 		THEN
-- 			UPDATE "ReportLottery"
-- 			SET 
-- 				"Remaining" = "Remaining" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTrans",0)
-- 																					ELSE COALESCE(NEW."TotalTrans",0) END),
-- 				"Stock" =  "Remaining" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTrans",0)
-- 																					ELSE COALESCE(NEW."TotalTrans",0) END),
-- 			 "RemainingDup" = "RemainingDup" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTransDup",0)
-- 																					ELSE COALESCE(NEW."TotalTransDup",0) END),
-- 				"StockDup" = "RemainingDup" + (CASE WHEN NEW."TransitionTypeId" = 1  THEN - COALESCE(NEW."TotalTransDup",0)
-- 																					ELSE COALESCE(NEW."TotalTransDup",0) END)
-- 			WHERE "LotteryDate" = NEW."LotteryDate"
-- 				AND "OrdinalNum" > (SELECT "OrdinalNum" 
-- 														FROM "ReportLottery" 
-- 															WHERE "ShiftId" = (SELECT "ShiftId" 
-- 																									FROM "ShiftDistribute" 
-- 																									WHERE "ShiftDistributeId" = NEW."ShiftDistributeId")  
-- 															AND "Date" = NEW."TransitionDate"::DATE
-- 															AND "LotteryDate" = NEW."LotteryDate"
-- 															AND "LotteryChannelId" = NEW."LotteryChannelId"
-- 															AND "SalePointId"= (CASE WHEN NEW."TransitionTypeId" = 2 
-- 																									THEN NEW."ToSalePointId" ELSE NEW."FromSalePointId" END))
-- 				AND "SalePointId" = (CASE WHEN NEW."TransitionTypeId" = 2 
-- 																									THEN NEW."ToSalePointId" ELSE NEW."FromSalePointId" END)
-- 				AND "LotteryChannelId" = NEW."LotteryChannelId";
-- 		END IF;
--     RETURN NEW;
-- END;
$$;


ALTER FUNCTION public.update_report_lottery_transition() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: BasicSalary; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."BasicSalary" (
    "BasicSalaryId" integer NOT NULL,
    "UserId" integer,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(0) without time zone DEFAULT now(),
    "Salary" bigint
);


ALTER TABLE public."BasicSalary" OWNER TO postgres;

--
-- Name: COLUMN "BasicSalary"."Salary"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."BasicSalary"."Salary" IS 'Lương cơ bản';


--
-- Name:  BasicSalary_ BasicSalaryId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public." BasicSalary_ BasicSalaryId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public." BasicSalary_ BasicSalaryId_seq" OWNER TO postgres;

--
-- Name:  BasicSalary_ BasicSalaryId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public." BasicSalary_ BasicSalaryId_seq" OWNED BY public."BasicSalary"."BasicSalaryId";


--
-- Name: AddressCity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AddressCity" (
    "CityId" integer NOT NULL,
    "CityName" character varying(100),
    "CityNameEN" character varying(100),
    "Prefix" character varying(15),
    "PrefixEN" character varying(15),
    "PrefixShort" character varying(15),
    "CityPriority" integer,
    "IsActive" boolean,
    "IsDelete" boolean
);


ALTER TABLE public."AddressCity" OWNER TO postgres;

--
-- Name: AddressDistrict; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AddressDistrict" (
    "DistrictId" integer NOT NULL,
    "DistrictName" character varying(100),
    "DistrictNameEN" character varying(100),
    "CityId" integer,
    "IsActive" boolean,
    "IsDelete" boolean,
    "Prefix" character varying(15),
    "PrefixEN" character varying(15),
    "DistrictPriority" integer
);


ALTER TABLE public."AddressDistrict" OWNER TO postgres;

--
-- Name: AddressWard; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AddressWard" (
    "WardId" integer NOT NULL,
    "WardName" character varying(100),
    "WardNameEN" character varying(100),
    "Prefix" character varying(15),
    "PrefixEN" character varying(15),
    "DistrictId" integer,
    "IsActive" boolean,
    "IsDelete" boolean,
    "PrefixShort" character varying(15),
    "WardsPriority" integer
);


ALTER TABLE public."AddressWard" OWNER TO postgres;

--
-- Name: Agency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Agency" (
    "AgencyId" integer NOT NULL,
    "AgencyName" character varying(255) NOT NULL,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "InactiveDate" date
);


ALTER TABLE public."Agency" OWNER TO postgres;

--
-- Name: AgencyType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AgencyType" (
    "AgencyTypeId" integer NOT NULL,
    "Name" character varying NOT NULL,
    "IsActive" boolean DEFAULT false NOT NULL
);


ALTER TABLE public."AgencyType" OWNER TO postgres;

--
-- Name: AgencyType_AgencyTypeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."AgencyType" ALTER COLUMN "AgencyTypeId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."AgencyType_AgencyTypeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Agency_AgencyId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Agency_AgencyId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 999999
    CACHE 1
    CYCLE;


ALTER SEQUENCE public."Agency_AgencyId_seq" OWNER TO postgres;

--
-- Name: Agency_AgencyId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Agency_AgencyId_seq" OWNED BY public."Agency"."AgencyId";


--
-- Name: AuthLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."AuthLog" (
    "AuthLogId" bigint NOT NULL,
    "UserId" integer NOT NULL,
    "ActionType" character varying(255) NOT NULL,
    "ActionDateTime" timestamp(6) without time zone DEFAULT now(),
    "LogContent" character varying(255),
    "SalePointId" integer,
    "ShiftDistributeId" integer
);


ALTER TABLE public."AuthLog" OWNER TO postgres;

--
-- Name: AuthLog_AuthLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."AuthLog_AuthLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."AuthLog_AuthLogId_seq" OWNER TO postgres;

--
-- Name: AuthLog_AuthLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."AuthLog_AuthLogId_seq" OWNED BY public."AuthLog"."AuthLogId";


--
-- Name: BankAccount; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."BankAccount" (
    "Id" integer NOT NULL,
    "Money" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."BankAccount" OWNER TO postgres;

--
-- Name: BankAccountHistory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."BankAccountHistory" (
    "Id" bigint NOT NULL,
    "Money" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "Date" date NOT NULL
);


ALTER TABLE public."BankAccountHistory" OWNER TO postgres;

--
-- Name: BankAccountTransferHistory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."BankAccountTransferHistory" (
    "Id" bigint NOT NULL,
    "Money" numeric DEFAULT 0 NOT NULL,
    "Content" character varying NOT NULL,
    "MoneyActionTypeId" integer NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "Date" date NOT NULL
);


ALTER TABLE public."BankAccountTransferHistory" OWNER TO postgres;

--
-- Name: BankAccountHistory_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."BankAccountTransferHistory" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."BankAccountHistory_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: BankAccountHistory_Id_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."BankAccountHistory" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."BankAccountHistory_Id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: BankAccount_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."BankAccount" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."BankAccount_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Commission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Commission" (
    "CommissionId" integer NOT NULL,
    "SalePointId" integer,
    "UserId" integer,
    "TotalValue" bigint,
    "Date" date,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "IsDeleted" boolean DEFAULT false,
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone,
    "ListStaff" integer[],
    "Fee" numeric(255,0)
);


ALTER TABLE public."Commission" OWNER TO postgres;

--
-- Name: Commission_CommissionId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Commission_CommissionId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Commission_CommissionId_seq" OWNER TO postgres;

--
-- Name: Commission_CommissionId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Commission_CommissionId_seq" OWNED BY public."Commission"."CommissionId";


--
-- Name: ConfirmForType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ConfirmForType" (
    "ConfirmForTypeId" integer NOT NULL,
    "ConfirmForTypeName" character varying(255),
    "IsActive" boolean DEFAULT true
);


ALTER TABLE public."ConfirmForType" OWNER TO postgres;

--
-- Name: ConfirmForType_ConfirmForType_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ConfirmForType_ConfirmForType_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ConfirmForType_ConfirmForType_seq" OWNER TO postgres;

--
-- Name: ConfirmForType_ConfirmForType_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ConfirmForType_ConfirmForType_seq" OWNED BY public."ConfirmForType"."ConfirmForTypeId";


--
-- Name: ConfirmLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ConfirmLog" (
    "ConfirmLogId" integer NOT NULL,
    "Data" text,
    "TypeActionId" integer,
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ConfirmStatusId" integer,
    "ConfirmBy" integer,
    "ConfirmByName" character varying(255),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "ConfirmDate" timestamp(6) without time zone,
    "ConfirmFor" integer,
    "DataActionInfo" text,
    "GuestId" integer,
    "HistoryOfOrderId" integer,
    "IsDeleted" boolean DEFAULT false
);


ALTER TABLE public."ConfirmLog" OWNER TO postgres;

--
-- Name: COLUMN "ConfirmLog"."ConfirmFor"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ConfirmLog"."ConfirmFor" IS '1: Kho, 2: Nợ';


--
-- Name: ConfirmStatus; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ConfirmStatus" (
    "ConfirmStatusId" integer NOT NULL,
    "ConfirmStatusName" character varying(100)
);


ALTER TABLE public."ConfirmStatus" OWNER TO postgres;

--
-- Name: Const; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Const" (
    "ConstId" integer NOT NULL,
    "ConstantName" character varying(255),
    "IsDeleted" boolean DEFAULT false
);


ALTER TABLE public."Const" OWNER TO postgres;

--
-- Name: ConstLinkApi; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ConstLinkApi" (
    "ConstLink" character varying(255) NOT NULL,
    "Email" character varying(255),
    "Password" character varying(255),
    "Username" character varying(255)
);


ALTER TABLE public."ConstLinkApi" OWNER TO postgres;

--
-- Name: Constant; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Constant" (
    "ConstantId" integer NOT NULL,
    "ConstantName" character varying(255),
    "Price" numeric(64,4),
    "CreatedBy" integer DEFAULT 0,
    "CreatedByName" character varying(255) DEFAULT 'System'::character varying,
    "CreatedDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(0) without time zone DEFAULT now(),
    "ConstId" integer
);


ALTER TABLE public."Constant" OWNER TO postgres;

--
-- Name: Constant_ConstantId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Constant_ConstantId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Constant_ConstantId_seq" OWNER TO postgres;

--
-- Name: Constant_ConstantId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Constant_ConstantId_seq" OWNED BY public."Constant"."ConstantId";


--
-- Name: Criteria; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Criteria" (
    "CriteriaId" integer NOT NULL,
    "CriteriaName" character varying(255),
    "IsActive" boolean DEFAULT true,
    "UserTitleId" integer,
    "Coef" numeric(32,2) DEFAULT 1,
    "MaxValue" numeric(32,2)
);


ALTER TABLE public."Criteria" OWNER TO postgres;

--
-- Name: Criteria_CriteriaId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Criteria_CriteriaId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Criteria_CriteriaId_seq" OWNER TO postgres;

--
-- Name: Criteria_CriteriaId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Criteria_CriteriaId_seq" OWNED BY public."Criteria"."CriteriaId";


--
-- Name: DayOfWeek; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."DayOfWeek" (
    "DayOfWeekId" integer NOT NULL,
    "DayName" character varying(100),
    "DayNameEN" character varying(100)
);


ALTER TABLE public."DayOfWeek" OWNER TO postgres;

--
-- Name: EventDay; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."EventDay" (
    "EventDayId" integer NOT NULL,
    "Year" integer,
    "Date" date,
    "CreateBy" integer,
    "CreateByName" character varying(255),
    "CreateDate" timestamp(0) without time zone DEFAULT now(),
    "Month" integer,
    "IsDeleted" boolean DEFAULT false,
    "Note" character varying(255),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone
);


ALTER TABLE public."EventDay" OWNER TO postgres;

--
-- Name: EventDay_EventDayId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."EventDay_EventDayId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."EventDay_EventDayId_seq" OWNER TO postgres;

--
-- Name: EventDay_EventDayId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."EventDay_EventDayId_seq" OWNED BY public."EventDay"."EventDayId";


--
-- Name: ExceptionWorker; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ExceptionWorker" (
    "ExceptionId" integer NOT NULL,
    "ExceptionName" text,
    "ExceptionData" text,
    "StackTrace" integer
);


ALTER TABLE public."ExceptionWorker" OWNER TO postgres;

--
-- Name: Exception_ExceptionId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Exception_ExceptionId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE;


ALTER SEQUENCE public."Exception_ExceptionId_seq" OWNER TO postgres;

--
-- Name: Exception_ExceptionId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Exception_ExceptionId_seq" OWNED BY public."ExceptionWorker"."ExceptionId";


--
-- Name: ExemptKpi; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ExemptKpi" (
    "ExemptKpiId" bigint NOT NULL,
    "UserId" bigint,
    "WeekId" integer,
    "Month" character varying,
    "IsSumKpi" boolean DEFAULT true
);


ALTER TABLE public."ExemptKpi" OWNER TO postgres;

--
-- Name: ExemptKpi_ExemptKpiId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ExemptKpi_ExemptKpiId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 99999999
    CACHE 1
    CYCLE;


ALTER SEQUENCE public."ExemptKpi_ExemptKpiId_seq" OWNER TO postgres;

--
-- Name: ExemptKpi_ExemptKpiId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ExemptKpi_ExemptKpiId_seq" OWNED BY public."ExemptKpi"."ExemptKpiId";


--
-- Name: FormPayment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."FormPayment" (
    "FormPaymentId" integer NOT NULL,
    "PaymentName" character varying(255),
    "IsActive" boolean DEFAULT true
);


ALTER TABLE public."FormPayment" OWNER TO postgres;

--
-- Name: FormPayment_FormPaymentId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."FormPayment_FormPaymentId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."FormPayment_FormPaymentId_seq" OWNER TO postgres;

--
-- Name: FormPayment_FormPaymentId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."FormPayment_FormPaymentId_seq" OWNED BY public."FormPayment"."FormPaymentId";


--
-- Name: GroupSalePoint; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."GroupSalePoint" (
    "GroupSalePointId" integer NOT NULL,
    "UserId" integer NOT NULL,
    "SalePointIds" integer[] NOT NULL,
    "Option" integer NOT NULL,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."GroupSalePoint" OWNER TO postgres;

--
-- Name: GroupSalePoint_GroupSalePointId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."GroupSalePoint_GroupSalePointId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."GroupSalePoint_GroupSalePointId_seq" OWNER TO postgres;

--
-- Name: GroupSalePoint_GroupSalePointId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."GroupSalePoint_GroupSalePointId_seq" OWNED BY public."GroupSalePoint"."GroupSalePointId";


--
-- Name: Guest; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Guest" (
    "GuestId" integer NOT NULL,
    "FullName" character varying(255),
    "Phone" character varying(10),
    "SalePointId" integer,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "TotalDebt" numeric(64,0),
    "DebtDate" date,
    "WholesalePriceId" integer,
    "ScratchPriceId" integer,
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone DEFAULT now(),
    "IsActive" boolean DEFAULT true
);


ALTER TABLE public."Guest" OWNER TO postgres;

--
-- Name: GuestAction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."GuestAction" (
    "GuestActionId" integer NOT NULL,
    "GuestId" integer,
    "SalePointId" integer,
    "GuestActionTypeId" integer,
    "TotalPrice" numeric(128,2),
    "FormPaymentId" integer DEFAULT 0,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone,
    "IsDeleted" boolean DEFAULT false,
    "DoneTransfer" boolean DEFAULT false,
    "Note" character varying(255),
    "GuestInfo" text,
    "ShiftDistributeId" integer,
    "HistoryOfOrderId" integer
);


ALTER TABLE public."GuestAction" OWNER TO postgres;

--
-- Name: COLUMN "GuestAction"."FormPaymentId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."GuestAction"."FormPaymentId" IS 'Hình thức trả';


--
-- Name: GuestActionType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."GuestActionType" (
    "GuestActionTypeId" integer NOT NULL,
    "TypeName" character varying(255),
    "IsActive" boolean DEFAULT true
);


ALTER TABLE public."GuestActionType" OWNER TO postgres;

--
-- Name: GuestActionType_GuestActionTypeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."GuestActionType_GuestActionTypeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."GuestActionType_GuestActionTypeId_seq" OWNER TO postgres;

--
-- Name: GuestActionType_GuestActionTypeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."GuestActionType_GuestActionTypeId_seq" OWNED BY public."GuestActionType"."GuestActionTypeId";


--
-- Name: GuestAction_GuestActionId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."GuestAction_GuestActionId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."GuestAction_GuestActionId_seq" OWNER TO postgres;

--
-- Name: GuestAction_GuestActionId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."GuestAction_GuestActionId_seq" OWNED BY public."GuestAction"."GuestActionId";


--
-- Name: Guest_GuestId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Guest_GuestId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Guest_GuestId_seq" OWNER TO postgres;

--
-- Name: Guest_GuestId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Guest_GuestId_seq" OWNED BY public."Guest"."GuestId";


--
-- Name: HistoryOfOrder; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."HistoryOfOrder" (
    "HistoryOfOrderId" integer NOT NULL,
    "SalePointId" integer,
    "PrintTimes" integer DEFAULT 0,
    "ListPrint" integer[],
    "Data" text,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone,
    "IsDeleted" boolean DEFAULT false,
    "SalePointLogIds" integer[],
    "GuestActionIds" integer[],
    "ConfirmLogIds" integer[],
    "ShiftDistributeId" integer,
    "GuestId" integer
);


ALTER TABLE public."HistoryOfOrder" OWNER TO postgres;

--
-- Name: HistoryOfOrder_HistoryOfOrderId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."HistoryOfOrder_HistoryOfOrderId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."HistoryOfOrder_HistoryOfOrderId_seq" OWNER TO postgres;

--
-- Name: HistoryOfOrder_HistoryOfOrderId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."HistoryOfOrder_HistoryOfOrderId_seq" OWNED BY public."HistoryOfOrder"."HistoryOfOrderId";


--
-- Name: HistoryOfTicketsShared; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."HistoryOfTicketsShared" (
    "UserId" integer NOT NULL,
    "FullName" character varying(255) NOT NULL,
    "CreatedDate" date,
    "DetailOfSharing" text
);


ALTER TABLE public."HistoryOfTicketsShared" OWNER TO postgres;

--
-- Name: Inventory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Inventory" (
    "InventoryId" integer NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "SalePointId" integer,
    "TotalDupReceived" integer,
    "TotalDupRemaining" integer
);


ALTER TABLE public."Inventory" OWNER TO postgres;

--
-- Name: InventoryAddMore; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."InventoryAddMore" (
    "Id" bigint NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer,
    "AgencyId" integer,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "ActionDate" timestamp(0) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "AgencyTypeId" integer
);


ALTER TABLE public."InventoryAddMore" OWNER TO postgres;

--
-- Name: InventoryAddMore_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."InventoryAddMore" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."InventoryAddMore_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Inventory_InventoryId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Inventory_InventoryId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."Inventory_InventoryId_seq" OWNER TO postgres;

--
-- Name: Inventory_InventoryId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Inventory_InventoryId_seq" OWNED BY public."Inventory"."InventoryId";


--
-- Name: InventoryConfirm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."InventoryConfirm" (
    "InventoryId" integer DEFAULT nextval('public."Inventory_InventoryId_seq"'::regclass) NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "SalePointId" integer,
    "TotalDupReceived" integer,
    "TotalDupRemaining" integer
);


ALTER TABLE public."InventoryConfirm" OWNER TO postgres;

--
-- Name: InventoryDetailLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."InventoryDetailLog" (
    "InventoryDetailLogId" integer NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer,
    "AgencyId" integer,
    "TotalReceived" integer,
    "TotalDupReceived" integer,
    "SalePointId" integer,
    "ActionDate" timestamp(0) without time zone,
    "ActionBy" integer,
    "ActionByName" character varying(100)
);


ALTER TABLE public."InventoryDetailLog" OWNER TO postgres;

--
-- Name: InventoryDetailLogId_sequence; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."InventoryDetailLogId_sequence"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE;


ALTER SEQUENCE public."InventoryDetailLogId_sequence" OWNER TO postgres;

--
-- Name: InventoryDetailLogId_sequence; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."InventoryDetailLogId_sequence" OWNED BY public."InventoryDetailLog"."InventoryDetailLogId";


--
-- Name: InventoryForSupAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."InventoryForSupAgency" (
    "InventoryForSupAgencyId" integer NOT NULL,
    "Date" timestamp(6) without time zone,
    "AgencyId" integer,
    "SupAgencyId" integer,
    "TotalReceived" bigint,
    "TotalDupReceived" bigint,
    "ActionBy" character varying(255),
    "ActionByName" character varying(255),
    "LotteryChannelId" integer,
    "TotalPrice" numeric(10,2),
    "TotalRemaining" bigint
);


ALTER TABLE public."InventoryForSupAgency" OWNER TO postgres;

--
-- Name: InventoryFull; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."InventoryFull" (
    "InventoryFullId" integer NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer,
    "AgencyId" integer,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "ActionDate" timestamp(0) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(100)
);


ALTER TABLE public."InventoryFull" OWNER TO postgres;

--
-- Name: InventoryFull_InventoryFullId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."InventoryFull_InventoryFullId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."InventoryFull_InventoryFullId_seq" OWNER TO postgres;

--
-- Name: InventoryFull_InventoryFullId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."InventoryFull_InventoryFullId_seq" OWNED BY public."InventoryFull"."InventoryFullId";


--
-- Name: InventoryLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."InventoryLog" (
    "InventoryLogId" bigint NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer,
    "AgencyId" integer,
    "TotalReceived" integer,
    "SalePointId" integer,
    "ActionDate" timestamp(0) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "TotalDupReceived" integer,
    "IsMigrated" boolean DEFAULT false,
    "TotalRemaining" integer,
    "TotalDupRemaining" integer
);


ALTER TABLE public."InventoryLog" OWNER TO postgres;

--
-- Name: InventoryLog_InventoryLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."InventoryLog_InventoryLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."InventoryLog_InventoryLogId_seq" OWNER TO postgres;

--
-- Name: InventoryLog_InventoryLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."InventoryLog_InventoryLogId_seq" OWNED BY public."InventoryLog"."InventoryLogId";


--
-- Name: Item; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Item" (
    "ItemId" integer NOT NULL,
    "ItemName" character varying(255),
    "Price" integer,
    "UnitId" integer,
    "CreateBy" integer,
    "CreateByName" character varying(255),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "IsActive" boolean DEFAULT true,
    "CreatedDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyDate" timestamp(0) without time zone DEFAULT now(),
    "Quotation" integer DEFAULT 1,
    "TypeOfItemId" integer
);


ALTER TABLE public."Item" OWNER TO postgres;

--
-- Name: ItemConfirmLog_ItemConfirmLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ItemConfirmLog_ItemConfirmLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ItemConfirmLog_ItemConfirmLogId_seq" OWNER TO postgres;

--
-- Name: ItemConfirmLog_ItemConfirmLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ItemConfirmLog_ItemConfirmLogId_seq" OWNED BY public."ConfirmLog"."ConfirmLogId";


--
-- Name: ItemFull; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ItemFull" (
    "ItemFullId" integer NOT NULL,
    "ItemId" integer,
    "SalePointId" integer,
    "TotalRemaining" integer,
    "CreateBy" integer,
    "CreateByName" character varying(255),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "CreateDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyDate" timestamp(6) without time zone,
    "TotalPrice" bigint
);


ALTER TABLE public."ItemFull" OWNER TO postgres;

--
-- Name: ItemFullLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ItemFullLog" (
    "ItemFullLogId" integer NOT NULL,
    "ItemId" integer,
    "SalePointId" integer,
    "TotalReceive" integer,
    "TotalRemaining" numeric(32,1),
    "Quantity" numeric(32,1),
    "ItemTypeId" integer,
    "CreateBy" integer,
    "CreateByName" character varying(255),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "CreateDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyDate" timestamp(0) without time zone DEFAULT now(),
    "TotalPrice" numeric(32,1),
    "BalancePrice" numeric(32,1),
    "Month" date
);


ALTER TABLE public."ItemFullLog" OWNER TO postgres;

--
-- Name: ItemFullLog_ItemFullLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ItemFullLog_ItemFullLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ItemFullLog_ItemFullLogId_seq" OWNER TO postgres;

--
-- Name: ItemFullLog_ItemFullLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ItemFullLog_ItemFullLogId_seq" OWNED BY public."ItemFullLog"."ItemFullLogId";


--
-- Name: ItemFull_ItemFullId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ItemFull_ItemFullId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ItemFull_ItemFullId_seq" OWNER TO postgres;

--
-- Name: ItemFull_ItemFullId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ItemFull_ItemFullId_seq" OWNED BY public."ItemFull"."ItemFullId";


--
-- Name: ItemType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ItemType" (
    "ItemTypeId" integer NOT NULL,
    "ItemTypeName" character varying(255)
);


ALTER TABLE public."ItemType" OWNER TO postgres;

--
-- Name: ItemType_ItemTypeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ItemType_ItemTypeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ItemType_ItemTypeId_seq" OWNER TO postgres;

--
-- Name: ItemType_ItemTypeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ItemType_ItemTypeId_seq" OWNED BY public."ItemType"."ItemTypeId";


--
-- Name: Item_ItemId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Item_ItemId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Item_ItemId_seq" OWNER TO postgres;

--
-- Name: Item_ItemId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Item_ItemId_seq" OWNED BY public."Item"."ItemId";


--
-- Name: KPILog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."KPILog" (
    "KPILogId" integer NOT NULL,
    "UserId" integer,
    "KPI" numeric(10,2),
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone,
    "IsDeleted" boolean DEFAULT false,
    "WeekId" integer,
    "SalePointId" integer,
    "CriteriaId" integer,
    "Note" character varying(255),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone,
    "Month" character varying(255) DEFAULT true
);


ALTER TABLE public."KPILog" OWNER TO postgres;

--
-- Name: KPILog_KPILogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."KPILog_KPILogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."KPILog_KPILogId_seq" OWNER TO postgres;

--
-- Name: KPILog_KPILogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."KPILog_KPILogId_seq" OWNED BY public."KPILog"."KPILogId";


--
-- Name: LeaderAttendent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LeaderAttendent" (
    "LeaderAttendentId" integer NOT NULL,
    "UserId" integer NOT NULL,
    "IsWorking" boolean DEFAULT true NOT NULL,
    "TriggerSalePoint" integer,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."LeaderAttendent" OWNER TO postgres;

--
-- Name: LeaderAttendent_LeaderAttendentId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."LeaderAttendent_LeaderAttendentId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."LeaderAttendent_LeaderAttendentId_seq" OWNER TO postgres;

--
-- Name: LeaderAttendent_LeaderAttendentId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."LeaderAttendent_LeaderAttendentId_seq" OWNED BY public."LeaderAttendent"."LeaderAttendentId";


--
-- Name: LeaderOffLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LeaderOffLog" (
    "LeaderOffLogId" integer NOT NULL,
    "WorkingDate" date NOT NULL,
    "UserId" integer NOT NULL,
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(6) without time zone,
    "IsDeleted" boolean DEFAULT false,
    "Note" character varying(255)
);


ALTER TABLE public."LeaderOffLog" OWNER TO postgres;

--
-- Name: LeaderOffLog_LeaderOffLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."LeaderOffLog_LeaderOffLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."LeaderOffLog_LeaderOffLogId_seq" OWNER TO postgres;

--
-- Name: LeaderOffLog_LeaderOffLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."LeaderOffLog_LeaderOffLogId_seq" OWNED BY public."LeaderOffLog"."LeaderOffLogId";


--
-- Name: LogDelete; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LogDelete" (
    "LogDeleteId" integer NOT NULL,
    "LogTypeId" integer,
    "LogData" text,
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."LogDelete" OWNER TO postgres;

--
-- Name: LogDelete_LogDeleteId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."LogDelete_LogDeleteId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."LogDelete_LogDeleteId_seq" OWNER TO postgres;

--
-- Name: LogDelete_LogDeleteId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."LogDelete_LogDeleteId_seq" OWNED BY public."LogDelete"."LogDeleteId";


--
-- Name: LogType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LogType" (
    "LogTypeId" integer NOT NULL,
    "LogTypeName" character varying(255)
);


ALTER TABLE public."LogType" OWNER TO postgres;

--
-- Name: LotoNew; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotoNew" (
    "TransactionCode" integer NOT NULL,
    "LotoType" character varying(10),
    "LotteryChannelId" integer,
    "IntoMoney" numeric,
    "SalePointId" integer,
    "ActionBy" integer,
    "Time" timestamp with time zone,
    "ActionByFix" integer,
    "Type" character varying,
    "Seri" character varying,
    "ShiftId" integer,
    "IsDelete" boolean DEFAULT true
);


ALTER TABLE public."LotoNew" OWNER TO postgres;

--
-- Name: LotteryChannel; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotteryChannel" (
    "LotteryChannelId" integer NOT NULL,
    "LotteryChannelName" character varying(100) NOT NULL,
    "DayIds" integer[],
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "RegionId" integer NOT NULL,
    "LotteryChannelTypeId" integer,
    "ShortName" character varying(50),
    "IsScratchcard" boolean DEFAULT false,
    "LinkApi" character varying(255),
    "RetailPrice" numeric(10,2),
    "Order" integer
);


ALTER TABLE public."LotteryChannel" OWNER TO postgres;

--
-- Name: LotteryChannelType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotteryChannelType" (
    "LotteryChannelTypeId" integer NOT NULL,
    "LotteryChannelTypeName" character varying(100) NOT NULL,
    "ShortName" character varying(100) NOT NULL
);


ALTER TABLE public."LotteryChannelType" OWNER TO postgres;

--
-- Name: LotteryForSupAgency_InventoryForSupAgencyId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."LotteryForSupAgency_InventoryForSupAgencyId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."LotteryForSupAgency_InventoryForSupAgencyId_seq" OWNER TO postgres;

--
-- Name: LotteryForSupAgency_InventoryForSupAgencyId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."LotteryForSupAgency_InventoryForSupAgencyId_seq" OWNED BY public."InventoryForSupAgency"."InventoryForSupAgencyId";


--
-- Name: lotterypriceid_sequence1; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.lotterypriceid_sequence1
    START WITH 295
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.lotterypriceid_sequence1 OWNER TO postgres;

--
-- Name: LotteryPrice; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotteryPrice" (
    "LotteryPriceId" integer DEFAULT nextval('public.lotterypriceid_sequence1'::regclass) NOT NULL,
    "LotteryPriceName" character varying(100) NOT NULL,
    "Price" numeric(10,2) NOT NULL,
    "Value" real NOT NULL,
    "Step" integer,
    "LotteryTypeIds" integer[]
);


ALTER TABLE public."LotteryPrice" OWNER TO postgres;

--
-- Name: LotteryPriceAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotteryPriceAgency" (
    "LotteryPriceAgencyId" integer NOT NULL,
    "AgencyId" integer,
    "LotteryChannelId" integer NOT NULL,
    "Price" numeric(255,2) NOT NULL,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "IsDeleted" boolean DEFAULT false
);


ALTER TABLE public."LotteryPriceAgency" OWNER TO postgres;

--
-- Name: LotteryPriceAgency_LotteryPriceAgencyId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."LotteryPriceAgency_LotteryPriceAgencyId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."LotteryPriceAgency_LotteryPriceAgencyId_seq" OWNER TO postgres;

--
-- Name: LotteryPriceAgency_LotteryPriceAgencyId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."LotteryPriceAgency_LotteryPriceAgencyId_seq" OWNED BY public."LotteryPriceAgency"."LotteryPriceAgencyId";


--
-- Name: LotteryPriceSubAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotteryPriceSubAgency" (
    "LotteryPriceAgencyId" bigint DEFAULT nextval('public."LotteryPriceAgency_LotteryPriceAgencyId_seq"'::regclass) NOT NULL,
    "AgencyId" bigint,
    "LotteryChannelId" bigint,
    "Price" numeric,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone,
    "IsDeleted" boolean
);


ALTER TABLE public."LotteryPriceSubAgency" OWNER TO postgres;

--
-- Name: LotteryPriceSubAgency_LotteryPriceSubAgencyId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."LotteryPriceSubAgency_LotteryPriceSubAgencyId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE;


ALTER SEQUENCE public."LotteryPriceSubAgency_LotteryPriceSubAgencyId_seq" OWNER TO postgres;

--
-- Name: LotteryPriceSubAgency_LotteryPriceSubAgencyId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."LotteryPriceSubAgency_LotteryPriceSubAgencyId_seq" OWNED BY public."LotteryPriceSubAgency"."LotteryPriceAgencyId";


--
-- Name: LotteryType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."LotteryType" (
    "LotteryTypeId" integer NOT NULL,
    "LotteryTypeName" character varying(255) NOT NULL
);


ALTER TABLE public."LotteryType" OWNER TO postgres;

--
-- Name: ManagerBorrow; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ManagerBorrow" (
    "ManagerBorrowId" integer NOT NULL,
    "UserId" integer,
    "FormPaymentId" integer,
    "Price" numeric(255,2),
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone,
    "IsDeleted" boolean DEFAULT false,
    "IsPay" boolean DEFAULT false,
    "Note" character varying(255),
    "Commission" numeric(255,2),
    "TotalPay" numeric(255,2) DEFAULT 0,
    "Tax" numeric(255,2) DEFAULT 0,
    "CommissionTranfer" numeric(255,2) DEFAULT 0,
    "ReceivedSalePoint" numeric(255,2) DEFAULT 0,
    "ReceivedAcc" numeric(255,2) DEFAULT 0,
    "ReceivedTranfer" numeric(255,2) DEFAULT 0
);


ALTER TABLE public."ManagerBorrow" OWNER TO postgres;

--
-- Name: ManagerBorrow_ManagerBorrowId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ManagerBorrow_ManagerBorrowId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ManagerBorrow_ManagerBorrowId_seq" OWNER TO postgres;

--
-- Name: ManagerBorrow_ManagerBorrowId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ManagerBorrow_ManagerBorrowId_seq" OWNED BY public."ManagerBorrow"."ManagerBorrowId";


--
-- Name: MoneyAction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyAction" (
    "Id" bigint NOT NULL,
    "MoneyActionTypeId" integer NOT NULL,
    "Content" character varying,
    "Money" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "MoneyActionMethodId" integer NOT NULL,
    "Date" date NOT NULL
);


ALTER TABLE public."MoneyAction" OWNER TO postgres;

--
-- Name: MoneyActionMethod; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyActionMethod" (
    "Id" integer NOT NULL,
    "Name" character varying NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."MoneyActionMethod" OWNER TO postgres;

--
-- Name: MoneyActionMethod_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyActionMethod" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyActionMethod_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MoneyActionType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyActionType" (
    "Id" integer NOT NULL,
    "Name" character varying NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."MoneyActionType" OWNER TO postgres;

--
-- Name: MoneyActionType_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyActionType" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyActionType_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MoneyAction_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyAction" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyAction_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MoneyChangeHistory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyChangeHistory" (
    "Id" bigint NOT NULL,
    "Date" date NOT NULL,
    "Details" text NOT NULL,
    "CurrentMoney" text NOT NULL,
    "ChangeMoney" text NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."MoneyChangeHistory" OWNER TO postgres;

--
-- Name: MoneyChangeHistory_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyChangeHistory" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyChangeHistory_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MoneyDesk; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyDesk" (
    "Id" bigint NOT NULL,
    "Date" date,
    "SumMoney" numeric DEFAULT 0 NOT NULL,
    "SumWinning" numeric DEFAULT 0 NOT NULL,
    "SumBank" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."MoneyDesk" OWNER TO postgres;

--
-- Name: MoneyDesk_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyDesk" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyDesk_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MoneyListType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyListType" (
    "Id" integer NOT NULL,
    "Name" character varying NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."MoneyListType" OWNER TO postgres;

--
-- Name: MoneyListTypeDefault; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."MoneyListTypeDefault" (
    "Id" integer NOT NULL,
    "MoneyListTypeId" integer NOT NULL,
    "MoneyListDefault" text,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."MoneyListTypeDefault" OWNER TO postgres;

--
-- Name: MoneyListTypeDefault_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyListTypeDefault" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyListTypeDefault_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MoneyListType_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."MoneyListType" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."MoneyListType_Id_seq"
    START WITH 11
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: PaymentAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."PaymentAgency" (
    "Id" bigint NOT NULL,
    "AgencyId" integer NOT NULL,
    "LotteryDate" date NOT NULL,
    "TotalMustPayment" double precision DEFAULT 0 NOT NULL,
    "TotalPayment" double precision NOT NULL,
    "Dept" double precision NOT NULL,
    "CreatedDate" timestamp(0) without time zone,
    "CreatedBy" integer,
    "UpdatedDate" timestamp(6) without time zone,
    "UpdatedBy" integer,
    "IsDeleted" boolean,
    "PreviousDept" double precision DEFAULT 0 NOT NULL,
    "AgencyTypeId" integer
);


ALTER TABLE public."PaymentAgency" OWNER TO postgres;

--
-- Name: PaymentAgency_Id_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."PaymentAgency" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."PaymentAgency_Id_seq1"
    START WITH 48
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Permission_PermissionId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Permission_PermissionId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."Permission_PermissionId_seq" OWNER TO postgres;

--
-- Name: Permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Permission" (
    "PermissionId" integer DEFAULT nextval('public."Permission_PermissionId_seq"'::regclass) NOT NULL,
    "PermissionName" character varying(255) NOT NULL,
    "ControllerName" character varying(255) NOT NULL,
    "Description" character varying(500),
    "CssIcon" text,
    "Sort" integer,
    "PermissionGroupId" integer
);


ALTER TABLE public."Permission" OWNER TO postgres;

--
-- Name: PermissionGroup_PermissionGroupId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."PermissionGroup_PermissionGroupId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."PermissionGroup_PermissionGroupId_seq" OWNER TO postgres;

--
-- Name: PermissionGroup; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."PermissionGroup" (
    "PermissionGroupId" integer DEFAULT nextval('public."PermissionGroup_PermissionGroupId_seq"'::regclass) NOT NULL,
    "PermissionGroupName" character varying(50) NOT NULL,
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "Sort" integer
);


ALTER TABLE public."PermissionGroup" OWNER TO postgres;

--
-- Name: PermissionRole_PermissionRoleId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."PermissionRole_PermissionRoleId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."PermissionRole_PermissionRoleId_seq" OWNER TO postgres;

--
-- Name: PermissionRole; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."PermissionRole" (
    "PermissionRoleId" integer DEFAULT nextval('public."PermissionRole_PermissionRoleId_seq"'::regclass) NOT NULL,
    "RoleName" character varying(255) NOT NULL,
    "PermissionId" integer NOT NULL,
    "ActionName" character varying(255) NOT NULL,
    "Sort" integer,
    "IsShowMenu" boolean DEFAULT true,
    "IsSubMenu" boolean DEFAULT true,
    "IsActive" boolean DEFAULT true,
    "IsDelete" boolean DEFAULT false,
    "RoleDisplayName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."PermissionRole" OWNER TO postgres;

--
-- Name: PermissionRoleTitles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."PermissionRoleTitles" (
    "PermissionRoleId" integer NOT NULL,
    "UserTitleId" integer NOT NULL,
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "CreatedBy" integer,
    "CreatedByName" character varying(100)
);


ALTER TABLE public."PermissionRoleTitles" OWNER TO postgres;

--
-- Name: Promotion; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Promotion" (
    "RegionId" integer,
    "PromotionText" text,
    "LotteryChannelList" character varying(255),
    "isActive" boolean,
    "Step" integer,
    "Id" integer NOT NULL
);


ALTER TABLE public."Promotion" OWNER TO postgres;

--
-- Name: PromotionCode; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."PromotionCode" (
    "PromotionCode" text,
    "Date" date,
    "IsUsed" boolean DEFAULT false,
    "PromotionCodeId" bigint NOT NULL
);


ALTER TABLE public."PromotionCode" OWNER TO postgres;

--
-- Name: PromotionCode_PromotionCodeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."PromotionCode_PromotionCodeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."PromotionCode_PromotionCodeId_seq" OWNER TO postgres;

--
-- Name: PromotionCode_PromotionCodeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."PromotionCode_PromotionCodeId_seq" OWNED BY public."PromotionCode"."PromotionCodeId";


--
-- Name: Promotion_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Promotion_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Promotion_Id_seq" OWNER TO postgres;

--
-- Name: Promotion_Id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Promotion_Id_seq" OWNED BY public."Promotion"."Id";


--
-- Name: Region; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Region" (
    "RegionId" integer NOT NULL,
    "RegionName" character varying(100)
);


ALTER TABLE public."Region" OWNER TO postgres;

--
-- Name: Repayment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Repayment" (
    "RepaymentId" integer NOT NULL,
    "CustomerName" character varying(255) NOT NULL,
    "Amount" numeric(64,0) NOT NULL,
    "Note" text,
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "SalePointId" integer NOT NULL,
    "ShiftDistributeId" integer
);


ALTER TABLE public."Repayment" OWNER TO postgres;

--
-- Name: Repayment_RepaymentId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Repayment_RepaymentId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."Repayment_RepaymentId_seq" OWNER TO postgres;

--
-- Name: Repayment_RepaymentId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Repayment_RepaymentId_seq" OWNED BY public."Repayment"."RepaymentId";


--
-- Name: ReportKpiManager; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportKpiManager" (
    "ManagerId" integer NOT NULL,
    "Date" character varying(255) NOT NULL,
    "Kpi" integer NOT NULL,
    "ModifyBy" integer NOT NULL,
    "ModifyByName" character varying(255) NOT NULL,
    "Type" integer
);


ALTER TABLE public."ReportKpiManager" OWNER TO postgres;

--
-- Name: ReportKpiManager_ManagerId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportKpiManager" ALTER COLUMN "ManagerId" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."ReportKpiManager_ManagerId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ReportLottery; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportLottery" (
    "ReportLotteryId" bigint NOT NULL,
    "ShiftId" integer,
    "Date" date,
    "LotteryChannelId" integer,
    "SalePointId" integer,
    "Stock" numeric,
    "SoldRetail" integer,
    "Remaining" integer,
    "LotteryTypeId" integer,
    "Transfer" integer,
    "Received" integer,
    "LotteryDate" date,
    "OrdinalNum" integer,
    "SoldRetailMoney" bigint,
    "SoldWholeSale" integer DEFAULT 0,
    "SoldWholeSaleMoney" bigint DEFAULT 0,
    "ReceivedDup" bigint DEFAULT 0,
    "TransferDup" bigint DEFAULT 0,
    "RemainingDup" bigint DEFAULT 0,
    "StockDup" bigint DEFAULT 0,
    "SoldRetailDup" bigint DEFAULT 0,
    "SoldRetailMoneyDup" bigint DEFAULT 0,
    "SoldWholeSaleDup" bigint DEFAULT 0,
    "SoldWholeSaleMoneyDup" bigint DEFAULT 0
);


ALTER TABLE public."ReportLottery" OWNER TO postgres;

--
-- Name: ReportLottery_ReportLotteryId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ReportLottery_ReportLotteryId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ReportLottery_ReportLotteryId_seq" OWNER TO postgres;

--
-- Name: ReportLottery_ReportLotteryId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ReportLottery_ReportLotteryId_seq" OWNED BY public."ReportLottery"."ReportLotteryId";


--
-- Name: ReportMoney; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportMoney" (
    "SalePointId" integer,
    "ActionDate" date,
    "TotalMoneyInDay" bigint,
    "ReturnMoneyId" integer NOT NULL,
    "ShiftDistributeId" integer,
    "ShiftId" integer
);


ALTER TABLE public."ReportMoney" OWNER TO postgres;

--
-- Name: ReportMoneyAction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportMoneyAction" (
    "Id" bigint NOT NULL,
    "MoneyActionId" bigint NOT NULL,
    "MoneyActionTypeId" integer NOT NULL,
    "MoneyActionMethodId" integer NOT NULL,
    "Details" text,
    "Date" date,
    "Total" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."ReportMoneyAction" OWNER TO postgres;

--
-- Name: ReportMoneyAction_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportMoneyAction" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReportMoneyAction_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ReportMoneyList; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportMoneyList" (
    "Id" bigint NOT NULL,
    "SalePointId" integer NOT NULL,
    "Date" date NOT NULL,
    "ShiftId" integer NOT NULL,
    "ShiftDistributeId" integer NOT NULL,
    "SumMoney" numeric DEFAULT 0 NOT NULL,
    "SumWinning" numeric DEFAULT 0 NOT NULL,
    "Total" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."ReportMoneyList" OWNER TO postgres;

--
-- Name: ReportMoneyListAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportMoneyListAgency" (
    "Id" bigint NOT NULL,
    "AgencyId" integer NOT NULL,
    "AgencyTypeId" integer NOT NULL,
    "Date" date NOT NULL,
    "SumMoney" numeric DEFAULT 0 NOT NULL,
    "SumWinning" numeric DEFAULT 0 NOT NULL,
    "Total" numeric DEFAULT 0 NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone
);


ALTER TABLE public."ReportMoneyListAgency" OWNER TO postgres;

--
-- Name: ReportMoneyListAgencyDetail; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportMoneyListAgencyDetail" (
    "Id" bigint NOT NULL,
    "ReportMoneyListAgencyId" bigint NOT NULL,
    "MoneyListTypeId" integer NOT NULL,
    "Date" date NOT NULL,
    "Details" text NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "Total" numeric DEFAULT 0,
    "AgencyTypeId" integer
);


ALTER TABLE public."ReportMoneyListAgencyDetail" OWNER TO postgres;

--
-- Name: ReportMoneyListAgencyDetail_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportMoneyListAgencyDetail" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReportMoneyListAgencyDetail_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ReportMoneyListAgency_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportMoneyListAgency" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReportMoneyListAgency_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ReportMoneyListDetail; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportMoneyListDetail" (
    "Id" bigint NOT NULL,
    "ReportMoneyListId" bigint NOT NULL,
    "MoneyListTypeId" integer NOT NULL,
    "Details" text NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone DEFAULT now(),
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "Total" numeric DEFAULT 0,
    "Date" date NOT NULL
);


ALTER TABLE public."ReportMoneyListDetail" OWNER TO postgres;

--
-- Name: ReportMoneyListDetail_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportMoneyListDetail" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReportMoneyListDetail_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ReportMoneyList_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportMoneyList" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReportMoneyList_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ReportMoney_ReportMoneyId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ReportMoney_ReportMoneyId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ReportMoney_ReportMoneyId_seq" OWNER TO postgres;

--
-- Name: ReportMoney_ReportMoneyId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ReportMoney_ReportMoneyId_seq" OWNED BY public."ReportMoney"."ReturnMoneyId";


--
-- Name: ReportScratchcard; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReportScratchcard" (
    "ReportScratchcardId" bigint NOT NULL,
    "ShiftId" integer DEFAULT 1 NOT NULL,
    "LotteryDate" date NOT NULL,
    "SalePointId" integer NOT NULL,
    "Stock" text NOT NULL,
    "ActionDate" timestamp(0) without time zone DEFAULT now(),
    "ActionBy" integer
);


ALTER TABLE public."ReportScratchcard" OWNER TO postgres;

--
-- Name: ReportScratchcard_ReportScratchcardId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReportScratchcard" ALTER COLUMN "ReportScratchcardId" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReportScratchcard_ReportScratchcardId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ResultLottery_ResultLotteryId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ResultLottery_ResultLotteryId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ResultLottery_ResultLotteryId_seq" OWNER TO postgres;

--
-- Name: ResultLottery; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ResultLottery" (
    "ResultLotteryId" integer DEFAULT nextval('public."ResultLottery_ResultLotteryId_seq"'::regclass) NOT NULL,
    "LotteryChannelId" integer,
    "LotteryDate" date,
    "TypeAwardId" integer,
    "ListNumber" character varying[],
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "IsDeleted" boolean DEFAULT false
);


ALTER TABLE public."ResultLottery" OWNER TO postgres;

--
-- Name: ReturnLottery; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ReturnLottery" (
    "Id" bigint NOT NULL,
    "AgencyId" bigint NOT NULL,
    "LotteryChannelId" integer NOT NULL,
    "LotteryDate" date NOT NULL,
    "ReturnNumber" integer,
    "ReturnDate" date,
    "IsDeleted" boolean DEFAULT false,
    "CreatedBy" integer,
    "UpdatedBy" integer,
    "CreatedDate" timestamp(0) without time zone,
    "UpdatedDate" timestamp(0) without time zone
);


ALTER TABLE public."ReturnLottery" OWNER TO postgres;

--
-- Name: ReturnLottery_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."ReturnLottery" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."ReturnLottery_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: SalaryConfirm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SalaryConfirm" (
    "SalaryConfirmId" integer NOT NULL,
    "UserId" integer,
    "Month" character varying(255),
    "Data" text,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now(),
    "IsDeleted" boolean DEFAULT false,
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."SalaryConfirm" OWNER TO postgres;

--
-- Name: SalaryConfirm_SalaryConfirmId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."SalaryConfirm_SalaryConfirmId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."SalaryConfirm_SalaryConfirmId_seq" OWNER TO postgres;

--
-- Name: SalaryConfirm_SalaryConfirmId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."SalaryConfirm_SalaryConfirmId_seq" OWNED BY public."SalaryConfirm"."SalaryConfirmId";


--
-- Name: SalePoint; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SalePoint" (
    "SalePointId" integer NOT NULL,
    "SalePointName" character varying(255) NOT NULL,
    "CityId" integer,
    "DistrictId" integer,
    "WardId" integer,
    "AddressNo" character varying(500),
    "FullAddress" character varying(700),
    "Phone" character varying(14),
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "MACAddress" character varying(50),
    "IPAddress" character varying(50),
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(6) without time zone,
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(6) without time zone,
    "Note" character varying(255),
    "MainUserId" integer[],
    "PercentMainUserId" numeric[],
    "MainLeadId" integer[],
    "RentHomeFee" bigint,
    "InternetFee" bigint
);


ALTER TABLE public."SalePoint" OWNER TO postgres;

--
-- Name: SalePointLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SalePointLog" (
    "SalePointLogId" bigint NOT NULL,
    "SalePointId" integer NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer NOT NULL,
    "Quantity" integer NOT NULL,
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "LotteryTypeId" integer NOT NULL,
    "TotalValue" numeric(24,0) DEFAULT 0,
    "ShiftDistributeId" integer NOT NULL,
    "LotteryPriceId" integer,
    "IsDeleted" boolean DEFAULT false,
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "GuestId" integer,
    "HistoryOfOrderId" integer,
    "FourLastNumber" character varying(12),
    "IsMigrated" boolean DEFAULT false,
    "PromotionCode" character varying[] DEFAULT '{}'::character varying[],
    "PromotionCodeId" integer[]
);


ALTER TABLE public."SalePointLog" OWNER TO postgres;

--
-- Name: SalePointLog_SalePointLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."SalePointLog_SalePointLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."SalePointLog_SalePointLogId_seq" OWNER TO postgres;

--
-- Name: SalePointLog_SalePointLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."SalePointLog_SalePointLogId_seq" OWNED BY public."SalePointLog"."SalePointLogId";


--
-- Name: SalePointPercentLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SalePointPercentLog" (
    "SalePointPercentLogId" integer NOT NULL,
    "SalePointId" integer,
    "MainUserId" integer[],
    "PercentMainUserId" numeric[],
    "ActionDate" timestamp(0) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(255)
);


ALTER TABLE public."SalePointPercentLog" OWNER TO postgres;

--
-- Name: SalePointPercentLog_SalePointPercentLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."SalePointPercentLog_SalePointPercentLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."SalePointPercentLog_SalePointPercentLogId_seq" OWNER TO postgres;

--
-- Name: SalePointPercentLog_SalePointPercentLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."SalePointPercentLog_SalePointPercentLogId_seq" OWNED BY public."SalePointPercentLog"."SalePointPercentLogId";


--
-- Name: SalePoint_SalePointId_seq1; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."SalePoint_SalePointId_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."SalePoint_SalePointId_seq1" OWNER TO postgres;

--
-- Name: SalePoint_SalePointId_seq1; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."SalePoint_SalePointId_seq1" OWNED BY public."SalePoint"."SalePointId";


--
-- Name: Scratchcard; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Scratchcard" (
    "ScratchcardId" integer NOT NULL,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "SalePointId" integer,
    "LastActionBy" integer,
    "LastActionByName" character varying(100),
    "LastActionDate" timestamp(6) without time zone DEFAULT now(),
    "LotteryChannelId" integer
);


ALTER TABLE public."Scratchcard" OWNER TO postgres;

--
-- Name: Scratchcard_ScratchcardId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Scratchcard_ScratchcardId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."Scratchcard_ScratchcardId_seq" OWNER TO postgres;

--
-- Name: Scratchcard_ScratchcardId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Scratchcard_ScratchcardId_seq" OWNED BY public."Scratchcard"."ScratchcardId";


--
-- Name: ScratchcardConfirm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardConfirm" (
    "ScratchcardId" integer DEFAULT nextval('public."Scratchcard_ScratchcardId_seq"'::regclass) NOT NULL,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "SalePointId" integer,
    "LastActionBy" integer,
    "LastActionByName" character varying(100),
    "LastActionDate" timestamp(6) without time zone DEFAULT now(),
    "LotteryChannelId" integer
);


ALTER TABLE public."ScratchcardConfirm" OWNER TO postgres;

--
-- Name: ScratchcardForSubAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardForSubAgency" (
    "ScratchcardId" integer DEFAULT nextval('public."Scratchcard_ScratchcardId_seq"'::regclass) NOT NULL,
    "TotalReceived" integer,
    "TotalRemaining" integer,
    "AgencyId" integer,
    "LastActionBy" integer,
    "LastActionByName" character varying(100),
    "LastActionDate" timestamp(6) without time zone DEFAULT now(),
    "LotteryChannelId" integer
);


ALTER TABLE public."ScratchcardForSubAgency" OWNER TO postgres;

--
-- Name: ScratchcardFull; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardFull" (
    "ScratchcardFullId" integer NOT NULL,
    "AgencyId" integer NOT NULL,
    "TotalRemaining" integer NOT NULL,
    "LastActionDate" timestamp(6) without time zone DEFAULT now(),
    "LastActionBy" integer,
    "LastActionByName" character varying(100),
    "LotteryChannelId" integer
);


ALTER TABLE public."ScratchcardFull" OWNER TO postgres;

--
-- Name: ScratchcardFullLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardFullLog" (
    "ScratchcardFullLogId" integer NOT NULL,
    "AgencyId" integer,
    "TotalReceived" integer,
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "LotteryChannelId" integer,
    "IsActive" boolean DEFAULT true
);


ALTER TABLE public."ScratchcardFullLog" OWNER TO postgres;

--
-- Name: ScratchcardFullLog_ScratchcardFullLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ScratchcardFullLog_ScratchcardFullLogId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ScratchcardFullLog_ScratchcardFullLogId_seq" OWNER TO postgres;

--
-- Name: ScratchcardFullLog_ScratchcardFullLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ScratchcardFullLog_ScratchcardFullLogId_seq" OWNED BY public."ScratchcardFullLog"."ScratchcardFullLogId";


--
-- Name: ScratchcardFull_CheckLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardFull_CheckLog" (
    "ScratchcardFullId" integer NOT NULL,
    "AgencyId" integer NOT NULL,
    "TotalRemaining" integer NOT NULL,
    "LastActionDate" timestamp(6) without time zone DEFAULT now(),
    "LastActionBy" integer,
    "LastActionByName" character varying(100),
    "LotteryChannelId" integer
);


ALTER TABLE public."ScratchcardFull_CheckLog" OWNER TO postgres;

--
-- Name: ScratchcardFull_CheckLog_ScratchcardFullId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ScratchcardFull_CheckLog_ScratchcardFullId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ScratchcardFull_CheckLog_ScratchcardFullId_seq" OWNER TO postgres;

--
-- Name: ScratchcardFull_CheckLog_ScratchcardFullId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ScratchcardFull_CheckLog_ScratchcardFullId_seq" OWNED BY public."ScratchcardFull_CheckLog"."ScratchcardFullId";


--
-- Name: ScratchcardFull_ScratchcardFullId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ScratchcardFull_ScratchcardFullId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ScratchcardFull_ScratchcardFullId_seq" OWNER TO postgres;

--
-- Name: ScratchcardFull_ScratchcardFullId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ScratchcardFull_ScratchcardFullId_seq" OWNED BY public."ScratchcardFull"."ScratchcardFullId";


--
-- Name: ScratchcardLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardLog" (
    "ScratchcardLogId" integer NOT NULL,
    "SalePointId" integer NOT NULL,
    "TotalReceived" integer NOT NULL,
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "LotteryChannelId" integer,
    "IsActive" boolean DEFAULT true,
    "TransitionId" bigint DEFAULT 0 NOT NULL
);


ALTER TABLE public."ScratchcardLog" OWNER TO postgres;

--
-- Name: ScratchcardLogId_ScratchcardLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ScratchcardLogId_ScratchcardLogId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ScratchcardLogId_ScratchcardLogId_seq" OWNER TO postgres;

--
-- Name: ScratchcardLogId_ScratchcardLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ScratchcardLogId_ScratchcardLogId_seq" OWNED BY public."ScratchcardLog"."ScratchcardLogId";


--
-- Name: ScratchcardLogForSubAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ScratchcardLogForSubAgency" (
    "ScratchcardLogId" integer DEFAULT nextval('public."ScratchcardLogId_ScratchcardLogId_seq"'::regclass) NOT NULL,
    "SalePointId" integer NOT NULL,
    "TotalReceived" integer NOT NULL,
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "LotteryChannelId" integer,
    "IsActive" boolean DEFAULT true
);


ALTER TABLE public."ScratchcardLogForSubAgency" OWNER TO postgres;

--
-- Name: Shift; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Shift" (
    "ShiftId" integer NOT NULL,
    "ShiftName" character varying(50) NOT NULL,
    "StartTime" time(6) without time zone NOT NULL,
    "EndTime" time(6) without time zone NOT NULL,
    "AvaiLogTime" time(6) without time zone NOT NULL
);


ALTER TABLE public."Shift" OWNER TO postgres;

--
-- Name: ShiftAttendance; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftAttendance" (
    "ShiftAttendanceId" integer NOT NULL,
    "DistributeMonth" character varying(10) NOT NULL,
    "UserId" integer,
    "TotalShift" integer DEFAULT 0,
    "TotalAbsent" integer DEFAULT 0,
    "TotalOT" integer DEFAULT 0,
    "IsMainShift" boolean DEFAULT false,
    "LastActionDate" timestamp(6) without time zone DEFAULT now(),
    "LastActionBy" integer,
    "LastActionByName" character varying(100),
    "TotalMakeup" integer DEFAULT 0
);


ALTER TABLE public."ShiftAttendance" OWNER TO postgres;

--
-- Name: COLUMN "ShiftAttendance"."DistributeMonth"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftAttendance"."DistributeMonth" IS 'YYYY-MM';


--
-- Name: ShiftAttendanceForIntern; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftAttendanceForIntern" (
    "DistributeMonth" character varying(255) NOT NULL,
    "UserId" integer,
    "TotalShift" integer,
    "TotalAbsent" integer,
    "TotalOT" integer,
    "TotalMakeup" integer,
    "IsMainShift" boolean,
    "LastActionDate" timestamp(6) without time zone,
    "LastActionBy" integer,
    "LastActionByName" character varying(255),
    "ShiftAttendanceId" integer NOT NULL
);


ALTER TABLE public."ShiftAttendanceForIntern" OWNER TO postgres;

--
-- Name: COLUMN "ShiftAttendanceForIntern"."DistributeMonth"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftAttendanceForIntern"."DistributeMonth" IS 'YYYY-MM';


--
-- Name: ShiftAttendanceForIntern_ShiftAttendanceId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftAttendanceForIntern_ShiftAttendanceId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ShiftAttendanceForIntern_ShiftAttendanceId_seq" OWNER TO postgres;

--
-- Name: ShiftAttendanceForIntern_ShiftAttendanceId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftAttendanceForIntern_ShiftAttendanceId_seq" OWNED BY public."ShiftAttendanceForIntern"."ShiftAttendanceId";


--
-- Name: ShiftAttendance_ShiftAttendanceId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftAttendance_ShiftAttendanceId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ShiftAttendance_ShiftAttendanceId_seq" OWNER TO postgres;

--
-- Name: ShiftAttendance_ShiftAttendanceId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftAttendance_ShiftAttendanceId_seq" OWNED BY public."ShiftAttendance"."ShiftAttendanceId";


--
-- Name: ShiftDistribute; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftDistribute" (
    "ShiftDistributeId" integer NOT NULL,
    "DistributeDate" date NOT NULL,
    "SalePointId" integer NOT NULL,
    "ShiftId" integer NOT NULL,
    "UserId" integer,
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "ShiftTypeId" integer NOT NULL,
    "IsActive" boolean DEFAULT true,
    "Note" text,
    "ShiftMainId" integer
);


ALTER TABLE public."ShiftDistribute" OWNER TO postgres;

--
-- Name: ShiftDistributeForIntern; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftDistributeForIntern" (
    "ShiftDistributeId" integer NOT NULL,
    "DistributeDate" date NOT NULL,
    "SalePointId" integer,
    "UserId" integer,
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(0) without time zone,
    "ShiftTypeId" integer NOT NULL,
    "IsActive" boolean DEFAULT true,
    "Note" text,
    "ShiftMainId" integer,
    "ShiftId" integer NOT NULL
);


ALTER TABLE public."ShiftDistributeForIntern" OWNER TO postgres;

--
-- Name: ShiftDistributeForIntern_ShiftDistributeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftDistributeForIntern_ShiftDistributeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ShiftDistributeForIntern_ShiftDistributeId_seq" OWNER TO postgres;

--
-- Name: ShiftDistributeForIntern_ShiftDistributeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftDistributeForIntern_ShiftDistributeId_seq" OWNED BY public."ShiftDistributeForIntern"."ShiftDistributeId";


--
-- Name: ShiftDistribute_ShiftDistributeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftDistribute_ShiftDistributeId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ShiftDistribute_ShiftDistributeId_seq" OWNER TO postgres;

--
-- Name: ShiftDistribute_ShiftDistributeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftDistribute_ShiftDistributeId_seq" OWNED BY public."ShiftDistribute"."ShiftDistributeId";


--
-- Name: ShiftMain; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftMain" (
    "ShiftMainId" integer NOT NULL,
    "SalePointId" integer,
    "Month" character varying(50) NOT NULL,
    "MainUser" character varying(255)
);


ALTER TABLE public."ShiftMain" OWNER TO postgres;

--
-- Name: ShiftMainForIntern; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftMainForIntern" (
    "SalePointId" integer,
    "Month" character varying(50) NOT NULL,
    "MainUser" character varying(255),
    "ShiftMainId" smallint NOT NULL
);


ALTER TABLE public."ShiftMainForIntern" OWNER TO postgres;

--
-- Name: ShiftMainForIntern_ShiftMainId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftMainForIntern_ShiftMainId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 32767
    CACHE 1;


ALTER SEQUENCE public."ShiftMainForIntern_ShiftMainId_seq" OWNER TO postgres;

--
-- Name: ShiftMainForIntern_ShiftMainId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftMainForIntern_ShiftMainId_seq" OWNED BY public."ShiftMainForIntern"."ShiftMainId";


--
-- Name: ShiftMain_ShiftMainId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftMain_ShiftMainId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ShiftMain_ShiftMainId_seq" OWNER TO postgres;

--
-- Name: ShiftMain_ShiftMainId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftMain_ShiftMainId_seq" OWNED BY public."ShiftMain"."ShiftMainId";


--
-- Name: ShiftTransfer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftTransfer" (
    "ShiftTransferId" integer NOT NULL,
    "ShiftId" integer NOT NULL,
    "UserId" integer NOT NULL,
    "TotalReceived" integer NOT NULL,
    "TotalRemaining" integer,
    "LotteryChannelId" integer,
    "LotteryDate" date,
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "SalePointid" integer,
    "ShiftDistributeId" integer,
    "LotteryTypeId" integer,
    "TotalTrans" integer,
    "TotalReturns" integer,
    "TotalStocks" integer,
    "TotalSold" integer,
    "TotalSoldMoney" integer,
    "TotalRetail" integer,
    "TotalRetailMoney" integer,
    "TotalWholesale" integer,
    "TotalWholesaleMoney" integer
);


ALTER TABLE public."ShiftTransfer" OWNER TO postgres;

--
-- Name: COLUMN "ShiftTransfer"."TotalReceived"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalReceived" IS 'Nhận';


--
-- Name: COLUMN "ShiftTransfer"."TotalRemaining"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalRemaining" IS 'Còn lại';


--
-- Name: COLUMN "ShiftTransfer"."TotalTrans"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalTrans" IS 'Chuyển vé';


--
-- Name: COLUMN "ShiftTransfer"."TotalReturns"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalReturns" IS 'Trả ế';


--
-- Name: COLUMN "ShiftTransfer"."TotalStocks"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalStocks" IS 'Tồn';


--
-- Name: COLUMN "ShiftTransfer"."TotalSold"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalSold" IS 'Bán được';


--
-- Name: COLUMN "ShiftTransfer"."TotalSoldMoney"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."ShiftTransfer"."TotalSoldMoney" IS 'Tổng số tiền bán được';


--
-- Name: ShiftTransferLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftTransferLog" (
    "ShiftTransferLogId" integer NOT NULL,
    "ActionBy" smallint,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(6) without time zone,
    "ShiftDistributeId" integer,
    "SalePointId" integer,
    "UserId" integer,
    "UserName" character varying(255)
);


ALTER TABLE public."ShiftTransferLog" OWNER TO postgres;

--
-- Name: ShiftTransferLog_ShiftTransferLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftTransferLog_ShiftTransferLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."ShiftTransferLog_ShiftTransferLogId_seq" OWNER TO postgres;

--
-- Name: ShiftTransferLog_ShiftTransferLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftTransferLog_ShiftTransferLogId_seq" OWNED BY public."ShiftTransferLog"."ShiftTransferLogId";


--
-- Name: ShiftTransfer_ShiftTransferId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."ShiftTransfer_ShiftTransferId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."ShiftTransfer_ShiftTransferId_seq" OWNER TO postgres;

--
-- Name: ShiftTransfer_ShiftTransferId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."ShiftTransfer_ShiftTransferId_seq" OWNED BY public."ShiftTransfer"."ShiftTransferId";


--
-- Name: ShiftType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."ShiftType" (
    "ShiftTypeId" integer NOT NULL,
    "ShiftTypeName" character varying(50)
);


ALTER TABLE public."ShiftType" OWNER TO postgres;

--
-- Name: StaticFee; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."StaticFee" (
    "SalePointId" integer,
    "SalePointName" character varying(255),
    "ElectronicFee" bigint,
    "WaterFee" bigint,
    "InternetFee" bigint,
    "EstateFee" bigint,
    "StaticFeeId" integer NOT NULL,
    "Month" character varying
);


ALTER TABLE public."StaticFee" OWNER TO postgres;

--
-- Name: StaticFee_StaticFeeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."StaticFee_StaticFeeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."StaticFee_StaticFeeId_seq" OWNER TO postgres;

--
-- Name: StaticFee_StaticFeeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."StaticFee_StaticFeeId_seq" OWNED BY public."StaticFee"."StaticFeeId";


--
-- Name: SubAgency; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."SubAgency" (
    "AgencyId" bigint NOT NULL,
    "AgencyName" character varying(255),
    "IsActive" boolean DEFAULT true,
    "IsDelete" boolean DEFAULT false,
    "Price" numeric(10,2),
    "ModifiedDate" date
);


ALTER TABLE public."SubAgency" OWNER TO postgres;

--
-- Name: SupAgency_AgencyId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."SupAgency_AgencyId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."SupAgency_AgencyId_seq" OWNER TO postgres;

--
-- Name: SupAgency_AgencyId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."SupAgency_AgencyId_seq" OWNED BY public."SubAgency"."AgencyId";


--
-- Name: TargetData; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TargetData" (
    "TargetDataId" integer NOT NULL,
    "TargetDataTypeId" integer,
    "FromValue" double precision,
    "ToValue" double precision,
    "Value" numeric(128,2),
    "IsDeleted" boolean DEFAULT false,
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."TargetData" OWNER TO postgres;

--
-- Name: TargetDataType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TargetDataType" (
    "TargetDataTypeId" integer NOT NULL,
    "TargetDataTypeName" character varying(255)
);


ALTER TABLE public."TargetDataType" OWNER TO postgres;

--
-- Name: TargetDataType_TargetDataTypeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."TargetDataType_TargetDataTypeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."TargetDataType_TargetDataTypeId_seq" OWNER TO postgres;

--
-- Name: TargetDataType_TargetDataTypeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."TargetDataType_TargetDataTypeId_seq" OWNED BY public."TargetDataType"."TargetDataTypeId";


--
-- Name: TargetData_TargetDataId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."TargetData_TargetDataId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."TargetData_TargetDataId_seq" OWNER TO postgres;

--
-- Name: TargetData_TargetDataId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."TargetData_TargetDataId_seq" OWNED BY public."TargetData"."TargetDataId";


--
-- Name: TargetMaster; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TargetMaster" (
    "TargetMasterId" integer NOT NULL,
    "TargetMasterName" character varying(255),
    "RangeScore" character varying(255),
    "Description" character varying(500),
    "CriteriaId" integer,
    "LevelId" integer
);


ALTER TABLE public."TargetMaster" OWNER TO postgres;

--
-- Name: TargetMaster_TargetMasterId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."TargetMaster_TargetMasterId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."TargetMaster_TargetMasterId_seq" OWNER TO postgres;

--
-- Name: TargetMaster_TargetMasterId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."TargetMaster_TargetMasterId_seq" OWNED BY public."TargetMaster"."TargetMasterId";


--
-- Name: TotalMoney; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TotalMoney" (
    "Id" bigint NOT NULL,
    "Total" numeric DEFAULT 0 NOT NULL,
    "Details" text,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp with time zone,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Date" date NOT NULL
);


ALTER TABLE public."TotalMoney" OWNER TO postgres;

--
-- Name: TotalMoney_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."TotalMoney" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."TotalMoney_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: Transaction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Transaction" (
    "TransactionId" integer NOT NULL,
    "TransactionTypeId" integer,
    "Note" character varying(255),
    "Quantity" integer,
    "Price" numeric,
    "TotalPrice" numeric,
    "SalePointId" integer,
    "ShiftDistributeId" integer,
    "IsDeleted" boolean,
    "UserId" integer,
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "ActionDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(0) without time zone DEFAULT now(),
    "TypeNameId" integer DEFAULT 0,
    "Date" date,
    "Expense" numeric DEFAULT 0,
    "OpeningBalance" numeric DEFAULT 0,
    six45 numeric DEFAULT 0,
    six55 numeric DEFAULT 0,
    keno numeric DEFAULT 0,
    "Ticket3d" numeric DEFAULT 0,
    "Ticket3dPro" numeric DEFAULT 0,
    "CancleTicket" numeric DEFAULT 0,
    "ReturnWining" numeric DEFAULT 0,
    "ManagerReturn" numeric DEFAULT 0,
    "EndingBalance" numeric DEFAULT 0,
    "Refunds" numeric DEFAULT 0,
    "WinningPriceSum" numeric DEFAULT 0,
    "LotteryChannelId" numeric DEFAULT 0,
    "TotalRevenue" numeric DEFAULT 0,
    "Deposit" numeric
);


ALTER TABLE public."Transaction" OWNER TO postgres;

--
-- Name: COLUMN "Transaction"."TotalRevenue"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Transaction"."TotalRevenue" IS 'Tổng doanh thu của ca';


--
-- Name: COLUMN "Transaction"."Deposit"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Transaction"."Deposit" IS 'Tiền nạp vào';


--
-- Name: TransactionType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TransactionType" (
    "TransactionTypeId" integer NOT NULL,
    "TransactionTypeName" character varying(255),
    "IsSum" boolean,
    "IsActive" boolean,
    "Description" character varying(255),
    "IsCountForUser" boolean DEFAULT false
);


ALTER TABLE public."TransactionType" OWNER TO postgres;

--
-- Name: TransactionType_TransactionTypeId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."TransactionType_TransactionTypeId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."TransactionType_TransactionTypeId_seq" OWNER TO postgres;

--
-- Name: TransactionType_TransactionTypeId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."TransactionType_TransactionTypeId_seq" OWNED BY public."TransactionType"."TransactionTypeId";


--
-- Name: Transaction_TransactionId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Transaction_TransactionId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Transaction_TransactionId_seq" OWNER TO postgres;

--
-- Name: Transaction_TransactionId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Transaction_TransactionId_seq" OWNED BY public."Transaction"."TransactionId";


--
-- Name: Transition; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Transition" (
    "TransitionId" bigint NOT NULL,
    "LotteryDate" date,
    "LotteryChannelId" integer NOT NULL,
    "FromSalePointId" integer,
    "ToSalePointId" integer,
    "TotalTrans" integer,
    "ConfirmTrans" integer,
    "TransitionDate" timestamp(6) without time zone,
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "ConfirmDate" timestamp(0) without time zone,
    "ConfirmBy" integer,
    "ConfirmByName" character varying(100),
    "TransitionTypeId" integer NOT NULL,
    "TotalTransDup" integer,
    "ShiftDistributeId" integer,
    "ManagerId" integer,
    "ConfirmTransDup" integer,
    "ConfirmStatusId" integer,
    "Note" character varying(255),
    "IsScratchcard" boolean DEFAULT false,
    "ToAgencyId" integer,
    "IsDeleted" boolean DEFAULT false,
    "IsMigrated" boolean DEFAULT false
);


ALTER TABLE public."Transition" OWNER TO postgres;

--
-- Name: COLUMN "Transition"."ToAgencyId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."Transition"."ToAgencyId" IS 'Trả ế';


--
-- Name: TransitionType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TransitionType" (
    "TransitionTypeId" integer NOT NULL,
    "TransitionTypeName" character varying(255)
);


ALTER TABLE public."TransitionType" OWNER TO postgres;

--
-- Name: Transition_TransitionId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Transition_TransitionId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."Transition_TransitionId_seq" OWNER TO postgres;

--
-- Name: Transition_TransitionId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Transition_TransitionId_seq" OWNED BY public."Transition"."TransitionId";


--
-- Name: TypeAward; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TypeAward" (
    "TypeAwardId" integer NOT NULL,
    "TypeAwardName" character varying(255),
    "IsActive" boolean DEFAULT false,
    "IsLotteryTraditional" boolean DEFAULT true,
    "Price" numeric(255,0)
);


ALTER TABLE public."TypeAward" OWNER TO postgres;

--
-- Name: TypeName; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TypeName" (
    "TypeNameId" integer NOT NULL,
    "Name" character varying(255),
    "TransactionTypeId" integer,
    "IsActive" boolean DEFAULT true,
    "ConstId" integer,
    "RequireSalePoint" boolean DEFAULT false
);


ALTER TABLE public."TypeName" OWNER TO postgres;

--
-- Name: TypeName_TypeNameId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."TypeName_TypeNameId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."TypeName_TypeNameId_seq" OWNER TO postgres;

--
-- Name: TypeName_TypeNameId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."TypeName_TypeNameId_seq" OWNED BY public."TypeName"."TypeNameId";


--
-- Name: TypeOfItem; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."TypeOfItem" (
    "TypeOfItemId" integer NOT NULL,
    "TypeName" character varying(255)
);


ALTER TABLE public."TypeOfItem" OWNER TO postgres;

--
-- Name: TypeOfItem_TypeOfItemId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."TypeOfItem_TypeOfItemId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."TypeOfItem_TypeOfItemId_seq" OWNER TO postgres;

--
-- Name: TypeOfItem_TypeOfItemId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."TypeOfItem_TypeOfItemId_seq" OWNED BY public."TypeOfItem"."TypeOfItemId";


--
-- Name: Unit; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Unit" (
    "UnitId" integer NOT NULL,
    "UnitName" character varying(255),
    "CreatedBy" integer,
    "CreatedByName" character varying(255),
    "CreatedDate" timestamp(0) without time zone DEFAULT now(),
    "ModifyBy" integer,
    "ModifyByName" character varying(255),
    "ModifyDate" timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE public."Unit" OWNER TO postgres;

--
-- Name: Unit_UnitId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Unit_UnitId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."Unit_UnitId_seq" OWNER TO postgres;

--
-- Name: Unit_UnitId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Unit_UnitId_seq" OWNED BY public."Unit"."UnitId";


--
-- Name: User; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."User" (
    "UserId" integer NOT NULL,
    "Account" character varying(100) NOT NULL,
    "Password" character varying(500) NOT NULL,
    "Phone" character varying(14),
    "FullName" character varying(255),
    "CityId" integer,
    "DistrictId" integer,
    "WardId" integer,
    "FullAddress" character varying(500),
    "Email" character varying(100),
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ActionBy" integer,
    "ActionByName" character varying(255),
    "TypeUserId" integer DEFAULT 1,
    "ModifyByName" character varying(255),
    "ModifyBy" integer,
    "StartDate" date DEFAULT now(),
    "EndDate" date,
    "SalePointId" integer,
    "Address" character varying(200),
    "NumberIdentity" character varying(32),
    "BankAccount" character varying(255),
    "IsIntern" boolean DEFAULT false,
    "TotalFirst" bigint
);


ALTER TABLE public."User" OWNER TO postgres;

--
-- Name: COLUMN "User"."UserId"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."User"."UserId" IS 'User id tự động tăng';


--
-- Name: COLUMN "User"."IsIntern"; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public."User"."IsIntern" IS 'Nhân viên có phải là thử việc hay không';


--
-- Name: UserRole; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserRole" (
    "UserRoleId" integer NOT NULL,
    "UserId" integer NOT NULL,
    "UserTitleId" integer NOT NULL,
    "SubUserTitleId" integer[] DEFAULT '{}'::integer[]
);


ALTER TABLE public."UserRole" OWNER TO postgres;

--
-- Name: UserRole_UserRoleId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."UserRole_UserRoleId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."UserRole_UserRoleId_seq" OWNER TO postgres;

--
-- Name: UserRole_UserRoleId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."UserRole_UserRoleId_seq" OWNED BY public."UserRole"."UserRoleId";


--
-- Name: UserTitle; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."UserTitle" (
    "UserTitleId" integer NOT NULL,
    "UserTitleName" character varying(255) NOT NULL,
    "IsSuperAdmin" boolean DEFAULT false,
    "IsManager" boolean DEFAULT false,
    "IsStaff" boolean DEFAULT false,
    "IsLeader" boolean
);


ALTER TABLE public."UserTitle" OWNER TO postgres;

--
-- Name: User_UserId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."User_UserId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."User_UserId_seq" OWNER TO postgres;

--
-- Name: User_UserId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."User_UserId_seq" OWNED BY public."User"."UserId";


--
-- Name: Winning; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Winning" (
    "WinningId" integer NOT NULL,
    "WinningTypeId" integer NOT NULL,
    "LotteryNumber" character varying(10),
    "LotteryChannelId" integer NOT NULL,
    "Quantity" integer NOT NULL,
    "WinningPrice" numeric(64,0) NOT NULL,
    "ActionBy" integer,
    "ActionByName" character varying(100),
    "ActionDate" timestamp(6) without time zone DEFAULT now(),
    "FromSalePointId" integer NOT NULL,
    "SalePointId" integer NOT NULL,
    "ShiftDistributeId" integer,
    expense numeric(64,0) DEFAULT 0 NOT NULL
);


ALTER TABLE public."Winning" OWNER TO postgres;

--
-- Name: WinningChangeHistory; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."WinningChangeHistory" (
    "Id" bigint NOT NULL,
    "Date" date NOT NULL,
    "Details" text NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "MoneyActionMethodId" integer NOT NULL,
    "Total" numeric,
    "ReportMoneyDetails" text
);


ALTER TABLE public."WinningChangeHistory" OWNER TO postgres;

--
-- Name: WinningChangeHistory_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."WinningChangeHistory" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."WinningChangeHistory_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: WinningChangeReportMoneyList; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."WinningChangeReportMoneyList" (
    "Id" bigint NOT NULL,
    "MoneyActionMethodId" integer NOT NULL,
    "Details" text,
    "Total" numeric,
    "Date" date NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedBy" integer,
    "CreatedDate" timestamp without time zone,
    "UpdatedBy" integer,
    "UpdatedDate" timestamp without time zone,
    "WinningChangeHistoryId" bigint NOT NULL,
    "MoneyListTypeId" integer NOT NULL
);


ALTER TABLE public."WinningChangeReportMoneyList" OWNER TO postgres;

--
-- Name: WinningChangeReportMoneyList_Id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."WinningChangeReportMoneyList" ALTER COLUMN "Id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."WinningChangeReportMoneyList_Id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: WinningType; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."WinningType" (
    "WinningTypeId" integer NOT NULL,
    "WinningTypeName" character varying(100) NOT NULL,
    "WinningPrize" numeric(255,0),
    "HasFourNumber" boolean DEFAULT false,
    "HasChannel" boolean DEFAULT false,
    "HasSalePoint" boolean DEFAULT false,
    "CanChangePrice" boolean DEFAULT false
);


ALTER TABLE public."WinningType" OWNER TO postgres;

--
-- Name: Winning_WinningId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Winning_WinningId_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public."Winning_WinningId_seq" OWNER TO postgres;

--
-- Name: Winning_WinningId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Winning_WinningId_seq" OWNED BY public."Winning"."WinningId";


--
-- Name: WorkerLog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."WorkerLog" (
    "WorkerLogId" integer NOT NULL,
    "WorkerName" character varying(255),
    "ActionDate" timestamp(6) without time zone DEFAULT now()
);


ALTER TABLE public."WorkerLog" OWNER TO postgres;

--
-- Name: WorkerLog_WorkerLogId_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."WorkerLog_WorkerLogId_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER SEQUENCE public."WorkerLog_WorkerLogId_seq" OWNER TO postgres;

--
-- Name: WorkerLog_WorkerLogId_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."WorkerLog_WorkerLogId_seq" OWNED BY public."WorkerLog"."WorkerLogId";


--
-- Name: lotonew_transactioncode_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.lotonew_transactioncode_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.lotonew_transactioncode_seq OWNER TO postgres;

--
-- Name: lotonew_transactioncode_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.lotonew_transactioncode_seq OWNED BY public."LotoNew"."TransactionCode";


--
-- Name: v_dayids; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.v_dayids (
    "DayIds" integer[]
);


ALTER TABLE public.v_dayids OWNER TO postgres;

--
-- Name: v_lottery_channel_id; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.v_lottery_channel_id (
    "LotteryChannelId" integer
);


ALTER TABLE public.v_lottery_channel_id OWNER TO postgres;

--
-- Name: v_stock_sratch_card; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.v_stock_sratch_card (
    "?column?" bigint
);


ALTER TABLE public.v_stock_sratch_card OWNER TO postgres;

--
-- Name: v_total_check; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.v_total_check (
    "TotalRemaining" integer
);


ALTER TABLE public.v_total_check OWNER TO postgres;

--
-- Name: v_total_leader; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.v_total_leader (
    "?column?" bigint
);


ALTER TABLE public.v_total_leader OWNER TO postgres;

--
-- Name: Agency AgencyId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Agency" ALTER COLUMN "AgencyId" SET DEFAULT nextval('public."Agency_AgencyId_seq"'::regclass);


--
-- Name: AuthLog AuthLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AuthLog" ALTER COLUMN "AuthLogId" SET DEFAULT nextval('public."AuthLog_AuthLogId_seq"'::regclass);


--
-- Name: BasicSalary BasicSalaryId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."BasicSalary" ALTER COLUMN "BasicSalaryId" SET DEFAULT nextval('public." BasicSalary_ BasicSalaryId_seq"'::regclass);


--
-- Name: Commission CommissionId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Commission" ALTER COLUMN "CommissionId" SET DEFAULT nextval('public."Commission_CommissionId_seq"'::regclass);


--
-- Name: ConfirmForType ConfirmForTypeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ConfirmForType" ALTER COLUMN "ConfirmForTypeId" SET DEFAULT nextval('public."ConfirmForType_ConfirmForType_seq"'::regclass);


--
-- Name: ConfirmLog ConfirmLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ConfirmLog" ALTER COLUMN "ConfirmLogId" SET DEFAULT nextval('public."ItemConfirmLog_ItemConfirmLogId_seq"'::regclass);


--
-- Name: Constant ConstantId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Constant" ALTER COLUMN "ConstantId" SET DEFAULT nextval('public."Constant_ConstantId_seq"'::regclass);


--
-- Name: Criteria CriteriaId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Criteria" ALTER COLUMN "CriteriaId" SET DEFAULT nextval('public."Criteria_CriteriaId_seq"'::regclass);


--
-- Name: EventDay EventDayId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."EventDay" ALTER COLUMN "EventDayId" SET DEFAULT nextval('public."EventDay_EventDayId_seq"'::regclass);


--
-- Name: ExceptionWorker ExceptionId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ExceptionWorker" ALTER COLUMN "ExceptionId" SET DEFAULT nextval('public."Exception_ExceptionId_seq"'::regclass);


--
-- Name: ExemptKpi ExemptKpiId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ExemptKpi" ALTER COLUMN "ExemptKpiId" SET DEFAULT nextval('public."ExemptKpi_ExemptKpiId_seq"'::regclass);


--
-- Name: FormPayment FormPaymentId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."FormPayment" ALTER COLUMN "FormPaymentId" SET DEFAULT nextval('public."FormPayment_FormPaymentId_seq"'::regclass);


--
-- Name: GroupSalePoint GroupSalePointId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."GroupSalePoint" ALTER COLUMN "GroupSalePointId" SET DEFAULT nextval('public."GroupSalePoint_GroupSalePointId_seq"'::regclass);


--
-- Name: Guest GuestId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Guest" ALTER COLUMN "GuestId" SET DEFAULT nextval('public."Guest_GuestId_seq"'::regclass);


--
-- Name: GuestAction GuestActionId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."GuestAction" ALTER COLUMN "GuestActionId" SET DEFAULT nextval('public."GuestAction_GuestActionId_seq"'::regclass);


--
-- Name: GuestActionType GuestActionTypeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."GuestActionType" ALTER COLUMN "GuestActionTypeId" SET DEFAULT nextval('public."GuestActionType_GuestActionTypeId_seq"'::regclass);


--
-- Name: HistoryOfOrder HistoryOfOrderId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."HistoryOfOrder" ALTER COLUMN "HistoryOfOrderId" SET DEFAULT nextval('public."HistoryOfOrder_HistoryOfOrderId_seq"'::regclass);


--
-- Name: Inventory InventoryId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Inventory" ALTER COLUMN "InventoryId" SET DEFAULT nextval('public."Inventory_InventoryId_seq"'::regclass);


--
-- Name: InventoryDetailLog InventoryDetailLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryDetailLog" ALTER COLUMN "InventoryDetailLogId" SET DEFAULT nextval('public."InventoryDetailLogId_sequence"'::regclass);


--
-- Name: InventoryForSupAgency InventoryForSupAgencyId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryForSupAgency" ALTER COLUMN "InventoryForSupAgencyId" SET DEFAULT nextval('public."LotteryForSupAgency_InventoryForSupAgencyId_seq"'::regclass);


--
-- Name: InventoryFull InventoryFullId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryFull" ALTER COLUMN "InventoryFullId" SET DEFAULT nextval('public."InventoryFull_InventoryFullId_seq"'::regclass);


--
-- Name: InventoryLog InventoryLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryLog" ALTER COLUMN "InventoryLogId" SET DEFAULT nextval('public."InventoryLog_InventoryLogId_seq"'::regclass);


--
-- Name: Item ItemId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Item" ALTER COLUMN "ItemId" SET DEFAULT nextval('public."Item_ItemId_seq"'::regclass);


--
-- Name: ItemFull ItemFullId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ItemFull" ALTER COLUMN "ItemFullId" SET DEFAULT nextval('public."ItemFull_ItemFullId_seq"'::regclass);


--
-- Name: ItemFullLog ItemFullLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ItemFullLog" ALTER COLUMN "ItemFullLogId" SET DEFAULT nextval('public."ItemFullLog_ItemFullLogId_seq"'::regclass);


--
-- Name: ItemType ItemTypeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ItemType" ALTER COLUMN "ItemTypeId" SET DEFAULT nextval('public."ItemType_ItemTypeId_seq"'::regclass);


--
-- Name: KPILog KPILogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."KPILog" ALTER COLUMN "KPILogId" SET DEFAULT nextval('public."KPILog_KPILogId_seq"'::regclass);


--
-- Name: LeaderAttendent LeaderAttendentId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LeaderAttendent" ALTER COLUMN "LeaderAttendentId" SET DEFAULT nextval('public."LeaderAttendent_LeaderAttendentId_seq"'::regclass);


--
-- Name: LeaderOffLog LeaderOffLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LeaderOffLog" ALTER COLUMN "LeaderOffLogId" SET DEFAULT nextval('public."LeaderOffLog_LeaderOffLogId_seq"'::regclass);


--
-- Name: LogDelete LogDeleteId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LogDelete" ALTER COLUMN "LogDeleteId" SET DEFAULT nextval('public."LogDelete_LogDeleteId_seq"'::regclass);


--
-- Name: LotoNew TransactionCode; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotoNew" ALTER COLUMN "TransactionCode" SET DEFAULT nextval('public.lotonew_transactioncode_seq'::regclass);


--
-- Name: LotteryPriceAgency LotteryPriceAgencyId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryPriceAgency" ALTER COLUMN "LotteryPriceAgencyId" SET DEFAULT nextval('public."LotteryPriceAgency_LotteryPriceAgencyId_seq"'::regclass);


--
-- Name: ManagerBorrow ManagerBorrowId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ManagerBorrow" ALTER COLUMN "ManagerBorrowId" SET DEFAULT nextval('public."ManagerBorrow_ManagerBorrowId_seq"'::regclass);


--
-- Name: Promotion Id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Promotion" ALTER COLUMN "Id" SET DEFAULT nextval('public."Promotion_Id_seq"'::regclass);


--
-- Name: PromotionCode PromotionCodeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."PromotionCode" ALTER COLUMN "PromotionCodeId" SET DEFAULT nextval('public."PromotionCode_PromotionCodeId_seq"'::regclass);


--
-- Name: Repayment RepaymentId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Repayment" ALTER COLUMN "RepaymentId" SET DEFAULT nextval('public."Repayment_RepaymentId_seq"'::regclass);


--
-- Name: ReportLottery ReportLotteryId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportLottery" ALTER COLUMN "ReportLotteryId" SET DEFAULT nextval('public."ReportLottery_ReportLotteryId_seq"'::regclass);


--
-- Name: ReportMoney ReturnMoneyId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoney" ALTER COLUMN "ReturnMoneyId" SET DEFAULT nextval('public."ReportMoney_ReportMoneyId_seq"'::regclass);


--
-- Name: SalaryConfirm SalaryConfirmId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalaryConfirm" ALTER COLUMN "SalaryConfirmId" SET DEFAULT nextval('public."SalaryConfirm_SalaryConfirmId_seq"'::regclass);


--
-- Name: SalePoint SalePointId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalePoint" ALTER COLUMN "SalePointId" SET DEFAULT nextval('public."SalePoint_SalePointId_seq1"'::regclass);


--
-- Name: SalePointLog SalePointLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalePointLog" ALTER COLUMN "SalePointLogId" SET DEFAULT nextval('public."SalePointLog_SalePointLogId_seq"'::regclass);


--
-- Name: SalePointPercentLog SalePointPercentLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalePointPercentLog" ALTER COLUMN "SalePointPercentLogId" SET DEFAULT nextval('public."SalePointPercentLog_SalePointPercentLogId_seq"'::regclass);


--
-- Name: Scratchcard ScratchcardId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Scratchcard" ALTER COLUMN "ScratchcardId" SET DEFAULT nextval('public."Scratchcard_ScratchcardId_seq"'::regclass);


--
-- Name: ScratchcardFull ScratchcardFullId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardFull" ALTER COLUMN "ScratchcardFullId" SET DEFAULT nextval('public."ScratchcardFull_ScratchcardFullId_seq"'::regclass);


--
-- Name: ScratchcardFullLog ScratchcardFullLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardFullLog" ALTER COLUMN "ScratchcardFullLogId" SET DEFAULT nextval('public."ScratchcardFullLog_ScratchcardFullLogId_seq"'::regclass);


--
-- Name: ScratchcardFull_CheckLog ScratchcardFullId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardFull_CheckLog" ALTER COLUMN "ScratchcardFullId" SET DEFAULT nextval('public."ScratchcardFull_CheckLog_ScratchcardFullId_seq"'::regclass);


--
-- Name: ScratchcardLog ScratchcardLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardLog" ALTER COLUMN "ScratchcardLogId" SET DEFAULT nextval('public."ScratchcardLogId_ScratchcardLogId_seq"'::regclass);


--
-- Name: ShiftAttendance ShiftAttendanceId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftAttendance" ALTER COLUMN "ShiftAttendanceId" SET DEFAULT nextval('public."ShiftAttendance_ShiftAttendanceId_seq"'::regclass);


--
-- Name: ShiftAttendanceForIntern ShiftAttendanceId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftAttendanceForIntern" ALTER COLUMN "ShiftAttendanceId" SET DEFAULT nextval('public."ShiftAttendanceForIntern_ShiftAttendanceId_seq"'::regclass);


--
-- Name: ShiftDistribute ShiftDistributeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftDistribute" ALTER COLUMN "ShiftDistributeId" SET DEFAULT nextval('public."ShiftDistribute_ShiftDistributeId_seq"'::regclass);


--
-- Name: ShiftDistributeForIntern ShiftDistributeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftDistributeForIntern" ALTER COLUMN "ShiftDistributeId" SET DEFAULT nextval('public."ShiftDistributeForIntern_ShiftDistributeId_seq"'::regclass);


--
-- Name: ShiftMain ShiftMainId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftMain" ALTER COLUMN "ShiftMainId" SET DEFAULT nextval('public."ShiftMain_ShiftMainId_seq"'::regclass);


--
-- Name: ShiftMainForIntern ShiftMainId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftMainForIntern" ALTER COLUMN "ShiftMainId" SET DEFAULT nextval('public."ShiftMainForIntern_ShiftMainId_seq"'::regclass);


--
-- Name: ShiftTransfer ShiftTransferId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftTransfer" ALTER COLUMN "ShiftTransferId" SET DEFAULT nextval('public."ShiftTransfer_ShiftTransferId_seq"'::regclass);


--
-- Name: ShiftTransferLog ShiftTransferLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftTransferLog" ALTER COLUMN "ShiftTransferLogId" SET DEFAULT nextval('public."ShiftTransferLog_ShiftTransferLogId_seq"'::regclass);


--
-- Name: StaticFee StaticFeeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."StaticFee" ALTER COLUMN "StaticFeeId" SET DEFAULT nextval('public."StaticFee_StaticFeeId_seq"'::regclass);


--
-- Name: SubAgency AgencyId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SubAgency" ALTER COLUMN "AgencyId" SET DEFAULT nextval('public."SupAgency_AgencyId_seq"'::regclass);


--
-- Name: TargetData TargetDataId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TargetData" ALTER COLUMN "TargetDataId" SET DEFAULT nextval('public."TargetData_TargetDataId_seq"'::regclass);


--
-- Name: TargetDataType TargetDataTypeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TargetDataType" ALTER COLUMN "TargetDataTypeId" SET DEFAULT nextval('public."TargetDataType_TargetDataTypeId_seq"'::regclass);


--
-- Name: TargetMaster TargetMasterId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TargetMaster" ALTER COLUMN "TargetMasterId" SET DEFAULT nextval('public."TargetMaster_TargetMasterId_seq"'::regclass);


--
-- Name: Transaction TransactionId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Transaction" ALTER COLUMN "TransactionId" SET DEFAULT nextval('public."Transaction_TransactionId_seq"'::regclass);


--
-- Name: TransactionType TransactionTypeId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TransactionType" ALTER COLUMN "TransactionTypeId" SET DEFAULT nextval('public."TransactionType_TransactionTypeId_seq"'::regclass);


--
-- Name: Transition TransitionId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Transition" ALTER COLUMN "TransitionId" SET DEFAULT nextval('public."Transition_TransitionId_seq"'::regclass);


--
-- Name: TypeName TypeNameId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TypeName" ALTER COLUMN "TypeNameId" SET DEFAULT nextval('public."TypeName_TypeNameId_seq"'::regclass);


--
-- Name: TypeOfItem TypeOfItemId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TypeOfItem" ALTER COLUMN "TypeOfItemId" SET DEFAULT nextval('public."TypeOfItem_TypeOfItemId_seq"'::regclass);


--
-- Name: Unit UnitId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Unit" ALTER COLUMN "UnitId" SET DEFAULT nextval('public."Unit_UnitId_seq"'::regclass);


--
-- Name: User UserId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."User" ALTER COLUMN "UserId" SET DEFAULT nextval('public."User_UserId_seq"'::regclass);


--
-- Name: UserRole UserRoleId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserRole" ALTER COLUMN "UserRoleId" SET DEFAULT nextval('public."UserRole_UserRoleId_seq"'::regclass);


--
-- Name: Winning WinningId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Winning" ALTER COLUMN "WinningId" SET DEFAULT nextval('public."Winning_WinningId_seq"'::regclass);


--
-- Name: WorkerLog WorkerLogId; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."WorkerLog" ALTER COLUMN "WorkerLogId" SET DEFAULT nextval('public."WorkerLog_WorkerLogId_seq"'::regclass);


--
-- Name: BasicSalary  BasicSalary_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."BasicSalary"
    ADD CONSTRAINT " BasicSalary_pkey" PRIMARY KEY ("BasicSalaryId");


--
-- Name: AddressCity AddressCity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AddressCity"
    ADD CONSTRAINT "AddressCity_pkey" PRIMARY KEY ("CityId");


--
-- Name: AddressDistrict AddressDistrict_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AddressDistrict"
    ADD CONSTRAINT "AddressDistrict_pkey" PRIMARY KEY ("DistrictId");


--
-- Name: AddressWard AddressWard_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AddressWard"
    ADD CONSTRAINT "AddressWard_pkey" PRIMARY KEY ("WardId");


--
-- Name: AgencyType AgencyType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AgencyType"
    ADD CONSTRAINT "AgencyType_pkey" PRIMARY KEY ("AgencyTypeId");


--
-- Name: Agency Agency_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Agency"
    ADD CONSTRAINT "Agency_pkey" PRIMARY KEY ("AgencyId");


--
-- Name: AuthLog AuthLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."AuthLog"
    ADD CONSTRAINT "AuthLog_pkey" PRIMARY KEY ("AuthLogId");


--
-- Name: BankAccountHistory BankAccountHistory_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."BankAccountHistory"
    ADD CONSTRAINT "BankAccountHistory_pkey" PRIMARY KEY ("Id");


--
-- Name: BankAccountTransferHistory BankAccountTransferHistory_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."BankAccountTransferHistory"
    ADD CONSTRAINT "BankAccountTransferHistory_pkey" PRIMARY KEY ("Id");


--
-- Name: BankAccount BankAccount_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."BankAccount"
    ADD CONSTRAINT "BankAccount_pkey" PRIMARY KEY ("Id");


--
-- Name: Commission Commission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Commission"
    ADD CONSTRAINT "Commission_pkey" PRIMARY KEY ("CommissionId");


--
-- Name: ConfirmForType ConfirmForType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ConfirmForType"
    ADD CONSTRAINT "ConfirmForType_pkey" PRIMARY KEY ("ConfirmForTypeId");


--
-- Name: ConfirmStatus ConfirmStatus_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ConfirmStatus"
    ADD CONSTRAINT "ConfirmStatus_pkey" PRIMARY KEY ("ConfirmStatusId");


--
-- Name: ConstLinkApi ConstLinkApi_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ConstLinkApi"
    ADD CONSTRAINT "ConstLinkApi_pkey" PRIMARY KEY ("ConstLink");


--
-- Name: Const Const_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Const"
    ADD CONSTRAINT "Const_pkey" PRIMARY KEY ("ConstId");


--
-- Name: Constant Constant_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Constant"
    ADD CONSTRAINT "Constant_pkey" PRIMARY KEY ("ConstantId");


--
-- Name: Criteria Criteria_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Criteria"
    ADD CONSTRAINT "Criteria_pkey" PRIMARY KEY ("CriteriaId");


--
-- Name: DayOfWeek DayOfWeek_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."DayOfWeek"
    ADD CONSTRAINT "DayOfWeek_pkey" PRIMARY KEY ("DayOfWeekId");


--
-- Name: EventDay EventDay_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."EventDay"
    ADD CONSTRAINT "EventDay_pkey" PRIMARY KEY ("EventDayId");


--
-- Name: ExceptionWorker ExceptionWorker_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ExceptionWorker"
    ADD CONSTRAINT "ExceptionWorker_pkey" PRIMARY KEY ("ExceptionId");


--
-- Name: ExemptKpi ExemptKpi_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ExemptKpi"
    ADD CONSTRAINT "ExemptKpi_pkey" PRIMARY KEY ("ExemptKpiId");


--
-- Name: FormPayment FormPayment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."FormPayment"
    ADD CONSTRAINT "FormPayment_pkey" PRIMARY KEY ("FormPaymentId");


--
-- Name: GroupSalePoint GroupSalePoint_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."GroupSalePoint"
    ADD CONSTRAINT "GroupSalePoint_pkey" PRIMARY KEY ("GroupSalePointId");


--
-- Name: GuestActionType GuestActionType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."GuestActionType"
    ADD CONSTRAINT "GuestActionType_pkey" PRIMARY KEY ("GuestActionTypeId");


--
-- Name: GuestAction GuestAction_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."GuestAction"
    ADD CONSTRAINT "GuestAction_pkey" PRIMARY KEY ("GuestActionId");


--
-- Name: Guest Guest_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Guest"
    ADD CONSTRAINT "Guest_pkey" PRIMARY KEY ("GuestId");


--
-- Name: HistoryOfOrder HistoryOfOrder_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."HistoryOfOrder"
    ADD CONSTRAINT "HistoryOfOrder_pkey" PRIMARY KEY ("HistoryOfOrderId");


--
-- Name: InventoryAddMore InventoryAddMore_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryAddMore"
    ADD CONSTRAINT "InventoryAddMore_pkey" PRIMARY KEY ("Id");


--
-- Name: InventoryConfirm InventoryConfirm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryConfirm"
    ADD CONSTRAINT "InventoryConfirm_pkey" PRIMARY KEY ("InventoryId");


--
-- Name: InventoryDetailLog InventoryDetailLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryDetailLog"
    ADD CONSTRAINT "InventoryDetailLog_pkey" PRIMARY KEY ("InventoryDetailLogId");


--
-- Name: InventoryFull InventoryFull_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryFull"
    ADD CONSTRAINT "InventoryFull_pkey" PRIMARY KEY ("InventoryFullId");


--
-- Name: InventoryLog InventoryLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryLog"
    ADD CONSTRAINT "InventoryLog_pkey" PRIMARY KEY ("InventoryLogId");


--
-- Name: Inventory Inventory_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Inventory"
    ADD CONSTRAINT "Inventory_pkey" PRIMARY KEY ("InventoryId");


--
-- Name: ConfirmLog ItemConfirmLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ConfirmLog"
    ADD CONSTRAINT "ItemConfirmLog_pkey" PRIMARY KEY ("ConfirmLogId");


--
-- Name: ItemFullLog ItemFullLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ItemFullLog"
    ADD CONSTRAINT "ItemFullLog_pkey" PRIMARY KEY ("ItemFullLogId");


--
-- Name: ItemFull ItemFull_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ItemFull"
    ADD CONSTRAINT "ItemFull_pkey" PRIMARY KEY ("ItemFullId");


--
-- Name: ItemType ItemType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ItemType"
    ADD CONSTRAINT "ItemType_pkey" PRIMARY KEY ("ItemTypeId");


--
-- Name: Item Item_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Item"
    ADD CONSTRAINT "Item_pkey" PRIMARY KEY ("ItemId");


--
-- Name: KPILog KPILog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."KPILog"
    ADD CONSTRAINT "KPILog_pkey" PRIMARY KEY ("KPILogId");


--
-- Name: LeaderAttendent LeaderAttendent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LeaderAttendent"
    ADD CONSTRAINT "LeaderAttendent_pkey" PRIMARY KEY ("LeaderAttendentId");


--
-- Name: LeaderOffLog LeaderOffLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LeaderOffLog"
    ADD CONSTRAINT "LeaderOffLog_pkey" PRIMARY KEY ("LeaderOffLogId");


--
-- Name: LogDelete LogDelete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LogDelete"
    ADD CONSTRAINT "LogDelete_pkey" PRIMARY KEY ("LogDeleteId");


--
-- Name: LogType LogType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LogType"
    ADD CONSTRAINT "LogType_pkey" PRIMARY KEY ("LogTypeId");


--
-- Name: LotteryChannelType LotteryChannelType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryChannelType"
    ADD CONSTRAINT "LotteryChannelType_pkey" PRIMARY KEY ("LotteryChannelTypeId");


--
-- Name: LotteryChannel LotteryChannel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryChannel"
    ADD CONSTRAINT "LotteryChannel_pkey" PRIMARY KEY ("LotteryChannelId");


--
-- Name: InventoryForSupAgency LotteryForSupAgency_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."InventoryForSupAgency"
    ADD CONSTRAINT "LotteryForSupAgency_pkey" PRIMARY KEY ("InventoryForSupAgencyId");


--
-- Name: LotteryPriceAgency LotteryPriceAgency_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryPriceAgency"
    ADD CONSTRAINT "LotteryPriceAgency_pkey" PRIMARY KEY ("LotteryPriceAgencyId");


--
-- Name: LotteryPriceSubAgency LotteryPriceSubAgency_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryPriceSubAgency"
    ADD CONSTRAINT "LotteryPriceSubAgency_pkey" PRIMARY KEY ("LotteryPriceAgencyId");


--
-- Name: LotteryPrice LotteryPrice_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryPrice"
    ADD CONSTRAINT "LotteryPrice_pkey" PRIMARY KEY ("LotteryPriceId");


--
-- Name: LotteryType LotteryType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotteryType"
    ADD CONSTRAINT "LotteryType_pkey" PRIMARY KEY ("LotteryTypeId");


--
-- Name: ManagerBorrow ManagerBorrow_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ManagerBorrow"
    ADD CONSTRAINT "ManagerBorrow_pkey" PRIMARY KEY ("ManagerBorrowId");


--
-- Name: MoneyActionMethod MoneyActionMethod_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyActionMethod"
    ADD CONSTRAINT "MoneyActionMethod_pkey" PRIMARY KEY ("Id");


--
-- Name: MoneyActionType MoneyActionType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyActionType"
    ADD CONSTRAINT "MoneyActionType_pkey" PRIMARY KEY ("Id");


--
-- Name: MoneyAction MoneyAction_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyAction"
    ADD CONSTRAINT "MoneyAction_pkey" PRIMARY KEY ("Id");


--
-- Name: MoneyChangeHistory MoneyChangeHistory_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyChangeHistory"
    ADD CONSTRAINT "MoneyChangeHistory_pkey" PRIMARY KEY ("Id");


--
-- Name: MoneyDesk MoneyDesk_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyDesk"
    ADD CONSTRAINT "MoneyDesk_pkey" PRIMARY KEY ("Id");


--
-- Name: MoneyListTypeDefault MoneyListTypeDefault_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyListTypeDefault"
    ADD CONSTRAINT "MoneyListTypeDefault_pkey" PRIMARY KEY ("Id");


--
-- Name: MoneyListType MoneyListType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyListType"
    ADD CONSTRAINT "MoneyListType_pkey" PRIMARY KEY ("Id");


--
-- Name: PermissionGroup PermissionGroup_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."PermissionGroup"
    ADD CONSTRAINT "PermissionGroup_pkey" PRIMARY KEY ("PermissionGroupId");


--
-- Name: PermissionRoleTitles PermissionRoleTitles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."PermissionRoleTitles"
    ADD CONSTRAINT "PermissionRoleTitles_pkey" PRIMARY KEY ("PermissionRoleId", "UserTitleId");


--
-- Name: PermissionRole PermissionRole_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."PermissionRole"
    ADD CONSTRAINT "PermissionRole_pkey" PRIMARY KEY ("PermissionRoleId");


--
-- Name: Permission Permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Permission"
    ADD CONSTRAINT "Permission_pkey" PRIMARY KEY ("PermissionId");


--
-- Name: PromotionCode PromotionCode_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."PromotionCode"
    ADD CONSTRAINT "PromotionCode_pkey" PRIMARY KEY ("PromotionCodeId");


--
-- Name: Region Region_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Region"
    ADD CONSTRAINT "Region_pkey" PRIMARY KEY ("RegionId");


--
-- Name: Repayment Repayment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Repayment"
    ADD CONSTRAINT "Repayment_pkey" PRIMARY KEY ("RepaymentId");


--
-- Name: ReportLottery ReportLottery_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportLottery"
    ADD CONSTRAINT "ReportLottery_pkey" PRIMARY KEY ("ReportLotteryId");


--
-- Name: ReportMoneyAction ReportMoneyAction_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoneyAction"
    ADD CONSTRAINT "ReportMoneyAction_pkey" PRIMARY KEY ("Id");


--
-- Name: ReportMoneyListAgencyDetail ReportMoneyListAgencyDetail_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoneyListAgencyDetail"
    ADD CONSTRAINT "ReportMoneyListAgencyDetail_pkey" PRIMARY KEY ("Id");


--
-- Name: ReportMoneyListAgency ReportMoneyListAgency_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoneyListAgency"
    ADD CONSTRAINT "ReportMoneyListAgency_pkey" PRIMARY KEY ("Id");


--
-- Name: ReportMoneyListDetail ReportMoneyListDetail_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoneyListDetail"
    ADD CONSTRAINT "ReportMoneyListDetail_pkey" PRIMARY KEY ("Id");


--
-- Name: ReportMoneyList ReportMoneyList_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoneyList"
    ADD CONSTRAINT "ReportMoneyList_pkey" PRIMARY KEY ("Id");


--
-- Name: ReportMoney ReportMoney_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoney"
    ADD CONSTRAINT "ReportMoney_pkey" PRIMARY KEY ("ReturnMoneyId");


--
-- Name: ReportScratchcard ReportScratchcard_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportScratchcard"
    ADD CONSTRAINT "ReportScratchcard_pkey" PRIMARY KEY ("ReportScratchcardId");


--
-- Name: ResultLottery ResultLottery_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ResultLottery"
    ADD CONSTRAINT "ResultLottery_pkey" PRIMARY KEY ("ResultLotteryId");


--
-- Name: ReturnLottery ReturnLottery_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReturnLottery"
    ADD CONSTRAINT "ReturnLottery_pkey" PRIMARY KEY ("Id");


--
-- Name: SalaryConfirm SalaryConfirm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalaryConfirm"
    ADD CONSTRAINT "SalaryConfirm_pkey" PRIMARY KEY ("SalaryConfirmId");


--
-- Name: SalePointLog SalePointLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalePointLog"
    ADD CONSTRAINT "SalePointLog_pkey" PRIMARY KEY ("SalePointLogId");


--
-- Name: SalePointPercentLog SalePointPercentLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalePointPercentLog"
    ADD CONSTRAINT "SalePointPercentLog_pkey" PRIMARY KEY ("SalePointPercentLogId");


--
-- Name: SalePoint SalePoint_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SalePoint"
    ADD CONSTRAINT "SalePoint_pkey" PRIMARY KEY ("SalePointId");


--
-- Name: ScratchcardConfirm ScratchcardConfirm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardConfirm"
    ADD CONSTRAINT "ScratchcardConfirm_pkey" PRIMARY KEY ("ScratchcardId");


--
-- Name: ScratchcardFullLog ScratchcardFullLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardFullLog"
    ADD CONSTRAINT "ScratchcardFullLog_pkey" PRIMARY KEY ("ScratchcardFullLogId");


--
-- Name: ScratchcardFull ScratchcardFull_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardFull"
    ADD CONSTRAINT "ScratchcardFull_pkey" PRIMARY KEY ("ScratchcardFullId");


--
-- Name: ScratchcardLog ScratchcardLogId_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardLog"
    ADD CONSTRAINT "ScratchcardLogId_pkey" PRIMARY KEY ("ScratchcardLogId");


--
-- Name: ScratchcardLogForSubAgency ScratchcardLogId_pkey1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardLogForSubAgency"
    ADD CONSTRAINT "ScratchcardLogId_pkey1" PRIMARY KEY ("ScratchcardLogId");


--
-- Name: Scratchcard Scratchcard_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Scratchcard"
    ADD CONSTRAINT "Scratchcard_pkey" PRIMARY KEY ("ScratchcardId");


--
-- Name: ScratchcardForSubAgency Scratchcard_pkey1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ScratchcardForSubAgency"
    ADD CONSTRAINT "Scratchcard_pkey1" PRIMARY KEY ("ScratchcardId");


--
-- Name: ShiftAttendanceForIntern ShiftAttendanceForIntern_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftAttendanceForIntern"
    ADD CONSTRAINT "ShiftAttendanceForIntern_pkey" PRIMARY KEY ("ShiftAttendanceId");


--
-- Name: ShiftAttendance ShiftAttendance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftAttendance"
    ADD CONSTRAINT "ShiftAttendance_pkey" PRIMARY KEY ("ShiftAttendanceId");


--
-- Name: ShiftDistributeForIntern ShiftDistributeForIntern_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftDistributeForIntern"
    ADD CONSTRAINT "ShiftDistributeForIntern_pkey" PRIMARY KEY ("ShiftDistributeId");


--
-- Name: ShiftDistribute ShiftDistribute_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftDistribute"
    ADD CONSTRAINT "ShiftDistribute_pkey" PRIMARY KEY ("ShiftDistributeId");


--
-- Name: ShiftMainForIntern ShiftMainForIntern_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftMainForIntern"
    ADD CONSTRAINT "ShiftMainForIntern_pkey" PRIMARY KEY ("ShiftMainId");


--
-- Name: ShiftMain ShiftMain_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftMain"
    ADD CONSTRAINT "ShiftMain_pkey" PRIMARY KEY ("ShiftMainId");


--
-- Name: ShiftTransferLog ShiftTransferLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftTransferLog"
    ADD CONSTRAINT "ShiftTransferLog_pkey" PRIMARY KEY ("ShiftTransferLogId");


--
-- Name: ShiftTransfer ShiftTransfer_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftTransfer"
    ADD CONSTRAINT "ShiftTransfer_pkey" PRIMARY KEY ("ShiftTransferId");


--
-- Name: ShiftType ShiftType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ShiftType"
    ADD CONSTRAINT "ShiftType_pkey" PRIMARY KEY ("ShiftTypeId");


--
-- Name: Shift Shift_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Shift"
    ADD CONSTRAINT "Shift_pkey" PRIMARY KEY ("ShiftId");


--
-- Name: StaticFee StaticFee_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."StaticFee"
    ADD CONSTRAINT "StaticFee_pkey" PRIMARY KEY ("StaticFeeId");


--
-- Name: SubAgency SupAgency_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."SubAgency"
    ADD CONSTRAINT "SupAgency_pkey" PRIMARY KEY ("AgencyId");


--
-- Name: TargetDataType TargetDataType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TargetDataType"
    ADD CONSTRAINT "TargetDataType_pkey" PRIMARY KEY ("TargetDataTypeId");


--
-- Name: TargetData TargetData_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TargetData"
    ADD CONSTRAINT "TargetData_pkey" PRIMARY KEY ("TargetDataId");


--
-- Name: TargetMaster TargetMaster_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TargetMaster"
    ADD CONSTRAINT "TargetMaster_pkey" PRIMARY KEY ("TargetMasterId");


--
-- Name: TotalMoney TotalMoney_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TotalMoney"
    ADD CONSTRAINT "TotalMoney_pkey" PRIMARY KEY ("Id");


--
-- Name: TransactionType TransactionType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TransactionType"
    ADD CONSTRAINT "TransactionType_pkey" PRIMARY KEY ("TransactionTypeId");


--
-- Name: Transaction Transaction_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Transaction"
    ADD CONSTRAINT "Transaction_pkey" PRIMARY KEY ("TransactionId");


--
-- Name: TransitionType TransitionType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TransitionType"
    ADD CONSTRAINT "TransitionType_pkey" PRIMARY KEY ("TransitionTypeId");


--
-- Name: Transition Transition_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Transition"
    ADD CONSTRAINT "Transition_pkey" PRIMARY KEY ("TransitionId");


--
-- Name: TypeAward TypeAward_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TypeAward"
    ADD CONSTRAINT "TypeAward_pkey" PRIMARY KEY ("TypeAwardId");


--
-- Name: TypeName TypeName_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TypeName"
    ADD CONSTRAINT "TypeName_pkey" PRIMARY KEY ("TypeNameId");


--
-- Name: TypeOfItem TypeOfItem_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."TypeOfItem"
    ADD CONSTRAINT "TypeOfItem_pkey" PRIMARY KEY ("TypeOfItemId");


--
-- Name: Unit Unit_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Unit"
    ADD CONSTRAINT "Unit_pkey" PRIMARY KEY ("UnitId");


--
-- Name: UserRole UserRole_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserRole"
    ADD CONSTRAINT "UserRole_pkey" PRIMARY KEY ("UserRoleId");


--
-- Name: UserTitle UserTitle_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."UserTitle"
    ADD CONSTRAINT "UserTitle_pkey" PRIMARY KEY ("UserTitleId");


--
-- Name: User User_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."User"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY ("UserId");


--
-- Name: WinningChangeHistory WinningChangeHistory_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."WinningChangeHistory"
    ADD CONSTRAINT "WinningChangeHistory_pkey" PRIMARY KEY ("Id");


--
-- Name: WinningChangeReportMoneyList WinningChangeReportMoneyList_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."WinningChangeReportMoneyList"
    ADD CONSTRAINT "WinningChangeReportMoneyList_pkey" PRIMARY KEY ("Id");


--
-- Name: WinningType WinningType_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."WinningType"
    ADD CONSTRAINT "WinningType_pkey" PRIMARY KEY ("WinningTypeId");


--
-- Name: Winning Winning_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Winning"
    ADD CONSTRAINT "Winning_pkey" PRIMARY KEY ("WinningId");


--
-- Name: WorkerLog WorkerLog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."WorkerLog"
    ADD CONSTRAINT "WorkerLog_pkey" PRIMARY KEY ("WorkerLogId");


--
-- Name: PaymentAgency key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."PaymentAgency"
    ADD CONSTRAINT key PRIMARY KEY ("Id");


--
-- Name: LotoNew lotonew_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."LotoNew"
    ADD CONSTRAINT lotonew_pkey PRIMARY KEY ("TransactionCode");


--
-- Name: idx_sale_point_log; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_sale_point_log ON public."SalePointLog" USING btree ("SalePointId", "LotteryDate", "LotteryChannelId", "ShiftDistributeId");


--
-- Name: idx_sale_point_log_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_sale_point_log_id ON public."SalePointLog" USING btree ("SalePointLogId");


--
-- Name: idx_sale_point_log_shift_distribute_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_sale_point_log_shift_distribute_id ON public."SalePointLog" USING btree ("ShiftDistributeId");


--
-- Name: idx_shift_distribute_id_shift_distribute_table; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shift_distribute_id_shift_distribute_table ON public."ShiftDistribute" USING btree ("ShiftDistributeId");


--
-- Name: idx_shift_distribute_sale_point_id_dist_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shift_distribute_sale_point_id_dist_date ON public."ShiftDistribute" USING btree ("SalePointId", "DistributeDate");


--
-- Name: idx_transaction_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transaction_date ON public."Transaction" USING btree ("Date");


--
-- Name: idx_transaction_type_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transaction_type_id ON public."Transaction" USING btree ("TransactionTypeId");


--
-- Name: idx_transaction_user_id_shift_dist_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transaction_user_id_shift_dist_id ON public."Transaction" USING btree ("UserId", "ShiftDistributeId");


--
-- Name: idx_transition_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transition_id ON public."Transition" USING btree ("TransitionId");


--
-- Name: idx_transition_lottery; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transition_lottery ON public."Transition" USING btree ("LotteryDate", "LotteryChannelId", "FromSalePointId");


--
-- Name: idx_transition_lottery_to; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transition_lottery_to ON public."Transition" USING btree ("LotteryDate", "LotteryChannelId", "ToSalePointId");


--
-- Name: Transition crm_update_report_lottery_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER crm_update_report_lottery_trigger AFTER INSERT OR UPDATE ON public."Transition" FOR EACH ROW EXECUTE FUNCTION public.update_report_lottery_transition();


--
-- Name: Inventory crm_update_report_lottery_trigger_inventorylog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER crm_update_report_lottery_trigger_inventorylog AFTER INSERT OR UPDATE ON public."Inventory" FOR EACH ROW EXECUTE FUNCTION public.update_report_lottery_inventorylog();


--
-- Name: InventoryLog crm_update_report_lottery_trigger_inventorylog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER crm_update_report_lottery_trigger_inventorylog AFTER INSERT OR UPDATE ON public."InventoryLog" FOR EACH ROW EXECUTE FUNCTION public.update_report_lottery_inventorylog();

ALTER TABLE public."InventoryLog" DISABLE TRIGGER crm_update_report_lottery_trigger_inventorylog;


--
-- Name: SalePointLog crm_update_report_lottery_trigger_salepointlog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER crm_update_report_lottery_trigger_salepointlog BEFORE INSERT OR UPDATE ON public."SalePointLog" FOR EACH ROW EXECUTE FUNCTION public.update_report_lottery_salepointlog();


--
-- Name: InventoryLog trigger_insert_log; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_insert_log BEFORE INSERT OR UPDATE ON public."InventoryLog" FOR EACH ROW EXECUTE FUNCTION public.crm_insert_log_inventory_log();


--
-- Name: SalePointLog trigger_update_salepoint; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_salepoint BEFORE UPDATE ON public."SalePointLog" FOR EACH ROW EXECUTE FUNCTION public.crm_report_trigger_update_salepoint();


--
-- Name: ReturnLottery Agency; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReturnLottery"
    ADD CONSTRAINT "Agency" FOREIGN KEY ("AgencyId") REFERENCES public."SubAgency"("AgencyId");


--
-- Name: ReturnLottery LotteryChannel; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReturnLottery"
    ADD CONSTRAINT "LotteryChannel" FOREIGN KEY ("LotteryChannelId") REFERENCES public."LotteryChannel"("LotteryChannelId");


--
-- Name: MoneyListTypeDefault MoneyListType; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."MoneyListTypeDefault"
    ADD CONSTRAINT "MoneyListType" FOREIGN KEY ("MoneyListTypeId") REFERENCES public."MoneyListType"("Id");


--
-- Name: ReportMoneyListDetail ReportMoneyListId; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."ReportMoneyListDetail"
    ADD CONSTRAINT "ReportMoneyListId" FOREIGN KEY ("ReportMoneyListId") REFERENCES public."ReportMoneyList"("Id") NOT VALID;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

